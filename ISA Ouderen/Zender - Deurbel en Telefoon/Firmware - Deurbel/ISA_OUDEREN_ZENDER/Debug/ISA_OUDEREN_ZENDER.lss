
ISA_OUDEREN_ZENDER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00000c96  00000d2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015a  00800160  00800160  00000d8a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000014ef  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000288  00000000  00000000  0000151e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002efa  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000009fc  00000000  00000000  000046a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014ec  00000000  00000000  0000509c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000007f0  00000000  00000000  00006588  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ba1  00000000  00000000  00006d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001cfe  00000000  00000000  00007919  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000288  00000000  00000000  00009617  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	34 c0       	rjmp	.+104    	; 0x6a <__ctors_end>
   2:	00 00       	nop
   4:	ec c0       	rjmp	.+472    	; 0x1de <__vector_1>
   6:	00 00       	nop
   8:	6a c0       	rjmp	.+212    	; 0xde <__vector_2>
   a:	00 00       	nop
   c:	53 c0       	rjmp	.+166    	; 0xb4 <__bad_interrupt>
   e:	00 00       	nop
  10:	51 c0       	rjmp	.+162    	; 0xb4 <__bad_interrupt>
  12:	00 00       	nop
  14:	4f c0       	rjmp	.+158    	; 0xb4 <__bad_interrupt>
  16:	00 00       	nop
  18:	4d c0       	rjmp	.+154    	; 0xb4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	bb c0       	rjmp	.+374    	; 0x194 <__vector_7>
  1e:	00 00       	nop
  20:	49 c0       	rjmp	.+146    	; 0xb4 <__bad_interrupt>
  22:	00 00       	nop
  24:	47 c0       	rjmp	.+142    	; 0xb4 <__bad_interrupt>
  26:	00 00       	nop
  28:	45 c0       	rjmp	.+138    	; 0xb4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	43 c0       	rjmp	.+134    	; 0xb4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	41 c0       	rjmp	.+130    	; 0xb4 <__bad_interrupt>
  32:	00 00       	nop
  34:	3f c0       	rjmp	.+126    	; 0xb4 <__bad_interrupt>
  36:	00 00       	nop
  38:	3d c0       	rjmp	.+122    	; 0xb4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3b c0       	rjmp	.+118    	; 0xb4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	39 c0       	rjmp	.+114    	; 0xb4 <__bad_interrupt>
  42:	00 00       	nop
  44:	37 c0       	rjmp	.+110    	; 0xb4 <__bad_interrupt>
  46:	00 00       	nop
  48:	7c c5       	rjmp	.+2808   	; 0xb42 <__vector_18>
  4a:	00 00       	nop
  4c:	af c5       	rjmp	.+2910   	; 0xbac <__vector_19>
  4e:	00 00       	nop
  50:	31 c0       	rjmp	.+98     	; 0xb4 <__bad_interrupt>
  52:	00 00       	nop
  54:	2f c0       	rjmp	.+94     	; 0xb4 <__bad_interrupt>
  56:	00 00       	nop
  58:	2d c0       	rjmp	.+90     	; 0xb4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2b c0       	rjmp	.+86     	; 0xb4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	29 c0       	rjmp	.+82     	; 0xb4 <__bad_interrupt>
  62:	00 00       	nop
  64:	27 c0       	rjmp	.+78     	; 0xb4 <__bad_interrupt>
	...

00000068 <__ctors_start>:
  68:	c6 01       	movw	r24, r12

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e6 e9       	ldi	r30, 0x96	; 150
  7e:	fc e0       	ldi	r31, 0x0C	; 12
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a0 36       	cpi	r26, 0x60	; 96
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	22 e0       	ldi	r18, 0x02	; 2
  8e:	a0 e6       	ldi	r26, 0x60	; 96
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	aa 3b       	cpi	r26, 0xBA	; 186
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	ca e6       	ldi	r28, 0x6A	; 106
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	03 c0       	rjmp	.+6      	; 0xaa <__do_global_ctors+0xe>
  a4:	22 97       	sbiw	r28, 0x02	; 2
  a6:	fe 01       	movw	r30, r28
  a8:	f0 d5       	rcall	.+3040   	; 0xc8a <__tablejump__>
  aa:	c8 36       	cpi	r28, 0x68	; 104
  ac:	d1 07       	cpc	r29, r17
  ae:	d1 f7       	brne	.-12     	; 0xa4 <__do_global_ctors+0x8>
  b0:	b9 d0       	rcall	.+370    	; 0x224 <main>
  b2:	ef c5       	rjmp	.+3038   	; 0xc92 <_exit>

000000b4 <__bad_interrupt>:
  b4:	a5 cf       	rjmp	.-182    	; 0x0 <__vectors>

000000b6 <doorbell_disable_interrupt>:
	EICRA &= ~(1<<ISC11) | (1<<ISC10);	// Trigger INT1 on low level
	doorbell_enable_interrupt();
}

void doorbell_disable_interrupt(){
	EIMSK &= ~(1<<INT1);					// Enable INT1
  b6:	e9 98       	cbi	0x1d, 1	; 29
  b8:	08 95       	ret

000000ba <doorbell_enable_interrupt>:
}

void doorbell_enable_interrupt(){
	EIMSK |= (1<<INT1);					// Enable INT1
  ba:	e9 9a       	sbi	0x1d, 1	; 29
  bc:	08 95       	ret

000000be <doorbell_init>:
 * Initialize doorbell interrupt
 *
 * @param i The specified uint16_t
 */
void doorbell_init() {
	DDRD &= ~_BV(DDD3);
  be:	53 98       	cbi	0x0a, 3	; 10
	EICRA &= ~(1<<ISC11) | (1<<ISC10);	// Trigger INT1 on low level
  c0:	e9 e6       	ldi	r30, 0x69	; 105
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	87 7f       	andi	r24, 0xF7	; 247
  c8:	80 83       	st	Z, r24
	doorbell_enable_interrupt();
  ca:	f7 cf       	rjmp	.-18     	; 0xba <doorbell_enable_interrupt>

000000cc <doorbell_interrupt>:
}

void doorbell_interrupt(){
		//doorbell_last_state = 1;
		
		if(!(PIND & (1 << 3))){ // doorbell_last_state == 0
  cc:	4b 99       	sbic	0x09, 3	; 9
  ce:	06 c0       	rjmp	.+12     	; 0xdc <doorbell_interrupt+0x10>
		doorbell_last_state = 1;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 00 01 	sts	0x0100, r24
		triggered = 1;
  d6:	80 93 60 01 	sts	0x0160, r24
		doorbell_disable_interrupt();
  da:	ed cf       	rjmp	.-38     	; 0xb6 <doorbell_disable_interrupt>
  dc:	08 95       	ret

000000de <__vector_2>:
		}
		
}


ISR(INT1_vect) {
  de:	1f 92       	push	r1
  e0:	0f 92       	push	r0
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	0f 92       	push	r0
  e6:	11 24       	eor	r1, r1
  e8:	2f 93       	push	r18
  ea:	3f 93       	push	r19
  ec:	4f 93       	push	r20
  ee:	5f 93       	push	r21
  f0:	6f 93       	push	r22
  f2:	7f 93       	push	r23
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
  f8:	af 93       	push	r26
  fa:	bf 93       	push	r27
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
	doorbell_interrupt();
 100:	e5 df       	rcall	.-54     	; 0xcc <doorbell_interrupt>
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <log_s>:
 *
 * @param s The specified string
 */
void log_s(const char *s) {
#ifdef LOG_AVAILABLE
    uart0_puts(s);
 124:	a2 c5       	rjmp	.+2884   	; 0xc6a <uart0_puts>
 126:	08 95       	ret

00000128 <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	80 93 b0 00 	sts	0x00B0, r24
 12e:	93 e0       	ldi	r25, 0x03	; 3
 130:	90 93 b1 00 	sts	0x00B1, r25
 134:	80 93 70 00 	sts	0x0070, r24
 138:	8a ef       	ldi	r24, 0xFA	; 250
 13a:	80 93 b3 00 	sts	0x00B3, r24
 13e:	08 95       	ret

00000140 <millis_get>:
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	8f b7       	in	r24, 0x3f	; 63
 146:	f8 94       	cli
 148:	00 91 61 01 	lds	r16, 0x0161
 14c:	10 91 62 01 	lds	r17, 0x0162
 150:	20 91 63 01 	lds	r18, 0x0163
 154:	30 91 64 01 	lds	r19, 0x0164
 158:	8f bf       	out	0x3f, r24	; 63
 15a:	60 2f       	mov	r22, r16
 15c:	71 2f       	mov	r23, r17
 15e:	82 2f       	mov	r24, r18
 160:	93 2f       	mov	r25, r19
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <millis_resume>:
 168:	e4 e6       	ldi	r30, 0x64	; 100
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	8f 7b       	andi	r24, 0xBF	; 191
 170:	80 83       	st	Z, r24
 172:	e0 e7       	ldi	r30, 0x70	; 112
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	82 60       	ori	r24, 0x02	; 2
 17a:	80 83       	st	Z, r24
 17c:	08 95       	ret

0000017e <millis_pause>:
 17e:	e0 e7       	ldi	r30, 0x70	; 112
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	8d 7f       	andi	r24, 0xFD	; 253
 186:	80 83       	st	Z, r24
 188:	e4 e6       	ldi	r30, 0x64	; 100
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	80 83       	st	Z, r24
 192:	08 95       	ret

00000194 <__vector_7>:

ISR(ISR_VECT)
{
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
	++milliseconds;
 1a6:	80 91 61 01 	lds	r24, 0x0161
 1aa:	90 91 62 01 	lds	r25, 0x0162
 1ae:	a0 91 63 01 	lds	r26, 0x0163
 1b2:	b0 91 64 01 	lds	r27, 0x0164
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	a1 1d       	adc	r26, r1
 1ba:	b1 1d       	adc	r27, r1
 1bc:	80 93 61 01 	sts	0x0161, r24
 1c0:	90 93 62 01 	sts	0x0162, r25
 1c4:	a0 93 63 01 	sts	0x0163, r26
 1c8:	b0 93 64 01 	sts	0x0164, r27
}
 1cc:	bf 91       	pop	r27
 1ce:	af 91       	pop	r26
 1d0:	9f 91       	pop	r25
 1d2:	8f 91       	pop	r24
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

000001de <__vector_1>:

	
	

	
void sendpackage(){ 
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	4f 93       	push	r20
 1ee:	5f 93       	push	r21
 1f0:	6f 93       	push	r22
 1f2:	7f 93       	push	r23
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	af 93       	push	r26
 1fa:	bf 93       	push	r27
 1fc:	ef 93       	push	r30
 1fe:	ff 93       	push	r31
 200:	e5 d0       	rcall	.+458    	; 0x3cc <_ZN5RFM694isr0Ev>
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	bf 91       	pop	r27
 208:	af 91       	pop	r26
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	7f 91       	pop	r23
 210:	6f 91       	pop	r22
 212:	5f 91       	pop	r21
 214:	4f 91       	pop	r20
 216:	3f 91       	pop	r19
 218:	2f 91       	pop	r18
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <main>:
 224:	ea e7       	ldi	r30, 0x7A	; 122
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	8f 77       	andi	r24, 0x7F	; 127
 22c:	80 83       	st	Z, r24
 22e:	78 94       	sei
 230:	7b df       	rcall	.-266    	; 0x128 <millis_init>
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	89 e6       	ldi	r24, 0x69	; 105
 236:	98 e1       	ldi	r25, 0x18	; 24
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0x14>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x1e>
 242:	00 00       	nop
 244:	89 e1       	ldi	r24, 0x19	; 25
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	dd d4       	rcall	.+2490   	; 0xc04 <uart0_init>
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	6a df       	rcall	.-300    	; 0x124 <log_s>
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	89 e6       	ldi	r24, 0x69	; 105
 254:	98 e1       	ldi	r25, 0x18	; 24
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0x32>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0x3c>
 260:	00 00       	nop
 262:	8c e0       	ldi	r24, 0x0C	; 12
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	5e df       	rcall	.-324    	; 0x124 <log_s>
 268:	2f ef       	ldi	r18, 0xFF	; 255
 26a:	89 e6       	ldi	r24, 0x69	; 105
 26c:	98 e1       	ldi	r25, 0x18	; 24
 26e:	21 50       	subi	r18, 0x01	; 1
 270:	80 40       	sbci	r24, 0x00	; 0
 272:	90 40       	sbci	r25, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x4a>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x54>
 278:	00 00       	nop
 27a:	2e e0       	ldi	r18, 0x0E	; 14
 27c:	43 e0       	ldi	r20, 0x03	; 3
 27e:	66 e5       	ldi	r22, 0x56	; 86
 280:	85 e6       	ldi	r24, 0x65	; 101
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	08 d2       	rcall	.+1040   	; 0x696 <_ZN5RFM6910initializeEhhh>
 286:	87 e0       	ldi	r24, 0x07	; 7
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	4c df       	rcall	.-360    	; 0x124 <log_s>
 28c:	2f ef       	ldi	r18, 0xFF	; 255
 28e:	89 e6       	ldi	r24, 0x69	; 105
 290:	98 e1       	ldi	r25, 0x18	; 24
 292:	21 50       	subi	r18, 0x01	; 1
 294:	80 40       	sbci	r24, 0x00	; 0
 296:	90 40       	sbci	r25, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <main+0x6e>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <main+0x78>
 29c:	00 00       	nop
 29e:	89 e1       	ldi	r24, 0x19	; 25
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	40 df       	rcall	.-384    	; 0x124 <log_s>
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	89 e6       	ldi	r24, 0x69	; 105
 2a8:	98 e1       	ldi	r25, 0x18	; 24
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <main+0x86>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <main+0x90>
 2b4:	00 00       	nop
 2b6:	03 df       	rcall	.-506    	; 0xbe <doorbell_init>
 2b8:	8a e2       	ldi	r24, 0x2A	; 42
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	33 df       	rcall	.-410    	; 0x124 <log_s>
 2be:	2f ef       	ldi	r18, 0xFF	; 255
 2c0:	89 e6       	ldi	r24, 0x69	; 105
 2c2:	98 e1       	ldi	r25, 0x18	; 24
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <main+0xa0>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <main+0xaa>
 2ce:	00 00       	nop
 2d0:	80 91 60 01 	lds	r24, 0x0160
 2d4:	88 23       	and	r24, r24
 2d6:	69 f1       	breq	.+90     	; 0x332 <main+0x10e>
 2d8:	47 df       	rcall	.-370    	; 0x168 <millis_resume>
 2da:	80 e3       	ldi	r24, 0x30	; 48
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	22 df       	rcall	.-444    	; 0x124 <log_s>
 2e0:	8f e5       	ldi	r24, 0x5F	; 95
 2e2:	9a ee       	ldi	r25, 0xEA	; 234
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <main+0xc0>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <main+0xc6>
 2ea:	00 00       	nop
 2ec:	0f 2e       	mov	r0, r31
 2ee:	f2 e3       	ldi	r31, 0x32	; 50
 2f0:	ef 2e       	mov	r14, r31
 2f2:	f0 2d       	mov	r31, r0
 2f4:	04 e1       	ldi	r16, 0x14	; 20
 2f6:	22 e0       	ldi	r18, 0x02	; 2
 2f8:	41 e0       	ldi	r20, 0x01	; 1
 2fa:	51 e0       	ldi	r21, 0x01	; 1
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	85 e6       	ldi	r24, 0x65	; 101
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	d1 d3       	rcall	.+1954   	; 0xaa6 <_ZN5RFM6913sendWithRetryEhPKvhhh>
 304:	88 23       	and	r24, r24
 306:	51 f0       	breq	.+20     	; 0x31c <main+0xf8>
 308:	80 e4       	ldi	r24, 0x40	; 64
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0b df       	rcall	.-490    	; 0x124 <log_s>
 30e:	8f e5       	ldi	r24, 0x5F	; 95
 310:	9a ee       	ldi	r25, 0xEA	; 234
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <main+0xee>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0xf4>
 318:	00 00       	nop
 31a:	09 c0       	rjmp	.+18     	; 0x32e <main+0x10a>
 31c:	87 e4       	ldi	r24, 0x47	; 71
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	01 df       	rcall	.-510    	; 0x124 <log_s>
 322:	8f e5       	ldi	r24, 0x5F	; 95
 324:	9a ee       	ldi	r25, 0xEA	; 234
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <main+0x102>
 32a:	00 c0       	rjmp	.+0      	; 0x32c <main+0x108>
 32c:	00 00       	nop
 32e:	10 92 60 01 	sts	0x0160, r1
 332:	4b 9b       	sbis	0x09, 3	; 9
 334:	04 c0       	rjmp	.+8      	; 0x33e <main+0x11a>
 336:	80 91 00 01 	lds	r24, 0x0100
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	61 f0       	breq	.+24     	; 0x356 <main+0x132>
 33e:	83 b7       	in	r24, 0x33	; 51
 340:	81 7f       	andi	r24, 0xF1	; 241
 342:	86 60       	ori	r24, 0x06	; 6
 344:	83 bf       	out	0x33, r24	; 51
 346:	83 b7       	in	r24, 0x33	; 51
 348:	81 60       	ori	r24, 0x01	; 1
 34a:	83 bf       	out	0x33, r24	; 51
 34c:	88 95       	sleep
 34e:	83 b7       	in	r24, 0x33	; 51
 350:	8e 7f       	andi	r24, 0xFE	; 254
 352:	83 bf       	out	0x33, r24	; 51
 354:	bd cf       	rjmp	.-134    	; 0x2d0 <main+0xac>
 356:	8e e4       	ldi	r24, 0x4E	; 78
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	e4 de       	rcall	.-568    	; 0x124 <log_s>
 35c:	8f e5       	ldi	r24, 0x5F	; 95
 35e:	9a ee       	ldi	r25, 0xEA	; 234
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	f1 f7       	brne	.-4      	; 0x360 <main+0x13c>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x142>
 366:	00 00       	nop
 368:	f8 94       	cli
 36a:	09 df       	rcall	.-494    	; 0x17e <millis_pause>
 36c:	10 92 00 01 	sts	0x0100, r1
 370:	a4 de       	rcall	.-696    	; 0xba <doorbell_enable_interrupt>
 372:	83 b7       	in	r24, 0x33	; 51
 374:	81 7f       	andi	r24, 0xF1	; 241
 376:	84 60       	ori	r24, 0x04	; 4
 378:	83 bf       	out	0x33, r24	; 51
 37a:	83 b7       	in	r24, 0x33	; 51
 37c:	81 60       	ori	r24, 0x01	; 1
 37e:	83 bf       	out	0x33, r24	; 51
 380:	78 94       	sei
 382:	88 95       	sleep
 384:	83 b7       	in	r24, 0x33	; 51
 386:	8e 7f       	andi	r24, 0xFE	; 254
 388:	83 bf       	out	0x33, r24	; 51
 38a:	a2 cf       	rjmp	.-188    	; 0x2d0 <main+0xac>

0000038c <_GLOBAL__sub_I_deep_sleep_ok>:
    static volatile uint8_t ACK_REQUESTED;
    static volatile uint8_t ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile uint8_t _mode; //should be protected?
    
    RFM69(uint8_t slaveSelectPin=BIT_RFM_CS, uint8_t interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false) {
 38c:	8d e5       	ldi	r24, 0x5D	; 93
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	90 93 66 01 	sts	0x0166, r25
 394:	80 93 65 01 	sts	0x0165, r24
      _slaveSelectPin = slaveSelectPin;
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	80 93 67 01 	sts	0x0167, r24
      _interruptPin = interruptPin;
 39e:	80 93 68 01 	sts	0x0168, r24
      _mode = RF69_MODE_STANDBY;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	80 93 77 01 	sts	0x0177, r24
      _promiscuousMode = false;
 3a8:	10 92 6a 01 	sts	0x016A, r1
      _powerLevel = 31;
 3ac:	8f e1       	ldi	r24, 0x1F	; 31
 3ae:	80 93 6b 01 	sts	0x016B, r24
      _isRFM69HW = isRFM69HW;
 3b2:	10 92 6c 01 	sts	0x016C, r1
 3b6:	08 95       	ret

000003b8 <_ZN5RFM697spiInitEv>:
/// Should be called immediately after reception in case sender wants ACK
void RFM69::sendACK(const void* buffer, byte bufferSize) {
  byte sender = SENDERID;
  while (!canSend()) receiveDone();
  sendFrame(sender, buffer, bufferSize, false, true);
}
 3b8:	84 b1       	in	r24, 0x04	; 4
 3ba:	8c 62       	ori	r24, 0x2C	; 44
 3bc:	84 b9       	out	0x04, r24	; 4
 3be:	2a 9a       	sbi	0x05, 2	; 5
 3c0:	24 98       	cbi	0x04, 4	; 4
 3c2:	80 e5       	ldi	r24, 0x50	; 80
 3c4:	8c bd       	out	0x2c, r24	; 44
 3c6:	52 98       	cbi	0x0a, 2	; 10
 3c8:	5a 9a       	sbi	0x0b, 2	; 11
 3ca:	08 95       	ret

000003cc <_ZN5RFM694isr0Ev>:
 3cc:	80 91 6d 01 	lds	r24, 0x016D
 3d0:	90 91 6e 01 	lds	r25, 0x016E
 3d4:	dc 01       	movw	r26, r24
 3d6:	ed 91       	ld	r30, X+
 3d8:	fc 91       	ld	r31, X
 3da:	01 90       	ld	r0, Z+
 3dc:	f0 81       	ld	r31, Z
 3de:	e0 2d       	mov	r30, r0
 3e0:	09 95       	icall
 3e2:	08 95       	ret

000003e4 <_ZN5RFM6915spiTransferByteEh>:
 3e4:	6e bd       	out	0x2e, r22	; 46
 3e6:	0d b4       	in	r0, 0x2d	; 45
 3e8:	07 fe       	sbrs	r0, 7
 3ea:	fd cf       	rjmp	.-6      	; 0x3e6 <_ZN5RFM6915spiTransferByteEh+0x2>
 3ec:	8e b5       	in	r24, 0x2e	; 46
 3ee:	08 95       	ret

000003f0 <_ZN5RFM6912noInterruptsEv>:
 3f0:	f8 94       	cli
 3f2:	08 95       	ret

000003f4 <_ZN5RFM696selectEv>:
 3f4:	fd df       	rcall	.-6      	; 0x3f0 <_ZN5RFM6912noInterruptsEv>
 3f6:	2a 98       	cbi	0x05, 2	; 5
 3f8:	08 95       	ret

000003fa <_ZN5RFM6915allowInterruptsEv>:
 3fa:	78 94       	sei
 3fc:	08 95       	ret

000003fe <_ZN5RFM698unselectEv>:
 3fe:	2a 9a       	sbi	0x05, 2	; 5
 400:	fc cf       	rjmp	.-8      	; 0x3fa <_ZN5RFM6915allowInterruptsEv>

00000402 <_ZN5RFM6911spiTransferEhh>:
 402:	0f 93       	push	r16
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	ec 01       	movw	r28, r24
 40c:	06 2f       	mov	r16, r22
 40e:	14 2f       	mov	r17, r20
 410:	f1 df       	rcall	.-30     	; 0x3f4 <_ZN5RFM696selectEv>
 412:	60 2f       	mov	r22, r16
 414:	ce 01       	movw	r24, r28
 416:	e6 df       	rcall	.-52     	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 418:	61 2f       	mov	r22, r17
 41a:	ce 01       	movw	r24, r28
 41c:	e3 df       	rcall	.-58     	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 41e:	18 2f       	mov	r17, r24
 420:	ce 01       	movw	r24, r28
 422:	ed df       	rcall	.-38     	; 0x3fe <_ZN5RFM698unselectEv>
 424:	81 2f       	mov	r24, r17
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	08 95       	ret

00000430 <_ZN5RFM697readRegEh>:
 430:	1f 93       	push	r17
 432:	cf 93       	push	r28
 434:	df 93       	push	r29
 436:	ec 01       	movw	r28, r24
 438:	16 2f       	mov	r17, r22
 43a:	dc df       	rcall	.-72     	; 0x3f4 <_ZN5RFM696selectEv>
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	61 2f       	mov	r22, r17
 440:	ce 01       	movw	r24, r28
 442:	df df       	rcall	.-66     	; 0x402 <_ZN5RFM6911spiTransferEhh>
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	1f 91       	pop	r17
 44a:	08 95       	ret

0000044c <_ZN5RFM698writeRegEhh>:
 44c:	0f 93       	push	r16
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	ec 01       	movw	r28, r24
 456:	06 2f       	mov	r16, r22
 458:	14 2f       	mov	r17, r20
 45a:	cc df       	rcall	.-104    	; 0x3f4 <_ZN5RFM696selectEv>
 45c:	60 2f       	mov	r22, r16
 45e:	60 68       	ori	r22, 0x80	; 128
 460:	41 2f       	mov	r20, r17
 462:	ce 01       	movw	r24, r28
 464:	ce df       	rcall	.-100    	; 0x402 <_ZN5RFM6911spiTransferEhh>
 466:	ce 01       	movw	r24, r28
 468:	ca df       	rcall	.-108    	; 0x3fe <_ZN5RFM698unselectEv>
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	1f 91       	pop	r17
 470:	0f 91       	pop	r16
 472:	08 95       	ret

00000474 <_ZN5RFM6916setHighPowerRegsEb>:
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	ec 01       	movw	r28, r24
 47a:	61 11       	cpse	r22, r1
 47c:	0a c0       	rjmp	.+20     	; 0x492 <_ZN5RFM6916setHighPowerRegsEb+0x1e>
 47e:	04 c0       	rjmp	.+8      	; 0x488 <_ZN5RFM6916setHighPowerRegsEb+0x14>
 480:	6c e5       	ldi	r22, 0x5C	; 92
 482:	ce 01       	movw	r24, r28
 484:	e3 df       	rcall	.-58     	; 0x44c <_ZN5RFM698writeRegEhh>
 486:	0a c0       	rjmp	.+20     	; 0x49c <_ZN5RFM6916setHighPowerRegsEb+0x28>
 488:	45 e5       	ldi	r20, 0x55	; 85
 48a:	6a e5       	ldi	r22, 0x5A	; 90
 48c:	df df       	rcall	.-66     	; 0x44c <_ZN5RFM698writeRegEhh>
 48e:	40 e7       	ldi	r20, 0x70	; 112
 490:	f7 cf       	rjmp	.-18     	; 0x480 <_ZN5RFM6916setHighPowerRegsEb+0xc>
 492:	4d e5       	ldi	r20, 0x5D	; 93
 494:	6a e5       	ldi	r22, 0x5A	; 90
 496:	da df       	rcall	.-76     	; 0x44c <_ZN5RFM698writeRegEhh>
 498:	4c e7       	ldi	r20, 0x7C	; 124
 49a:	f2 cf       	rjmp	.-28     	; 0x480 <_ZN5RFM6916setHighPowerRegsEb+0xc>
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	08 95       	ret

000004a2 <_ZN5RFM698readRSSIEb>:
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	ec 01       	movw	r28, r24
 4a8:	66 23       	and	r22, r22
 4aa:	41 f0       	breq	.+16     	; 0x4bc <_ZN5RFM698readRSSIEb+0x1a>
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	63 e2       	ldi	r22, 0x23	; 35
 4b0:	cd df       	rcall	.-102    	; 0x44c <_ZN5RFM698writeRegEhh>
 4b2:	63 e2       	ldi	r22, 0x23	; 35
 4b4:	ce 01       	movw	r24, r28
 4b6:	bc df       	rcall	.-136    	; 0x430 <_ZN5RFM697readRegEh>
 4b8:	81 ff       	sbrs	r24, 1
 4ba:	fb cf       	rjmp	.-10     	; 0x4b2 <_ZN5RFM698readRSSIEb+0x10>
 4bc:	64 e2       	ldi	r22, 0x24	; 36
 4be:	ce 01       	movw	r24, r28
 4c0:	b7 df       	rcall	.-146    	; 0x430 <_ZN5RFM697readRegEh>
 4c2:	28 2f       	mov	r18, r24
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	31 95       	neg	r19
 4c8:	21 95       	neg	r18
 4ca:	31 09       	sbc	r19, r1
 4cc:	35 95       	asr	r19
 4ce:	27 95       	ror	r18
 4d0:	82 2f       	mov	r24, r18
 4d2:	93 2f       	mov	r25, r19
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <_ZN5RFM697setModeEh>:
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	ec 01       	movw	r28, r24
 4e2:	16 2f       	mov	r17, r22
 4e4:	80 91 77 01 	lds	r24, 0x0177
 4e8:	86 17       	cp	r24, r22
 4ea:	09 f4       	brne	.+2      	; 0x4ee <_ZN5RFM697setModeEh+0x14>
 4ec:	56 c0       	rjmp	.+172    	; 0x59a <_ZN5RFM697setModeEh+0xc0>
 4ee:	62 30       	cpi	r22, 0x02	; 2
 4f0:	69 f1       	breq	.+90     	; 0x54c <_ZN5RFM697setModeEh+0x72>
 4f2:	38 f4       	brcc	.+14     	; 0x502 <_ZN5RFM697setModeEh+0x28>
 4f4:	66 23       	and	r22, r22
 4f6:	09 f4       	brne	.+2      	; 0x4fa <_ZN5RFM697setModeEh+0x20>
 4f8:	3d c0       	rjmp	.+122    	; 0x574 <_ZN5RFM697setModeEh+0x9a>
 4fa:	61 30       	cpi	r22, 0x01	; 1
 4fc:	09 f0       	breq	.+2      	; 0x500 <_ZN5RFM697setModeEh+0x26>
 4fe:	4d c0       	rjmp	.+154    	; 0x59a <_ZN5RFM697setModeEh+0xc0>
 500:	2f c0       	rjmp	.+94     	; 0x560 <_ZN5RFM697setModeEh+0x86>
 502:	63 30       	cpi	r22, 0x03	; 3
 504:	99 f0       	breq	.+38     	; 0x52c <_ZN5RFM697setModeEh+0x52>
 506:	64 30       	cpi	r22, 0x04	; 4
 508:	09 f0       	breq	.+2      	; 0x50c <_ZN5RFM697setModeEh+0x32>
 50a:	47 c0       	rjmp	.+142    	; 0x59a <_ZN5RFM697setModeEh+0xc0>
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	ce 01       	movw	r24, r28
 510:	8f df       	rcall	.-226    	; 0x430 <_ZN5RFM697readRegEh>
 512:	83 7e       	andi	r24, 0xE3	; 227
 514:	48 2f       	mov	r20, r24
 516:	4c 60       	ori	r20, 0x0C	; 12
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	ce 01       	movw	r24, r28
 51c:	97 df       	rcall	.-210    	; 0x44c <_ZN5RFM698writeRegEhh>
 51e:	8f 81       	ldd	r24, Y+7	; 0x07
 520:	88 23       	and	r24, r24
 522:	81 f1       	breq	.+96     	; 0x584 <_ZN5RFM697setModeEh+0xaa>
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	ce 01       	movw	r24, r28
 528:	a5 df       	rcall	.-182    	; 0x474 <_ZN5RFM6916setHighPowerRegsEb>
 52a:	2c c0       	rjmp	.+88     	; 0x584 <_ZN5RFM697setModeEh+0xaa>
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	ce 01       	movw	r24, r28
 530:	7f df       	rcall	.-258    	; 0x430 <_ZN5RFM697readRegEh>
 532:	83 7e       	andi	r24, 0xE3	; 227
 534:	48 2f       	mov	r20, r24
 536:	40 61       	ori	r20, 0x10	; 16
 538:	61 e0       	ldi	r22, 0x01	; 1
 53a:	ce 01       	movw	r24, r28
 53c:	87 df       	rcall	.-242    	; 0x44c <_ZN5RFM698writeRegEhh>
 53e:	8f 81       	ldd	r24, Y+7	; 0x07
 540:	88 23       	and	r24, r24
 542:	01 f1       	breq	.+64     	; 0x584 <_ZN5RFM697setModeEh+0xaa>
 544:	60 e0       	ldi	r22, 0x00	; 0
 546:	ce 01       	movw	r24, r28
 548:	95 df       	rcall	.-214    	; 0x474 <_ZN5RFM6916setHighPowerRegsEb>
 54a:	1c c0       	rjmp	.+56     	; 0x584 <_ZN5RFM697setModeEh+0xaa>
 54c:	61 e0       	ldi	r22, 0x01	; 1
 54e:	ce 01       	movw	r24, r28
 550:	6f df       	rcall	.-290    	; 0x430 <_ZN5RFM697readRegEh>
 552:	83 7e       	andi	r24, 0xE3	; 227
 554:	48 2f       	mov	r20, r24
 556:	48 60       	ori	r20, 0x08	; 8
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	ce 01       	movw	r24, r28
 55c:	77 df       	rcall	.-274    	; 0x44c <_ZN5RFM698writeRegEhh>
 55e:	12 c0       	rjmp	.+36     	; 0x584 <_ZN5RFM697setModeEh+0xaa>
 560:	61 e0       	ldi	r22, 0x01	; 1
 562:	ce 01       	movw	r24, r28
 564:	65 df       	rcall	.-310    	; 0x430 <_ZN5RFM697readRegEh>
 566:	83 7e       	andi	r24, 0xE3	; 227
 568:	48 2f       	mov	r20, r24
 56a:	44 60       	ori	r20, 0x04	; 4
 56c:	61 e0       	ldi	r22, 0x01	; 1
 56e:	ce 01       	movw	r24, r28
 570:	6d df       	rcall	.-294    	; 0x44c <_ZN5RFM698writeRegEhh>
 572:	08 c0       	rjmp	.+16     	; 0x584 <_ZN5RFM697setModeEh+0xaa>
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	ce 01       	movw	r24, r28
 578:	5b df       	rcall	.-330    	; 0x430 <_ZN5RFM697readRegEh>
 57a:	48 2f       	mov	r20, r24
 57c:	43 7e       	andi	r20, 0xE3	; 227
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	ce 01       	movw	r24, r28
 582:	64 df       	rcall	.-312    	; 0x44c <_ZN5RFM698writeRegEhh>
 584:	80 91 77 01 	lds	r24, 0x0177
 588:	81 11       	cpse	r24, r1
 58a:	05 c0       	rjmp	.+10     	; 0x596 <_ZN5RFM697setModeEh+0xbc>
 58c:	67 e2       	ldi	r22, 0x27	; 39
 58e:	ce 01       	movw	r24, r28
 590:	4f df       	rcall	.-354    	; 0x430 <_ZN5RFM697readRegEh>
 592:	88 23       	and	r24, r24
 594:	bc f7       	brge	.-18     	; 0x584 <_ZN5RFM697setModeEh+0xaa>
 596:	10 93 77 01 	sts	0x0177, r17
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	08 95       	ret

000005a2 <_ZN5RFM697canSendEv>:
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	ec 01       	movw	r28, r24
 5a8:	80 91 77 01 	lds	r24, 0x0177
 5ac:	83 30       	cpi	r24, 0x03	; 3
 5ae:	79 f4       	brne	.+30     	; 0x5ce <_ZN5RFM697canSendEv+0x2c>
 5b0:	80 91 73 01 	lds	r24, 0x0173
 5b4:	81 11       	cpse	r24, r1
 5b6:	0d c0       	rjmp	.+26     	; 0x5d2 <_ZN5RFM697canSendEv+0x30>
 5b8:	60 e0       	ldi	r22, 0x00	; 0
 5ba:	ce 01       	movw	r24, r28
 5bc:	72 df       	rcall	.-284    	; 0x4a2 <_ZN5RFM698readRSSIEb>
 5be:	86 3a       	cpi	r24, 0xA6	; 166
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	4c f4       	brge	.+18     	; 0x5d6 <_ZN5RFM697canSendEv+0x34>
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	ce 01       	movw	r24, r28
 5c8:	88 df       	rcall	.-240    	; 0x4da <_ZN5RFM697setModeEh>
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	05 c0       	rjmp	.+10     	; 0x5d8 <_ZN5RFM697canSendEv+0x36>
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	03 c0       	rjmp	.+6      	; 0x5d8 <_ZN5RFM697canSendEv+0x36>
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <_ZN5RFM697canSendEv+0x36>
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <_ZN5RFM6912receiveBeginEv>:
 5de:	cf 93       	push	r28
 5e0:	df 93       	push	r29
 5e2:	ec 01       	movw	r28, r24
 5e4:	10 92 76 01 	sts	0x0176, r1
 5e8:	10 92 75 01 	sts	0x0175, r1
 5ec:	10 92 74 01 	sts	0x0174, r1
 5f0:	10 92 73 01 	sts	0x0173, r1
 5f4:	10 92 72 01 	sts	0x0172, r1
 5f8:	10 92 71 01 	sts	0x0171, r1
 5fc:	10 92 70 01 	sts	0x0170, r1
 600:	10 92 6f 01 	sts	0x016F, r1
 604:	68 e2       	ldi	r22, 0x28	; 40
 606:	14 df       	rcall	.-472    	; 0x430 <_ZN5RFM697readRegEh>
 608:	82 ff       	sbrs	r24, 2
 60a:	08 c0       	rjmp	.+16     	; 0x61c <_ZN5RFM6912receiveBeginEv+0x3e>
 60c:	6d e3       	ldi	r22, 0x3D	; 61
 60e:	ce 01       	movw	r24, r28
 610:	0f df       	rcall	.-482    	; 0x430 <_ZN5RFM697readRegEh>
 612:	48 2f       	mov	r20, r24
 614:	44 60       	ori	r20, 0x04	; 4
 616:	6d e3       	ldi	r22, 0x3D	; 61
 618:	ce 01       	movw	r24, r28
 61a:	18 df       	rcall	.-464    	; 0x44c <_ZN5RFM698writeRegEhh>
 61c:	40 e4       	ldi	r20, 0x40	; 64
 61e:	65 e2       	ldi	r22, 0x25	; 37
 620:	ce 01       	movw	r24, r28
 622:	14 df       	rcall	.-472    	; 0x44c <_ZN5RFM698writeRegEhh>
 624:	63 e0       	ldi	r22, 0x03	; 3
 626:	ce 01       	movw	r24, r28
 628:	58 df       	rcall	.-336    	; 0x4da <_ZN5RFM697setModeEh>
 62a:	df 91       	pop	r29
 62c:	cf 91       	pop	r28
 62e:	08 95       	ret

00000630 <_ZN5RFM697encryptEPKc>:
 630:	df 92       	push	r13
 632:	ef 92       	push	r14
 634:	ff 92       	push	r15
 636:	0f 93       	push	r16
 638:	1f 93       	push	r17
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	8c 01       	movw	r16, r24
 640:	7b 01       	movw	r14, r22
 642:	61 e0       	ldi	r22, 0x01	; 1
 644:	4a df       	rcall	.-364    	; 0x4da <_ZN5RFM697setModeEh>
 646:	e1 14       	cp	r14, r1
 648:	f1 04       	cpc	r15, r1
 64a:	81 f0       	breq	.+32     	; 0x66c <_ZN5RFM697encryptEPKc+0x3c>
 64c:	c8 01       	movw	r24, r16
 64e:	d2 de       	rcall	.-604    	; 0x3f4 <_ZN5RFM696selectEv>
 650:	6e eb       	ldi	r22, 0xBE	; 190
 652:	c8 01       	movw	r24, r16
 654:	c7 de       	rcall	.-626    	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 656:	e7 01       	movw	r28, r14
 658:	d1 2c       	mov	r13, r1
 65a:	69 91       	ld	r22, Y+
 65c:	c8 01       	movw	r24, r16
 65e:	c2 de       	rcall	.-636    	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 660:	d3 94       	inc	r13
 662:	80 e1       	ldi	r24, 0x10	; 16
 664:	d8 12       	cpse	r13, r24
 666:	f9 cf       	rjmp	.-14     	; 0x65a <_ZN5RFM697encryptEPKc+0x2a>
 668:	c8 01       	movw	r24, r16
 66a:	c9 de       	rcall	.-622    	; 0x3fe <_ZN5RFM698unselectEv>
 66c:	6d e3       	ldi	r22, 0x3D	; 61
 66e:	c8 01       	movw	r24, r16
 670:	df de       	rcall	.-578    	; 0x430 <_ZN5RFM697readRegEh>
 672:	8e 7f       	andi	r24, 0xFE	; 254
 674:	91 e0       	ldi	r25, 0x01	; 1
 676:	ef 28       	or	r14, r15
 678:	09 f4       	brne	.+2      	; 0x67c <_ZN5RFM697encryptEPKc+0x4c>
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	48 2f       	mov	r20, r24
 67e:	49 2b       	or	r20, r25
 680:	6d e3       	ldi	r22, 0x3D	; 61
 682:	c8 01       	movw	r24, r16
 684:	e3 de       	rcall	.-570    	; 0x44c <_ZN5RFM698writeRegEhh>
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	1f 91       	pop	r17
 68c:	0f 91       	pop	r16
 68e:	ff 90       	pop	r15
 690:	ef 90       	pop	r14
 692:	df 90       	pop	r13
 694:	08 95       	ret

00000696 <_ZN5RFM6910initializeEhhh>:
 696:	ef 92       	push	r14
 698:	ff 92       	push	r15
 69a:	0f 93       	push	r16
 69c:	1f 93       	push	r17
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	cd b7       	in	r28, 0x3d	; 61
 6a4:	de b7       	in	r29, 0x3e	; 62
 6a6:	aa 97       	sbiw	r28, 0x2a	; 42
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	f8 94       	cli
 6ac:	de bf       	out	0x3e, r29	; 62
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	cd bf       	out	0x3d, r28	; 61
 6b2:	8c 01       	movw	r16, r24
 6b4:	f4 2e       	mov	r15, r20
 6b6:	fe 01       	movw	r30, r28
 6b8:	31 96       	adiw	r30, 0x01	; 1
 6ba:	8a e2       	ldi	r24, 0x2A	; 42
 6bc:	df 01       	movw	r26, r30
 6be:	1d 92       	st	X+, r1
 6c0:	8a 95       	dec	r24
 6c2:	e9 f7       	brne	.-6      	; 0x6be <_ZN5RFM6910initializeEhhh+0x28>
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	89 83       	std	Y+1, r24	; 0x01
 6c8:	84 e0       	ldi	r24, 0x04	; 4
 6ca:	8a 83       	std	Y+2, r24	; 0x02
 6cc:	92 e0       	ldi	r25, 0x02	; 2
 6ce:	9b 83       	std	Y+3, r25	; 0x03
 6d0:	33 e0       	ldi	r19, 0x03	; 3
 6d2:	3d 83       	std	Y+5, r19	; 0x05
 6d4:	9e 83       	std	Y+6, r25	; 0x06
 6d6:	8f 83       	std	Y+7, r24	; 0x07
 6d8:	8a e8       	ldi	r24, 0x8A	; 138
 6da:	88 87       	std	Y+8, r24	; 0x08
 6dc:	85 e0       	ldi	r24, 0x05	; 5
 6de:	89 87       	std	Y+9, r24	; 0x09
 6e0:	8a 87       	std	Y+10, r24	; 0x0a
 6e2:	86 e0       	ldi	r24, 0x06	; 6
 6e4:	8b 87       	std	Y+11, r24	; 0x0b
 6e6:	83 ec       	ldi	r24, 0xC3	; 195
 6e8:	8c 87       	std	Y+12, r24	; 0x0c
 6ea:	87 e0       	ldi	r24, 0x07	; 7
 6ec:	8d 87       	std	Y+13, r24	; 0x0d
 6ee:	88 e0       	ldi	r24, 0x08	; 8
 6f0:	8f 87       	std	Y+15, r24	; 0x0f
 6f2:	89 e0       	ldi	r24, 0x09	; 9
 6f4:	89 8b       	std	Y+17, r24	; 0x11
 6f6:	89 e1       	ldi	r24, 0x19	; 25
 6f8:	8b 8b       	std	Y+19, r24	; 0x13
 6fa:	92 e4       	ldi	r25, 0x42	; 66
 6fc:	9c 8b       	std	Y+20, r25	; 0x14
 6fe:	85 e2       	ldi	r24, 0x25	; 37
 700:	8d 8b       	std	Y+21, r24	; 0x15
 702:	80 e4       	ldi	r24, 0x40	; 64
 704:	8e 8b       	std	Y+22, r24	; 0x16
 706:	89 e2       	ldi	r24, 0x29	; 41
 708:	8f 8b       	std	Y+23, r24	; 0x17
 70a:	8c ed       	ldi	r24, 0xDC	; 220
 70c:	88 8f       	std	Y+24, r24	; 0x18
 70e:	8e e2       	ldi	r24, 0x2E	; 46
 710:	89 8f       	std	Y+25, r24	; 0x19
 712:	88 e8       	ldi	r24, 0x88	; 136
 714:	8a 8f       	std	Y+26, r24	; 0x1a
 716:	8f e2       	ldi	r24, 0x2F	; 47
 718:	8b 8f       	std	Y+27, r24	; 0x1b
 71a:	8d e2       	ldi	r24, 0x2D	; 45
 71c:	8c 8f       	std	Y+28, r24	; 0x1c
 71e:	80 e3       	ldi	r24, 0x30	; 48
 720:	8d 8f       	std	Y+29, r24	; 0x1d
 722:	37 e3       	ldi	r19, 0x37	; 55
 724:	3f 8f       	std	Y+31, r19	; 0x1f
 726:	30 e9       	ldi	r19, 0x90	; 144
 728:	38 a3       	std	Y+32, r19	; 0x20
 72a:	38 e3       	ldi	r19, 0x38	; 56
 72c:	39 a3       	std	Y+33, r19	; 0x21
 72e:	9a a3       	std	Y+34, r25	; 0x22
 730:	9c e3       	ldi	r25, 0x3C	; 60
 732:	9b a3       	std	Y+35, r25	; 0x23
 734:	9f e8       	ldi	r25, 0x8F	; 143
 736:	9c a3       	std	Y+36, r25	; 0x24
 738:	9d e3       	ldi	r25, 0x3D	; 61
 73a:	9d a3       	std	Y+37, r25	; 0x25
 73c:	92 e1       	ldi	r25, 0x12	; 18
 73e:	9e a3       	std	Y+38, r25	; 0x26
 740:	9f e6       	ldi	r25, 0x6F	; 111
 742:	9f a3       	std	Y+39, r25	; 0x27
 744:	88 a7       	std	Y+40, r24	; 0x28
 746:	8f ef       	ldi	r24, 0xFF	; 255
 748:	89 a7       	std	Y+41, r24	; 0x29
 74a:	6f 31       	cpi	r22, 0x1F	; 31
 74c:	09 f4       	brne	.+2      	; 0x750 <_ZN5RFM6910initializeEhhh+0xba>
 74e:	53 c0       	rjmp	.+166    	; 0x7f6 <_ZN5RFM6910initializeEhhh+0x160>
 750:	6b 32       	cpi	r22, 0x2B	; 43
 752:	09 f4       	brne	.+2      	; 0x756 <_ZN5RFM6910initializeEhhh+0xc0>
 754:	4c c0       	rjmp	.+152    	; 0x7ee <_ZN5RFM6910initializeEhhh+0x158>
 756:	66 35       	cpi	r22, 0x56	; 86
 758:	09 f0       	breq	.+2      	; 0x75c <_ZN5RFM6910initializeEhhh+0xc6>
 75a:	45 c0       	rjmp	.+138    	; 0x7e6 <_ZN5RFM6910initializeEhhh+0x150>
 75c:	50 c0       	rjmp	.+160    	; 0x7fe <_ZN5RFM6910initializeEhhh+0x168>
 75e:	88 8b       	std	Y+16, r24	; 0x10
 760:	2e 8f       	std	Y+30, r18	; 0x1e
 762:	c8 01       	movw	r24, r16
 764:	29 de       	rcall	.-942    	; 0x3b8 <_ZN5RFM697spiInitEv>
 766:	4a ea       	ldi	r20, 0xAA	; 170
 768:	6f e2       	ldi	r22, 0x2F	; 47
 76a:	c8 01       	movw	r24, r16
 76c:	6f de       	rcall	.-802    	; 0x44c <_ZN5RFM698writeRegEhh>
 76e:	6f e2       	ldi	r22, 0x2F	; 47
 770:	c8 01       	movw	r24, r16
 772:	5e de       	rcall	.-836    	; 0x430 <_ZN5RFM697readRegEh>
 774:	8a 3a       	cpi	r24, 0xAA	; 170
 776:	b9 f7       	brne	.-18     	; 0x766 <_ZN5RFM6910initializeEhhh+0xd0>
 778:	45 e5       	ldi	r20, 0x55	; 85
 77a:	6f e2       	ldi	r22, 0x2F	; 47
 77c:	c8 01       	movw	r24, r16
 77e:	66 de       	rcall	.-820    	; 0x44c <_ZN5RFM698writeRegEhh>
 780:	6f e2       	ldi	r22, 0x2F	; 47
 782:	c8 01       	movw	r24, r16
 784:	55 de       	rcall	.-854    	; 0x430 <_ZN5RFM697readRegEh>
 786:	85 35       	cpi	r24, 0x55	; 85
 788:	b9 f7       	brne	.-18     	; 0x778 <_ZN5RFM6910initializeEhhh+0xe2>
 78a:	69 81       	ldd	r22, Y+1	; 0x01
 78c:	6f 3f       	cpi	r22, 0xFF	; 255
 78e:	f1 f0       	breq	.+60     	; 0x7cc <_ZN5RFM6910initializeEhhh+0x136>
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	e1 2c       	mov	r14, r1
 796:	fc 01       	movw	r30, r24
 798:	ee 0f       	add	r30, r30
 79a:	ff 1f       	adc	r31, r31
 79c:	21 e0       	ldi	r18, 0x01	; 1
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	2c 0f       	add	r18, r28
 7a2:	3d 1f       	adc	r19, r29
 7a4:	e2 0f       	add	r30, r18
 7a6:	f3 1f       	adc	r31, r19
 7a8:	41 81       	ldd	r20, Z+1	; 0x01
 7aa:	c8 01       	movw	r24, r16
 7ac:	4f de       	rcall	.-866    	; 0x44c <_ZN5RFM698writeRegEhh>
 7ae:	e3 94       	inc	r14
 7b0:	8e 2d       	mov	r24, r14
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	fc 01       	movw	r30, r24
 7b6:	ee 0f       	add	r30, r30
 7b8:	ff 1f       	adc	r31, r31
 7ba:	a1 e0       	ldi	r26, 0x01	; 1
 7bc:	b0 e0       	ldi	r27, 0x00	; 0
 7be:	ac 0f       	add	r26, r28
 7c0:	bd 1f       	adc	r27, r29
 7c2:	ea 0f       	add	r30, r26
 7c4:	fb 1f       	adc	r31, r27
 7c6:	60 81       	ld	r22, Z
 7c8:	6f 3f       	cpi	r22, 0xFF	; 255
 7ca:	29 f7       	brne	.-54     	; 0x796 <_ZN5RFM6910initializeEhhh+0x100>
 7cc:	60 e0       	ldi	r22, 0x00	; 0
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	c8 01       	movw	r24, r16
 7d2:	2e df       	rcall	.-420    	; 0x630 <_ZN5RFM697encryptEPKc>
 7d4:	61 e0       	ldi	r22, 0x01	; 1
 7d6:	c8 01       	movw	r24, r16
 7d8:	80 de       	rcall	.-768    	; 0x4da <_ZN5RFM697setModeEh>
 7da:	67 e2       	ldi	r22, 0x27	; 39
 7dc:	c8 01       	movw	r24, r16
 7de:	28 de       	rcall	.-944    	; 0x430 <_ZN5RFM697readRegEh>
 7e0:	88 23       	and	r24, r24
 7e2:	dc f7       	brge	.-10     	; 0x7da <_ZN5RFM6910initializeEhhh+0x144>
 7e4:	10 c0       	rjmp	.+32     	; 0x806 <_ZN5RFM6910initializeEhhh+0x170>
 7e6:	84 ee       	ldi	r24, 0xE4	; 228
 7e8:	8e 87       	std	Y+14, r24	; 0x0e
 7ea:	80 ec       	ldi	r24, 0xC0	; 192
 7ec:	b8 cf       	rjmp	.-144    	; 0x75e <_ZN5RFM6910initializeEhhh+0xc8>
 7ee:	8c e6       	ldi	r24, 0x6C	; 108
 7f0:	8e 87       	std	Y+14, r24	; 0x0e
 7f2:	80 e4       	ldi	r24, 0x40	; 64
 7f4:	b4 cf       	rjmp	.-152    	; 0x75e <_ZN5RFM6910initializeEhhh+0xc8>
 7f6:	8e e4       	ldi	r24, 0x4E	; 78
 7f8:	8e 87       	std	Y+14, r24	; 0x0e
 7fa:	80 ec       	ldi	r24, 0xC0	; 192
 7fc:	b0 cf       	rjmp	.-160    	; 0x75e <_ZN5RFM6910initializeEhhh+0xc8>
 7fe:	89 ed       	ldi	r24, 0xD9	; 217
 800:	8e 87       	std	Y+14, r24	; 0x0e
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	ac cf       	rjmp	.-168    	; 0x75e <_ZN5RFM6910initializeEhhh+0xc8>
 806:	e9 e6       	ldi	r30, 0x69	; 105
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	80 81       	ld	r24, Z
 80c:	83 60       	ori	r24, 0x03	; 3
 80e:	80 83       	st	Z, r24
 810:	e8 9a       	sbi	0x1d, 0	; 29
 812:	10 93 6e 01 	sts	0x016E, r17
 816:	00 93 6d 01 	sts	0x016D, r16
 81a:	f8 01       	movw	r30, r16
 81c:	f4 82       	std	Z+4, r15	; 0x04
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	aa 96       	adiw	r28, 0x2a	; 42
 822:	0f b6       	in	r0, 0x3f	; 63
 824:	f8 94       	cli
 826:	de bf       	out	0x3e, r29	; 62
 828:	0f be       	out	0x3f, r0	; 63
 82a:	cd bf       	out	0x3d, r28	; 61
 82c:	df 91       	pop	r29
 82e:	cf 91       	pop	r28
 830:	1f 91       	pop	r17
 832:	0f 91       	pop	r16
 834:	ff 90       	pop	r15
 836:	ef 90       	pop	r14
 838:	08 95       	ret

0000083a <_ZN5RFM6916interruptHandlerEv>:
 83a:	ff 92       	push	r15
 83c:	0f 93       	push	r16
 83e:	1f 93       	push	r17
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
 844:	ec 01       	movw	r28, r24
 846:	80 91 77 01 	lds	r24, 0x0177
 84a:	83 30       	cpi	r24, 0x03	; 3
 84c:	09 f0       	breq	.+2      	; 0x850 <_ZN5RFM6916interruptHandlerEv+0x16>
 84e:	42 c0       	rjmp	.+132    	; 0x8d4 <_ZN5RFM6916interruptHandlerEv+0x9a>
 850:	68 e2       	ldi	r22, 0x28	; 40
 852:	ce 01       	movw	r24, r28
 854:	ed dd       	rcall	.-1062   	; 0x430 <_ZN5RFM697readRegEh>
 856:	82 ff       	sbrs	r24, 2
 858:	3d c0       	rjmp	.+122    	; 0x8d4 <_ZN5RFM6916interruptHandlerEv+0x9a>
 85a:	61 e0       	ldi	r22, 0x01	; 1
 85c:	ce 01       	movw	r24, r28
 85e:	3d de       	rcall	.-902    	; 0x4da <_ZN5RFM697setModeEh>
 860:	ce 01       	movw	r24, r28
 862:	c8 dd       	rcall	.-1136   	; 0x3f4 <_ZN5RFM696selectEv>
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	ce 01       	movw	r24, r28
 868:	bd dd       	rcall	.-1158   	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 86a:	60 e0       	ldi	r22, 0x00	; 0
 86c:	ce 01       	movw	r24, r28
 86e:	ba dd       	rcall	.-1164   	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 870:	80 93 73 01 	sts	0x0173, r24
 874:	80 91 73 01 	lds	r24, 0x0173
 878:	83 34       	cpi	r24, 0x43	; 67
 87a:	18 f4       	brcc	.+6      	; 0x882 <_ZN5RFM6916interruptHandlerEv+0x48>
 87c:	80 91 73 01 	lds	r24, 0x0173
 880:	01 c0       	rjmp	.+2      	; 0x884 <_ZN5RFM6916interruptHandlerEv+0x4a>
 882:	82 e4       	ldi	r24, 0x42	; 66
 884:	80 93 73 01 	sts	0x0173, r24
 888:	60 e0       	ldi	r22, 0x00	; 0
 88a:	ce 01       	movw	r24, r28
 88c:	ab dd       	rcall	.-1194   	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 88e:	80 93 74 01 	sts	0x0174, r24
 892:	8d 81       	ldd	r24, Y+5	; 0x05
 894:	81 11       	cpse	r24, r1
 896:	2b c0       	rjmp	.+86     	; 0x8ee <_ZN5RFM6916interruptHandlerEv+0xb4>
 898:	80 91 74 01 	lds	r24, 0x0174
 89c:	9c 81       	ldd	r25, Y+4	; 0x04
 89e:	98 17       	cp	r25, r24
 8a0:	31 f1       	breq	.+76     	; 0x8ee <_ZN5RFM6916interruptHandlerEv+0xb4>
 8a2:	80 91 74 01 	lds	r24, 0x0174
 8a6:	8f 3f       	cpi	r24, 0xFF	; 255
 8a8:	e9 f4       	brne	.+58     	; 0x8e4 <_ZN5RFM6916interruptHandlerEv+0xaa>
 8aa:	21 c0       	rjmp	.+66     	; 0x8ee <_ZN5RFM6916interruptHandlerEv+0xb4>
 8ac:	f1 2c       	mov	r15, r1
 8ae:	0f 2d       	mov	r16, r15
 8b0:	10 e0       	ldi	r17, 0x00	; 0
 8b2:	60 e0       	ldi	r22, 0x00	; 0
 8b4:	ce 01       	movw	r24, r28
 8b6:	96 dd       	rcall	.-1236   	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 8b8:	f8 01       	movw	r30, r16
 8ba:	e8 58       	subi	r30, 0x88	; 136
 8bc:	fe 4f       	sbci	r31, 0xFE	; 254
 8be:	80 83       	st	Z, r24
 8c0:	f3 94       	inc	r15
 8c2:	80 91 76 01 	lds	r24, 0x0176
 8c6:	f8 16       	cp	r15, r24
 8c8:	90 f3       	brcs	.-28     	; 0x8ae <_ZN5RFM6916interruptHandlerEv+0x74>
 8ca:	ce 01       	movw	r24, r28
 8cc:	98 dd       	rcall	.-1232   	; 0x3fe <_ZN5RFM698unselectEv>
 8ce:	63 e0       	ldi	r22, 0x03	; 3
 8d0:	ce 01       	movw	r24, r28
 8d2:	03 de       	rcall	.-1018   	; 0x4da <_ZN5RFM697setModeEh>
 8d4:	60 e0       	ldi	r22, 0x00	; 0
 8d6:	ce 01       	movw	r24, r28
 8d8:	e4 dd       	rcall	.-1080   	; 0x4a2 <_ZN5RFM698readRSSIEb>
 8da:	90 93 70 01 	sts	0x0170, r25
 8de:	80 93 6f 01 	sts	0x016F, r24
 8e2:	1e c0       	rjmp	.+60     	; 0x920 <__stack+0x21>
 8e4:	10 92 73 01 	sts	0x0173, r1
 8e8:	ce 01       	movw	r24, r28
 8ea:	89 dd       	rcall	.-1262   	; 0x3fe <_ZN5RFM698unselectEv>
 8ec:	19 c0       	rjmp	.+50     	; 0x920 <__stack+0x21>
 8ee:	80 91 73 01 	lds	r24, 0x0173
 8f2:	83 50       	subi	r24, 0x03	; 3
 8f4:	80 93 76 01 	sts	0x0176, r24
 8f8:	60 e0       	ldi	r22, 0x00	; 0
 8fa:	ce 01       	movw	r24, r28
 8fc:	73 dd       	rcall	.-1306   	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 8fe:	80 93 75 01 	sts	0x0175, r24
 902:	60 e0       	ldi	r22, 0x00	; 0
 904:	ce 01       	movw	r24, r28
 906:	6e dd       	rcall	.-1316   	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 908:	98 2f       	mov	r25, r24
 90a:	90 78       	andi	r25, 0x80	; 128
 90c:	90 93 71 01 	sts	0x0171, r25
 910:	80 74       	andi	r24, 0x40	; 64
 912:	80 93 72 01 	sts	0x0172, r24
 916:	80 91 76 01 	lds	r24, 0x0176
 91a:	81 11       	cpse	r24, r1
 91c:	c7 cf       	rjmp	.-114    	; 0x8ac <_ZN5RFM6916interruptHandlerEv+0x72>
 91e:	d5 cf       	rjmp	.-86     	; 0x8ca <_ZN5RFM6916interruptHandlerEv+0x90>
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	1f 91       	pop	r17
 926:	0f 91       	pop	r16
 928:	ff 90       	pop	r15
 92a:	08 95       	ret

0000092c <_ZN5RFM699sendFrameEhPKvhbb>:
 92c:	bf 92       	push	r11
 92e:	cf 92       	push	r12
 930:	df 92       	push	r13
 932:	ef 92       	push	r14
 934:	ff 92       	push	r15
 936:	0f 93       	push	r16
 938:	1f 93       	push	r17
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	6c 01       	movw	r12, r24
 940:	c6 2f       	mov	r28, r22
 942:	f4 2e       	mov	r15, r20
 944:	b5 2e       	mov	r11, r21
 946:	12 2f       	mov	r17, r18
 948:	61 e0       	ldi	r22, 0x01	; 1
 94a:	c7 dd       	rcall	.-1138   	; 0x4da <_ZN5RFM697setModeEh>
 94c:	67 e2       	ldi	r22, 0x27	; 39
 94e:	c6 01       	movw	r24, r12
 950:	6f dd       	rcall	.-1314   	; 0x430 <_ZN5RFM697readRegEh>
 952:	88 23       	and	r24, r24
 954:	dc f7       	brge	.-10     	; 0x94c <_ZN5RFM699sendFrameEhPKvhbb+0x20>
 956:	40 e0       	ldi	r20, 0x00	; 0
 958:	65 e2       	ldi	r22, 0x25	; 37
 95a:	c6 01       	movw	r24, r12
 95c:	77 dd       	rcall	.-1298   	; 0x44c <_ZN5RFM698writeRegEhh>
 95e:	1e 33       	cpi	r17, 0x3E	; 62
 960:	08 f0       	brcs	.+2      	; 0x964 <_ZN5RFM699sendFrameEhPKvhbb+0x38>
 962:	1d e3       	ldi	r17, 0x3D	; 61
 964:	c6 01       	movw	r24, r12
 966:	46 dd       	rcall	.-1396   	; 0x3f4 <_ZN5RFM696selectEv>
 968:	60 e8       	ldi	r22, 0x80	; 128
 96a:	c6 01       	movw	r24, r12
 96c:	3b dd       	rcall	.-1418   	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 96e:	61 2f       	mov	r22, r17
 970:	6d 5f       	subi	r22, 0xFD	; 253
 972:	c6 01       	movw	r24, r12
 974:	37 dd       	rcall	.-1426   	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 976:	6c 2f       	mov	r22, r28
 978:	c6 01       	movw	r24, r12
 97a:	34 dd       	rcall	.-1432   	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 97c:	f6 01       	movw	r30, r12
 97e:	64 81       	ldd	r22, Z+4	; 0x04
 980:	c6 01       	movw	r24, r12
 982:	30 dd       	rcall	.-1440   	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 984:	ee 20       	and	r14, r14
 986:	31 f0       	breq	.+12     	; 0x994 <_ZN5RFM699sendFrameEhPKvhbb+0x68>
 988:	60 e8       	ldi	r22, 0x80	; 128
 98a:	c6 01       	movw	r24, r12
 98c:	2b dd       	rcall	.-1450   	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 98e:	11 11       	cpse	r17, r1
 990:	0b c0       	rjmp	.+22     	; 0x9a8 <_ZN5RFM699sendFrameEhPKvhbb+0x7c>
 992:	14 c0       	rjmp	.+40     	; 0x9bc <_ZN5RFM699sendFrameEhPKvhbb+0x90>
 994:	00 23       	and	r16, r16
 996:	21 f0       	breq	.+8      	; 0x9a0 <_ZN5RFM699sendFrameEhPKvhbb+0x74>
 998:	60 e4       	ldi	r22, 0x40	; 64
 99a:	c6 01       	movw	r24, r12
 99c:	23 dd       	rcall	.-1466   	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 99e:	f7 cf       	rjmp	.-18     	; 0x98e <_ZN5RFM699sendFrameEhPKvhbb+0x62>
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	c6 01       	movw	r24, r12
 9a4:	1f dd       	rcall	.-1474   	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 9a6:	f3 cf       	rjmp	.-26     	; 0x98e <_ZN5RFM699sendFrameEhPKvhbb+0x62>
 9a8:	0f 2d       	mov	r16, r15
 9aa:	cf 2d       	mov	r28, r15
 9ac:	db 2d       	mov	r29, r11
 9ae:	69 91       	ld	r22, Y+
 9b0:	c6 01       	movw	r24, r12
 9b2:	18 dd       	rcall	.-1488   	; 0x3e4 <_ZN5RFM6915spiTransferByteEh>
 9b4:	8c 2f       	mov	r24, r28
 9b6:	80 1b       	sub	r24, r16
 9b8:	81 17       	cp	r24, r17
 9ba:	c8 f3       	brcs	.-14     	; 0x9ae <_ZN5RFM699sendFrameEhPKvhbb+0x82>
 9bc:	c6 01       	movw	r24, r12
 9be:	1f dd       	rcall	.-1474   	; 0x3fe <_ZN5RFM698unselectEv>
 9c0:	64 e0       	ldi	r22, 0x04	; 4
 9c2:	c6 01       	movw	r24, r12
 9c4:	8a dd       	rcall	.-1260   	; 0x4da <_ZN5RFM697setModeEh>
 9c6:	4a 9b       	sbis	0x09, 2	; 9
 9c8:	fe cf       	rjmp	.-4      	; 0x9c6 <_ZN5RFM699sendFrameEhPKvhbb+0x9a>
 9ca:	61 e0       	ldi	r22, 0x01	; 1
 9cc:	c6 01       	movw	r24, r12
 9ce:	85 dd       	rcall	.-1270   	; 0x4da <_ZN5RFM697setModeEh>
 9d0:	df 91       	pop	r29
 9d2:	cf 91       	pop	r28
 9d4:	1f 91       	pop	r17
 9d6:	0f 91       	pop	r16
 9d8:	ff 90       	pop	r15
 9da:	ef 90       	pop	r14
 9dc:	df 90       	pop	r13
 9de:	cf 90       	pop	r12
 9e0:	bf 90       	pop	r11
 9e2:	08 95       	ret

000009e4 <_ZN5RFM6911receiveDoneEv>:
 9e4:	cf 93       	push	r28
 9e6:	df 93       	push	r29
 9e8:	ec 01       	movw	r28, r24
 9ea:	02 dd       	rcall	.-1532   	; 0x3f0 <_ZN5RFM6912noInterruptsEv>
 9ec:	80 91 77 01 	lds	r24, 0x0177
 9f0:	83 30       	cpi	r24, 0x03	; 3
 9f2:	69 f4       	brne	.+26     	; 0xa0e <_ZN5RFM6911receiveDoneEv+0x2a>
 9f4:	80 91 73 01 	lds	r24, 0x0173
 9f8:	81 11       	cpse	r24, r1
 9fa:	0e c0       	rjmp	.+28     	; 0xa18 <_ZN5RFM6911receiveDoneEv+0x34>
 9fc:	08 c0       	rjmp	.+16     	; 0xa0e <_ZN5RFM6911receiveDoneEv+0x2a>
 9fe:	ce 01       	movw	r24, r28
 a00:	fc dc       	rcall	.-1544   	; 0x3fa <_ZN5RFM6915allowInterruptsEv>
 a02:	80 e0       	ldi	r24, 0x00	; 0
 a04:	0d c0       	rjmp	.+26     	; 0xa20 <_ZN5RFM6911receiveDoneEv+0x3c>
 a06:	ce 01       	movw	r24, r28
 a08:	ea dd       	rcall	.-1068   	; 0x5de <_ZN5RFM6912receiveBeginEv>
 a0a:	80 e0       	ldi	r24, 0x00	; 0
 a0c:	09 c0       	rjmp	.+18     	; 0xa20 <_ZN5RFM6911receiveDoneEv+0x3c>
 a0e:	80 91 77 01 	lds	r24, 0x0177
 a12:	83 30       	cpi	r24, 0x03	; 3
 a14:	c1 f7       	brne	.-16     	; 0xa06 <_ZN5RFM6911receiveDoneEv+0x22>
 a16:	f3 cf       	rjmp	.-26     	; 0x9fe <_ZN5RFM6911receiveDoneEv+0x1a>
 a18:	61 e0       	ldi	r22, 0x01	; 1
 a1a:	ce 01       	movw	r24, r28
 a1c:	5e dd       	rcall	.-1348   	; 0x4da <_ZN5RFM697setModeEh>
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	df 91       	pop	r29
 a22:	cf 91       	pop	r28
 a24:	08 95       	ret

00000a26 <_ZN5RFM6911ACKReceivedEh>:
  }
  return false;
}

/// Should be polled immediately after sending a packet with ACK request
bool RFM69::ACKReceived(byte fromNodeID) {
 a26:	cf 93       	push	r28
 a28:	c6 2f       	mov	r28, r22
  if (receiveDone())
 a2a:	dc df       	rcall	.-72     	; 0x9e4 <_ZN5RFM6911receiveDoneEv>
 a2c:	88 23       	and	r24, r24
 a2e:	69 f0       	breq	.+26     	; 0xa4a <_ZN5RFM6911ACKReceivedEh+0x24>
    return (SENDERID == fromNodeID || fromNodeID == RF69_BROADCAST_ADDR) && ACK_RECEIVED;
 a30:	80 91 75 01 	lds	r24, 0x0175
 a34:	8c 17       	cp	r24, r28
 a36:	11 f0       	breq	.+4      	; 0xa3c <_ZN5RFM6911ACKReceivedEh+0x16>
 a38:	cf 3f       	cpi	r28, 0xFF	; 255
 a3a:	49 f4       	brne	.+18     	; 0xa4e <_ZN5RFM6911ACKReceivedEh+0x28>
 a3c:	90 91 71 01 	lds	r25, 0x0171
 a40:	81 e0       	ldi	r24, 0x01	; 1
 a42:	91 11       	cpse	r25, r1
 a44:	05 c0       	rjmp	.+10     	; 0xa50 <_ZN5RFM6911ACKReceivedEh+0x2a>
 a46:	80 e0       	ldi	r24, 0x00	; 0
 a48:	03 c0       	rjmp	.+6      	; 0xa50 <_ZN5RFM6911ACKReceivedEh+0x2a>
  return false;
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	01 c0       	rjmp	.+2      	; 0xa50 <_ZN5RFM6911ACKReceivedEh+0x2a>
}

/// Should be polled immediately after sending a packet with ACK request
bool RFM69::ACKReceived(byte fromNodeID) {
  if (receiveDone())
    return (SENDERID == fromNodeID || fromNodeID == RF69_BROADCAST_ADDR) && ACK_RECEIVED;
 a4e:	80 e0       	ldi	r24, 0x00	; 0
  return false;
}
 a50:	cf 91       	pop	r28
 a52:	08 95       	ret

00000a54 <_ZN5RFM694sendEhPKvhb>:
  }
  return false;
}

void RFM69::send(byte toAddress, const void* buffer, byte bufferSize, bool requestACK)
{
 a54:	cf 92       	push	r12
 a56:	df 92       	push	r13
 a58:	ef 92       	push	r14
 a5a:	ff 92       	push	r15
 a5c:	0f 93       	push	r16
 a5e:	1f 93       	push	r17
 a60:	cf 93       	push	r28
 a62:	df 93       	push	r29
 a64:	ec 01       	movw	r28, r24
 a66:	16 2f       	mov	r17, r22
 a68:	6a 01       	movw	r12, r20
 a6a:	f2 2e       	mov	r15, r18
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
 a6c:	6d e3       	ldi	r22, 0x3D	; 61
 a6e:	e0 dc       	rcall	.-1600   	; 0x430 <_ZN5RFM697readRegEh>
 a70:	48 2f       	mov	r20, r24
 a72:	44 60       	ori	r20, 0x04	; 4
 a74:	6d e3       	ldi	r22, 0x3D	; 61
 a76:	ce 01       	movw	r24, r28
 a78:	e9 dc       	rcall	.-1582   	; 0x44c <_ZN5RFM698writeRegEhh>
  while (!canSend()) receiveDone();
 a7a:	02 c0       	rjmp	.+4      	; 0xa80 <_ZN5RFM694sendEhPKvhb+0x2c>
 a7c:	ce 01       	movw	r24, r28
 a7e:	b2 df       	rcall	.-156    	; 0x9e4 <_ZN5RFM6911receiveDoneEv>
 a80:	ce 01       	movw	r24, r28
 a82:	8f dd       	rcall	.-1250   	; 0x5a2 <_ZN5RFM697canSendEv>
 a84:	88 23       	and	r24, r24
 a86:	d1 f3       	breq	.-12     	; 0xa7c <_ZN5RFM694sendEhPKvhb+0x28>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
 a88:	e1 2c       	mov	r14, r1
 a8a:	2f 2d       	mov	r18, r15
 a8c:	a6 01       	movw	r20, r12
 a8e:	61 2f       	mov	r22, r17
 a90:	ce 01       	movw	r24, r28
 a92:	4c df       	rcall	.-360    	; 0x92c <_ZN5RFM699sendFrameEhPKvhbb>
}
 a94:	df 91       	pop	r29
 a96:	cf 91       	pop	r28
 a98:	1f 91       	pop	r17
 a9a:	0f 91       	pop	r16
 a9c:	ff 90       	pop	r15
 a9e:	ef 90       	pop	r14
 aa0:	df 90       	pop	r13
 aa2:	cf 90       	pop	r12
 aa4:	08 95       	ret

00000aa6 <_ZN5RFM6913sendWithRetryEhPKvhhh>:
// and it handles all the ACK requesting/retrying for you :)
// The only twist is that you have to manually listen to ACK requests on the other side and send back the ACKs
// The reason for the semi-automaton is that the lib is ingterrupt driven and
// requires user action to read the received data and decide what to do with it
// replies usually take only 5-8ms at 50kbps@915Mhz
bool RFM69::sendWithRetry(byte toAddress, const void* buffer, byte bufferSize, byte retries, byte retryWaitTime) {
 aa6:	3f 92       	push	r3
 aa8:	4f 92       	push	r4
 aaa:	5f 92       	push	r5
 aac:	6f 92       	push	r6
 aae:	7f 92       	push	r7
 ab0:	8f 92       	push	r8
 ab2:	9f 92       	push	r9
 ab4:	af 92       	push	r10
 ab6:	bf 92       	push	r11
 ab8:	cf 92       	push	r12
 aba:	df 92       	push	r13
 abc:	ef 92       	push	r14
 abe:	ff 92       	push	r15
 ac0:	0f 93       	push	r16
 ac2:	1f 93       	push	r17
 ac4:	cf 93       	push	r28
 ac6:	df 93       	push	r29
 ac8:	ec 01       	movw	r28, r24
 aca:	16 2f       	mov	r17, r22
 acc:	5a 01       	movw	r10, r20
 ace:	92 2e       	mov	r9, r18
 ad0:	30 2e       	mov	r3, r16
  long sentTime;
  for (byte i=0; i<=retries; i++)
 ad2:	81 2c       	mov	r8, r1
  {
    send(toAddress, buffer, bufferSize, true);
    sentTime = millis();
    while (millis()-sentTime<retryWaitTime)
 ad4:	4e 2c       	mov	r4, r14
 ad6:	51 2c       	mov	r5, r1
 ad8:	61 2c       	mov	r6, r1
 ada:	71 2c       	mov	r7, r1
// replies usually take only 5-8ms at 50kbps@915Mhz
bool RFM69::sendWithRetry(byte toAddress, const void* buffer, byte bufferSize, byte retries, byte retryWaitTime) {
  long sentTime;
  for (byte i=0; i<=retries; i++)
  {
    send(toAddress, buffer, bufferSize, true);
 adc:	01 e0       	ldi	r16, 0x01	; 1
 ade:	29 2d       	mov	r18, r9
 ae0:	a5 01       	movw	r20, r10
 ae2:	61 2f       	mov	r22, r17
 ae4:	ce 01       	movw	r24, r28
 ae6:	b6 df       	rcall	.-148    	; 0xa54 <_ZN5RFM694sendEhPKvhb>
    sentTime = millis();
 ae8:	2b db       	rcall	.-2474   	; 0x140 <millis_get>
 aea:	6b 01       	movw	r12, r22
 aec:	7c 01       	movw	r14, r24
    while (millis()-sentTime<retryWaitTime)
 aee:	05 c0       	rjmp	.+10     	; 0xafa <_ZN5RFM6913sendWithRetryEhPKvhhh+0x54>
    {
      if (ACKReceived(toAddress))
 af0:	61 2f       	mov	r22, r17
 af2:	ce 01       	movw	r24, r28
 af4:	98 df       	rcall	.-208    	; 0xa26 <_ZN5RFM6911ACKReceivedEh>
 af6:	81 11       	cpse	r24, r1
 af8:	11 c0       	rjmp	.+34     	; 0xb1c <_ZN5RFM6913sendWithRetryEhPKvhhh+0x76>
  long sentTime;
  for (byte i=0; i<=retries; i++)
  {
    send(toAddress, buffer, bufferSize, true);
    sentTime = millis();
    while (millis()-sentTime<retryWaitTime)
 afa:	22 db       	rcall	.-2492   	; 0x140 <millis_get>
 afc:	dc 01       	movw	r26, r24
 afe:	cb 01       	movw	r24, r22
 b00:	8c 19       	sub	r24, r12
 b02:	9d 09       	sbc	r25, r13
 b04:	ae 09       	sbc	r26, r14
 b06:	bf 09       	sbc	r27, r15
 b08:	84 15       	cp	r24, r4
 b0a:	95 05       	cpc	r25, r5
 b0c:	a6 05       	cpc	r26, r6
 b0e:	b7 05       	cpc	r27, r7
 b10:	78 f3       	brcs	.-34     	; 0xaf0 <_ZN5RFM6913sendWithRetryEhPKvhhh+0x4a>
// The reason for the semi-automaton is that the lib is ingterrupt driven and
// requires user action to read the received data and decide what to do with it
// replies usually take only 5-8ms at 50kbps@915Mhz
bool RFM69::sendWithRetry(byte toAddress, const void* buffer, byte bufferSize, byte retries, byte retryWaitTime) {
  long sentTime;
  for (byte i=0; i<=retries; i++)
 b12:	83 94       	inc	r8
 b14:	38 14       	cp	r3, r8
 b16:	10 f7       	brcc	.-60     	; 0xadc <_ZN5RFM6913sendWithRetryEhPKvhhh+0x36>
        return true;
      }
    }
    //Serial.print(" RETRY#");Serial.println(i+1);
  }
  return false;
 b18:	80 e0       	ldi	r24, 0x00	; 0
 b1a:	01 c0       	rjmp	.+2      	; 0xb1e <_ZN5RFM6913sendWithRetryEhPKvhhh+0x78>
    while (millis()-sentTime<retryWaitTime)
    {
      if (ACKReceived(toAddress))
      {
        //Serial.print(" ~ms:");Serial.print(millis()-sentTime);
        return true;
 b1c:	81 e0       	ldi	r24, 0x01	; 1
      }
    }
    //Serial.print(" RETRY#");Serial.println(i+1);
  }
  return false;
}
 b1e:	df 91       	pop	r29
 b20:	cf 91       	pop	r28
 b22:	1f 91       	pop	r17
 b24:	0f 91       	pop	r16
 b26:	ff 90       	pop	r15
 b28:	ef 90       	pop	r14
 b2a:	df 90       	pop	r13
 b2c:	cf 90       	pop	r12
 b2e:	bf 90       	pop	r11
 b30:	af 90       	pop	r10
 b32:	9f 90       	pop	r9
 b34:	8f 90       	pop	r8
 b36:	7f 90       	pop	r7
 b38:	6f 90       	pop	r6
 b3a:	5f 90       	pop	r5
 b3c:	4f 90       	pop	r4
 b3e:	3f 90       	pop	r3
 b40:	08 95       	ret

00000b42 <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
 b42:	1f 92       	push	r1
 b44:	0f 92       	push	r0
 b46:	0f b6       	in	r0, 0x3f	; 63
 b48:	0f 92       	push	r0
 b4a:	11 24       	eor	r1, r1
 b4c:	2f 93       	push	r18
 b4e:	3f 93       	push	r19
 b50:	4f 93       	push	r20
 b52:	5f 93       	push	r21
 b54:	8f 93       	push	r24
 b56:	9f 93       	push	r25
 b58:	ef 93       	push	r30
 b5a:	ff 93       	push	r31
 b5c:	40 91 c0 00 	lds	r20, 0x00C0
 b60:	50 91 c6 00 	lds	r21, 0x00C6
 b64:	48 71       	andi	r20, 0x18	; 24
 b66:	80 91 b7 01 	lds	r24, 0x01B7
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	01 96       	adiw	r24, 0x01	; 1
 b6e:	8f 77       	andi	r24, 0x7F	; 127
 b70:	99 27       	eor	r25, r25
 b72:	20 91 b6 01 	lds	r18, 0x01B6
 b76:	30 e0       	ldi	r19, 0x00	; 0
 b78:	28 17       	cp	r18, r24
 b7a:	39 07       	cpc	r19, r25
 b7c:	39 f0       	breq	.+14     	; 0xb8c <__vector_18+0x4a>
 b7e:	80 93 b7 01 	sts	0x01B7, r24
 b82:	fc 01       	movw	r30, r24
 b84:	e6 54       	subi	r30, 0x46	; 70
 b86:	fe 4f       	sbci	r31, 0xFE	; 254
 b88:	50 83       	st	Z, r21
 b8a:	01 c0       	rjmp	.+2      	; 0xb8e <__vector_18+0x4c>
 b8c:	42 e0       	ldi	r20, 0x02	; 2
 b8e:	40 93 b5 01 	sts	0x01B5, r20
 b92:	ff 91       	pop	r31
 b94:	ef 91       	pop	r30
 b96:	9f 91       	pop	r25
 b98:	8f 91       	pop	r24
 b9a:	5f 91       	pop	r21
 b9c:	4f 91       	pop	r20
 b9e:	3f 91       	pop	r19
 ba0:	2f 91       	pop	r18
 ba2:	0f 90       	pop	r0
 ba4:	0f be       	out	0x3f, r0	; 63
 ba6:	0f 90       	pop	r0
 ba8:	1f 90       	pop	r1
 baa:	18 95       	reti

00000bac <__vector_19>:
 bac:	1f 92       	push	r1
 bae:	0f 92       	push	r0
 bb0:	0f b6       	in	r0, 0x3f	; 63
 bb2:	0f 92       	push	r0
 bb4:	11 24       	eor	r1, r1
 bb6:	8f 93       	push	r24
 bb8:	9f 93       	push	r25
 bba:	ef 93       	push	r30
 bbc:	ff 93       	push	r31
 bbe:	90 91 b9 01 	lds	r25, 0x01B9
 bc2:	80 91 b8 01 	lds	r24, 0x01B8
 bc6:	98 17       	cp	r25, r24
 bc8:	79 f0       	breq	.+30     	; 0xbe8 <__vector_19+0x3c>
 bca:	80 91 b8 01 	lds	r24, 0x01B8
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	01 96       	adiw	r24, 0x01	; 1
 bd2:	8f 77       	andi	r24, 0x7F	; 127
 bd4:	99 27       	eor	r25, r25
 bd6:	80 93 b8 01 	sts	0x01B8, r24
 bda:	fc 01       	movw	r30, r24
 bdc:	e6 5c       	subi	r30, 0xC6	; 198
 bde:	fd 4f       	sbci	r31, 0xFD	; 253
 be0:	80 81       	ld	r24, Z
 be2:	80 93 c6 00 	sts	0x00C6, r24
 be6:	05 c0       	rjmp	.+10     	; 0xbf2 <__vector_19+0x46>
 be8:	e1 ec       	ldi	r30, 0xC1	; 193
 bea:	f0 e0       	ldi	r31, 0x00	; 0
 bec:	80 81       	ld	r24, Z
 bee:	8f 7d       	andi	r24, 0xDF	; 223
 bf0:	80 83       	st	Z, r24
 bf2:	ff 91       	pop	r31
 bf4:	ef 91       	pop	r30
 bf6:	9f 91       	pop	r25
 bf8:	8f 91       	pop	r24
 bfa:	0f 90       	pop	r0
 bfc:	0f be       	out	0x3f, r0	; 63
 bfe:	0f 90       	pop	r0
 c00:	1f 90       	pop	r1
 c02:	18 95       	reti

00000c04 <uart0_init>:
 c04:	10 92 b9 01 	sts	0x01B9, r1
 c08:	10 92 b8 01 	sts	0x01B8, r1
 c0c:	10 92 b7 01 	sts	0x01B7, r1
 c10:	10 92 b6 01 	sts	0x01B6, r1
 c14:	99 23       	and	r25, r25
 c16:	24 f4       	brge	.+8      	; 0xc20 <uart0_init+0x1c>
 c18:	22 e0       	ldi	r18, 0x02	; 2
 c1a:	20 93 c0 00 	sts	0x00C0, r18
 c1e:	9f 77       	andi	r25, 0x7F	; 127
 c20:	90 93 c5 00 	sts	0x00C5, r25
 c24:	80 93 c4 00 	sts	0x00C4, r24
 c28:	88 e9       	ldi	r24, 0x98	; 152
 c2a:	80 93 c1 00 	sts	0x00C1, r24
 c2e:	86 e0       	ldi	r24, 0x06	; 6
 c30:	80 93 c2 00 	sts	0x00C2, r24
 c34:	08 95       	ret

00000c36 <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
 c36:	60 91 b9 01 	lds	r22, 0x01B9
 c3a:	70 e0       	ldi	r23, 0x00	; 0
 c3c:	6f 5f       	subi	r22, 0xFF	; 255
 c3e:	7f 4f       	sbci	r23, 0xFF	; 255
 c40:	6f 77       	andi	r22, 0x7F	; 127
 c42:	77 27       	eor	r23, r23
 c44:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
 c46:	20 91 b8 01 	lds	r18, 0x01B8
 c4a:	30 e0       	ldi	r19, 0x00	; 0
 c4c:	24 17       	cp	r18, r20
 c4e:	35 07       	cpc	r19, r21
 c50:	d1 f3       	breq	.-12     	; 0xc46 <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
 c52:	fb 01       	movw	r30, r22
 c54:	e6 5c       	subi	r30, 0xC6	; 198
 c56:	fd 4f       	sbci	r31, 0xFD	; 253
 c58:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
 c5a:	60 93 b9 01 	sts	0x01B9, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
 c5e:	e1 ec       	ldi	r30, 0xC1	; 193
 c60:	f0 e0       	ldi	r31, 0x00	; 0
 c62:	80 81       	ld	r24, Z
 c64:	80 62       	ori	r24, 0x20	; 32
 c66:	80 83       	st	Z, r24
 c68:	08 95       	ret

00000c6a <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
 c6a:	cf 93       	push	r28
 c6c:	df 93       	push	r29
 c6e:	ec 01       	movw	r28, r24
	while (*s) {
 c70:	88 81       	ld	r24, Y
 c72:	88 23       	and	r24, r24
 c74:	29 f0       	breq	.+10     	; 0xc80 <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
 c76:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
 c78:	de df       	rcall	.-68     	; 0xc36 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
 c7a:	89 91       	ld	r24, Y+
 c7c:	81 11       	cpse	r24, r1
 c7e:	fc cf       	rjmp	.-8      	; 0xc78 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
 c80:	df 91       	pop	r29
 c82:	cf 91       	pop	r28
 c84:	08 95       	ret

00000c86 <__tablejump2__>:
 c86:	ee 0f       	add	r30, r30
 c88:	ff 1f       	adc	r31, r31

00000c8a <__tablejump__>:
 c8a:	05 90       	lpm	r0, Z+
 c8c:	f4 91       	lpm	r31, Z
 c8e:	e0 2d       	mov	r30, r0
 c90:	09 94       	ijmp

00000c92 <_exit>:
 c92:	f8 94       	cli

00000c94 <__stop_program>:
 c94:	ff cf       	rjmp	.-2      	; 0xc94 <__stop_program>
