
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001aea  00001b7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017c  0080011a  0080011a  00001b98  2**0
                  ALLOC
  3 .stab         00000d08  00000000  00000000  00001b98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000272  00000000  00000000  000028a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002b12  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003c0  00000000  00000000  00002b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a53  00000000  00000000  00002f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000126f  00000000  00000000  00006954  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000265e  00000000  00000000  00007bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000924  00000000  00000000  0000a224  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e4d  00000000  00000000  0000ab48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022d8  00000000  00000000  0000b995  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000388  00000000  00000000  0000dc6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	eb c2       	rjmp	.+1494   	; 0x5d8 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__vector_1>
       8:	03 c3       	rjmp	.+1542   	; 0x610 <__bad_interrupt>
       a:	00 00       	nop
       c:	01 c3       	rjmp	.+1538   	; 0x610 <__bad_interrupt>
       e:	00 00       	nop
      10:	ff c2       	rjmp	.+1534   	; 0x610 <__bad_interrupt>
      12:	00 00       	nop
      14:	fd c2       	rjmp	.+1530   	; 0x610 <__bad_interrupt>
      16:	00 00       	nop
      18:	fb c2       	rjmp	.+1526   	; 0x610 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	57 c7       	rjmp	.+3758   	; 0xecc <__vector_7>
      1e:	00 00       	nop
      20:	f7 c2       	rjmp	.+1518   	; 0x610 <__bad_interrupt>
      22:	00 00       	nop
      24:	f5 c2       	rjmp	.+1514   	; 0x610 <__bad_interrupt>
      26:	00 00       	nop
      28:	f3 c2       	rjmp	.+1510   	; 0x610 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f1 c2       	rjmp	.+1506   	; 0x610 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ef c2       	rjmp	.+1502   	; 0x610 <__bad_interrupt>
      32:	00 00       	nop
      34:	ed c2       	rjmp	.+1498   	; 0x610 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c3       	rjmp	.+1770   	; 0x724 <__vector_14>
      3a:	00 00       	nop
      3c:	e9 c2       	rjmp	.+1490   	; 0x610 <__bad_interrupt>
      3e:	00 00       	nop
      40:	e7 c2       	rjmp	.+1486   	; 0x610 <__bad_interrupt>
      42:	00 00       	nop
      44:	e5 c2       	rjmp	.+1482   	; 0x610 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <__vector_18>
      4c:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__vector_19>
      50:	df c2       	rjmp	.+1470   	; 0x610 <__bad_interrupt>
      52:	00 00       	nop
      54:	dd c2       	rjmp	.+1466   	; 0x610 <__bad_interrupt>
      56:	00 00       	nop
      58:	db c2       	rjmp	.+1462   	; 0x610 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d9 c2       	rjmp	.+1458   	; 0x610 <__bad_interrupt>
      5e:	00 00       	nop
      60:	d7 c2       	rjmp	.+1454   	; 0x610 <__bad_interrupt>
      62:	00 00       	nop
      64:	d5 c2       	rjmp	.+1450   	; 0x610 <__bad_interrupt>
	...

00000068 <_ZL16icon_led_numbers>:
      68:	0c 0b 0a 0f 0e 0d 07 08 09 02 01 00                 ............

00000074 <_ZL22sound_pattern_doorbell>:
      74:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      84:	b0 04 00 00 f4 01 00 00 00 00 00 00 e8 03 00 00     ................
      94:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      a4:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000000b4 <_ZL19sound_pattern_phone>:
      b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     104:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     114:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     124:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     134:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     144:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     154:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     164:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     174:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     184:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     194:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     1a4:	00 00 00 00 e8 03 00 00 e8 03 00 00 28 00 00 00     ............(...
     1b4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1c4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1d4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1e4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1f4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     204:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     214:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     224:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     234:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     244:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     254:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     264:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     274:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     284:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     294:	ee 02 00 00 28 00 00 00 00 00 00 00 e8 03 00 00     ....(...........
     2a4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     304:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     314:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     324:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     334:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     344:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     354:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     364:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     374:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     384:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     394:	00 00 00 00 e8 03 00 00 00 00 00 00 00 00 00 00     ................
	...

000003b4 <_ZL18sound_pattern_fire>:
     3b4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3c4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3d4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3e4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3f4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     404:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     414:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     424:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...

00000434 <_ZL18sound_pattern_help>:
     434:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     444:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     454:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     464:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     474:	00 00 00 00 e8 03 00 00 1c 07 00 00 c8 00 00 00     ................
     484:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     494:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     4a4:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     4b4:	a5 05 00 00 c8 00 00 00 00 00 00 00 e8 03 00 00     ................
	...

000004cc <_ZL13flash_pattern>:
     4cc:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4dc:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4ec:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4fc:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     50c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     51c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     52c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     53c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     54c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     55c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     56c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     57c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     58c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     59c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     5ac:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     5bc:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...

000005cc <_ZL11icon_colors>:
     5cc:	3d f5 00 00 b8 f5 ff 00 00 ff ff 00                 =...........

000005d8 <__ctors_end>:
     5d8:	11 24       	eor	r1, r1
     5da:	1f be       	out	0x3f, r1	; 63
     5dc:	cf ef       	ldi	r28, 0xFF	; 255
     5de:	d8 e0       	ldi	r29, 0x08	; 8
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	cd bf       	out	0x3d, r28	; 61

000005e4 <__do_copy_data>:
     5e4:	11 e0       	ldi	r17, 0x01	; 1
     5e6:	a0 e0       	ldi	r26, 0x00	; 0
     5e8:	b1 e0       	ldi	r27, 0x01	; 1
     5ea:	ea ee       	ldi	r30, 0xEA	; 234
     5ec:	fa e1       	ldi	r31, 0x1A	; 26
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <__do_copy_data+0x10>
     5f0:	05 90       	lpm	r0, Z+
     5f2:	0d 92       	st	X+, r0
     5f4:	aa 31       	cpi	r26, 0x1A	; 26
     5f6:	b1 07       	cpc	r27, r17
     5f8:	d9 f7       	brne	.-10     	; 0x5f0 <__do_copy_data+0xc>

000005fa <__do_clear_bss>:
     5fa:	22 e0       	ldi	r18, 0x02	; 2
     5fc:	aa e1       	ldi	r26, 0x1A	; 26
     5fe:	b1 e0       	ldi	r27, 0x01	; 1
     600:	01 c0       	rjmp	.+2      	; 0x604 <.do_clear_bss_start>

00000602 <.do_clear_bss_loop>:
     602:	1d 92       	st	X+, r1

00000604 <.do_clear_bss_start>:
     604:	a6 39       	cpi	r26, 0x96	; 150
     606:	b2 07       	cpc	r27, r18
     608:	e1 f7       	brne	.-8      	; 0x602 <.do_clear_bss_loop>
     60a:	d1 d0       	rcall	.+418    	; 0x7ae <main>
     60c:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <_exit>

00000610 <__bad_interrupt>:
     610:	f7 cc       	rjmp	.-1554   	; 0x0 <__vectors>

00000612 <I2C_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
     612:	88 e4       	ldi	r24, 0x48	; 72
     614:	80 93 b8 00 	sts	0x00B8, r24
     618:	08 95       	ret

0000061a <I2C_start>:
     61a:	ec eb       	ldi	r30, 0xBC	; 188
     61c:	f0 e0       	ldi	r31, 0x00	; 0
     61e:	10 82       	st	Z, r1
     620:	94 ea       	ldi	r25, 0xA4	; 164
     622:	90 83       	st	Z, r25
     624:	90 81       	ld	r25, Z
     626:	99 23       	and	r25, r25
     628:	ec f7       	brge	.-6      	; 0x624 <I2C_start+0xa>
     62a:	90 91 b9 00 	lds	r25, 0x00B9
     62e:	98 7f       	andi	r25, 0xF8	; 248
     630:	98 30       	cpi	r25, 0x08	; 8
     632:	a1 f4       	brne	.+40     	; 0x65c <I2C_start+0x42>
     634:	80 93 bb 00 	sts	0x00BB, r24
     638:	84 e8       	ldi	r24, 0x84	; 132
     63a:	80 93 bc 00 	sts	0x00BC, r24
     63e:	ec eb       	ldi	r30, 0xBC	; 188
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	88 23       	and	r24, r24
     646:	ec f7       	brge	.-6      	; 0x642 <I2C_start+0x28>
     648:	90 91 b9 00 	lds	r25, 0x00B9
     64c:	98 7f       	andi	r25, 0xF8	; 248
     64e:	98 31       	cpi	r25, 0x18	; 24
     650:	39 f0       	breq	.+14     	; 0x660 <I2C_start+0x46>
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 34       	cpi	r25, 0x40	; 64
     656:	29 f4       	brne	.+10     	; 0x662 <I2C_start+0x48>
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	08 95       	ret
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	08 95       	ret
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	08 95       	ret

00000664 <I2C_write>:
     664:	80 93 bb 00 	sts	0x00BB, r24
     668:	84 e8       	ldi	r24, 0x84	; 132
     66a:	80 93 bc 00 	sts	0x00BC, r24
     66e:	ec eb       	ldi	r30, 0xBC	; 188
     670:	f0 e0       	ldi	r31, 0x00	; 0
     672:	80 81       	ld	r24, Z
     674:	88 23       	and	r24, r24
     676:	ec f7       	brge	.-6      	; 0x672 <I2C_write+0xe>
     678:	90 91 b9 00 	lds	r25, 0x00B9
     67c:	98 7f       	andi	r25, 0xF8	; 248
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	98 32       	cpi	r25, 0x28	; 40
     682:	09 f4       	brne	.+2      	; 0x686 <I2C_write+0x22>
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	08 95       	ret

00000688 <I2C_read_ack>:
     688:	84 ec       	ldi	r24, 0xC4	; 196
     68a:	80 93 bc 00 	sts	0x00BC, r24
     68e:	ec eb       	ldi	r30, 0xBC	; 188
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	88 23       	and	r24, r24
     696:	ec f7       	brge	.-6      	; 0x692 <I2C_read_ack+0xa>
     698:	80 91 bb 00 	lds	r24, 0x00BB
     69c:	08 95       	ret

0000069e <I2C_stop>:

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     69e:	84 e9       	ldi	r24, 0x94	; 148
     6a0:	80 93 bc 00 	sts	0x00BC, r24
     6a4:	08 95       	ret

000006a6 <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
     6a6:	82 e0       	ldi	r24, 0x02	; 2
     6a8:	84 bd       	out	0x24, r24	; 36
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	95 bd       	out	0x25, r25	; 37
     6ae:	80 93 6e 00 	sts	0x006E, r24
     6b2:	8a ef       	ldi	r24, 0xFA	; 250
     6b4:	87 bd       	out	0x27, r24	; 39
     6b6:	08 95       	ret

000006b8 <millis_get>:
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	8f b7       	in	r24, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	00 91 1a 01 	lds	r16, 0x011A
     6c4:	10 91 1b 01 	lds	r17, 0x011B
     6c8:	20 91 1c 01 	lds	r18, 0x011C
     6cc:	30 91 1d 01 	lds	r19, 0x011D
     6d0:	8f bf       	out	0x3f, r24	; 63
     6d2:	60 2f       	mov	r22, r16
     6d4:	71 2f       	mov	r23, r17
     6d6:	82 2f       	mov	r24, r18
     6d8:	93 2f       	mov	r25, r19
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	08 95       	ret

000006e0 <millis_resume>:
     6e0:	e4 e6       	ldi	r30, 0x64	; 100
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	8f 7d       	andi	r24, 0xDF	; 223
     6e8:	80 83       	st	Z, r24
     6ea:	ee e6       	ldi	r30, 0x6E	; 110
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	80 81       	ld	r24, Z
     6f0:	82 60       	ori	r24, 0x02	; 2
     6f2:	80 83       	st	Z, r24
     6f4:	08 95       	ret

000006f6 <millis_pause>:
     6f6:	ee e6       	ldi	r30, 0x6E	; 110
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8d 7f       	andi	r24, 0xFD	; 253
     6fe:	80 83       	st	Z, r24
     700:	e4 e6       	ldi	r30, 0x64	; 100
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	80 62       	ori	r24, 0x20	; 32
     708:	80 83       	st	Z, r24
     70a:	08 95       	ret

0000070c <millis_reset>:
     70c:	8f b7       	in	r24, 0x3f	; 63
     70e:	f8 94       	cli
     710:	10 92 1a 01 	sts	0x011A, r1
     714:	10 92 1b 01 	sts	0x011B, r1
     718:	10 92 1c 01 	sts	0x011C, r1
     71c:	10 92 1d 01 	sts	0x011D, r1
     720:	8f bf       	out	0x3f, r24	; 63
     722:	08 95       	ret

00000724 <__vector_14>:

ISR(ISR_VECT)
{
     724:	1f 92       	push	r1
     726:	0f 92       	push	r0
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	0f 92       	push	r0
     72c:	11 24       	eor	r1, r1
     72e:	8f 93       	push	r24
     730:	9f 93       	push	r25
     732:	af 93       	push	r26
     734:	bf 93       	push	r27
	++milliseconds;
     736:	80 91 1a 01 	lds	r24, 0x011A
     73a:	90 91 1b 01 	lds	r25, 0x011B
     73e:	a0 91 1c 01 	lds	r26, 0x011C
     742:	b0 91 1d 01 	lds	r27, 0x011D
     746:	01 96       	adiw	r24, 0x01	; 1
     748:	a1 1d       	adc	r26, r1
     74a:	b1 1d       	adc	r27, r1
     74c:	80 93 1a 01 	sts	0x011A, r24
     750:	90 93 1b 01 	sts	0x011B, r25
     754:	a0 93 1c 01 	sts	0x011C, r26
     758:	b0 93 1d 01 	sts	0x011D, r27
}
     75c:	bf 91       	pop	r27
     75e:	af 91       	pop	r26
     760:	9f 91       	pop	r25
     762:	8f 91       	pop	r24
     764:	0f 90       	pop	r0
     766:	0f be       	out	0x3f, r0	; 63
     768:	0f 90       	pop	r0
     76a:	1f 90       	pop	r1
     76c:	18 95       	reti

0000076e <_Z11timer2_initv>:

// Initialise library
void timer2_init()
{
	// Timer settings
	TCCR2A = _BV(WGM21); // prescaler 128
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22)|_BV(CS20);
     774:	85 e0       	ldi	r24, 0x05	; 5
     776:	80 93 b1 00 	sts	0x00B1, r24
	
	OCR2A = ((F_CPU / 128) / 1000);
     77a:	8d e7       	ldi	r24, 0x7D	; 125
     77c:	80 93 b3 00 	sts	0x00B3, r24
     780:	08 95       	ret

00000782 <_Z13timer2_resumev>:


// Turn on timer and resume interrupts
void timer2_resume()
{
	power_timer2_enable();
     782:	e4 e6       	ldi	r30, 0x64	; 100
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	80 81       	ld	r24, Z
     788:	8f 7b       	andi	r24, 0xBF	; 191
     78a:	80 83       	st	Z, r24
	TIMSK2 |= _BV(OCIE2A);
     78c:	e0 e7       	ldi	r30, 0x70	; 112
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	82 60       	ori	r24, 0x02	; 2
     794:	80 83       	st	Z, r24
     796:	08 95       	ret

00000798 <_Z12timer2_pausev>:
}

// Pause interrupts and turn off timer to save power
void timer2_pause()
{
	TIMSK2 &= ~_BV(OCIE2A);
     798:	e0 e7       	ldi	r30, 0x70	; 112
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	80 81       	ld	r24, Z
     79e:	8d 7f       	andi	r24, 0xFD	; 253
     7a0:	80 83       	st	Z, r24
	power_timer2_disable();
     7a2:	e4 e6       	ldi	r30, 0x64	; 100
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	80 64       	ori	r24, 0x40	; 64
     7aa:	80 83       	st	Z, r24
     7ac:	08 95       	ret

000007ae <main>:
	#include "tone.h"
};

		 
	
int main() {	
     7ae:	cf 93       	push	r28
     7b0:	df 93       	push	r29
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <main+0x6>
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
// disable ADC for less power 
	ADCSRA &= ~_BV(ADEN); // ADC off 
     7b8:	ea e7       	ldi	r30, 0x7A	; 122
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	80 81       	ld	r24, Z
     7be:	8f 77       	andi	r24, 0x7F	; 127
     7c0:	80 83       	st	Z, r24
	sei();
     7c2:	78 94       	sei
	

			/* Initialize MILLIS */
	        millis_init();
     7c4:	70 df       	rcall	.-288    	; 0x6a6 <millis_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7c6:	2f ef       	ldi	r18, 0xFF	; 255
     7c8:	83 ed       	ldi	r24, 0xD3	; 211
     7ca:	90 e3       	ldi	r25, 0x30	; 48
     7cc:	21 50       	subi	r18, 0x01	; 1
     7ce:	80 40       	sbci	r24, 0x00	; 0
     7d0:	90 40       	sbci	r25, 0x00	; 0
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <main+0x1e>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <main+0x28>
     7d6:	00 00       	nop
			_delay_ms(1000);
			/* Initialize MILLIS */

			/* Initialize TONE */						
			tone_init();	
     7d8:	0e 94 47 0c 	call	0x188e	; 0x188e <tone_init>
			noTone();	
     7dc:	0e 94 49 0c 	call	0x1892	; 0x1892 <noTone>
			/* Initialize TONE */						
						
						
			/* Initialize TIMER 2 */
			timer2_init();
     7e0:	c6 df       	rcall	.-116    	; 0x76e <_Z11timer2_initv>
			timer2_pause();
     7e2:	da df       	rcall	.-76     	; 0x798 <_Z12timer2_pausev>
			/* Initialize UART */
			#ifdef DEBUG_SERIAL
			uart_init( ((F_CPU)/((UART_BAUD_RATE)*16l)-1)) ;
			_delay_ms(1000);
			#else
			power_usart0_disable();
     7e4:	e4 e6       	ldi	r30, 0x64	; 100
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	80 81       	ld	r24, Z
     7ea:	82 60       	ori	r24, 0x02	; 2
     7ec:	80 83       	st	Z, r24
			#endif
			/* Initialize UART */
		
			/* Initialize I2C */
			I2C_init();	
     7ee:	11 df       	rcall	.-478    	; 0x612 <I2C_init>
			/* Initialize I2C */
			
			/* Initialize PCA9634 */
			pca9635_init();
     7f0:	e0 d3       	rcall	.+1984   	; 0xfb2 <pca9635_init>
     7f2:	13 e0       	ldi	r17, 0x03	; 3
			
			// blink 3 times fast
			for (byte i = 0; i <= 2; ++i){
			pca9635_set_all_led_pwm(255);
     7f4:	8f ef       	ldi	r24, 0xFF	; 255
     7f6:	23 d4       	rcall	.+2118   	; 0x103e <pca9635_set_all_led_pwm>
     7f8:	ef ef       	ldi	r30, 0xFF	; 255
     7fa:	f1 ee       	ldi	r31, 0xE1	; 225
     7fc:	24 e0       	ldi	r18, 0x04	; 4
     7fe:	e1 50       	subi	r30, 0x01	; 1
     800:	f0 40       	sbci	r31, 0x00	; 0
     802:	20 40       	sbci	r18, 0x00	; 0
     804:	e1 f7       	brne	.-8      	; 0x7fe <main+0x50>
     806:	00 c0       	rjmp	.+0      	; 0x808 <main+0x5a>
     808:	00 00       	nop
			_delay_ms(100);
			pca9635_set_all_led_pwm(0);
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	18 d4       	rcall	.+2096   	; 0x103e <pca9635_set_all_led_pwm>
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	91 ee       	ldi	r25, 0xE1	; 225
     812:	e4 e0       	ldi	r30, 0x04	; 4
     814:	81 50       	subi	r24, 0x01	; 1
     816:	90 40       	sbci	r25, 0x00	; 0
     818:	e0 40       	sbci	r30, 0x00	; 0
     81a:	e1 f7       	brne	.-8      	; 0x814 <main+0x66>
     81c:	00 c0       	rjmp	.+0      	; 0x81e <main+0x70>
     81e:	00 00       	nop
     820:	11 50       	subi	r17, 0x01	; 1
			
			/* Initialize PCA9634 */
			pca9635_init();
			
			// blink 3 times fast
			for (byte i = 0; i <= 2; ++i){
     822:	41 f7       	brne	.-48     	; 0x7f4 <main+0x46>
			
			/* Initialize PCA9634 */
			
		
			// node id, rfband, group id
			rf12_initialize(2, RF12_868MHZ, 14);
     824:	4e e0       	ldi	r20, 0x0E	; 14
     826:	62 e0       	ldi	r22, 0x02	; 2
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	49 d6       	rcall	.+3218   	; 0x14be <_Z15rf12_initializehhh>
			// see http://tools.jeelabs.org/rfm12b
		


			deep_sleep_ok = 1; // put device in deep sleep after initializing
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	80 93 34 01 	sts	0x0134, r24
			_delay_ms(1000);
			#endif
			
			// initialised
			
				pca9635_set_led_pwm(1, 255);
     832:	6f ef       	ldi	r22, 0xFF	; 255
     834:	f3 d3       	rcall	.+2022   	; 0x101c <pca9635_set_led_pwm>
     836:	ff ef       	ldi	r31, 0xFF	; 255
     838:	27 e8       	ldi	r18, 0x87	; 135
     83a:	83 e1       	ldi	r24, 0x13	; 19
     83c:	f1 50       	subi	r31, 0x01	; 1
     83e:	20 40       	sbci	r18, 0x00	; 0
     840:	80 40       	sbci	r24, 0x00	; 0
     842:	e1 f7       	brne	.-8      	; 0x83c <main+0x8e>
     844:	00 c0       	rjmp	.+0      	; 0x846 <main+0x98>
     846:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(8, 255);
     848:	6f ef       	ldi	r22, 0xFF	; 255
     84a:	88 e0       	ldi	r24, 0x08	; 8
     84c:	e7 d3       	rcall	.+1998   	; 0x101c <pca9635_set_led_pwm>
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	e7 e8       	ldi	r30, 0x87	; 135
     852:	f3 e1       	ldi	r31, 0x13	; 19
     854:	91 50       	subi	r25, 0x01	; 1
     856:	e0 40       	sbci	r30, 0x00	; 0
     858:	f0 40       	sbci	r31, 0x00	; 0
     85a:	e1 f7       	brne	.-8      	; 0x854 <main+0xa6>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <main+0xb0>
     85e:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(11, 255);
     860:	6f ef       	ldi	r22, 0xFF	; 255
     862:	8b e0       	ldi	r24, 0x0B	; 11
     864:	db d3       	rcall	.+1974   	; 0x101c <pca9635_set_led_pwm>
     866:	2f ef       	ldi	r18, 0xFF	; 255
     868:	87 e8       	ldi	r24, 0x87	; 135
     86a:	93 e1       	ldi	r25, 0x13	; 19
     86c:	21 50       	subi	r18, 0x01	; 1
     86e:	80 40       	sbci	r24, 0x00	; 0
     870:	90 40       	sbci	r25, 0x00	; 0
     872:	e1 f7       	brne	.-8      	; 0x86c <main+0xbe>
     874:	00 c0       	rjmp	.+0      	; 0x876 <main+0xc8>
     876:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(14, 255);
     878:	6f ef       	ldi	r22, 0xFF	; 255
     87a:	8e e0       	ldi	r24, 0x0E	; 14
     87c:	cf d3       	rcall	.+1950   	; 0x101c <pca9635_set_led_pwm>
     87e:	ef ef       	ldi	r30, 0xFF	; 255
     880:	ff e0       	ldi	r31, 0x0F	; 15
     882:	27 e2       	ldi	r18, 0x27	; 39
     884:	e1 50       	subi	r30, 0x01	; 1
     886:	f0 40       	sbci	r31, 0x00	; 0
     888:	20 40       	sbci	r18, 0x00	; 0
     88a:	e1 f7       	brne	.-8      	; 0x884 <main+0xd6>
     88c:	00 c0       	rjmp	.+0      	; 0x88e <main+0xe0>
     88e:	00 00       	nop
				_delay_ms(800);
				pca9635_set_all_led_pwm(0);
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	d5 d3       	rcall	.+1962   	; 0x103e <pca9635_set_all_led_pwm>
				pca9635_set_sleep(1);
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	e3 d3       	rcall	.+1990   	; 0x105e <pca9635_set_sleep>
				rf12_sendWait(1); // don't power down too soon
			}
			

		// only react to packets with first byte 0x99
		if(rf12_data[0] == 0x99) { // 153
     898:	0f 2e       	mov	r0, r31
     89a:	fe e3       	ldi	r31, 0x3E	; 62
     89c:	ef 2e       	mov	r14, r31
     89e:	f1 e0       	ldi	r31, 0x01	; 1
     8a0:	ff 2e       	mov	r15, r31
     8a2:	f0 2d       	mov	r31, r0
		// process incoming data here
								
			
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[1]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     8a4:	0f 2e       	mov	r0, r31
     8a6:	ff e3       	ldi	r31, 0x3F	; 63
     8a8:	6f 2e       	mov	r6, r31
     8aa:	f1 e0       	ldi	r31, 0x01	; 1
     8ac:	7f 2e       	mov	r7, r31
     8ae:	f0 2d       	mov	r31, r0
										 
							
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     8b0:	a1 2c       	mov	r10, r1
     8b2:	b1 2c       	mov	r11, r1
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     8b4:	a9 82       	std	Y+1, r10	; 0x01
     8b6:	ba 82       	std	Y+2, r11	; 0x02
							// Geen alarm actief
										 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     8b8:	22 24       	eor	r2, r2
     8ba:	23 94       	inc	r2
				
				
	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
		
	if (rf12_recvDone()) { // a packet has been received
     8bc:	27 d4       	rcall	.+2126   	; 0x110c <_Z13rf12_recvDonev>
     8be:	88 23       	and	r24, r24
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <main+0x116>
     8c2:	c6 c0       	rjmp	.+396    	; 0xa50 <__stack+0x151>
		if(rf12_crc == 0){ //  CRC of the received packet, zero indicates correct reception.
     8c4:	80 91 82 01 	lds	r24, 0x0182
     8c8:	90 91 83 01 	lds	r25, 0x0183
     8cc:	89 2b       	or	r24, r25
     8ce:	b1 f7       	brne	.-20     	; 0x8bc <main+0x10e>


			if (RF12_WANTS_ACK) {
     8d0:	ec e3       	ldi	r30, 0x3C	; 60
     8d2:	f1 e0       	ldi	r31, 0x01	; 1
     8d4:	80 81       	ld	r24, Z
     8d6:	85 ff       	sbrs	r24, 5
     8d8:	0f c0       	rjmp	.+30     	; 0x8f8 <main+0x14a>
     8da:	80 81       	ld	r24, Z
     8dc:	88 23       	and	r24, r24
     8de:	0c f0       	brlt	.+2      	; 0x8e2 <main+0x134>
     8e0:	d4 c0       	rjmp	.+424    	; 0xa8a <__stack+0x18b>
     8e2:	0a c0       	rjmp	.+20     	; 0x8f8 <main+0x14a>
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     8e4:	ec e3       	ldi	r30, 0x3C	; 60
     8e6:	f1 e0       	ldi	r31, 0x01	; 1
     8e8:	80 81       	ld	r24, Z
     8ea:	8f 71       	andi	r24, 0x1F	; 31
     8ec:	80 6c       	ori	r24, 0xC0	; 192
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	b5 01       	movw	r22, r10
     8f2:	62 d5       	rcall	.+2756   	; 0x13b8 <_Z14rf12_sendStarthPKvh>
				rf12_sendWait(1); // don't power down too soon
     8f4:	82 2d       	mov	r24, r2
     8f6:	6e d5       	rcall	.+2780   	; 0x13d4 <_Z13rf12_sendWaith>
			}
			

		// only react to packets with first byte 0x99
		if(rf12_data[0] == 0x99) { // 153
     8f8:	f7 01       	movw	r30, r14
     8fa:	80 81       	ld	r24, Z
     8fc:	89 39       	cpi	r24, 0x99	; 153
     8fe:	f1 f6       	brne	.-68     	; 0x8bc <main+0x10e>
		// process incoming data here
								
			
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[1]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     900:	f3 01       	movw	r30, r6
     902:	30 80       	ld	r3, Z

				if(data & 0x10){
     904:	33 2d       	mov	r19, r3
     906:	30 71       	andi	r19, 0x10	; 16
     908:	34 fe       	sbrs	r3, 4
     90a:	06 c0       	rjmp	.+12     	; 0x918 <__stack+0x19>
					 // start alarm	 
					 active_alarm = active_alarm | data; // 00001111 
     90c:	80 91 33 01 	lds	r24, 0x0133
     910:	83 29       	or	r24, r3
     912:	80 93 33 01 	sts	0x0133, r24
     916:	07 c0       	rjmp	.+14     	; 0x926 <__stack+0x27>
					 
				 }else{
					 // stop alarm
					 active_alarm =  active_alarm & (~data); /* invert data, compare with active alarm array to clear the right alarm bit */		 
     918:	83 2d       	mov	r24, r3
     91a:	80 95       	com	r24
     91c:	90 91 33 01 	lds	r25, 0x0133
     920:	89 23       	and	r24, r25
     922:	80 93 33 01 	sts	0x0133, r24
				 }
				 
				////////////////		Fill alarm array		 ////////////////				 
				
			 // IS ER EEN ALARM ACTIEF in array active_alarm?
				 if(active_alarm & 0x0F){
     926:	20 91 33 01 	lds	r18, 0x0133
     92a:	82 2f       	mov	r24, r18
     92c:	8f 70       	andi	r24, 0x0F	; 15
     92e:	09 f4       	brne	.+2      	; 0x932 <__stack+0x33>
     930:	86 c0       	rjmp	.+268    	; 0xa3e <__stack+0x13f>
				  
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
     932:	80 91 2f 01 	lds	r24, 0x012F
     936:	90 91 30 01 	lds	r25, 0x0130
     93a:	a0 91 31 01 	lds	r26, 0x0131
     93e:	b0 91 32 01 	lds	r27, 0x0132
     942:	89 2b       	or	r24, r25
     944:	8a 2b       	or	r24, r26
     946:	8b 2b       	or	r24, r27
     948:	c1 f5       	brne	.+112    	; 0x9ba <__stack+0xbb>
							// Geen alarm actief
										 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
     94a:	10 92 34 01 	sts	0x0134, r1
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     94e:	23 fd       	sbrc	r18, 3
     950:	0c c0       	rjmp	.+24     	; 0x96a <__stack+0x6b>
     952:	22 fd       	sbrc	r18, 2
     954:	06 c0       	rjmp	.+12     	; 0x962 <__stack+0x63>
     956:	21 fd       	sbrc	r18, 1
     958:	06 c0       	rjmp	.+12     	; 0x966 <__stack+0x67>
     95a:	20 ff       	sbrs	r18, 0
     95c:	0b c0       	rjmp	.+22     	; 0x974 <__stack+0x75>
     95e:	83 e0       	ldi	r24, 0x03	; 3
     960:	05 c0       	rjmp	.+10     	; 0x96c <__stack+0x6d>
							// Geen alarm actief
										 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     962:	82 2d       	mov	r24, r2
     964:	03 c0       	rjmp	.+6      	; 0x96c <__stack+0x6d>
     966:	82 e0       	ldi	r24, 0x02	; 2
     968:	01 c0       	rjmp	.+2      	; 0x96c <__stack+0x6d>
     96a:	80 e0       	ldi	r24, 0x00	; 0
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
									sound_current_alarm = i;
     96c:	80 93 2e 01 	sts	0x012E, r24
									icon_current_alarm  = i;
     970:	80 93 23 01 	sts	0x0123, r24
									break;
								} 
							 }

							// 2. timer 0 - millis starten
							millis_reset();
     974:	cb de       	rcall	.-618    	; 0x70c <millis_reset>
							millis_resume();
     976:	b4 de       	rcall	.-664    	; 0x6e0 <millis_resume>
							
							active_alarm_time = millis_get() + alarm_duration;
     978:	9f de       	rcall	.-706    	; 0x6b8 <millis_get>
     97a:	00 91 00 01 	lds	r16, 0x0100
     97e:	10 91 01 01 	lds	r17, 0x0101
     982:	20 91 02 01 	lds	r18, 0x0102
     986:	30 91 03 01 	lds	r19, 0x0103
     98a:	dc 01       	movw	r26, r24
     98c:	cb 01       	movw	r24, r22
     98e:	80 0f       	add	r24, r16
     990:	91 1f       	adc	r25, r17
     992:	a2 1f       	adc	r26, r18
     994:	b3 1f       	adc	r27, r19
     996:	80 93 2f 01 	sts	0x012F, r24
     99a:	90 93 30 01 	sts	0x0130, r25
     99e:	a0 93 31 01 	sts	0x0131, r26
     9a2:	b0 93 32 01 	sts	0x0132, r27
							
							// wake up pca9635!
							power_twi_enable();
     9a6:	e4 e6       	ldi	r30, 0x64	; 100
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	8f 77       	andi	r24, 0x7F	; 127
     9ae:	80 83       	st	Z, r24
							I2C_init();
     9b0:	30 de       	rcall	.-928    	; 0x612 <I2C_init>
							pca9635_set_sleep(0);
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	54 d3       	rcall	.+1704   	; 0x105e <pca9635_set_sleep>
				 
							// 3. timer 2 - alarm timer starten
							timer2_resume();							
     9b6:	e5 de       	rcall	.-566    	; 0x782 <_Z13timer2_resumev>
     9b8:	81 cf       	rjmp	.-254    	; 0x8bc <main+0x10e>
										 
							
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     9ba:	31 11       	cpse	r19, r1
     9bc:	6d c0       	rjmp	.+218    	; 0xa98 <__stack+0x199>
     9be:	0f 2e       	mov	r0, r31
     9c0:	fe e0       	ldi	r31, 0x0E	; 14
     9c2:	8f 2e       	mov	r8, r31
     9c4:	f1 e0       	ldi	r31, 0x01	; 1
     9c6:	9f 2e       	mov	r9, r31
     9c8:	f0 2d       	mov	r31, r0
     9ca:	65 01       	movw	r12, r10
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     9cc:	f4 01       	movw	r30, r8
     9ce:	21 91       	ld	r18, Z+
     9d0:	4f 01       	movw	r8, r30
     9d2:	23 21       	and	r18, r3
     9d4:	a1 f0       	breq	.+40     	; 0x9fe <__stack+0xff>
     9d6:	09 81       	ldd	r16, Y+1	; 0x01
     9d8:	1a 81       	ldd	r17, Y+2	; 0x02
											for (byte j = 0; j <= 2; j++){
												pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[i].lednr[j])), 0); // leds off!
     9da:	26 01       	movw	r4, r12
     9dc:	44 0c       	add	r4, r4
     9de:	55 1c       	adc	r5, r5
     9e0:	4c 0c       	add	r4, r12
     9e2:	5d 1c       	adc	r5, r13
     9e4:	f2 01       	movw	r30, r4
     9e6:	e0 0f       	add	r30, r16
     9e8:	f1 1f       	adc	r31, r17
     9ea:	e8 59       	subi	r30, 0x98	; 152
     9ec:	ff 4f       	sbci	r31, 0xFF	; 255
     9ee:	84 91       	lpm	r24, Z
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	14 d3       	rcall	.+1576   	; 0x101c <pca9635_set_led_pwm>
     9f4:	0f 5f       	subi	r16, 0xFF	; 255
     9f6:	1f 4f       	sbci	r17, 0xFF	; 255
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
											for (byte j = 0; j <= 2; j++){
     9f8:	03 30       	cpi	r16, 0x03	; 3
     9fa:	11 05       	cpc	r17, r1
     9fc:	99 f7       	brne	.-26     	; 0x9e4 <__stack+0xe5>
     9fe:	ff ef       	ldi	r31, 0xFF	; 255
     a00:	cf 1a       	sub	r12, r31
     a02:	df 0a       	sbc	r13, r31
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
     a04:	24 e0       	ldi	r18, 0x04	; 4
     a06:	c2 16       	cp	r12, r18
     a08:	d1 04       	cpc	r13, r1
     a0a:	01 f7       	brne	.-64     	; 0x9cc <__stack+0xcd>
     a0c:	57 cf       	rjmp	.-338    	; 0x8bc <main+0x10e>
							
							
								// Only reset active alarm timer if there is a new alarm...
								// 0x10 = activate bit 0x0F are bits of the alarms
								if( (data & 0x10) && (data & 0x0F)){
										active_alarm_time = millis_get() + alarm_duration;
     a0e:	54 de       	rcall	.-856    	; 0x6b8 <millis_get>
     a10:	00 91 00 01 	lds	r16, 0x0100
     a14:	10 91 01 01 	lds	r17, 0x0101
     a18:	20 91 02 01 	lds	r18, 0x0102
     a1c:	30 91 03 01 	lds	r19, 0x0103
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	80 0f       	add	r24, r16
     a26:	91 1f       	adc	r25, r17
     a28:	a2 1f       	adc	r26, r18
     a2a:	b3 1f       	adc	r27, r19
     a2c:	80 93 2f 01 	sts	0x012F, r24
     a30:	90 93 30 01 	sts	0x0130, r25
     a34:	a0 93 31 01 	sts	0x0131, r26
     a38:	b0 93 32 01 	sts	0x0132, r27
     a3c:	3f cf       	rjmp	.-386    	; 0x8bc <main+0x10e>
				 
		 

				}else{ //  if(active_alarm & 0x0F){ // IS ER EEN ALARM ACTIEF in active_alarm?
						// no active alarm in array	
						active_alarm_time = 0; // set alarm time to zero, timers will be disabled in next timer 2 interrupt
     a3e:	10 92 2f 01 	sts	0x012F, r1
     a42:	10 92 30 01 	sts	0x0130, r1
     a46:	10 92 31 01 	sts	0x0131, r1
     a4a:	10 92 32 01 	sts	0x0132, r1
     a4e:	36 cf       	rjmp	.-404    	; 0x8bc <main+0x10e>
			} // if(rf12_crc == 0){ 
									
		} else {
		
			// switch into idle mode until the next interrupt - Choose our preferred sleep mode:
			if(deep_sleep_ok == 1){
     a50:	80 91 34 01 	lds	r24, 0x0134
     a54:	81 30       	cpi	r24, 0x01	; 1
     a56:	71 f4       	brne	.+28     	; 0xa74 <__stack+0x175>
				set_sleep_mode(SLEEP_MODE_STANDBY); // if active alarm, go in pwr save mode to keep timer 2 running
     a58:	83 b7       	in	r24, 0x33	; 51
     a5a:	81 7f       	andi	r24, 0xF1	; 241
     a5c:	8c 60       	ori	r24, 0x0C	; 12
     a5e:	83 bf       	out	0x33, r24	; 51
				sleep_enable();
     a60:	83 b7       	in	r24, 0x33	; 51
     a62:	81 60       	ori	r24, 0x01	; 1
     a64:	83 bf       	out	0x33, r24	; 51
				// turn off brown-out enable in software
				 sleep_bod_disable();
     a66:	85 b7       	in	r24, 0x35	; 53
     a68:	80 66       	ori	r24, 0x60	; 96
     a6a:	85 bf       	out	0x35, r24	; 53
     a6c:	8f 7d       	andi	r24, 0xDF	; 223
     a6e:	85 bf       	out	0x35, r24	; 53
			 
				// Put the device to sleep:
				sleep_cpu();
     a70:	88 95       	sleep
     a72:	07 c0       	rjmp	.+14     	; 0xa82 <__stack+0x183>
			}else{
				// disable various adc + usart0
				set_sleep_mode(SLEEP_MODE_IDLE);
     a74:	83 b7       	in	r24, 0x33	; 51
     a76:	81 7f       	andi	r24, 0xF1	; 241
     a78:	83 bf       	out	0x33, r24	; 51
				sleep_enable();
     a7a:	83 b7       	in	r24, 0x33	; 51
     a7c:	81 60       	ori	r24, 0x01	; 1
     a7e:	83 bf       	out	0x33, r24	; 51
			
				// Put the device to sleep:
				sleep_cpu();
     a80:	88 95       	sleep
			}
	
			// Clear sleep enable (SE) bit:
			sleep_disable();
     a82:	83 b7       	in	r24, 0x33	; 51
     a84:	8e 7f       	andi	r24, 0xFE	; 254
     a86:	83 bf       	out	0x33, r24	; 51
     a88:	19 cf       	rjmp	.-462    	; 0x8bc <main+0x10e>
	if (rf12_recvDone()) { // a packet has been received
		if(rf12_crc == 0){ //  CRC of the received packet, zero indicates correct reception.


			if (RF12_WANTS_ACK) {
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     a8a:	ec e3       	ldi	r30, 0x3C	; 60
     a8c:	f1 e0       	ldi	r31, 0x01	; 1
     a8e:	80 81       	ld	r24, Z
     a90:	86 ff       	sbrs	r24, 6
     a92:	28 cf       	rjmp	.-432    	; 0x8e4 <main+0x136>
     a94:	80 e8       	ldi	r24, 0x80	; 128
     a96:	2b cf       	rjmp	.-426    	; 0x8ee <main+0x140>
								}
							
							
								// Only reset active alarm timer if there is a new alarm...
								// 0x10 = activate bit 0x0F are bits of the alarms
								if( (data & 0x10) && (data & 0x0F)){
     a98:	83 2d       	mov	r24, r3
     a9a:	8f 70       	andi	r24, 0x0F	; 15
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <__stack+0x1a1>
     a9e:	0e cf       	rjmp	.-484    	; 0x8bc <main+0x10e>
     aa0:	b6 cf       	rjmp	.-148    	; 0xa0e <__stack+0x10f>

00000aa2 <_Z9isr_soundv>:
	}
						
}


	void isr_sound(){
     aa2:	0f 93       	push	r16
     aa4:	1f 93       	push	r17
		
			// Stop note if necessary 
			if(_sound_note_time != 0){ // sound already playing?		
     aa6:	80 91 29 01 	lds	r24, 0x0129
     aaa:	90 91 2a 01 	lds	r25, 0x012A
     aae:	a0 91 2b 01 	lds	r26, 0x012B
     ab2:	b0 91 2c 01 	lds	r27, 0x012C
     ab6:	89 2b       	or	r24, r25
     ab8:	8a 2b       	or	r24, r26
     aba:	8b 2b       	or	r24, r27
     abc:	81 f0       	breq	.+32     	; 0xade <_Z9isr_soundv+0x3c>
				if(millis_get() < _sound_note_time ){ // Do we need to stop the current note?
     abe:	fc dd       	rcall	.-1032   	; 0x6b8 <millis_get>
     ac0:	00 91 29 01 	lds	r16, 0x0129
     ac4:	10 91 2a 01 	lds	r17, 0x012A
     ac8:	20 91 2b 01 	lds	r18, 0x012B
     acc:	30 91 2c 01 	lds	r19, 0x012C
     ad0:	60 17       	cp	r22, r16
     ad2:	71 07       	cpc	r23, r17
     ad4:	82 07       	cpc	r24, r18
     ad6:	93 07       	cpc	r25, r19
     ad8:	08 f4       	brcc	.+2      	; 0xadc <_Z9isr_soundv+0x3a>
     ada:	ef c0       	rjmp	.+478    	; 0xcba <_Z9isr_soundv+0x218>
					return; // dont stop current note
					
				}else{
					noTone(); // stop current note
     adc:	da d6       	rcall	.+3508   	; 0x1892 <noTone>
				}
	
			}
			
			// play next tone
			if(sound_current_alarm == 0 ){
     ade:	80 91 2e 01 	lds	r24, 0x012E
     ae2:	81 11       	cpse	r24, r1
     ae4:	2e c0       	rjmp	.+92     	; 0xb42 <_Z9isr_soundv+0xa0>
				tone(pgm_read_word(&(sound_pattern_doorbell[sound_current_step].frequency)), sound_alarm_volume); // freq, volume
     ae6:	e0 91 2d 01 	lds	r30, 0x012D
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	ee 0f       	add	r30, r30
     aee:	ff 1f       	adc	r31, r31
     af0:	ee 0f       	add	r30, r30
     af2:	ff 1f       	adc	r31, r31
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	ec 58       	subi	r30, 0x8C	; 140
     afa:	ff 4f       	sbci	r31, 0xFF	; 255
     afc:	65 91       	lpm	r22, Z+
     afe:	74 91       	lpm	r23, Z
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	4a e0       	ldi	r20, 0x0A	; 10
     b06:	d2 d6       	rcall	.+3492   	; 0x18ac <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_doorbell[sound_current_step].time)));
     b08:	d7 dd       	rcall	.-1106   	; 0x6b8 <millis_get>
     b0a:	e0 91 2d 01 	lds	r30, 0x012D
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	ee 0f       	add	r30, r30
     b12:	ff 1f       	adc	r31, r31
     b14:	ee 0f       	add	r30, r30
     b16:	ff 1f       	adc	r31, r31
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	e8 58       	subi	r30, 0x88	; 136
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	25 91       	lpm	r18, Z+
     b22:	34 91       	lpm	r19, Z
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	82 0f       	add	r24, r18
     b2a:	93 1f       	adc	r25, r19
     b2c:	a1 1d       	adc	r26, r1
     b2e:	b1 1d       	adc	r27, r1
     b30:	80 93 29 01 	sts	0x0129, r24
     b34:	90 93 2a 01 	sts	0x012A, r25
     b38:	a0 93 2b 01 	sts	0x012B, r26
     b3c:	b0 93 2c 01 	sts	0x012C, r27
     b40:	8f c0       	rjmp	.+286    	; 0xc60 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 1 ){
     b42:	81 30       	cpi	r24, 0x01	; 1
     b44:	71 f5       	brne	.+92     	; 0xba2 <_Z9isr_soundv+0x100>
				tone(pgm_read_word(&(sound_pattern_phone[sound_current_step].frequency)), sound_alarm_volume);
     b46:	e0 91 2d 01 	lds	r30, 0x012D
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	ee 0f       	add	r30, r30
     b4e:	ff 1f       	adc	r31, r31
     b50:	ee 0f       	add	r30, r30
     b52:	ff 1f       	adc	r31, r31
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	ec 54       	subi	r30, 0x4C	; 76
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	65 91       	lpm	r22, Z+
     b5e:	74 91       	lpm	r23, Z
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	4a e0       	ldi	r20, 0x0A	; 10
     b66:	a2 d6       	rcall	.+3396   	; 0x18ac <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_phone[sound_current_step].time)));
     b68:	a7 dd       	rcall	.-1202   	; 0x6b8 <millis_get>
     b6a:	e0 91 2d 01 	lds	r30, 0x012D
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	e8 54       	subi	r30, 0x48	; 72
     b7e:	ff 4f       	sbci	r31, 0xFF	; 255
     b80:	25 91       	lpm	r18, Z+
     b82:	34 91       	lpm	r19, Z
     b84:	dc 01       	movw	r26, r24
     b86:	cb 01       	movw	r24, r22
     b88:	82 0f       	add	r24, r18
     b8a:	93 1f       	adc	r25, r19
     b8c:	a1 1d       	adc	r26, r1
     b8e:	b1 1d       	adc	r27, r1
     b90:	80 93 29 01 	sts	0x0129, r24
     b94:	90 93 2a 01 	sts	0x012A, r25
     b98:	a0 93 2b 01 	sts	0x012B, r26
     b9c:	b0 93 2c 01 	sts	0x012C, r27
     ba0:	5f c0       	rjmp	.+190    	; 0xc60 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 2 ){
     ba2:	82 30       	cpi	r24, 0x02	; 2
     ba4:	71 f5       	brne	.+92     	; 0xc02 <_Z9isr_soundv+0x160>
				tone(pgm_read_word(&(sound_pattern_fire[sound_current_step].frequency)), sound_alarm_volume);
     ba6:	e0 91 2d 01 	lds	r30, 0x012D
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	ee 0f       	add	r30, r30
     bae:	ff 1f       	adc	r31, r31
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	ee 0f       	add	r30, r30
     bb6:	ff 1f       	adc	r31, r31
     bb8:	ec 54       	subi	r30, 0x4C	; 76
     bba:	fc 4f       	sbci	r31, 0xFC	; 252
     bbc:	65 91       	lpm	r22, Z+
     bbe:	74 91       	lpm	r23, Z
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	4a e0       	ldi	r20, 0x0A	; 10
     bc6:	72 d6       	rcall	.+3300   	; 0x18ac <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_fire[sound_current_step].time)));
     bc8:	77 dd       	rcall	.-1298   	; 0x6b8 <millis_get>
     bca:	e0 91 2d 01 	lds	r30, 0x012D
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	ee 0f       	add	r30, r30
     bd2:	ff 1f       	adc	r31, r31
     bd4:	ee 0f       	add	r30, r30
     bd6:	ff 1f       	adc	r31, r31
     bd8:	ee 0f       	add	r30, r30
     bda:	ff 1f       	adc	r31, r31
     bdc:	e8 54       	subi	r30, 0x48	; 72
     bde:	fc 4f       	sbci	r31, 0xFC	; 252
     be0:	25 91       	lpm	r18, Z+
     be2:	34 91       	lpm	r19, Z
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	82 0f       	add	r24, r18
     bea:	93 1f       	adc	r25, r19
     bec:	a1 1d       	adc	r26, r1
     bee:	b1 1d       	adc	r27, r1
     bf0:	80 93 29 01 	sts	0x0129, r24
     bf4:	90 93 2a 01 	sts	0x012A, r25
     bf8:	a0 93 2b 01 	sts	0x012B, r26
     bfc:	b0 93 2c 01 	sts	0x012C, r27
     c00:	2f c0       	rjmp	.+94     	; 0xc60 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 3 ){
     c02:	83 30       	cpi	r24, 0x03	; 3
     c04:	69 f5       	brne	.+90     	; 0xc60 <_Z9isr_soundv+0x1be>
				tone(pgm_read_word(&(sound_pattern_help[sound_current_step].frequency)),sound_alarm_volume);
     c06:	e0 91 2d 01 	lds	r30, 0x012D
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	ee 0f       	add	r30, r30
     c0e:	ff 1f       	adc	r31, r31
     c10:	ee 0f       	add	r30, r30
     c12:	ff 1f       	adc	r31, r31
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	ec 5c       	subi	r30, 0xCC	; 204
     c1a:	fb 4f       	sbci	r31, 0xFB	; 251
     c1c:	65 91       	lpm	r22, Z+
     c1e:	74 91       	lpm	r23, Z
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	4a e0       	ldi	r20, 0x0A	; 10
     c26:	42 d6       	rcall	.+3204   	; 0x18ac <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_help[sound_current_step].time)));
     c28:	47 dd       	rcall	.-1394   	; 0x6b8 <millis_get>
     c2a:	e0 91 2d 01 	lds	r30, 0x012D
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	ee 0f       	add	r30, r30
     c32:	ff 1f       	adc	r31, r31
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	e8 5c       	subi	r30, 0xC8	; 200
     c3e:	fb 4f       	sbci	r31, 0xFB	; 251
     c40:	25 91       	lpm	r18, Z+
     c42:	34 91       	lpm	r19, Z
     c44:	dc 01       	movw	r26, r24
     c46:	cb 01       	movw	r24, r22
     c48:	82 0f       	add	r24, r18
     c4a:	93 1f       	adc	r25, r19
     c4c:	a1 1d       	adc	r26, r1
     c4e:	b1 1d       	adc	r27, r1
     c50:	80 93 29 01 	sts	0x0129, r24
     c54:	90 93 2a 01 	sts	0x012A, r25
     c58:	a0 93 2b 01 	sts	0x012B, r26
     c5c:	b0 93 2c 01 	sts	0x012C, r27
			}
			
		//_sound_note_time = millis_get() + 1000;
			
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
     c60:	50 91 2d 01 	lds	r21, 0x012D
     c64:	40 91 2e 01 	lds	r20, 0x012E
     c68:	25 2f       	mov	r18, r21
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	e4 2f       	mov	r30, r20
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	ee 5e       	subi	r30, 0xEE	; 238
     c72:	fe 4f       	sbci	r31, 0xFE	; 254
     c74:	80 81       	ld	r24, Z
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	28 17       	cp	r18, r24
     c7c:	39 07       	cpc	r19, r25
     c7e:	d4 f0       	brlt	.+52     	; 0xcb4 <_Z9isr_soundv+0x212>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c80:	20 91 33 01 	lds	r18, 0x0133
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     c84:	92 2f       	mov	r25, r18
     c86:	9f 70       	andi	r25, 0x0F	; 15
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
     c8a:	4f 5f       	subi	r20, 0xFF	; 255
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     c8c:	44 30       	cpi	r20, 0x04	; 4
     c8e:	09 f4       	brne	.+2      	; 0xc92 <_Z9isr_soundv+0x1f0>
     c90:	43 2f       	mov	r20, r19
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c92:	e4 2f       	mov	r30, r20
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	e2 5f       	subi	r30, 0xF2	; 242
     c98:	fe 4f       	sbci	r31, 0xFE	; 254
     c9a:	80 81       	ld	r24, Z
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     c9c:	91 11       	cpse	r25, r1
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <_Z9isr_soundv+0x204>
     ca0:	40 93 2e 01 	sts	0x012E, r20
     ca4:	04 c0       	rjmp	.+8      	; 0xcae <_Z9isr_soundv+0x20c>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     ca6:	82 23       	and	r24, r18
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
     ca8:	81 f3       	breq	.-32     	; 0xc8a <_Z9isr_soundv+0x1e8>
     caa:	40 93 2e 01 	sts	0x012E, r20
						done = 1; // in case there is no active alarm anymore, just breakout while
					}

				} // while
				
				sound_current_step = 0; // reset sound_current_step to zero to start the next sound	
     cae:	10 92 2d 01 	sts	0x012D, r1
     cb2:	03 c0       	rjmp	.+6      	; 0xcba <_Z9isr_soundv+0x218>
				
			}else{
				// set sound_current_step plus one
				sound_current_step++;
     cb4:	5f 5f       	subi	r21, 0xFF	; 255
     cb6:	50 93 2d 01 	sts	0x012D, r21
			}
	
				
		} //void isr_sound()
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	08 95       	ret

00000cc0 <_Z15isr_light_flashv>:
		
	void isr_light_flash(){
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
			
		// Do we need to go to the next flash?
		if(_flash_time != 0){ // is there already a flash ?
     cc8:	80 91 24 01 	lds	r24, 0x0124
     ccc:	90 91 25 01 	lds	r25, 0x0125
     cd0:	a0 91 26 01 	lds	r26, 0x0126
     cd4:	b0 91 27 01 	lds	r27, 0x0127
     cd8:	89 2b       	or	r24, r25
     cda:	8a 2b       	or	r24, r26
     cdc:	8b 2b       	or	r24, r27
     cde:	09 f4       	brne	.+2      	; 0xce2 <_Z15isr_light_flashv+0x22>
     ce0:	48 c0       	rjmp	.+144    	; 0xd72 <_Z15isr_light_flashv+0xb2>
			if(millis_get() < _flash_time ){ // Do we need to stop the current note?
     ce2:	ea dc       	rcall	.-1580   	; 0x6b8 <millis_get>
     ce4:	00 91 24 01 	lds	r16, 0x0124
     ce8:	10 91 25 01 	lds	r17, 0x0125
     cec:	20 91 26 01 	lds	r18, 0x0126
     cf0:	30 91 27 01 	lds	r19, 0x0127
     cf4:	60 17       	cp	r22, r16
     cf6:	71 07       	cpc	r23, r17
     cf8:	82 07       	cpc	r24, r18
     cfa:	93 07       	cpc	r25, r19
     cfc:	08 f0       	brcs	.+2      	; 0xd00 <_Z15isr_light_flashv+0x40>
     cfe:	39 c0       	rjmp	.+114    	; 0xd72 <_Z15isr_light_flashv+0xb2>
     d00:	3b c0       	rjmp	.+118    	; 0xd78 <_Z15isr_light_flashv+0xb8>
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
     d02:	80 91 28 01 	lds	r24, 0x0128
     d06:	fe 01       	movw	r30, r28
     d08:	98 e0       	ldi	r25, 0x08	; 8
     d0a:	89 9f       	mul	r24, r25
     d0c:	e0 0d       	add	r30, r0
     d0e:	f1 1d       	adc	r31, r1
     d10:	11 24       	eor	r1, r1
     d12:	e4 53       	subi	r30, 0x34	; 52
     d14:	fb 4f       	sbci	r31, 0xFB	; 251
     d16:	64 91       	lpm	r22, Z
     d18:	8c 2f       	mov	r24, r28
     d1a:	8d 5f       	subi	r24, 0xFD	; 253
     d1c:	7f d1       	rcall	.+766    	; 0x101c <pca9635_set_led_pwm>
     d1e:	21 96       	adiw	r28, 0x01	; 1
			}						
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
     d20:	c4 30       	cpi	r28, 0x04	; 4
     d22:	d1 05       	cpc	r29, r1
     d24:	71 f7       	brne	.-36     	; 0xd02 <_Z15isr_light_flashv+0x42>
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
		}
		
		_flash_time = millis_get() + pgm_read_word(&(flash_pattern[_flash_current_step].time));
     d26:	c8 dc       	rcall	.-1648   	; 0x6b8 <millis_get>
     d28:	40 91 28 01 	lds	r20, 0x0128
     d2c:	e4 2f       	mov	r30, r20
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	ee 0f       	add	r30, r30
     d32:	ff 1f       	adc	r31, r31
     d34:	ee 0f       	add	r30, r30
     d36:	ff 1f       	adc	r31, r31
     d38:	ee 0f       	add	r30, r30
     d3a:	ff 1f       	adc	r31, r31
     d3c:	e0 53       	subi	r30, 0x30	; 48
     d3e:	fb 4f       	sbci	r31, 0xFB	; 251
     d40:	25 91       	lpm	r18, Z+
     d42:	34 91       	lpm	r19, Z
     d44:	dc 01       	movw	r26, r24
     d46:	cb 01       	movw	r24, r22
     d48:	82 0f       	add	r24, r18
     d4a:	93 1f       	adc	r25, r19
     d4c:	a1 1d       	adc	r26, r1
     d4e:	b1 1d       	adc	r27, r1
     d50:	80 93 24 01 	sts	0x0124, r24
     d54:	90 93 25 01 	sts	0x0125, r25
     d58:	a0 93 26 01 	sts	0x0126, r26
     d5c:	b0 93 27 01 	sts	0x0127, r27
			
		// is variable _flash_current_step equal to total steps?
		if(_flash_current_step == (flash_keys -1 )) {
     d60:	4f 31       	cpi	r20, 0x1F	; 31
     d62:	19 f4       	brne	.+6      	; 0xd6a <_Z15isr_light_flashv+0xaa>
			//reset _flash_current_step to 0
			_flash_current_step = 0;				
     d64:	10 92 28 01 	sts	0x0128, r1
     d68:	07 c0       	rjmp	.+14     	; 0xd78 <_Z15isr_light_flashv+0xb8>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
     d6a:	4f 5f       	subi	r20, 0xFF	; 255
     d6c:	40 93 28 01 	sts	0x0128, r20
     d70:	03 c0       	rjmp	.+6      	; 0xd78 <_Z15isr_light_flashv+0xb8>
			}
	
				
		} //void isr_sound()
		
	void isr_light_flash(){
     d72:	c0 e0       	ldi	r28, 0x00	; 0
     d74:	d0 e0       	ldi	r29, 0x00	; 0
     d76:	c5 cf       	rjmp	.-118    	; 0xd02 <_Z15isr_light_flashv+0x42>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
		}
		
	} // END isr_light_flash
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	08 95       	ret

00000d82 <_Z14isr_light_iconv>:
		
		
		
		
		
	void isr_light_icon(){
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
		
		// Do we need to go to the next flash?
		if(_icon_time != 0){ // is there already a flash ?
     d8a:	80 91 1e 01 	lds	r24, 0x011E
     d8e:	90 91 1f 01 	lds	r25, 0x011F
     d92:	a0 91 20 01 	lds	r26, 0x0120
     d96:	b0 91 21 01 	lds	r27, 0x0121
     d9a:	89 2b       	or	r24, r25
     d9c:	8a 2b       	or	r24, r26
     d9e:	8b 2b       	or	r24, r27
     da0:	79 f0       	breq	.+30     	; 0xdc0 <_Z14isr_light_iconv+0x3e>
			if(millis_get() < _icon_time ){ // Do we need to stop the current note?
     da2:	8a dc       	rcall	.-1772   	; 0x6b8 <millis_get>
     da4:	00 91 1e 01 	lds	r16, 0x011E
     da8:	10 91 1f 01 	lds	r17, 0x011F
     dac:	20 91 20 01 	lds	r18, 0x0120
     db0:	30 91 21 01 	lds	r19, 0x0121
     db4:	60 17       	cp	r22, r16
     db6:	71 07       	cpc	r23, r17
     db8:	82 07       	cpc	r24, r18
     dba:	93 07       	cpc	r25, r19
     dbc:	08 f4       	brcc	.+2      	; 0xdc0 <_Z14isr_light_iconv+0x3e>
     dbe:	81 c0       	rjmp	.+258    	; 0xec2 <_Z14isr_light_iconv+0x140>
	// step 2 = 250 - (2 x 25)  = 200
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
     dc0:	20 91 22 01 	lds	r18, 0x0122
     dc4:	22 23       	and	r18, r18
     dc6:	19 f0       	breq	.+6      	; 0xdce <_Z14isr_light_iconv+0x4c>
     dc8:	2b 30       	cpi	r18, 0x0B	; 11
     dca:	21 f5       	brne	.+72     	; 0xe14 <_Z14isr_light_iconv+0x92>
     dcc:	12 c0       	rjmp	.+36     	; 0xdf2 <_Z14isr_light_iconv+0x70>
		intensity = 255;
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 650;
     dce:	74 dc       	rcall	.-1816   	; 0x6b8 <millis_get>
     dd0:	dc 01       	movw	r26, r24
     dd2:	cb 01       	movw	r24, r22
     dd4:	86 57       	subi	r24, 0x76	; 118
     dd6:	9d 4f       	sbci	r25, 0xFD	; 253
     dd8:	af 4f       	sbci	r26, 0xFF	; 255
     dda:	bf 4f       	sbci	r27, 0xFF	; 255
     ddc:	80 93 1e 01 	sts	0x011E, r24
     de0:	90 93 1f 01 	sts	0x011F, r25
     de4:	a0 93 20 01 	sts	0x0120, r26
     de8:	b0 93 21 01 	sts	0x0121, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     dec:	cf ef       	ldi	r28, 0xFF	; 255
     dee:	d0 e0       	ldi	r29, 0x00	; 0
     df0:	25 c0       	rjmp	.+74     	; 0xe3c <_Z14isr_light_iconv+0xba>
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 650;
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
     df2:	62 dc       	rcall	.-1852   	; 0x6b8 <millis_get>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	01 96       	adiw	r24, 0x01	; 1
     dfa:	a1 1d       	adc	r26, r1
     dfc:	b1 1d       	adc	r27, r1
     dfe:	80 93 1e 01 	sts	0x011E, r24
     e02:	90 93 1f 01 	sts	0x011F, r25
     e06:	a0 93 20 01 	sts	0x0120, r26
     e0a:	b0 93 21 01 	sts	0x0121, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     e0e:	cf ef       	ldi	r28, 0xFF	; 255
     e10:	d0 e0       	ldi	r29, 0x00	; 0
     e12:	14 c0       	rjmp	.+40     	; 0xe3c <_Z14isr_light_iconv+0xba>
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
		}
			
	}else{
		intensity = (250 - (icon_current_step * 25)); // step 1 to 10, 
     e14:	37 ee       	ldi	r19, 0xE7	; 231
     e16:	32 03       	mulsu	r19, r18
     e18:	e0 01       	movw	r28, r0
     e1a:	11 24       	eor	r1, r1
     e1c:	c6 50       	subi	r28, 0x06	; 6
     e1e:	df 4f       	sbci	r29, 0xFF	; 255
		_icon_time = millis_get() + 30;
     e20:	4b dc       	rcall	.-1898   	; 0x6b8 <millis_get>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	4e 96       	adiw	r24, 0x1e	; 30
     e28:	a1 1d       	adc	r26, r1
     e2a:	b1 1d       	adc	r27, r1
     e2c:	80 93 1e 01 	sts	0x011E, r24
     e30:	90 93 1f 01 	sts	0x011F, r25
     e34:	a0 93 20 01 	sts	0x0120, r26
     e38:	b0 93 21 01 	sts	0x0121, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     e3c:	00 e0       	ldi	r16, 0x00	; 0
     e3e:	10 e0       	ldi	r17, 0x00	; 0
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     e40:	80 91 23 01 	lds	r24, 0x0123
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	9c 01       	movw	r18, r24
     e48:	22 0f       	add	r18, r18
     e4a:	33 1f       	adc	r19, r19
     e4c:	82 0f       	add	r24, r18
     e4e:	93 1f       	adc	r25, r19
     e50:	80 0f       	add	r24, r16
     e52:	91 1f       	adc	r25, r17
     e54:	fc 01       	movw	r30, r24
     e56:	e4 53       	subi	r30, 0x34	; 52
     e58:	fa 4f       	sbci	r31, 0xFA	; 250
     e5a:	44 91       	lpm	r20, Z
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     e5c:	fc 01       	movw	r30, r24
     e5e:	e8 59       	subi	r30, 0x98	; 152
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	84 91       	lpm	r24, Z
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     e64:	4c 9f       	mul	r20, r28
     e66:	90 01       	movw	r18, r0
     e68:	4d 9f       	mul	r20, r29
     e6a:	30 0d       	add	r19, r0
     e6c:	11 24       	eor	r1, r1
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     e6e:	63 2f       	mov	r22, r19
     e70:	d5 d0       	rcall	.+426    	; 0x101c <pca9635_set_led_pwm>
     e72:	0f 5f       	subi	r16, 0xFF	; 255
     e74:	1f 4f       	sbci	r17, 0xFF	; 255
		_icon_time = millis_get() + 30;
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
     e76:	03 30       	cpi	r16, 0x03	; 3
     e78:	11 05       	cpc	r17, r1
     e7a:	11 f7       	brne	.-60     	; 0xe40 <_Z14isr_light_iconv+0xbe>
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
	}
	

	// is variable _flash_current_step equal to total steps?
	if(icon_current_step == 11) {
     e7c:	80 91 22 01 	lds	r24, 0x0122
     e80:	8b 30       	cpi	r24, 0x0B	; 11
     e82:	e1 f4       	brne	.+56     	; 0xebc <_Z14isr_light_iconv+0x13a>
		//reset _flash_current_step to 0
		icon_current_step = 0;
     e84:	10 92 22 01 	sts	0x0122, r1
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e88:	30 91 33 01 	lds	r19, 0x0133
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     e8c:	23 2f       	mov	r18, r19
     e8e:	2f 70       	andi	r18, 0x0F	; 15
     e90:	80 91 23 01 	lds	r24, 0x0123
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     e94:	40 e0       	ldi	r20, 0x00	; 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
     e96:	8f 5f       	subi	r24, 0xFF	; 255
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     e98:	84 30       	cpi	r24, 0x04	; 4
     e9a:	09 f4       	brne	.+2      	; 0xe9e <_Z14isr_light_iconv+0x11c>
     e9c:	84 2f       	mov	r24, r20
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e9e:	e8 2f       	mov	r30, r24
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	e2 5f       	subi	r30, 0xF2	; 242
     ea4:	fe 4f       	sbci	r31, 0xFE	; 254
     ea6:	90 81       	ld	r25, Z
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     ea8:	21 11       	cpse	r18, r1
     eaa:	03 c0       	rjmp	.+6      	; 0xeb2 <_Z14isr_light_iconv+0x130>
     eac:	80 93 23 01 	sts	0x0123, r24
     eb0:	08 c0       	rjmp	.+16     	; 0xec2 <_Z14isr_light_iconv+0x140>
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     eb2:	93 23       	and	r25, r19
		//reset _flash_current_step to 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
     eb4:	81 f3       	breq	.-32     	; 0xe96 <_Z14isr_light_iconv+0x114>
     eb6:	80 93 23 01 	sts	0x0123, r24
     eba:	03 c0       	rjmp	.+6      	; 0xec2 <_Z14isr_light_iconv+0x140>
			} // while
			
			
		}else{
		// set _flash_current_step +1
		icon_current_step++;
     ebc:	8f 5f       	subi	r24, 0xFF	; 255
     ebe:	80 93 22 01 	sts	0x0122, r24
	}
	
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	08 95       	ret

00000ecc <__vector_7>:

	
	
	
	
ISR (TIMER2_COMPA_vect) {
     ecc:	1f 92       	push	r1
     ece:	0f 92       	push	r0
     ed0:	0f b6       	in	r0, 0x3f	; 63
     ed2:	0f 92       	push	r0
     ed4:	11 24       	eor	r1, r1
     ed6:	0f 93       	push	r16
     ed8:	1f 93       	push	r17
     eda:	2f 93       	push	r18
     edc:	3f 93       	push	r19
     ede:	4f 93       	push	r20
     ee0:	5f 93       	push	r21
     ee2:	6f 93       	push	r22
     ee4:	7f 93       	push	r23
     ee6:	8f 93       	push	r24
     ee8:	9f 93       	push	r25
     eea:	af 93       	push	r26
     eec:	bf 93       	push	r27
     eee:	ef 93       	push	r30
     ef0:	ff 93       	push	r31

	// check if the alarm needs to be stopped
	if(millis_get() >= active_alarm_time || active_alarm_time == 0){
     ef2:	e2 db       	rcall	.-2108   	; 0x6b8 <millis_get>
     ef4:	00 91 2f 01 	lds	r16, 0x012F
     ef8:	10 91 30 01 	lds	r17, 0x0130
     efc:	20 91 31 01 	lds	r18, 0x0131
     f00:	30 91 32 01 	lds	r19, 0x0132
     f04:	60 17       	cp	r22, r16
     f06:	71 07       	cpc	r23, r17
     f08:	82 07       	cpc	r24, r18
     f0a:	93 07       	cpc	r25, r19
     f0c:	20 f4       	brcc	.+8      	; 0xf16 <__vector_7+0x4a>
     f0e:	01 2b       	or	r16, r17
     f10:	02 2b       	or	r16, r18
     f12:	03 2b       	or	r16, r19
     f14:	c1 f5       	brne	.+112    	; 0xf86 <__vector_7+0xba>
		// stop alarm
			
			// reset steps of sound, flash and icon
			sound_current_step		= 0;
     f16:	10 92 2d 01 	sts	0x012D, r1
			_sound_note_time		= 0;
     f1a:	10 92 29 01 	sts	0x0129, r1
     f1e:	10 92 2a 01 	sts	0x012A, r1
     f22:	10 92 2b 01 	sts	0x012B, r1
     f26:	10 92 2c 01 	sts	0x012C, r1
										
			_flash_current_step		= 0;
     f2a:	10 92 28 01 	sts	0x0128, r1
			_flash_time				= 0;
     f2e:	10 92 24 01 	sts	0x0124, r1
     f32:	10 92 25 01 	sts	0x0125, r1
     f36:	10 92 26 01 	sts	0x0126, r1
     f3a:	10 92 27 01 	sts	0x0127, r1
										
			icon_current_step		= 0;
     f3e:	10 92 22 01 	sts	0x0122, r1
			_icon_time				= 0;
     f42:	10 92 1e 01 	sts	0x011E, r1
     f46:	10 92 1f 01 	sts	0x011F, r1
     f4a:	10 92 20 01 	sts	0x0120, r1
     f4e:	10 92 21 01 	sts	0x0121, r1
										
			// empty alarm arrray
			active_alarm = 0x00; 
     f52:	10 92 33 01 	sts	0x0133, r1
			active_alarm_time = 0;
     f56:	10 92 2f 01 	sts	0x012F, r1
     f5a:	10 92 30 01 	sts	0x0130, r1
     f5e:	10 92 31 01 	sts	0x0131, r1
     f62:	10 92 32 01 	sts	0x0132, r1
					
			// alle leds uit, pca in slaapstand
			pca9635_set_all_led_pwm(0); // dimm all leds to zero
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	6a d0       	rcall	.+212    	; 0x103e <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1); // put pca9635 in sleep
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	78 d0       	rcall	.+240    	; 0x105e <pca9635_set_sleep>
			power_twi_disable();
     f6e:	e4 e6       	ldi	r30, 0x64	; 100
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	80 68       	ori	r24, 0x80	; 128
     f76:	80 83       	st	Z, r24
			
			// automatisch slapen in loop.

			//uart0_puts("STOPINT");
			// stop timer 0
			millis_pause();
     f78:	be db       	rcall	.-2180   	; 0x6f6 <millis_pause>
			
			// stop sound
			noTone();
     f7a:	8b d4       	rcall	.+2326   	; 0x1892 <noTone>
			
			// stop timer 2
			timer2_pause();
     f7c:	0d dc       	rcall	.-2022   	; 0x798 <_Z12timer2_pausev>
			
			deep_sleep_ok = 1;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	80 93 34 01 	sts	0x0134, r24
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <__vector_7+0xc0>
					
	}else{
		// continue alarm
		isr_sound();
     f86:	8d dd       	rcall	.-1254   	; 0xaa2 <_Z9isr_soundv>
	    isr_light_flash();
     f88:	9b de       	rcall	.-714    	; 0xcc0 <_Z15isr_light_flashv>
		isr_light_icon();		
     f8a:	fb de       	rcall	.-522    	; 0xd82 <_Z14isr_light_iconv>
	}
						
}
     f8c:	ff 91       	pop	r31
     f8e:	ef 91       	pop	r30
     f90:	bf 91       	pop	r27
     f92:	af 91       	pop	r26
     f94:	9f 91       	pop	r25
     f96:	8f 91       	pop	r24
     f98:	7f 91       	pop	r23
     f9a:	6f 91       	pop	r22
     f9c:	5f 91       	pop	r21
     f9e:	4f 91       	pop	r20
     fa0:	3f 91       	pop	r19
     fa2:	2f 91       	pop	r18
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	0f 90       	pop	r0
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	0f 90       	pop	r0
     fae:	1f 90       	pop	r1
     fb0:	18 95       	reti

00000fb2 <pca9635_init>:
	   I2C_write(value);	
  	}
			  
  	I2C_stop();
		  
}
     fb2:	80 e8       	ldi	r24, 0x80	; 128
     fb4:	32 db       	rcall	.-2460   	; 0x61a <I2C_start>
     fb6:	80 e8       	ldi	r24, 0x80	; 128
     fb8:	55 db       	rcall	.-2390   	; 0x664 <I2C_write>
     fba:	80 e8       	ldi	r24, 0x80	; 128
     fbc:	53 db       	rcall	.-2394   	; 0x664 <I2C_write>
     fbe:	82 e0       	ldi	r24, 0x02	; 2
     fc0:	51 db       	rcall	.-2398   	; 0x664 <I2C_write>
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	4f db       	rcall	.-2402   	; 0x664 <I2C_write>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	4d db       	rcall	.-2406   	; 0x664 <I2C_write>
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	4b db       	rcall	.-2410   	; 0x664 <I2C_write>
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	49 db       	rcall	.-2414   	; 0x664 <I2C_write>
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	47 db       	rcall	.-2418   	; 0x664 <I2C_write>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	45 db       	rcall	.-2422   	; 0x664 <I2C_write>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	43 db       	rcall	.-2426   	; 0x664 <I2C_write>
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	41 db       	rcall	.-2430   	; 0x664 <I2C_write>
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	3f db       	rcall	.-2434   	; 0x664 <I2C_write>
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	3d db       	rcall	.-2438   	; 0x664 <I2C_write>
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	3b db       	rcall	.-2442   	; 0x664 <I2C_write>
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	39 db       	rcall	.-2446   	; 0x664 <I2C_write>
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	37 db       	rcall	.-2450   	; 0x664 <I2C_write>
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	35 db       	rcall	.-2454   	; 0x664 <I2C_write>
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	33 db       	rcall	.-2458   	; 0x664 <I2C_write>
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	31 db       	rcall	.-2462   	; 0x664 <I2C_write>
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	2f db       	rcall	.-2466   	; 0x664 <I2C_write>
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	2d db       	rcall	.-2470   	; 0x664 <I2C_write>
    100a:	8a ea       	ldi	r24, 0xAA	; 170
    100c:	2b db       	rcall	.-2474   	; 0x664 <I2C_write>
    100e:	8a ea       	ldi	r24, 0xAA	; 170
    1010:	29 db       	rcall	.-2478   	; 0x664 <I2C_write>
    1012:	8a ea       	ldi	r24, 0xAA	; 170
    1014:	27 db       	rcall	.-2482   	; 0x664 <I2C_write>
    1016:	8a ea       	ldi	r24, 0xAA	; 170
    1018:	25 db       	rcall	.-2486   	; 0x664 <I2C_write>
    101a:	41 cb       	rjmp	.-2430   	; 0x69e <I2C_stop>

0000101c <pca9635_set_led_pwm>:
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	d8 2f       	mov	r29, r24
    1022:	c6 2f       	mov	r28, r22
    1024:	80 e8       	ldi	r24, 0x80	; 128
    1026:	f9 da       	rcall	.-2574   	; 0x61a <I2C_start>
    1028:	8d 2f       	mov	r24, r29
    102a:	8e 5f       	subi	r24, 0xFE	; 254
    102c:	80 68       	ori	r24, 0x80	; 128
    102e:	1a db       	rcall	.-2508   	; 0x664 <I2C_write>
    1030:	8c 2f       	mov	r24, r28
    1032:	18 db       	rcall	.-2512   	; 0x664 <I2C_write>
    1034:	34 db       	rcall	.-2456   	; 0x69e <I2C_stop>
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	df 91       	pop	r29
    103a:	cf 91       	pop	r28
    103c:	08 95       	ret

0000103e <pca9635_set_all_led_pwm>:
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	d8 2f       	mov	r29, r24
    1044:	80 e8       	ldi	r24, 0x80	; 128
    1046:	e9 da       	rcall	.-2606   	; 0x61a <I2C_start>
    1048:	82 e8       	ldi	r24, 0x82	; 130
    104a:	0c db       	rcall	.-2536   	; 0x664 <I2C_write>
    104c:	c0 e1       	ldi	r28, 0x10	; 16
    104e:	8d 2f       	mov	r24, r29
    1050:	09 db       	rcall	.-2542   	; 0x664 <I2C_write>
    1052:	c1 50       	subi	r28, 0x01	; 1
    1054:	e1 f7       	brne	.-8      	; 0x104e <pca9635_set_all_led_pwm+0x10>
    1056:	23 db       	rcall	.-2490   	; 0x69e <I2C_stop>
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	08 95       	ret

0000105e <pca9635_set_sleep>:

/**
* Changes the oscillator mode between sleep (1) and active (0)
*/
uint8_t pca9635_set_sleep(uint8_t sleep)
{
    105e:	cf 93       	push	r28
    1060:	c8 2f       	mov	r28, r24
	I2C_start((0x40<<1)+I2C_READ);
    1062:	81 e8       	ldi	r24, 0x81	; 129
    1064:	da da       	rcall	.-2636   	; 0x61a <I2C_start>
	I2C_write(0x80); // autoincrement, mode 0,
    1066:	80 e8       	ldi	r24, 0x80	; 128
    1068:	fd da       	rcall	.-2566   	; 0x664 <I2C_write>
	// I2C_stop(); ???nodig?
	uint8_t data = I2C_read_ack();
    106a:	0e db       	rcall	.-2532   	; 0x688 <I2C_read_ack>
	
	if(sleep){		// set or unset bit 4
    106c:	cc 23       	and	r28, r28
    106e:	11 f0       	breq	.+4      	; 0x1074 <pca9635_set_sleep+0x16>
		data |= (1<<4);
    1070:	80 61       	ori	r24, 0x10	; 16
    1072:	01 c0       	rjmp	.+2      	; 0x1076 <pca9635_set_sleep+0x18>
	}else{
		data &= ~(1<<4);
    1074:	8f 7e       	andi	r24, 0xEF	; 239
	}
	
	uint8_t ack = I2C_write(data);  
    1076:	f6 da       	rcall	.-2580   	; 0x664 <I2C_write>
    1078:	c8 2f       	mov	r28, r24
	I2C_stop();
    107a:	11 db       	rcall	.-2526   	; 0x69e <I2C_stop>
	return ack;
}
    107c:	8c 2f       	mov	r24, r28
    107e:	cf 91       	pop	r28
    1080:	08 95       	ret

00001082 <_ZL15blockInterruptsv>:
			//PORTB &= ~_BV(0); // pb0 uit
	} else {
		rfmstate &= ~B11111000; // make sure everything is switched off (except bod, wkup, clk)
		rf12_xfer(rfmstate);
	}
	rxstate = TXIDLE;
    1082:	e8 98       	cbi	0x1d, 0	; 29
    1084:	08 95       	ret

00001086 <_ZL15allowInterruptsv>:
    1086:	e8 9a       	sbi	0x1d, 0	; 29
    1088:	08 95       	ret

0000108a <_ZL9rf12_byteh>:
    108a:	8e bd       	out	0x2e, r24	; 46
    108c:	0d b4       	in	r0, 0x2d	; 45
    108e:	07 fe       	sbrs	r0, 7
    1090:	fd cf       	rjmp	.-6      	; 0x108c <_ZL9rf12_byteh+0x2>
    1092:	8e b5       	in	r24, 0x2e	; 46
    1094:	08 95       	ret

00001096 <_ZL9rf12_xferj>:
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	18 2f       	mov	r17, r24
    109e:	c9 2f       	mov	r28, r25
    10a0:	f0 df       	rcall	.-32     	; 0x1082 <_ZL15blockInterruptsv>
    10a2:	2a 98       	cbi	0x05, 2	; 5
    10a4:	8c 2f       	mov	r24, r28
    10a6:	f1 df       	rcall	.-30     	; 0x108a <_ZL9rf12_byteh>
    10a8:	d8 2f       	mov	r29, r24
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	c8 2f       	mov	r28, r24
    10ae:	81 2f       	mov	r24, r17
    10b0:	ec df       	rcall	.-40     	; 0x108a <_ZL9rf12_byteh>
    10b2:	c8 2b       	or	r28, r24
    10b4:	2a 9a       	sbi	0x05, 2	; 5
    10b6:	e7 df       	rcall	.-50     	; 0x1086 <_ZL15allowInterruptsv>
    10b8:	8c 2f       	mov	r24, r28
    10ba:	9d 2f       	mov	r25, r29
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	1f 91       	pop	r17
    10c2:	08 95       	ret

000010c4 <_ZL9rf12_idlev>:
    10c4:	80 91 89 01 	lds	r24, 0x0189
    10c8:	90 91 8a 01 	lds	r25, 0x018A
    10cc:	8f 70       	andi	r24, 0x0F	; 15
    10ce:	90 93 8a 01 	sts	0x018A, r25
    10d2:	80 93 89 01 	sts	0x0189, r24
    10d6:	80 91 89 01 	lds	r24, 0x0189
    10da:	90 91 8a 01 	lds	r25, 0x018A
    10de:	88 60       	ori	r24, 0x08	; 8
    10e0:	90 93 8a 01 	sts	0x018A, r25
    10e4:	80 93 89 01 	sts	0x0189, r24
    10e8:	80 91 89 01 	lds	r24, 0x0189
    10ec:	90 91 8a 01 	lds	r25, 0x018A
    10f0:	d2 cf       	rjmp	.-92     	; 0x1096 <_ZL9rf12_xferj>

000010f2 <_Z12rf12_spiInitv>:
    10f2:	84 b1       	in	r24, 0x04	; 4
    10f4:	8c 62       	ori	r24, 0x2C	; 44
    10f6:	84 b9       	out	0x04, r24	; 4
    10f8:	2a 9a       	sbi	0x05, 2	; 5
    10fa:	24 98       	cbi	0x04, 4	; 4
    10fc:	80 e5       	ldi	r24, 0x50	; 80
    10fe:	8c bd       	out	0x2c, r24	; 44
    1100:	8d b5       	in	r24, 0x2d	; 45
    1102:	81 60       	ori	r24, 0x01	; 1
    1104:	8d bd       	out	0x2d, r24	; 45
    1106:	52 98       	cbi	0x0a, 2	; 10
    1108:	5a 9a       	sbi	0x0b, 2	; 11
    110a:	08 95       	ret

0000110c <_Z13rf12_recvDonev>:
    110c:	80 91 8b 01 	lds	r24, 0x018B
    1110:	87 30       	cpi	r24, 0x07	; 7
    1112:	09 f0       	breq	.+2      	; 0x1116 <_Z13rf12_recvDonev+0xa>
    1114:	51 c0       	rjmp	.+162    	; 0x11b8 <_Z13rf12_recvDonev+0xac>
    1116:	80 91 8e 01 	lds	r24, 0x018E
    111a:	88 23       	and	r24, r24
    111c:	a1 f0       	breq	.+40     	; 0x1146 <_Z13rf12_recvDonev+0x3a>
    111e:	90 91 8c 01 	lds	r25, 0x018C
    1122:	98 17       	cp	r25, r24
    1124:	28 f4       	brcc	.+10     	; 0x1130 <_Z13rf12_recvDonev+0x24>
    1126:	80 91 8c 01 	lds	r24, 0x018C
    112a:	87 34       	cpi	r24, 0x47	; 71
    112c:	08 f4       	brcc	.+2      	; 0x1130 <_Z13rf12_recvDonev+0x24>
    112e:	44 c0       	rjmp	.+136    	; 0x11b8 <_Z13rf12_recvDonev+0xac>
    1130:	84 e0       	ldi	r24, 0x04	; 4
    1132:	80 93 8b 01 	sts	0x018B, r24
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	90 93 83 01 	sts	0x0183, r25
    113e:	80 93 82 01 	sts	0x0182, r24
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	08 95       	ret
    1146:	20 91 8c 01 	lds	r18, 0x018C
    114a:	80 91 3d 01 	lds	r24, 0x013D
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	05 96       	adiw	r24, 0x05	; 5
    1154:	28 17       	cp	r18, r24
    1156:	39 07       	cpc	r19, r25
    1158:	24 f4       	brge	.+8      	; 0x1162 <_Z13rf12_recvDonev+0x56>
    115a:	80 91 8c 01 	lds	r24, 0x018C
    115e:	87 34       	cpi	r24, 0x47	; 71
    1160:	58 f1       	brcs	.+86     	; 0x11b8 <_Z13rf12_recvDonev+0xac>
    1162:	84 e0       	ldi	r24, 0x04	; 4
    1164:	80 93 8b 01 	sts	0x018B, r24
    1168:	80 91 3d 01 	lds	r24, 0x013D
    116c:	83 34       	cpi	r24, 0x43	; 67
    116e:	30 f0       	brcs	.+12     	; 0x117c <_Z13rf12_recvDonev+0x70>
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	90 93 83 01 	sts	0x0183, r25
    1178:	80 93 82 01 	sts	0x0182, r24
    117c:	80 91 3c 01 	lds	r24, 0x013C
    1180:	86 ff       	sbrs	r24, 6
    1182:	0b c0       	rjmp	.+22     	; 0x119a <_Z13rf12_recvDonev+0x8e>
    1184:	80 91 8f 01 	lds	r24, 0x018F
    1188:	98 2f       	mov	r25, r24
    118a:	9f 71       	andi	r25, 0x1F	; 31
    118c:	9f 31       	cpi	r25, 0x1F	; 31
    118e:	29 f0       	breq	.+10     	; 0x119a <_Z13rf12_recvDonev+0x8e>
    1190:	90 91 3c 01 	lds	r25, 0x013C
    1194:	89 27       	eor	r24, r25
    1196:	8f 71       	andi	r24, 0x1F	; 31
    1198:	79 f4       	brne	.+30     	; 0x11b8 <_Z13rf12_recvDonev+0xac>
    119a:	80 91 82 01 	lds	r24, 0x0182
    119e:	90 91 83 01 	lds	r25, 0x0183
    11a2:	89 2b       	or	r24, r25
    11a4:	09 f0       	breq	.+2      	; 0x11a8 <_Z13rf12_recvDonev+0x9c>
    11a6:	55 c0       	rjmp	.+170    	; 0x1252 <_Z13rf12_recvDonev+0x146>
    11a8:	e0 91 35 01 	lds	r30, 0x0135
    11ac:	f0 91 36 01 	lds	r31, 0x0136
    11b0:	30 97       	sbiw	r30, 0x00	; 0
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <_Z13rf12_recvDonev+0xaa>
    11b4:	4a c0       	rjmp	.+148    	; 0x124a <_Z13rf12_recvDonev+0x13e>
    11b6:	4d c0       	rjmp	.+154    	; 0x1252 <_Z13rf12_recvDonev+0x146>
    11b8:	80 91 8b 01 	lds	r24, 0x018B
    11bc:	84 30       	cpi	r24, 0x04	; 4
    11be:	09 f0       	breq	.+2      	; 0x11c2 <_Z13rf12_recvDonev+0xb6>
    11c0:	42 c0       	rjmp	.+132    	; 0x1246 <_Z13rf12_recvDonev+0x13a>
    11c2:	10 92 3d 01 	sts	0x013D, r1
    11c6:	10 92 8c 01 	sts	0x018C, r1
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	9f ef       	ldi	r25, 0xFF	; 255
    11ce:	90 93 83 01 	sts	0x0183, r25
    11d2:	80 93 82 01 	sts	0x0182, r24
    11d6:	20 91 8d 01 	lds	r18, 0x018D
    11da:	22 23       	and	r18, r18
    11dc:	d9 f0       	breq	.+54     	; 0x1214 <_Z13rf12_recvDonev+0x108>
    11de:	82 27       	eor	r24, r18
    11e0:	28 2f       	mov	r18, r24
    11e2:	22 95       	swap	r18
    11e4:	28 27       	eor	r18, r24
    11e6:	02 2e       	mov	r0, r18
    11e8:	26 95       	lsr	r18
    11ea:	26 95       	lsr	r18
    11ec:	20 25       	eor	r18, r0
    11ee:	02 2e       	mov	r0, r18
    11f0:	26 95       	lsr	r18
    11f2:	20 25       	eor	r18, r0
    11f4:	27 70       	andi	r18, 0x07	; 7
    11f6:	08 2e       	mov	r0, r24
    11f8:	89 2f       	mov	r24, r25
    11fa:	26 95       	lsr	r18
    11fc:	07 94       	ror	r0
    11fe:	27 95       	ror	r18
    1200:	90 2d       	mov	r25, r0
    1202:	82 27       	eor	r24, r18
    1204:	06 94       	lsr	r0
    1206:	27 95       	ror	r18
    1208:	90 25       	eor	r25, r0
    120a:	82 27       	eor	r24, r18
    120c:	90 93 83 01 	sts	0x0183, r25
    1210:	80 93 82 01 	sts	0x0182, r24
    1214:	87 e0       	ldi	r24, 0x07	; 7
    1216:	80 93 8b 01 	sts	0x018B, r24
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	80 93 85 01 	sts	0x0185, r24
    1220:	83 ea       	ldi	r24, 0xA3	; 163
    1222:	94 e9       	ldi	r25, 0x94	; 148
    1224:	38 df       	rcall	.-400    	; 0x1096 <_ZL9rf12_xferj>
    1226:	80 91 89 01 	lds	r24, 0x0189
    122a:	90 91 8a 01 	lds	r25, 0x018A
    122e:	88 6d       	ori	r24, 0xD8	; 216
    1230:	90 93 8a 01 	sts	0x018A, r25
    1234:	80 93 89 01 	sts	0x0189, r24
    1238:	80 91 89 01 	lds	r24, 0x0189
    123c:	90 91 8a 01 	lds	r25, 0x018A
    1240:	2a df       	rcall	.-428    	; 0x1096 <_ZL9rf12_xferj>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	08 95       	ret
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	08 95       	ret
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	09 95       	icall
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	08 95       	ret
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	9f ef       	ldi	r25, 0xFF	; 255
    1256:	dc 01       	movw	r26, r24
    1258:	80 93 37 01 	sts	0x0137, r24
    125c:	90 93 38 01 	sts	0x0138, r25
    1260:	a0 93 39 01 	sts	0x0139, r26
    1264:	b0 93 3a 01 	sts	0x013A, r27
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	08 95       	ret

0000126c <_Z15rf12_setBitrateh>:
    126c:	cf 92       	push	r12
    126e:	df 92       	push	r13
    1270:	ef 92       	push	r14
    1272:	ff 92       	push	r15
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	cf 93       	push	r28
    127a:	c8 2f       	mov	r28, r24
    127c:	08 2f       	mov	r16, r24
    127e:	10 e0       	ldi	r17, 0x00	; 0
    1280:	c8 01       	movw	r24, r16
    1282:	96 6c       	ori	r25, 0xC6	; 198
    1284:	08 df       	rcall	.-496    	; 0x1096 <_ZL9rf12_xferj>
    1286:	cf 77       	andi	r28, 0x7F	; 127
    1288:	2c 2f       	mov	r18, r28
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	2f 5f       	subi	r18, 0xFF	; 255
    128e:	3f 4f       	sbci	r19, 0xFF	; 255
    1290:	44 27       	eor	r20, r20
    1292:	37 fd       	sbrc	r19, 7
    1294:	40 95       	com	r20
    1296:	54 2f       	mov	r21, r20
    1298:	6b ef       	ldi	r22, 0xFB	; 251
    129a:	72 e4       	ldi	r23, 0x42	; 66
    129c:	85 e0       	ldi	r24, 0x05	; 5
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	e3 d3       	rcall	.+1990   	; 0x1a68 <__udivmodsi4>
    12a2:	69 01       	movw	r12, r18
    12a4:	7a 01       	movw	r14, r20
    12a6:	c8 01       	movw	r24, r16
    12a8:	88 0f       	add	r24, r24
    12aa:	89 2f       	mov	r24, r25
    12ac:	88 1f       	adc	r24, r24
    12ae:	99 0b       	sbc	r25, r25
    12b0:	8c 01       	movw	r16, r24
    12b2:	00 0f       	add	r16, r16
    12b4:	11 1f       	adc	r17, r17
    12b6:	00 0f       	add	r16, r16
    12b8:	11 1f       	adc	r17, r17
    12ba:	00 0f       	add	r16, r16
    12bc:	11 1f       	adc	r17, r17
    12be:	08 1b       	sub	r16, r24
    12c0:	19 0b       	sbc	r17, r25
    12c2:	0f 5f       	subi	r16, 0xFF	; 255
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	98 01       	movw	r18, r16
    12c8:	44 27       	eor	r20, r20
    12ca:	37 fd       	sbrc	r19, 7
    12cc:	40 95       	com	r20
    12ce:	54 2f       	mov	r21, r20
    12d0:	c7 01       	movw	r24, r14
    12d2:	b6 01       	movw	r22, r12
    12d4:	c9 d3       	rcall	.+1938   	; 0x1a68 <__udivmodsi4>
    12d6:	da 01       	movw	r26, r20
    12d8:	c9 01       	movw	r24, r18
    12da:	68 94       	set
    12dc:	12 f8       	bld	r1, 2
    12de:	b6 95       	lsr	r27
    12e0:	a7 95       	ror	r26
    12e2:	97 95       	ror	r25
    12e4:	87 95       	ror	r24
    12e6:	16 94       	lsr	r1
    12e8:	d1 f7       	brne	.-12     	; 0x12de <_Z15rf12_setBitrateh+0x72>
    12ea:	bc 01       	movw	r22, r24
    12ec:	cd 01       	movw	r24, r26
    12ee:	6d 57       	subi	r22, 0x7D	; 125
    12f0:	7c 4f       	sbci	r23, 0xFC	; 252
    12f2:	8f 4f       	sbci	r24, 0xFF	; 255
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	24 e8       	ldi	r18, 0x84	; 132
    12f8:	33 e0       	ldi	r19, 0x03	; 3
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	b4 d3       	rcall	.+1896   	; 0x1a68 <__udivmodsi4>
    1300:	20 93 84 01 	sts	0x0184, r18
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	df 90       	pop	r13
    1310:	cf 90       	pop	r12
    1312:	08 95       	ret

00001314 <_Z19rf12_setFixedLengthh>:
    1314:	81 11       	cpse	r24, r1
    1316:	03 c0       	rjmp	.+6      	; 0x131e <_Z19rf12_setFixedLengthh+0xa>
    1318:	10 92 8e 01 	sts	0x018E, r1
    131c:	08 95       	ret
    131e:	8f 5f       	subi	r24, 0xFF	; 255
    1320:	80 93 8e 01 	sts	0x018E, r24
    1324:	08 95       	ret

00001326 <_Z14rf12_sendStarth>:
    1326:	86 fd       	sbrc	r24, 6
    1328:	05 c0       	rjmp	.+10     	; 0x1334 <_Z14rf12_sendStarth+0xe>
    132a:	80 7e       	andi	r24, 0xE0	; 224
    132c:	90 91 8f 01 	lds	r25, 0x018F
    1330:	9f 71       	andi	r25, 0x1F	; 31
    1332:	89 0f       	add	r24, r25
    1334:	80 93 3c 01 	sts	0x013C, r24
    1338:	e0 91 35 01 	lds	r30, 0x0135
    133c:	f0 91 36 01 	lds	r31, 0x0136
    1340:	30 97       	sbiw	r30, 0x00	; 0
    1342:	11 f0       	breq	.+4      	; 0x1348 <_Z14rf12_sendStarth+0x22>
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	09 95       	icall
    1348:	8f ef       	ldi	r24, 0xFF	; 255
    134a:	9f ef       	ldi	r25, 0xFF	; 255
    134c:	90 93 83 01 	sts	0x0183, r25
    1350:	80 93 82 01 	sts	0x0182, r24
    1354:	80 91 82 01 	lds	r24, 0x0182
    1358:	90 91 83 01 	lds	r25, 0x0183
    135c:	20 91 8d 01 	lds	r18, 0x018D
    1360:	82 27       	eor	r24, r18
    1362:	28 2f       	mov	r18, r24
    1364:	22 95       	swap	r18
    1366:	28 27       	eor	r18, r24
    1368:	02 2e       	mov	r0, r18
    136a:	26 95       	lsr	r18
    136c:	26 95       	lsr	r18
    136e:	20 25       	eor	r18, r0
    1370:	02 2e       	mov	r0, r18
    1372:	26 95       	lsr	r18
    1374:	20 25       	eor	r18, r0
    1376:	27 70       	andi	r18, 0x07	; 7
    1378:	08 2e       	mov	r0, r24
    137a:	89 2f       	mov	r24, r25
    137c:	26 95       	lsr	r18
    137e:	07 94       	ror	r0
    1380:	27 95       	ror	r18
    1382:	90 2d       	mov	r25, r0
    1384:	82 27       	eor	r24, r18
    1386:	06 94       	lsr	r0
    1388:	27 95       	ror	r18
    138a:	90 25       	eor	r25, r0
    138c:	82 27       	eor	r24, r18
    138e:	90 93 83 01 	sts	0x0183, r25
    1392:	80 93 82 01 	sts	0x0182, r24
    1396:	88 e0       	ldi	r24, 0x08	; 8
    1398:	80 93 8b 01 	sts	0x018B, r24
    139c:	80 91 89 01 	lds	r24, 0x0189
    13a0:	90 91 8a 01 	lds	r25, 0x018A
    13a4:	88 63       	ori	r24, 0x38	; 56
    13a6:	90 93 8a 01 	sts	0x018A, r25
    13aa:	80 93 89 01 	sts	0x0189, r24
    13ae:	80 91 89 01 	lds	r24, 0x0189
    13b2:	90 91 8a 01 	lds	r25, 0x018A
    13b6:	6f ce       	rjmp	.-802    	; 0x1096 <_ZL9rf12_xferj>

000013b8 <_Z14rf12_sendStarthPKvh>:
    13b8:	cf 93       	push	r28
    13ba:	c8 2f       	mov	r28, r24
    13bc:	40 93 3d 01 	sts	0x013D, r20
    13c0:	2e e3       	ldi	r18, 0x3E	; 62
    13c2:	31 e0       	ldi	r19, 0x01	; 1
    13c4:	50 e0       	ldi	r21, 0x00	; 0
    13c6:	82 2f       	mov	r24, r18
    13c8:	93 2f       	mov	r25, r19
    13ca:	84 d3       	rcall	.+1800   	; 0x1ad4 <memcpy>
    13cc:	8c 2f       	mov	r24, r28
    13ce:	ab df       	rcall	.-170    	; 0x1326 <_Z14rf12_sendStarth>
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <_Z13rf12_sendWaith>:
    13d4:	44 e0       	ldi	r20, 0x04	; 4
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	5c e0       	ldi	r21, 0x0C	; 12
    13da:	16 c0       	rjmp	.+44     	; 0x1408 <_Z13rf12_sendWaith+0x34>
    13dc:	88 23       	and	r24, r24
    13de:	a1 f0       	breq	.+40     	; 0x1408 <_Z13rf12_sendWaith+0x34>
    13e0:	93 b7       	in	r25, 0x33	; 51
    13e2:	91 7f       	andi	r25, 0xF1	; 241
    13e4:	83 30       	cpi	r24, 0x03	; 3
    13e6:	21 f0       	breq	.+8      	; 0x13f0 <_Z13rf12_sendWaith+0x1c>
    13e8:	82 30       	cpi	r24, 0x02	; 2
    13ea:	21 f4       	brne	.+8      	; 0x13f4 <_Z13rf12_sendWaith+0x20>
    13ec:	25 2f       	mov	r18, r21
    13ee:	03 c0       	rjmp	.+6      	; 0x13f6 <_Z13rf12_sendWaith+0x22>
    13f0:	24 2f       	mov	r18, r20
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <_Z13rf12_sendWaith+0x22>
    13f4:	23 2f       	mov	r18, r19
    13f6:	92 2b       	or	r25, r18
    13f8:	93 bf       	out	0x33, r25	; 51
    13fa:	93 b7       	in	r25, 0x33	; 51
    13fc:	91 60       	ori	r25, 0x01	; 1
    13fe:	93 bf       	out	0x33, r25	; 51
    1400:	88 95       	sleep
    1402:	93 b7       	in	r25, 0x33	; 51
    1404:	9e 7f       	andi	r25, 0xFE	; 254
    1406:	93 bf       	out	0x33, r25	; 51
    1408:	90 91 8b 01 	lds	r25, 0x018B
    140c:	94 30       	cpi	r25, 0x04	; 4
    140e:	31 f7       	brne	.-52     	; 0x13dc <_Z13rf12_sendWaith+0x8>
    1410:	08 95       	ret

00001412 <_Z21rf12_interruptcontrolv>:
    1412:	e8 9a       	sbi	0x1d, 0	; 29
    1414:	08 95       	ret

00001416 <_Z12rf12_restorehhh>:
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	d6 2f       	mov	r29, r22
    141c:	c4 2f       	mov	r28, r20
    141e:	80 93 8f 01 	sts	0x018F, r24
    1422:	40 93 8d 01 	sts	0x018D, r20
    1426:	60 93 90 01 	sts	0x0190, r22
    142a:	f3 df       	rcall	.-26     	; 0x1412 <_Z21rf12_interruptcontrolv>
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	72 df       	rcall	.-284    	; 0x1314 <_Z19rf12_setFixedLengthh>
    1430:	28 de       	rcall	.-944    	; 0x1082 <_ZL15blockInterruptsv>
    1432:	25 e0       	ldi	r18, 0x05	; 5
    1434:	32 e8       	ldi	r19, 0x82	; 130
    1436:	30 93 8a 01 	sts	0x018A, r19
    143a:	20 93 89 01 	sts	0x0189, r18
    143e:	80 91 89 01 	lds	r24, 0x0189
    1442:	90 91 8a 01 	lds	r25, 0x018A
    1446:	27 de       	rcall	.-946    	; 0x1096 <_ZL9rf12_xferj>
    1448:	20 e1       	ldi	r18, 0x10	; 16
    144a:	d2 9f       	mul	r29, r18
    144c:	c0 01       	movw	r24, r0
    144e:	11 24       	eor	r1, r1
    1450:	87 6c       	ori	r24, 0xC7	; 199
    1452:	90 68       	ori	r25, 0x80	; 128
    1454:	20 de       	rcall	.-960    	; 0x1096 <_ZL9rf12_xferj>
    1456:	80 e4       	ldi	r24, 0x40	; 64
    1458:	96 ea       	ldi	r25, 0xA6	; 166
    145a:	1d de       	rcall	.-966    	; 0x1096 <_ZL9rf12_xferj>
    145c:	86 e0       	ldi	r24, 0x06	; 6
    145e:	06 df       	rcall	.-500    	; 0x126c <_Z15rf12_setBitrateh>
    1460:	82 ea       	ldi	r24, 0xA2	; 162
    1462:	94 e9       	ldi	r25, 0x94	; 148
    1464:	18 de       	rcall	.-976    	; 0x1096 <_ZL9rf12_xferj>
    1466:	8c ea       	ldi	r24, 0xAC	; 172
    1468:	92 ec       	ldi	r25, 0xC2	; 194
    146a:	15 de       	rcall	.-982    	; 0x1096 <_ZL9rf12_xferj>
    146c:	cc 23       	and	r28, r28
    146e:	41 f0       	breq	.+16     	; 0x1480 <_Z12rf12_restorehhh+0x6a>
    1470:	83 e8       	ldi	r24, 0x83	; 131
    1472:	9a ec       	ldi	r25, 0xCA	; 202
    1474:	10 de       	rcall	.-992    	; 0x1096 <_ZL9rf12_xferj>
    1476:	8c 2f       	mov	r24, r28
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	9e 6c       	ori	r25, 0xCE	; 206
    147c:	0c de       	rcall	.-1000   	; 0x1096 <_ZL9rf12_xferj>
    147e:	06 c0       	rjmp	.+12     	; 0x148c <_Z12rf12_restorehhh+0x76>
    1480:	8b e8       	ldi	r24, 0x8B	; 139
    1482:	9a ec       	ldi	r25, 0xCA	; 202
    1484:	08 de       	rcall	.-1008   	; 0x1096 <_ZL9rf12_xferj>
    1486:	8d e2       	ldi	r24, 0x2D	; 45
    1488:	9e ec       	ldi	r25, 0xCE	; 206
    148a:	05 de       	rcall	.-1014   	; 0x1096 <_ZL9rf12_xferj>
    148c:	83 e8       	ldi	r24, 0x83	; 131
    148e:	94 ec       	ldi	r25, 0xC4	; 196
    1490:	02 de       	rcall	.-1020   	; 0x1096 <_ZL9rf12_xferj>
    1492:	80 e5       	ldi	r24, 0x50	; 80
    1494:	98 e9       	ldi	r25, 0x98	; 152
    1496:	ff dd       	rcall	.-1026   	; 0x1096 <_ZL9rf12_xferj>
    1498:	87 e7       	ldi	r24, 0x77	; 119
    149a:	9c ec       	ldi	r25, 0xCC	; 204
    149c:	fc dd       	rcall	.-1032   	; 0x1096 <_ZL9rf12_xferj>
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	90 ee       	ldi	r25, 0xE0	; 224
    14a2:	f9 dd       	rcall	.-1038   	; 0x1096 <_ZL9rf12_xferj>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	98 ec       	ldi	r25, 0xC8	; 200
    14a8:	f6 dd       	rcall	.-1044   	; 0x1096 <_ZL9rf12_xferj>
    14aa:	89 e4       	ldi	r24, 0x49	; 73
    14ac:	90 ec       	ldi	r25, 0xC0	; 192
    14ae:	f3 dd       	rcall	.-1050   	; 0x1096 <_ZL9rf12_xferj>
    14b0:	84 e0       	ldi	r24, 0x04	; 4
    14b2:	80 93 8b 01 	sts	0x018B, r24
    14b6:	e7 dd       	rcall	.-1074   	; 0x1086 <_ZL15allowInterruptsv>
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <_Z15rf12_initializehhh>:
    14be:	1f 93       	push	r17
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	c8 2f       	mov	r28, r24
    14c6:	d6 2f       	mov	r29, r22
    14c8:	14 2f       	mov	r17, r20
    14ca:	80 93 8f 01 	sts	0x018F, r24
    14ce:	40 93 8d 01 	sts	0x018D, r20
    14d2:	60 93 90 01 	sts	0x0190, r22
    14d6:	0d de       	rcall	.-998    	; 0x10f2 <_Z12rf12_spiInitv>
    14d8:	9c df       	rcall	.-200    	; 0x1412 <_Z21rf12_interruptcontrolv>
    14da:	82 e8       	ldi	r24, 0x82	; 130
    14dc:	9a ec       	ldi	r25, 0xCA	; 202
    14de:	db dd       	rcall	.-1098   	; 0x1096 <_ZL9rf12_xferj>
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	9e ef       	ldi	r25, 0xFE	; 254
    14e4:	d8 dd       	rcall	.-1104   	; 0x1096 <_ZL9rf12_xferj>
    14e6:	85 e0       	ldi	r24, 0x05	; 5
    14e8:	80 93 8b 01 	sts	0x018B, r24
    14ec:	83 b7       	in	r24, 0x33	; 51
    14ee:	81 7f       	andi	r24, 0xF1	; 241
    14f0:	83 bf       	out	0x33, r24	; 51
    14f2:	80 91 8b 01 	lds	r24, 0x018B
    14f6:	85 30       	cpi	r24, 0x05	; 5
    14f8:	59 f4       	brne	.+22     	; 0x1510 <_Z15rf12_initializehhh+0x52>
    14fa:	93 b7       	in	r25, 0x33	; 51
    14fc:	91 60       	ori	r25, 0x01	; 1
    14fe:	93 bf       	out	0x33, r25	; 51
    1500:	88 95       	sleep
    1502:	93 b7       	in	r25, 0x33	; 51
    1504:	9e 7f       	andi	r25, 0xFE	; 254
    1506:	93 bf       	out	0x33, r25	; 51
    1508:	90 91 8b 01 	lds	r25, 0x018B
    150c:	95 30       	cpi	r25, 0x05	; 5
    150e:	a9 f3       	breq	.-22     	; 0x14fa <_Z15rf12_initializehhh+0x3c>
    1510:	41 2f       	mov	r20, r17
    1512:	6d 2f       	mov	r22, r29
    1514:	8c 2f       	mov	r24, r28
    1516:	7f df       	rcall	.-258    	; 0x1416 <_Z12rf12_restorehhh>
    1518:	80 91 8f 01 	lds	r24, 0x018F
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	1f 91       	pop	r17
    1522:	08 95       	ret

00001524 <_Z16rf12_setWatchdogm>:
/// interrupt in the RFM12 module. Use rf12_wakeup() to check if the wakeup-interrupt
/// fired. This allows very deep sleep states (timer off) while still being able to wakeup
/// because of the external interrupt. The RFM12b wakeup-timer only needs about 1.5µA.
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
    1524:	cf 92       	push	r12
    1526:	df 92       	push	r13
    1528:	ef 92       	push	r14
    152a:	ff 92       	push	r15
    152c:	cf 93       	push	r28
    152e:	6b 01       	movw	r12, r22
    1530:	7c 01       	movw	r14, r24
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    1532:	8f ef       	ldi	r24, 0xFF	; 255
    1534:	c8 16       	cp	r12, r24
    1536:	d1 04       	cpc	r13, r1
    1538:	e1 04       	cpc	r14, r1
    153a:	f1 04       	cpc	r15, r1
    153c:	79 f0       	breq	.+30     	; 0x155c <_Z16rf12_setWatchdogm+0x38>
    153e:	70 f0       	brcs	.+28     	; 0x155c <_Z16rf12_setWatchdogm+0x38>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    1540:	c0 e0       	ldi	r28, 0x00	; 0
	while (m > 255) {
		r  += 1;
    1542:	cf 5f       	subi	r28, 0xFF	; 255
		m >>= 1;
    1544:	f6 94       	lsr	r15
    1546:	e7 94       	ror	r14
    1548:	d7 94       	ror	r13
    154a:	c7 94       	ror	r12
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    154c:	8f ef       	ldi	r24, 0xFF	; 255
    154e:	c8 16       	cp	r12, r24
    1550:	d1 04       	cpc	r13, r1
    1552:	e1 04       	cpc	r14, r1
    1554:	f1 04       	cpc	r15, r1
    1556:	09 f0       	breq	.+2      	; 0x155a <_Z16rf12_setWatchdogm+0x36>
    1558:	a0 f7       	brcc	.-24     	; 0x1542 <_Z16rf12_setWatchdogm+0x1e>
    155a:	01 c0       	rjmp	.+2      	; 0x155e <_Z16rf12_setWatchdogm+0x3a>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    155c:	c0 e0       	ldi	r28, 0x00	; 0
		m >>= 1;
	}
	
	// Disable old wakeup-timer if enabled
//	if (bitRead(rfmstate,1)) {
	if ((rfmstate>>1)&0x01){
    155e:	80 91 89 01 	lds	r24, 0x0189
    1562:	90 91 8a 01 	lds	r25, 0x018A
    1566:	81 ff       	sbrs	r24, 1
    1568:	0e c0       	rjmp	.+28     	; 0x1586 <_Z16rf12_setWatchdogm+0x62>
		//bitClear(rfmstate,1);
		rfmstate &= ~(1 << 1);
    156a:	80 91 89 01 	lds	r24, 0x0189
    156e:	90 91 8a 01 	lds	r25, 0x018A
    1572:	8d 7f       	andi	r24, 0xFD	; 253
    1574:	90 93 8a 01 	sts	0x018A, r25
    1578:	80 93 89 01 	sts	0x0189, r24
		rf12_xfer(rfmstate);
    157c:	80 91 89 01 	lds	r24, 0x0189
    1580:	90 91 8a 01 	lds	r25, 0x018A
    1584:	88 dd       	rcall	.-1264   	; 0x1096 <_ZL9rf12_xferj>
	}
	
	// enable wakeup call if we have to
	if (m>0) {
    1586:	c1 14       	cp	r12, r1
    1588:	d1 04       	cpc	r13, r1
    158a:	e1 04       	cpc	r14, r1
    158c:	f1 04       	cpc	r15, r1
    158e:	b1 f0       	breq	.+44     	; 0x15bc <_Z16rf12_setWatchdogm+0x98>
		// write time to wakeup-register
		rf12_xfer(RF_WAKEUP_TIMER | (r<<8) | m);
    1590:	3c 2f       	mov	r19, r28
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	d7 01       	movw	r26, r14
    1596:	c6 01       	movw	r24, r12
    1598:	90 6e       	ori	r25, 0xE0	; 224
    159a:	82 2b       	or	r24, r18
    159c:	93 2b       	or	r25, r19
    159e:	7b dd       	rcall	.-1290   	; 0x1096 <_ZL9rf12_xferj>
		// enable wakeup
		//bitSet(rfmstate,1);
		rfmstate |= (1 << 1);
    15a0:	80 91 89 01 	lds	r24, 0x0189
    15a4:	90 91 8a 01 	lds	r25, 0x018A
    15a8:	82 60       	ori	r24, 0x02	; 2
    15aa:	90 93 8a 01 	sts	0x018A, r25
    15ae:	80 93 89 01 	sts	0x0189, r24
		rf12_xfer(rfmstate);
    15b2:	80 91 89 01 	lds	r24, 0x0189
    15b6:	90 91 8a 01 	lds	r25, 0x018A
    15ba:	6d dd       	rcall	.-1318   	; 0x1096 <_ZL9rf12_xferj>
	}
}
    15bc:	cf 91       	pop	r28
    15be:	ff 90       	pop	r15
    15c0:	ef 90       	pop	r14
    15c2:	df 90       	pop	r13
    15c4:	cf 90       	pop	r12
    15c6:	08 95       	ret

000015c8 <__vector_1>:
	}

}


ISR(INT0_vect) {
    15c8:	1f 92       	push	r1
    15ca:	0f 92       	push	r0
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	0f 92       	push	r0
    15d0:	11 24       	eor	r1, r1
    15d2:	1f 93       	push	r17
    15d4:	2f 93       	push	r18
    15d6:	3f 93       	push	r19
    15d8:	4f 93       	push	r20
    15da:	5f 93       	push	r21
    15dc:	6f 93       	push	r22
    15de:	7f 93       	push	r23
    15e0:	8f 93       	push	r24
    15e2:	9f 93       	push	r25
    15e4:	af 93       	push	r26
    15e6:	bf 93       	push	r27
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	ef 93       	push	r30
    15ee:	ff 93       	push	r31
/// Requests RFM12 state from RF module and reads back a waiting data byte if there is
/// any.
/// One of two commands accessing SPI, so interrupts disabled in here
/// @param *data Pointer to  byte where to write the received data to (if any)
static uint16_t rf12_xferState (uint8_t *data) {
	blockInterrupts();
    15f0:	48 dd       	rcall	.-1392   	; 0x1082 <_ZL15blockInterruptsv>

	// writing can take place at full speed, even 8 MHz works
	//bitClear(SS_PORT, cs_pin);
	PORT_RFM_CS &= ~(1<<BIT_RFM_CS); //clear CS
    15f2:	2a 98       	cbi	0x05, 2	; 5
	uint16_t res = rf12_byte(0x00) << 8;
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	49 dd       	rcall	.-1390   	; 0x108a <_ZL9rf12_byteh>
    15f8:	d8 2f       	mov	r29, r24
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	c8 2f       	mov	r28, r24
	res |= rf12_byte(0x00);
    15fe:	45 dd       	rcall	.-1398   	; 0x108a <_ZL9rf12_byteh>
    1600:	c8 2b       	or	r28, r24
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
    1602:	dd 23       	and	r29, r29
    1604:	2c f4       	brge	.+10     	; 0x1610 <__vector_1+0x48>
    1606:	80 91 8b 01 	lds	r24, 0x018B
    160a:	87 30       	cpi	r24, 0x07	; 7
    160c:	09 f4       	brne	.+2      	; 0x1610 <__vector_1+0x48>
    160e:	0f c1       	rjmp	.+542    	; 0x182e <__vector_1+0x266>
		#if F_CPU > 10000000
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
		#endif
	}
	
	PORT_RFM_CS |= (1 << BIT_RFM_CS); //  bitSet(SS_PORT, cs_pin);
    1610:	2a 9a       	sbi	0x05, 2	; 5

	allowInterrupts();
    1612:	39 dd       	rcall	.-1422   	; 0x1086 <_ZL15allowInterruptsv>
/// @details
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uint8_t in;
	state = rf12_xferState(&in);
    1614:	d0 93 88 01 	sts	0x0188, r29
    1618:	c0 93 87 01 	sts	0x0187, r28

	// data received or byte needed for sending
	if (state & RF_FIFO_BIT) {
    161c:	20 91 87 01 	lds	r18, 0x0187
    1620:	30 91 88 01 	lds	r19, 0x0188
    1624:	33 23       	and	r19, r19
    1626:	0c f0       	brlt	.+2      	; 0x162a <__vector_1+0x62>
    1628:	e1 c0       	rjmp	.+450    	; 0x17ec <__vector_1+0x224>
		
		// RECEIVING - RECEIVING - RECEIVING!
		if (rxstate == TXRECV) {  // we are receiving
    162a:	80 91 8b 01 	lds	r24, 0x018B
    162e:	87 30       	cpi	r24, 0x07	; 7
    1630:	09 f0       	breq	.+2      	; 0x1634 <__vector_1+0x6c>
    1632:	78 c0       	rjmp	.+240    	; 0x1724 <__vector_1+0x15c>

			if (rxfill == 0 && group != 0)
    1634:	80 91 8c 01 	lds	r24, 0x018C
    1638:	81 11       	cpse	r24, r1
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <__vector_1+0x7c>
    163c:	80 91 8d 01 	lds	r24, 0x018D
    1640:	81 11       	cpse	r24, r1
    1642:	ff c0       	rjmp	.+510    	; 0x1842 <__vector_1+0x27a>
			rf12_buf[rxfill++] = group;

			rf12_buf[rxfill++] = in;
    1644:	80 91 8c 01 	lds	r24, 0x018C
    1648:	e8 2f       	mov	r30, r24
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	e5 5c       	subi	r30, 0xC5	; 197
    164e:	fe 4f       	sbci	r31, 0xFE	; 254
    1650:	10 83       	st	Z, r17
    1652:	8f 5f       	subi	r24, 0xFF	; 255
    1654:	80 93 8c 01 	sts	0x018C, r24
			rf12_crc = _crc16_update(rf12_crc, in);
    1658:	20 91 82 01 	lds	r18, 0x0182
    165c:	30 91 83 01 	lds	r19, 0x0183
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    1660:	21 27       	eor	r18, r17
    1662:	12 2f       	mov	r17, r18
    1664:	12 95       	swap	r17
    1666:	12 27       	eor	r17, r18
    1668:	01 2e       	mov	r0, r17
    166a:	16 95       	lsr	r17
    166c:	16 95       	lsr	r17
    166e:	10 25       	eor	r17, r0
    1670:	01 2e       	mov	r0, r17
    1672:	16 95       	lsr	r17
    1674:	10 25       	eor	r17, r0
    1676:	17 70       	andi	r17, 0x07	; 7
    1678:	02 2e       	mov	r0, r18
    167a:	23 2f       	mov	r18, r19
    167c:	16 95       	lsr	r17
    167e:	07 94       	ror	r0
    1680:	17 95       	ror	r17
    1682:	30 2d       	mov	r19, r0
    1684:	21 27       	eor	r18, r17
    1686:	06 94       	lsr	r0
    1688:	17 95       	ror	r17
    168a:	30 25       	eor	r19, r0
    168c:	21 27       	eor	r18, r17
    168e:	30 93 83 01 	sts	0x0183, r19
    1692:	20 93 82 01 	sts	0x0182, r18

		

		
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
    1696:	e0 91 85 01 	lds	r30, 0x0185
    169a:	e3 30       	cpi	r30, 0x03	; 3
    169c:	18 f5       	brcc	.+70     	; 0x16e4 <__vector_1+0x11c>
    169e:	80 91 8c 01 	lds	r24, 0x018C
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 97       	sbiw	r24, 0x02	; 2
    16a6:	60 91 84 01 	lds	r22, 0x0184
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	ca d1       	rcall	.+916    	; 0x1a42 <__divmodhi4>
    16ae:	89 2b       	or	r24, r25
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <__vector_1+0xec>
    16b2:	d2 c0       	rjmp	.+420    	; 0x1858 <__vector_1+0x290>
    16b4:	17 c0       	rjmp	.+46     	; 0x16e4 <__vector_1+0x11c>
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
    16b8:	ea 5e       	subi	r30, 0xEA	; 234
    16ba:	fe 4f       	sbci	r31, 0xFE	; 254
				: (drssi_dec_tree[drssi] >> 4);
    16bc:	80 81       	ld	r24, Z
    16be:	8f 70       	andi	r24, 0x0F	; 15
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <__vector_1+0x106>
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	ea 5e       	subi	r30, 0xEA	; 234
    16c6:	fe 4f       	sbci	r31, 0xFE	; 254
    16c8:	80 81       	ld	r24, Z
    16ca:	82 95       	swap	r24
    16cc:	8f 70       	andi	r24, 0x0F	; 15
    16ce:	80 93 85 01 	sts	0x0185, r24
				if ( drssi < 3 ) {     // not yet final destination, set new threshold
    16d2:	83 30       	cpi	r24, 0x03	; 3
    16d4:	38 f4       	brcc	.+14     	; 0x16e4 <__vector_1+0x11c>
					rf12_xfer(RF_RECV_CONTROL | drssi*2+1);
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	80 6a       	ori	r24, 0xA0	; 160
    16e0:	94 69       	ori	r25, 0x94	; 148
    16e2:	d9 dc       	rcall	.-1614   	; 0x1096 <_ZL9rf12_xferj>
				}
			}

		
			// check if we got all the bytes (or maximum packet length was reached)
			if (fixedLength) {
    16e4:	80 91 8e 01 	lds	r24, 0x018E
    16e8:	88 23       	and	r24, r24
    16ea:	59 f0       	breq	.+22     	; 0x1702 <__vector_1+0x13a>
				if (rxfill >= fixedLength || rxfill >= RF_MAX) {
    16ec:	90 91 8c 01 	lds	r25, 0x018C
    16f0:	98 17       	cp	r25, r24
    16f2:	28 f4       	brcc	.+10     	; 0x16fe <__vector_1+0x136>
    16f4:	80 91 8c 01 	lds	r24, 0x018C
    16f8:	87 34       	cpi	r24, 0x47	; 71
    16fa:	08 f4       	brcc	.+2      	; 0x16fe <__vector_1+0x136>
    16fc:	77 c0       	rjmp	.+238    	; 0x17ec <__vector_1+0x224>
					rf12_idle();
    16fe:	e2 dc       	rcall	.-1596   	; 0x10c4 <_ZL9rf12_idlev>
    1700:	75 c0       	rjmp	.+234    	; 0x17ec <__vector_1+0x224>
				}
			} else if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX) {
    1702:	20 91 8c 01 	lds	r18, 0x018C
    1706:	80 91 3d 01 	lds	r24, 0x013D
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	05 96       	adiw	r24, 0x05	; 5
    1710:	28 17       	cp	r18, r24
    1712:	39 07       	cpc	r19, r25
    1714:	2c f4       	brge	.+10     	; 0x1720 <__vector_1+0x158>
    1716:	80 91 8c 01 	lds	r24, 0x018C
    171a:	87 34       	cpi	r24, 0x47	; 71
    171c:	08 f4       	brcc	.+2      	; 0x1720 <__vector_1+0x158>
    171e:	66 c0       	rjmp	.+204    	; 0x17ec <__vector_1+0x224>
				rf12_idle();
    1720:	d1 dc       	rcall	.-1630   	; 0x10c4 <_ZL9rf12_idlev>
    1722:	64 c0       	rjmp	.+200    	; 0x17ec <__vector_1+0x224>
					
			// SENDING - SENDING - SENDING!
			} else {                  // we are sending
			uint8_t out;

			if (rxstate < 0) {
    1724:	80 91 8b 01 	lds	r24, 0x018B
    1728:	88 23       	and	r24, r24
    172a:	0c f0       	brlt	.+2      	; 0x172e <__vector_1+0x166>
    172c:	2f c0       	rjmp	.+94     	; 0x178c <__vector_1+0x1c4>
				uint8_t pos = 3 + rf12_len + rxstate++;
    172e:	e0 91 3d 01 	lds	r30, 0x013D
    1732:	80 91 8b 01 	lds	r24, 0x018B
    1736:	98 2f       	mov	r25, r24
    1738:	9f 5f       	subi	r25, 0xFF	; 255
    173a:	90 93 8b 01 	sts	0x018B, r25
    173e:	ed 5f       	subi	r30, 0xFD	; 253
    1740:	8e 0f       	add	r24, r30
				out = rf12_buf[pos];
    1742:	e8 2f       	mov	r30, r24
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	e5 5c       	subi	r30, 0xC5	; 197
    1748:	fe 4f       	sbci	r31, 0xFE	; 254
    174a:	80 81       	ld	r24, Z
				rf12_crc = _crc16_update(rf12_crc, out);
    174c:	20 91 82 01 	lds	r18, 0x0182
    1750:	30 91 83 01 	lds	r19, 0x0183
    1754:	28 27       	eor	r18, r24
    1756:	92 2f       	mov	r25, r18
    1758:	92 95       	swap	r25
    175a:	92 27       	eor	r25, r18
    175c:	09 2e       	mov	r0, r25
    175e:	96 95       	lsr	r25
    1760:	96 95       	lsr	r25
    1762:	90 25       	eor	r25, r0
    1764:	09 2e       	mov	r0, r25
    1766:	96 95       	lsr	r25
    1768:	90 25       	eor	r25, r0
    176a:	97 70       	andi	r25, 0x07	; 7
    176c:	02 2e       	mov	r0, r18
    176e:	23 2f       	mov	r18, r19
    1770:	96 95       	lsr	r25
    1772:	07 94       	ror	r0
    1774:	97 95       	ror	r25
    1776:	30 2d       	mov	r19, r0
    1778:	29 27       	eor	r18, r25
    177a:	06 94       	lsr	r0
    177c:	97 95       	ror	r25
    177e:	30 25       	eor	r19, r0
    1780:	29 27       	eor	r18, r25
    1782:	30 93 83 01 	sts	0x0183, r19
    1786:	20 93 82 01 	sts	0x0182, r18
    178a:	2d c0       	rjmp	.+90     	; 0x17e6 <__vector_1+0x21e>
			} else
			switch (rxstate++) {
    178c:	80 91 8b 01 	lds	r24, 0x018B
    1790:	98 2f       	mov	r25, r24
    1792:	9f 5f       	subi	r25, 0xFF	; 255
    1794:	90 93 8b 01 	sts	0x018B, r25
    1798:	83 30       	cpi	r24, 0x03	; 3
    179a:	09 f1       	breq	.+66     	; 0x17de <__vector_1+0x216>
    179c:	2c f4       	brge	.+10     	; 0x17a8 <__vector_1+0x1e0>
    179e:	88 23       	and	r24, r24
    17a0:	99 f0       	breq	.+38     	; 0x17c8 <__vector_1+0x200>
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	f9 f4       	brne	.+62     	; 0x17e4 <__vector_1+0x21c>
    17a6:	15 c0       	rjmp	.+42     	; 0x17d2 <__vector_1+0x20a>
    17a8:	8b 30       	cpi	r24, 0x0B	; 11
    17aa:	19 f0       	breq	.+6      	; 0x17b2 <__vector_1+0x1ea>
    17ac:	8c 30       	cpi	r24, 0x0C	; 12
    17ae:	d1 f4       	brne	.+52     	; 0x17e4 <__vector_1+0x21c>
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <__vector_1+0x1ee>
				case TXSYN1: out = 0x2D; break;
    17b2:	8d e2       	ldi	r24, 0x2D	; 45
    17b4:	18 c0       	rjmp	.+48     	; 0x17e6 <__vector_1+0x21e>
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
    17b6:	80 91 8d 01 	lds	r24, 0x018D
    17ba:	20 91 3d 01 	lds	r18, 0x013D
    17be:	9e ef       	ldi	r25, 0xFE	; 254
    17c0:	92 1b       	sub	r25, r18
    17c2:	90 93 8b 01 	sts	0x018B, r25
    17c6:	0f c0       	rjmp	.+30     	; 0x17e6 <__vector_1+0x21e>
				case TXCRC1: out = rf12_crc; break;
    17c8:	80 91 82 01 	lds	r24, 0x0182
    17cc:	90 91 83 01 	lds	r25, 0x0183
    17d0:	0a c0       	rjmp	.+20     	; 0x17e6 <__vector_1+0x21e>
				case TXCRC2: out = rf12_crc >> 8; break;
    17d2:	80 91 82 01 	lds	r24, 0x0182
    17d6:	90 91 83 01 	lds	r25, 0x0183
    17da:	89 2f       	mov	r24, r25
    17dc:	04 c0       	rjmp	.+8      	; 0x17e6 <__vector_1+0x21e>
				case TXDONE: rf12_idle(); // fall through
    17de:	72 dc       	rcall	.-1820   	; 0x10c4 <_ZL9rf12_idlev>
				default:     out = 0xAA;
    17e0:	8a ea       	ldi	r24, 0xAA	; 170
    17e2:	01 c0       	rjmp	.+2      	; 0x17e6 <__vector_1+0x21e>
    17e4:	8a ea       	ldi	r24, 0xAA	; 170
			}

			rf12_xfer(RF_TXREG_WRITE | out);
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	98 6b       	ori	r25, 0xB8	; 184
    17ea:	55 dc       	rcall	.-1878   	; 0x1096 <_ZL9rf12_xferj>
	}
	

	
	// power-on reset
	if (state & RF_POR_BIT) {
    17ec:	80 91 87 01 	lds	r24, 0x0187
    17f0:	90 91 88 01 	lds	r25, 0x0188
    17f4:	96 ff       	sbrs	r25, 6
    17f6:	03 c0       	rjmp	.+6      	; 0x17fe <__vector_1+0x236>
		rxstate = POR_RECEIVED;
    17f8:	86 e0       	ldi	r24, 0x06	; 6
    17fa:	80 93 8b 01 	sts	0x018B, r24
	}

	// got wakeup call
	if (state & RF_WDG_BIT) {
    17fe:	80 91 87 01 	lds	r24, 0x0187
    1802:	90 91 88 01 	lds	r25, 0x0188
    1806:	94 ff       	sbrs	r25, 4
    1808:	07 c0       	rjmp	.+14     	; 0x1818 <__vector_1+0x250>
		rf12_setWatchdog(0);
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	cb 01       	movw	r24, r22
    1810:	89 de       	rcall	.-750    	; 0x1524 <_Z16rf12_setWatchdogm>
		rf12_gotwakeup = 1;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	80 93 86 01 	sts	0x0186, r24
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
    1818:	80 91 87 01 	lds	r24, 0x0187
    181c:	90 91 88 01 	lds	r25, 0x0188
    1820:	95 ff       	sbrs	r25, 5
    1822:	21 c0       	rjmp	.+66     	; 0x1866 <__vector_1+0x29e>
		//PORTB |= _BV(0); // pb0 aan
		rf12_idle();
    1824:	4f dc       	rcall	.-1890   	; 0x10c4 <_ZL9rf12_idlev>
		//PORTB &= ~_BV(0); // pb0 uit
		rxstate = TXIDLE;
    1826:	84 e0       	ldi	r24, 0x04	; 4
    1828:	80 93 8b 01 	sts	0x018B, r24
    182c:	1c c0       	rjmp	.+56     	; 0x1866 <__vector_1+0x29e>
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
		// slow down to under 2.5 MHz
		#if F_CPU > 10000000

		SPCR |= (1 << SPR0); //  bitSet(SPCR, SPR0);
    182e:	8c b5       	in	r24, 0x2c	; 44
    1830:	81 60       	ori	r24, 0x01	; 1
    1832:	8c bd       	out	0x2c, r24	; 44
		#endif
		
		*data = rf12_byte(0x00);
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	29 dc       	rcall	.-1966   	; 0x108a <_ZL9rf12_byteh>
    1838:	18 2f       	mov	r17, r24
		
		#if F_CPU > 10000000
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
    183a:	8c b5       	in	r24, 0x2c	; 44
    183c:	8e 7f       	andi	r24, 0xFE	; 254
    183e:	8c bd       	out	0x2c, r24	; 44
    1840:	e7 ce       	rjmp	.-562    	; 0x1610 <__vector_1+0x48>
		
		// RECEIVING - RECEIVING - RECEIVING!
		if (rxstate == TXRECV) {  // we are receiving

			if (rxfill == 0 && group != 0)
			rf12_buf[rxfill++] = group;
    1842:	90 91 8c 01 	lds	r25, 0x018C
    1846:	e9 2f       	mov	r30, r25
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	e5 5c       	subi	r30, 0xC5	; 197
    184c:	fe 4f       	sbci	r31, 0xFE	; 254
    184e:	80 83       	st	Z, r24
    1850:	9f 5f       	subi	r25, 0xFF	; 255
    1852:	90 93 8c 01 	sts	0x018C, r25
    1856:	f6 ce       	rjmp	.-532    	; 0x1644 <__vector_1+0x7c>
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    1858:	80 91 87 01 	lds	r24, 0x0187
    185c:	90 91 88 01 	lds	r25, 0x0188
    1860:	90 fd       	sbrc	r25, 0
    1862:	29 cf       	rjmp	.-430    	; 0x16b6 <__vector_1+0xee>
    1864:	2e cf       	rjmp	.-420    	; 0x16c2 <__vector_1+0xfa>
ISR(INT0_vect) {
//PORTB |= _BV(0); // pb0 aan

		rf12_interrupt();
	//PORTB &= ~_BV(0); // pb0 uit
}
    1866:	ff 91       	pop	r31
    1868:	ef 91       	pop	r30
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	bf 91       	pop	r27
    1870:	af 91       	pop	r26
    1872:	9f 91       	pop	r25
    1874:	8f 91       	pop	r24
    1876:	7f 91       	pop	r23
    1878:	6f 91       	pop	r22
    187a:	5f 91       	pop	r21
    187c:	4f 91       	pop	r20
    187e:	3f 91       	pop	r19
    1880:	2f 91       	pop	r18
    1882:	1f 91       	pop	r17
    1884:	0f 90       	pop	r0
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	0f 90       	pop	r0
    188a:	1f 90       	pop	r1
    188c:	18 95       	reti

0000188e <tone_init>:
#include <avr/power.h>

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume counsigned long _tAC_time;ntrol.

void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
    188e:	21 9a       	sbi	0x04, 1	; 4
    1890:	08 95       	ret

00001892 <noTone>:


	void noTone() {
	//	uart0_puts("STOP");
	//	TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
		 TCCR1B  &= ~(1<<0) | ~(1<<1) | ~(1<<2) ;        // No clock source (Timer/Counter stopped).
    1892:	e1 e8       	ldi	r30, 0x81	; 129
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	80 83       	st	Z, r24
		 TCCR1A  = 0x00;       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
    189a:	10 92 80 00 	sts	0x0080, r1
		 power_timer1_disable();
    189e:	e4 e6       	ldi	r30, 0x64	; 100
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	88 60       	ori	r24, 0x08	; 8
    18a6:	80 83       	st	Z, r24
		PORTB &= ~(1 << 1); // Set pin PB1 to LOW.
    18a8:	29 98       	cbi	0x05, 1	; 5
    18aa:	08 95       	ret

000018ac <tone>:
void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
	
}

void tone(unsigned long frequency, uint8_t volume) {
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	6b 01       	movw	r12, r22
    18ba:	7c 01       	movw	r14, r24
	 power_timer1_enable();
    18bc:	e4 e6       	ldi	r30, 0x64	; 100
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	87 7f       	andi	r24, 0xF7	; 247
    18c4:	80 83       	st	Z, r24
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
    18c6:	c1 14       	cp	r12, r1
    18c8:	d1 04       	cpc	r13, r1
    18ca:	e1 04       	cpc	r14, r1
    18cc:	f1 04       	cpc	r15, r1
    18ce:	11 f0       	breq	.+4      	; 0x18d4 <tone+0x28>
    18d0:	41 11       	cpse	r20, r1
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <tone+0x2c>
    18d4:	de df       	rcall	.-68     	; 0x1892 <noTone>
    18d6:	4d c0       	rjmp	.+154    	; 0x1972 <tone+0xc6>
    18d8:	d4 2f       	mov	r29, r20
    18da:	4b 30       	cpi	r20, 0x0B	; 11
    18dc:	08 f0       	brcs	.+2      	; 0x18e0 <tone+0x34>
    18de:	da e0       	ldi	r29, 0x0A	; 10
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
    18e0:	60 e0       	ldi	r22, 0x00	; 0
    18e2:	72 e1       	ldi	r23, 0x12	; 18
    18e4:	8a e7       	ldi	r24, 0x7A	; 122
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	a7 01       	movw	r20, r14
    18ea:	96 01       	movw	r18, r12
    18ec:	bd d0       	rcall	.+378    	; 0x1a68 <__udivmodsi4>
    18ee:	cc 24       	eor	r12, r12
    18f0:	ca 94       	dec	r12
    18f2:	dc 2c       	mov	r13, r12
    18f4:	76 01       	movw	r14, r12
    18f6:	c2 0e       	add	r12, r18
    18f8:	d3 1e       	adc	r13, r19
    18fa:	e4 1e       	adc	r14, r20
    18fc:	f5 1e       	adc	r15, r21
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    18fe:	c1 14       	cp	r12, r1
    1900:	d1 04       	cpc	r13, r1
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	e8 06       	cpc	r14, r24
    1906:	f1 04       	cpc	r15, r1
    1908:	58 f0       	brcs	.+22     	; 0x1920 <tone+0x74>
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
    190a:	cd 2c       	mov	r12, r13
    190c:	de 2c       	mov	r13, r14
    190e:	ef 2c       	mov	r14, r15
    1910:	ff 24       	eor	r15, r15
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	c8 1a       	sub	r12, r24
    1916:	d1 08       	sbc	r13, r1
    1918:	e1 08       	sbc	r14, r1
    191a:	f1 08       	sbc	r15, r1
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    191c:	c4 e0       	ldi	r28, 0x04	; 4
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <tone+0x76>
	 power_timer1_enable();
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
    1920:	c1 e0       	ldi	r28, 0x01	; 1
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
		}
	
		unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
    1922:	ed 2f       	mov	r30, r29
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	ed 5f       	subi	r30, 0xFD	; 253
    1928:	fe 4f       	sbci	r31, 0xFE	; 254
    192a:	20 81       	ld	r18, Z
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	c7 01       	movw	r24, r14
    1934:	b6 01       	movw	r22, r12
    1936:	98 d0       	rcall	.+304    	; 0x1a68 <__udivmodsi4>
		
		ICR1   = top;							// Set the top.
    1938:	d0 92 87 00 	sts	0x0087, r13
    193c:	c0 92 86 00 	sts	0x0086, r12
		if (TCNT1 > top) TCNT1 = top;			// Counter over the top, put within range.
    1940:	80 91 84 00 	lds	r24, 0x0084
    1944:	90 91 85 00 	lds	r25, 0x0085
    1948:	a0 e0       	ldi	r26, 0x00	; 0
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	c8 16       	cp	r12, r24
    194e:	d9 06       	cpc	r13, r25
    1950:	ea 06       	cpc	r14, r26
    1952:	fb 06       	cpc	r15, r27
    1954:	20 f4       	brcc	.+8      	; 0x195e <tone+0xb2>
    1956:	d0 92 85 00 	sts	0x0085, r13
    195a:	c0 92 84 00 	sts	0x0084, r12
			TCCR1B = _BV(WGM13)  | prescaler;   // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
    195e:	c0 61       	ori	r28, 0x10	; 16
    1960:	c0 93 81 00 	sts	0x0081, r28
			OCR1A  = duty;						// Set the duty cycle (volume).
    1964:	30 93 89 00 	sts	0x0089, r19
    1968:	20 93 88 00 	sts	0x0088, r18
			TCCR1A = _BV(COM1A1);				// Clear OC1A/OC1B on Compare Match (Set output to low level).
    196c:	80 e8       	ldi	r24, 0x80	; 128
    196e:	80 93 80 00 	sts	0x0080, r24
			

}
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	ff 90       	pop	r15
    1978:	ef 90       	pop	r14
    197a:	df 90       	pop	r13
    197c:	cf 90       	pop	r12
    197e:	08 95       	ret

00001980 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1980:	1f 92       	push	r1
    1982:	0f 92       	push	r0
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	0f 92       	push	r0
    1988:	11 24       	eor	r1, r1
    198a:	2f 93       	push	r18
    198c:	3f 93       	push	r19
    198e:	4f 93       	push	r20
    1990:	5f 93       	push	r21
    1992:	8f 93       	push	r24
    1994:	9f 93       	push	r25
    1996:	ef 93       	push	r30
    1998:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    199a:	40 91 c0 00 	lds	r20, 0x00C0
    data = UART0_DATA;
    199e:	50 91 c6 00 	lds	r21, 0x00C6
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    19a2:	48 71       	andi	r20, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    19a4:	80 91 93 01 	lds	r24, 0x0193
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	8f 77       	andi	r24, 0x7F	; 127
    19ae:	99 27       	eor	r25, r25
    
    if ( tmphead == UART_RxTail ) {
    19b0:	20 91 92 01 	lds	r18, 0x0192
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	28 17       	cp	r18, r24
    19b8:	39 07       	cpc	r19, r25
    19ba:	39 f0       	breq	.+14     	; 0x19ca <__vector_18+0x4a>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
    19bc:	80 93 93 01 	sts	0x0193, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    19c0:	fc 01       	movw	r30, r24
    19c2:	ea 56       	subi	r30, 0x6A	; 106
    19c4:	fe 4f       	sbci	r31, 0xFE	; 254
    19c6:	50 83       	st	Z, r21
    19c8:	01 c0       	rjmp	.+2      	; 0x19cc <__vector_18+0x4c>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    19ca:	42 e0       	ldi	r20, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    19cc:	40 93 91 01 	sts	0x0191, r20
}
    19d0:	ff 91       	pop	r31
    19d2:	ef 91       	pop	r30
    19d4:	9f 91       	pop	r25
    19d6:	8f 91       	pop	r24
    19d8:	5f 91       	pop	r21
    19da:	4f 91       	pop	r20
    19dc:	3f 91       	pop	r19
    19de:	2f 91       	pop	r18
    19e0:	0f 90       	pop	r0
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	0f 90       	pop	r0
    19e6:	1f 90       	pop	r1
    19e8:	18 95       	reti

000019ea <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    19ea:	1f 92       	push	r1
    19ec:	0f 92       	push	r0
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	0f 92       	push	r0
    19f2:	11 24       	eor	r1, r1
    19f4:	8f 93       	push	r24
    19f6:	9f 93       	push	r25
    19f8:	ef 93       	push	r30
    19fa:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART_TxHead != UART_TxTail) {
    19fc:	90 91 95 01 	lds	r25, 0x0195
    1a00:	80 91 94 01 	lds	r24, 0x0194
    1a04:	98 17       	cp	r25, r24
    1a06:	79 f0       	breq	.+30     	; 0x1a26 <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
    1a08:	80 91 94 01 	lds	r24, 0x0194
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	8f 77       	andi	r24, 0x7F	; 127
    1a12:	99 27       	eor	r25, r25
        UART_TxTail = tmptail;
    1a14:	80 93 94 01 	sts	0x0194, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1a18:	fc 01       	movw	r30, r24
    1a1a:	ea 5e       	subi	r30, 0xEA	; 234
    1a1c:	fd 4f       	sbci	r31, 0xFD	; 253
    1a1e:	80 81       	ld	r24, Z
    1a20:	80 93 c6 00 	sts	0x00C6, r24
    1a24:	05 c0       	rjmp	.+10     	; 0x1a30 <__vector_19+0x46>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1a26:	e1 ec       	ldi	r30, 0xC1	; 193
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	8f 7d       	andi	r24, 0xDF	; 223
    1a2e:	80 83       	st	Z, r24
    }
}
    1a30:	ff 91       	pop	r31
    1a32:	ef 91       	pop	r30
    1a34:	9f 91       	pop	r25
    1a36:	8f 91       	pop	r24
    1a38:	0f 90       	pop	r0
    1a3a:	0f be       	out	0x3f, r0	; 63
    1a3c:	0f 90       	pop	r0
    1a3e:	1f 90       	pop	r1
    1a40:	18 95       	reti

00001a42 <__divmodhi4>:
    1a42:	97 fb       	bst	r25, 7
    1a44:	07 2e       	mov	r0, r23
    1a46:	16 f4       	brtc	.+4      	; 0x1a4c <__divmodhi4+0xa>
    1a48:	00 94       	com	r0
    1a4a:	06 d0       	rcall	.+12     	; 0x1a58 <__divmodhi4_neg1>
    1a4c:	77 fd       	sbrc	r23, 7
    1a4e:	08 d0       	rcall	.+16     	; 0x1a60 <__divmodhi4_neg2>
    1a50:	2d d0       	rcall	.+90     	; 0x1aac <__udivmodhi4>
    1a52:	07 fc       	sbrc	r0, 7
    1a54:	05 d0       	rcall	.+10     	; 0x1a60 <__divmodhi4_neg2>
    1a56:	3e f4       	brtc	.+14     	; 0x1a66 <__divmodhi4_exit>

00001a58 <__divmodhi4_neg1>:
    1a58:	90 95       	com	r25
    1a5a:	81 95       	neg	r24
    1a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5e:	08 95       	ret

00001a60 <__divmodhi4_neg2>:
    1a60:	70 95       	com	r23
    1a62:	61 95       	neg	r22
    1a64:	7f 4f       	sbci	r23, 0xFF	; 255

00001a66 <__divmodhi4_exit>:
    1a66:	08 95       	ret

00001a68 <__udivmodsi4>:
    1a68:	a1 e2       	ldi	r26, 0x21	; 33
    1a6a:	1a 2e       	mov	r1, r26
    1a6c:	aa 1b       	sub	r26, r26
    1a6e:	bb 1b       	sub	r27, r27
    1a70:	fd 01       	movw	r30, r26
    1a72:	0d c0       	rjmp	.+26     	; 0x1a8e <__udivmodsi4_ep>

00001a74 <__udivmodsi4_loop>:
    1a74:	aa 1f       	adc	r26, r26
    1a76:	bb 1f       	adc	r27, r27
    1a78:	ee 1f       	adc	r30, r30
    1a7a:	ff 1f       	adc	r31, r31
    1a7c:	a2 17       	cp	r26, r18
    1a7e:	b3 07       	cpc	r27, r19
    1a80:	e4 07       	cpc	r30, r20
    1a82:	f5 07       	cpc	r31, r21
    1a84:	20 f0       	brcs	.+8      	; 0x1a8e <__udivmodsi4_ep>
    1a86:	a2 1b       	sub	r26, r18
    1a88:	b3 0b       	sbc	r27, r19
    1a8a:	e4 0b       	sbc	r30, r20
    1a8c:	f5 0b       	sbc	r31, r21

00001a8e <__udivmodsi4_ep>:
    1a8e:	66 1f       	adc	r22, r22
    1a90:	77 1f       	adc	r23, r23
    1a92:	88 1f       	adc	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	1a 94       	dec	r1
    1a98:	69 f7       	brne	.-38     	; 0x1a74 <__udivmodsi4_loop>
    1a9a:	60 95       	com	r22
    1a9c:	70 95       	com	r23
    1a9e:	80 95       	com	r24
    1aa0:	90 95       	com	r25
    1aa2:	9b 01       	movw	r18, r22
    1aa4:	ac 01       	movw	r20, r24
    1aa6:	bd 01       	movw	r22, r26
    1aa8:	cf 01       	movw	r24, r30
    1aaa:	08 95       	ret

00001aac <__udivmodhi4>:
    1aac:	aa 1b       	sub	r26, r26
    1aae:	bb 1b       	sub	r27, r27
    1ab0:	51 e1       	ldi	r21, 0x11	; 17
    1ab2:	07 c0       	rjmp	.+14     	; 0x1ac2 <__udivmodhi4_ep>

00001ab4 <__udivmodhi4_loop>:
    1ab4:	aa 1f       	adc	r26, r26
    1ab6:	bb 1f       	adc	r27, r27
    1ab8:	a6 17       	cp	r26, r22
    1aba:	b7 07       	cpc	r27, r23
    1abc:	10 f0       	brcs	.+4      	; 0x1ac2 <__udivmodhi4_ep>
    1abe:	a6 1b       	sub	r26, r22
    1ac0:	b7 0b       	sbc	r27, r23

00001ac2 <__udivmodhi4_ep>:
    1ac2:	88 1f       	adc	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	5a 95       	dec	r21
    1ac8:	a9 f7       	brne	.-22     	; 0x1ab4 <__udivmodhi4_loop>
    1aca:	80 95       	com	r24
    1acc:	90 95       	com	r25
    1ace:	bc 01       	movw	r22, r24
    1ad0:	cd 01       	movw	r24, r26
    1ad2:	08 95       	ret

00001ad4 <memcpy>:
    1ad4:	fb 01       	movw	r30, r22
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <memcpy+0xa>
    1ada:	01 90       	ld	r0, Z+
    1adc:	0d 92       	st	X+, r0
    1ade:	41 50       	subi	r20, 0x01	; 1
    1ae0:	50 40       	sbci	r21, 0x00	; 0
    1ae2:	d8 f7       	brcc	.-10     	; 0x1ada <memcpy+0x6>
    1ae4:	08 95       	ret

00001ae6 <_exit>:
    1ae6:	f8 94       	cli

00001ae8 <__stop_program>:
    1ae8:	ff cf       	rjmp	.-2      	; 0x1ae8 <__stop_program>
