
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001912  000019a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001912  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000142  0080011a  0080011a  000019c0  2**0
                  ALLOC
  3 .stab         00000d08  00000000  00000000  000019c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000272  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000293a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000400  00000000  00000000  00002969  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000049fa  00000000  00000000  00002d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001495  00000000  00000000  00007763  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000027ed  00000000  00000000  00008bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a38  00000000  00000000  0000b3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000010de  00000000  00000000  0000be20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002b66  00000000  00000000  0000cefe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b0  00000000  00000000  0000fa64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ec c2       	rjmp	.+1496   	; 0x5da <__ctors_end>
       2:	00 00       	nop
       4:	e3 c3       	rjmp	.+1990   	; 0x7cc <__vector_1>
       6:	00 00       	nop
       8:	0f c3       	rjmp	.+1566   	; 0x628 <__bad_interrupt>
       a:	00 00       	nop
       c:	0d c3       	rjmp	.+1562   	; 0x628 <__bad_interrupt>
       e:	00 00       	nop
      10:	0b c3       	rjmp	.+1558   	; 0x628 <__bad_interrupt>
      12:	00 00       	nop
      14:	09 c3       	rjmp	.+1554   	; 0x628 <__bad_interrupt>
      16:	00 00       	nop
      18:	07 c3       	rjmp	.+1550   	; 0x628 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	8f c7       	rjmp	.+3870   	; 0xf3c <__vector_7>
      1e:	00 00       	nop
      20:	03 c3       	rjmp	.+1542   	; 0x628 <__bad_interrupt>
      22:	00 00       	nop
      24:	01 c3       	rjmp	.+1538   	; 0x628 <__bad_interrupt>
      26:	00 00       	nop
      28:	ff c2       	rjmp	.+1534   	; 0x628 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fd c2       	rjmp	.+1530   	; 0x628 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fb c2       	rjmp	.+1526   	; 0x628 <__bad_interrupt>
      32:	00 00       	nop
      34:	f9 c2       	rjmp	.+1522   	; 0x628 <__bad_interrupt>
      36:	00 00       	nop
      38:	84 c3       	rjmp	.+1800   	; 0x742 <__vector_14>
      3a:	00 00       	nop
      3c:	f5 c2       	rjmp	.+1514   	; 0x628 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f3 c2       	rjmp	.+1510   	; 0x628 <__bad_interrupt>
      42:	00 00       	nop
      44:	f1 c2       	rjmp	.+1506   	; 0x628 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <__vector_18>
      4c:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__vector_19>
      50:	eb c2       	rjmp	.+1494   	; 0x628 <__bad_interrupt>
      52:	00 00       	nop
      54:	e9 c2       	rjmp	.+1490   	; 0x628 <__bad_interrupt>
      56:	00 00       	nop
      58:	e7 c2       	rjmp	.+1486   	; 0x628 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e5 c2       	rjmp	.+1482   	; 0x628 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e3 c2       	rjmp	.+1478   	; 0x628 <__bad_interrupt>
      62:	00 00       	nop
      64:	e1 c2       	rjmp	.+1474   	; 0x628 <__bad_interrupt>
	...

00000068 <_ZL16icon_led_numbers>:
      68:	0c 0b 0a 0f 0e 0d 07 08 09 02 01 00                 ............

00000074 <_ZL22sound_pattern_doorbell>:
      74:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      84:	b0 04 00 00 f4 01 00 00 00 00 00 00 e8 03 00 00     ................
      94:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      a4:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000000b4 <_ZL19sound_pattern_phone>:
      b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     104:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     114:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     124:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     134:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     144:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     154:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     164:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     174:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     184:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     194:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     1a4:	00 00 00 00 e8 03 00 00 e8 03 00 00 28 00 00 00     ............(...
     1b4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1c4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1d4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1e4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1f4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     204:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     214:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     224:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     234:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     244:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     254:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     264:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     274:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     284:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     294:	ee 02 00 00 28 00 00 00 00 00 00 00 e8 03 00 00     ....(...........
     2a4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     304:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     314:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     324:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     334:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     344:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     354:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     364:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     374:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     384:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     394:	00 00 00 00 e8 03 00 00 00 00 00 00 00 00 00 00     ................
	...

000003b4 <_ZL18sound_pattern_fire>:
     3b4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3c4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3d4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3e4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3f4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     404:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     414:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     424:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...

00000434 <_ZL18sound_pattern_help>:
     434:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     444:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     454:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     464:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     474:	00 00 00 00 e8 03 00 00 1c 07 00 00 c8 00 00 00     ................
     484:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     494:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     4a4:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     4b4:	a5 05 00 00 c8 00 00 00 00 00 00 00 e8 03 00 00     ................
	...

000004cc <_ZL13flash_pattern>:
     4cc:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4dc:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4ec:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4fc:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     50c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     51c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     52c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     53c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     54c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     55c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     56c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     57c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     58c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     59c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     5ac:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     5bc:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...

000005cc <_ZL11icon_colors>:
     5cc:	3d f5 00 00 b8 f5 ff 00 00 ff ff 00                 =...........

000005d8 <__ctors_start>:
     5d8:	11 08       	sbc	r1, r1

000005da <__ctors_end>:
     5da:	11 24       	eor	r1, r1
     5dc:	1f be       	out	0x3f, r1	; 63
     5de:	cf ef       	ldi	r28, 0xFF	; 255
     5e0:	d8 e0       	ldi	r29, 0x08	; 8
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	cd bf       	out	0x3d, r28	; 61

000005e6 <__do_copy_data>:
     5e6:	11 e0       	ldi	r17, 0x01	; 1
     5e8:	a0 e0       	ldi	r26, 0x00	; 0
     5ea:	b1 e0       	ldi	r27, 0x01	; 1
     5ec:	e2 e1       	ldi	r30, 0x12	; 18
     5ee:	f9 e1       	ldi	r31, 0x19	; 25
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <__do_copy_data+0x10>
     5f2:	05 90       	lpm	r0, Z+
     5f4:	0d 92       	st	X+, r0
     5f6:	aa 31       	cpi	r26, 0x1A	; 26
     5f8:	b1 07       	cpc	r27, r17
     5fa:	d9 f7       	brne	.-10     	; 0x5f2 <__do_copy_data+0xc>

000005fc <__do_clear_bss>:
     5fc:	22 e0       	ldi	r18, 0x02	; 2
     5fe:	aa e1       	ldi	r26, 0x1A	; 26
     600:	b1 e0       	ldi	r27, 0x01	; 1
     602:	01 c0       	rjmp	.+2      	; 0x606 <.do_clear_bss_start>

00000604 <.do_clear_bss_loop>:
     604:	1d 92       	st	X+, r1

00000606 <.do_clear_bss_start>:
     606:	ac 35       	cpi	r26, 0x5C	; 92
     608:	b2 07       	cpc	r27, r18
     60a:	e1 f7       	brne	.-8      	; 0x604 <.do_clear_bss_loop>

0000060c <__do_global_ctors>:
     60c:	15 e0       	ldi	r17, 0x05	; 5
     60e:	ca ed       	ldi	r28, 0xDA	; 218
     610:	d5 e0       	ldi	r29, 0x05	; 5
     612:	04 c0       	rjmp	.+8      	; 0x61c <__do_global_ctors+0x10>
     614:	22 97       	sbiw	r28, 0x02	; 2
     616:	fe 01       	movw	r30, r28
     618:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__tablejump__>
     61c:	c8 3d       	cpi	r28, 0xD8	; 216
     61e:	d1 07       	cpc	r29, r17
     620:	c9 f7       	brne	.-14     	; 0x614 <__do_global_ctors+0x8>
     622:	f7 d0       	rcall	.+494    	; 0x812 <main>
     624:	0c 94 87 0c 	jmp	0x190e	; 0x190e <_exit>

00000628 <__bad_interrupt>:
     628:	eb cc       	rjmp	.-1578   	; 0x0 <__vectors>

0000062a <I2C_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
     62a:	88 e4       	ldi	r24, 0x48	; 72
     62c:	80 93 b8 00 	sts	0x00B8, r24
     630:	08 95       	ret

00000632 <I2C_start>:
     632:	ec eb       	ldi	r30, 0xBC	; 188
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	10 82       	st	Z, r1
     638:	94 ea       	ldi	r25, 0xA4	; 164
     63a:	90 83       	st	Z, r25
     63c:	90 81       	ld	r25, Z
     63e:	99 23       	and	r25, r25
     640:	ec f7       	brge	.-6      	; 0x63c <I2C_start+0xa>
     642:	90 91 b9 00 	lds	r25, 0x00B9
     646:	98 7f       	andi	r25, 0xF8	; 248
     648:	98 30       	cpi	r25, 0x08	; 8
     64a:	a1 f4       	brne	.+40     	; 0x674 <I2C_start+0x42>
     64c:	80 93 bb 00 	sts	0x00BB, r24
     650:	84 e8       	ldi	r24, 0x84	; 132
     652:	80 93 bc 00 	sts	0x00BC, r24
     656:	ec eb       	ldi	r30, 0xBC	; 188
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	88 23       	and	r24, r24
     65e:	ec f7       	brge	.-6      	; 0x65a <I2C_start+0x28>
     660:	90 91 b9 00 	lds	r25, 0x00B9
     664:	98 7f       	andi	r25, 0xF8	; 248
     666:	98 31       	cpi	r25, 0x18	; 24
     668:	39 f0       	breq	.+14     	; 0x678 <I2C_start+0x46>
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 34       	cpi	r25, 0x40	; 64
     66e:	29 f4       	brne	.+10     	; 0x67a <I2C_start+0x48>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	08 95       	ret
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	08 95       	ret
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	08 95       	ret

0000067c <I2C_write>:
     67c:	80 93 bb 00 	sts	0x00BB, r24
     680:	84 e8       	ldi	r24, 0x84	; 132
     682:	80 93 bc 00 	sts	0x00BC, r24
     686:	ec eb       	ldi	r30, 0xBC	; 188
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	88 23       	and	r24, r24
     68e:	ec f7       	brge	.-6      	; 0x68a <I2C_write+0xe>
     690:	90 91 b9 00 	lds	r25, 0x00B9
     694:	98 7f       	andi	r25, 0xF8	; 248
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	98 32       	cpi	r25, 0x28	; 40
     69a:	09 f4       	brne	.+2      	; 0x69e <I2C_write+0x22>
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	08 95       	ret

000006a0 <I2C_read_ack>:
     6a0:	84 ec       	ldi	r24, 0xC4	; 196
     6a2:	80 93 bc 00 	sts	0x00BC, r24
     6a6:	ec eb       	ldi	r30, 0xBC	; 188
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	88 23       	and	r24, r24
     6ae:	ec f7       	brge	.-6      	; 0x6aa <I2C_read_ack+0xa>
     6b0:	80 91 bb 00 	lds	r24, 0x00BB
     6b4:	08 95       	ret

000006b6 <I2C_stop>:

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     6b6:	84 e9       	ldi	r24, 0x94	; 148
     6b8:	80 93 bc 00 	sts	0x00BC, r24
     6bc:	08 95       	ret

000006be <log_s>:
 *
 * @param s The specified string
 */
void log_s(const char *s) {
#ifdef LOG_AVAILABLE
    uart0_puts(s);
     6be:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <uart0_puts>
     6c2:	08 95       	ret

000006c4 <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	84 bd       	out	0x24, r24	; 36
     6c8:	93 e0       	ldi	r25, 0x03	; 3
     6ca:	95 bd       	out	0x25, r25	; 37
     6cc:	80 93 6e 00 	sts	0x006E, r24
     6d0:	8a ef       	ldi	r24, 0xFA	; 250
     6d2:	87 bd       	out	0x27, r24	; 39
     6d4:	08 95       	ret

000006d6 <millis_get>:
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	8f b7       	in	r24, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	00 91 1a 01 	lds	r16, 0x011A
     6e2:	10 91 1b 01 	lds	r17, 0x011B
     6e6:	20 91 1c 01 	lds	r18, 0x011C
     6ea:	30 91 1d 01 	lds	r19, 0x011D
     6ee:	8f bf       	out	0x3f, r24	; 63
     6f0:	60 2f       	mov	r22, r16
     6f2:	71 2f       	mov	r23, r17
     6f4:	82 2f       	mov	r24, r18
     6f6:	93 2f       	mov	r25, r19
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <millis_resume>:
     6fe:	e4 e6       	ldi	r30, 0x64	; 100
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 81       	ld	r24, Z
     704:	8f 7d       	andi	r24, 0xDF	; 223
     706:	80 83       	st	Z, r24
     708:	ee e6       	ldi	r30, 0x6E	; 110
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	82 60       	ori	r24, 0x02	; 2
     710:	80 83       	st	Z, r24
     712:	08 95       	ret

00000714 <millis_pause>:
     714:	ee e6       	ldi	r30, 0x6E	; 110
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	8d 7f       	andi	r24, 0xFD	; 253
     71c:	80 83       	st	Z, r24
     71e:	e4 e6       	ldi	r30, 0x64	; 100
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	80 62       	ori	r24, 0x20	; 32
     726:	80 83       	st	Z, r24
     728:	08 95       	ret

0000072a <millis_reset>:
     72a:	8f b7       	in	r24, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	10 92 1a 01 	sts	0x011A, r1
     732:	10 92 1b 01 	sts	0x011B, r1
     736:	10 92 1c 01 	sts	0x011C, r1
     73a:	10 92 1d 01 	sts	0x011D, r1
     73e:	8f bf       	out	0x3f, r24	; 63
     740:	08 95       	ret

00000742 <__vector_14>:

ISR(ISR_VECT)
{
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	8f 93       	push	r24
     74e:	9f 93       	push	r25
     750:	af 93       	push	r26
     752:	bf 93       	push	r27
	++milliseconds;
     754:	80 91 1a 01 	lds	r24, 0x011A
     758:	90 91 1b 01 	lds	r25, 0x011B
     75c:	a0 91 1c 01 	lds	r26, 0x011C
     760:	b0 91 1d 01 	lds	r27, 0x011D
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	a1 1d       	adc	r26, r1
     768:	b1 1d       	adc	r27, r1
     76a:	80 93 1a 01 	sts	0x011A, r24
     76e:	90 93 1b 01 	sts	0x011B, r25
     772:	a0 93 1c 01 	sts	0x011C, r26
     776:	b0 93 1d 01 	sts	0x011D, r27
}
     77a:	bf 91       	pop	r27
     77c:	af 91       	pop	r26
     77e:	9f 91       	pop	r25
     780:	8f 91       	pop	r24
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	0f 90       	pop	r0
     788:	1f 90       	pop	r1
     78a:	18 95       	reti

0000078c <_Z11timer2_initv>:

// Initialise library
void timer2_init()
{
	// Timer settings
	TCCR2A = _BV(WGM21); // prescaler 128
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22)|_BV(CS20);
     792:	85 e0       	ldi	r24, 0x05	; 5
     794:	80 93 b1 00 	sts	0x00B1, r24
	
	OCR2A = ((F_CPU / 128) / 1000);
     798:	8d e7       	ldi	r24, 0x7D	; 125
     79a:	80 93 b3 00 	sts	0x00B3, r24
     79e:	08 95       	ret

000007a0 <_Z13timer2_resumev>:


// Turn on timer and resume interrupts
void timer2_resume()
{
	power_timer2_enable();
     7a0:	e4 e6       	ldi	r30, 0x64	; 100
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	80 81       	ld	r24, Z
     7a6:	8f 7b       	andi	r24, 0xBF	; 191
     7a8:	80 83       	st	Z, r24
	TIMSK2 |= _BV(OCIE2A);
     7aa:	e0 e7       	ldi	r30, 0x70	; 112
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	80 81       	ld	r24, Z
     7b0:	82 60       	ori	r24, 0x02	; 2
     7b2:	80 83       	st	Z, r24
     7b4:	08 95       	ret

000007b6 <_Z12timer2_pausev>:
}

// Pause interrupts and turn off timer to save power
void timer2_pause()
{
	TIMSK2 &= ~_BV(OCIE2A);
     7b6:	e0 e7       	ldi	r30, 0x70	; 112
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	8d 7f       	andi	r24, 0xFD	; 253
     7be:	80 83       	st	Z, r24
	power_timer2_disable();
     7c0:	e4 e6       	ldi	r30, 0x64	; 100
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	80 64       	ori	r24, 0x40	; 64
     7c8:	80 83       	st	Z, r24
     7ca:	08 95       	ret

000007cc <__vector_1>:
	#include "tone.h"
};

RFM12B radio;

ISR(INT0_vect) {
     7cc:	1f 92       	push	r1
     7ce:	0f 92       	push	r0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
	radio.InterruptHandler();
     7ee:	37 d5       	rcall	.+2670   	; 0x125e <_ZN6RFM12B16InterruptHandlerEv>
}
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	bf 91       	pop	r27
     7f6:	af 91       	pop	r26
     7f8:	9f 91       	pop	r25
     7fa:	8f 91       	pop	r24
     7fc:	7f 91       	pop	r23
     7fe:	6f 91       	pop	r22
     800:	5f 91       	pop	r21
     802:	4f 91       	pop	r20
     804:	3f 91       	pop	r19
     806:	2f 91       	pop	r18
     808:	0f 90       	pop	r0
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	0f 90       	pop	r0
     80e:	1f 90       	pop	r1
     810:	18 95       	reti

00000812 <main>:
#define NODEID             2  //this node's ID, should be unique among nodes on this NETWORKID

	
int main() {	
// disable ADC for less power 
	ADCSRA &= ~_BV(ADEN); // ADC off 
     812:	ea e7       	ldi	r30, 0x7A	; 122
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	8f 77       	andi	r24, 0x7F	; 127
     81a:	80 83       	st	Z, r24
	sei();
     81c:	78 94       	sei
	

			/* Initialize MILLIS */
	        millis_init();
     81e:	52 df       	rcall	.-348    	; 0x6c4 <millis_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     820:	2f ef       	ldi	r18, 0xFF	; 255
     822:	83 ed       	ldi	r24, 0xD3	; 211
     824:	90 e3       	ldi	r25, 0x30	; 48
     826:	21 50       	subi	r18, 0x01	; 1
     828:	80 40       	sbci	r24, 0x00	; 0
     82a:	90 40       	sbci	r25, 0x00	; 0
     82c:	e1 f7       	brne	.-8      	; 0x826 <main+0x14>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <main+0x1e>
     830:	00 00       	nop
			_delay_ms(1000);
			/* Initialize MILLIS */

			/* Initialize TONE */						
			tone_init();	
     832:	3a d7       	rcall	.+3700   	; 0x16a8 <tone_init>
			noTone();	
     834:	3b d7       	rcall	.+3702   	; 0x16ac <noTone>
			/* Initialize TONE */						
						
						
			/* Initialize TIMER 2 */
			timer2_init();
     836:	aa df       	rcall	.-172    	; 0x78c <_Z11timer2_initv>
			timer2_pause();
     838:	be df       	rcall	.-132    	; 0x7b6 <_Z12timer2_pausev>
			uart_init( ((F_CPU)/((UART_BAUD_RATE)*16l)-1)) ;
			_delay_ms(1000);
			log_s("UART OK\r");
			_delay_ms(1000);
			#else
			power_usart0_disable();
     83a:	e4 e6       	ldi	r30, 0x64	; 100
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	82 60       	ori	r24, 0x02	; 2
     842:	80 83       	st	Z, r24
			#endif
			/* Initialize UART */
		
			/* Initialize I2C */
			I2C_init();	
     844:	f2 de       	rcall	.-540    	; 0x62a <I2C_init>
			/* Initialize I2C */
			
			/* Initialize PCA9634 */
			pca9635_init();
     846:	fa d3       	rcall	.+2036   	; 0x103c <pca9635_init>
     848:	c3 e0       	ldi	r28, 0x03	; 3
			
			// blink 3 times fast
			for (byte i = 0; i <= 2; ++i){
			pca9635_set_all_led_pwm(255);
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	3d d4       	rcall	.+2170   	; 0x10c8 <pca9635_set_all_led_pwm>
     84e:	ef ef       	ldi	r30, 0xFF	; 255
     850:	f1 ee       	ldi	r31, 0xE1	; 225
     852:	24 e0       	ldi	r18, 0x04	; 4
     854:	e1 50       	subi	r30, 0x01	; 1
     856:	f0 40       	sbci	r31, 0x00	; 0
     858:	20 40       	sbci	r18, 0x00	; 0
     85a:	e1 f7       	brne	.-8      	; 0x854 <main+0x42>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <main+0x4c>
     85e:	00 00       	nop
			_delay_ms(100);
			pca9635_set_all_led_pwm(0);
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	32 d4       	rcall	.+2148   	; 0x10c8 <pca9635_set_all_led_pwm>
     864:	8f ef       	ldi	r24, 0xFF	; 255
     866:	91 ee       	ldi	r25, 0xE1	; 225
     868:	e4 e0       	ldi	r30, 0x04	; 4
     86a:	81 50       	subi	r24, 0x01	; 1
     86c:	90 40       	sbci	r25, 0x00	; 0
     86e:	e0 40       	sbci	r30, 0x00	; 0
     870:	e1 f7       	brne	.-8      	; 0x86a <main+0x58>
     872:	00 c0       	rjmp	.+0      	; 0x874 <main+0x62>
     874:	00 00       	nop
     876:	c1 50       	subi	r28, 0x01	; 1
			
			/* Initialize PCA9634 */
			pca9635_init();
			
			// blink 3 times fast
			for (byte i = 0; i <= 2; ++i){
     878:	41 f7       	brne	.-48     	; 0x84a <main+0x38>
			
			/* Initialize PCA9634 */
			
		
			// node id, rfband, group id
			radio.Initialize(NODEID, RF12_868MHZ, NETWORKID);
     87a:	0f 2e       	mov	r0, r31
     87c:	f5 e0       	ldi	r31, 0x05	; 5
     87e:	cf 2e       	mov	r12, r31
     880:	f0 2d       	mov	r31, r0
     882:	0f 2e       	mov	r0, r31
     884:	f6 e0       	ldi	r31, 0x06	; 6
     886:	ef 2e       	mov	r14, r31
     888:	f0 2d       	mov	r31, r0
     88a:	00 e0       	ldi	r16, 0x00	; 0
     88c:	2e e0       	ldi	r18, 0x0E	; 14
     88e:	42 e0       	ldi	r20, 0x02	; 2
     890:	62 e0       	ldi	r22, 0x02	; 2
     892:	8e e1       	ldi	r24, 0x1E	; 30
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	78 d4       	rcall	.+2288   	; 0x1188 <_ZN6RFM12B10InitializeEhhhhhh>
			// see http://tools.jeelabs.org/rfm12b
			radio.SetLowDuty(500);
     898:	44 ef       	ldi	r20, 0xF4	; 244
     89a:	51 e0       	ldi	r21, 0x01	; 1
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	8e e1       	ldi	r24, 0x1E	; 30
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	1d d6       	rcall	.+3130   	; 0x14e0 <_ZN6RFM12B10SetLowDutyEm>
	_delay_ms(1000);
	#endif
		
			// initialised
			
				pca9635_set_led_pwm(1, 255);
     8a6:	6f ef       	ldi	r22, 0xFF	; 255
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	fd d3       	rcall	.+2042   	; 0x10a6 <pca9635_set_led_pwm>
     8ac:	ff ef       	ldi	r31, 0xFF	; 255
     8ae:	27 e8       	ldi	r18, 0x87	; 135
     8b0:	83 e1       	ldi	r24, 0x13	; 19
     8b2:	f1 50       	subi	r31, 0x01	; 1
     8b4:	20 40       	sbci	r18, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <main+0xa0>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <main+0xaa>
     8bc:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(8, 255);
     8be:	6f ef       	ldi	r22, 0xFF	; 255
     8c0:	88 e0       	ldi	r24, 0x08	; 8
     8c2:	f1 d3       	rcall	.+2018   	; 0x10a6 <pca9635_set_led_pwm>
     8c4:	9f ef       	ldi	r25, 0xFF	; 255
     8c6:	e7 e8       	ldi	r30, 0x87	; 135
     8c8:	f3 e1       	ldi	r31, 0x13	; 19
     8ca:	91 50       	subi	r25, 0x01	; 1
     8cc:	e0 40       	sbci	r30, 0x00	; 0
     8ce:	f0 40       	sbci	r31, 0x00	; 0
     8d0:	e1 f7       	brne	.-8      	; 0x8ca <main+0xb8>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <main+0xc2>
     8d4:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(11, 255);
     8d6:	6f ef       	ldi	r22, 0xFF	; 255
     8d8:	8b e0       	ldi	r24, 0x0B	; 11
     8da:	e5 d3       	rcall	.+1994   	; 0x10a6 <pca9635_set_led_pwm>
     8dc:	2f ef       	ldi	r18, 0xFF	; 255
     8de:	87 e8       	ldi	r24, 0x87	; 135
     8e0:	93 e1       	ldi	r25, 0x13	; 19
     8e2:	21 50       	subi	r18, 0x01	; 1
     8e4:	80 40       	sbci	r24, 0x00	; 0
     8e6:	90 40       	sbci	r25, 0x00	; 0
     8e8:	e1 f7       	brne	.-8      	; 0x8e2 <main+0xd0>
     8ea:	00 c0       	rjmp	.+0      	; 0x8ec <main+0xda>
     8ec:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(14, 255);
     8ee:	6f ef       	ldi	r22, 0xFF	; 255
     8f0:	8e e0       	ldi	r24, 0x0E	; 14
     8f2:	d9 d3       	rcall	.+1970   	; 0x10a6 <pca9635_set_led_pwm>
     8f4:	ef ef       	ldi	r30, 0xFF	; 255
     8f6:	ff e0       	ldi	r31, 0x0F	; 15
     8f8:	27 e2       	ldi	r18, 0x27	; 39
     8fa:	e1 50       	subi	r30, 0x01	; 1
     8fc:	f0 40       	sbci	r31, 0x00	; 0
     8fe:	20 40       	sbci	r18, 0x00	; 0
     900:	e1 f7       	brne	.-8      	; 0x8fa <main+0xe8>
     902:	00 c0       	rjmp	.+0      	; 0x904 <__stack+0x5>
     904:	00 00       	nop
				_delay_ms(800);
				pca9635_set_all_led_pwm(0);
     906:	80 e0       	ldi	r24, 0x00	; 0
     908:	df d3       	rcall	.+1982   	; 0x10c8 <pca9635_set_all_led_pwm>
				pca9635_set_sleep(1);
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	ed d3       	rcall	.+2010   	; 0x10e8 <pca9635_set_sleep>
				
			deep_sleep_ok = 1; // put device in deep sleep after initializing
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	80 93 3a 01 	sts	0x013A, r24
     914:	0f 2e       	mov	r0, r31
     916:	f2 e1       	ldi	r31, 0x12	; 18
     918:	2f 2e       	mov	r2, r31
     91a:	f1 e0       	ldi	r31, 0x01	; 1
     91c:	3f 2e       	mov	r3, r31
     91e:	f0 2d       	mov	r31, r0
										 
							
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     920:	81 2c       	mov	r8, r1
     922:	91 2c       	mov	r9, r1
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     924:	48 2c       	mov	r4, r8
     926:	59 2c       	mov	r5, r9
							millis_resume();
							
							active_alarm_time = millis_get() + alarm_duration;
							
							// wake up pca9635!
							power_twi_enable();
     928:	0f 2e       	mov	r0, r31
     92a:	f4 e6       	ldi	r31, 0x64	; 100
     92c:	af 2e       	mov	r10, r31
     92e:	b1 2c       	mov	r11, r1
     930:	f0 2d       	mov	r31, r0
							// Geen alarm actief
										 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     932:	66 24       	eor	r6, r6
     934:	63 94       	inc	r6
				
				
				
	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).

	if (radio.ReceiveComplete()) { // a packet has been received
     936:	8e e1       	ldi	r24, 0x1E	; 30
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	3d d6       	rcall	.+3194   	; 0x15b6 <_ZN6RFM12B15ReceiveCompleteEv>
     93c:	88 23       	and	r24, r24
     93e:	09 f4       	brne	.+2      	; 0x942 <__stack+0x43>
     940:	c6 c0       	rjmp	.+396    	; 0xace <__stack+0x1cf>
	void SetLowDuty(unsigned long m=255);
	void SetLowDutyOnOff(uint8_t value);
	
	static void CryptFunction(bool sending);
	void Encrypt(const uint8_t* key, uint8_t keyLen = 16);
	 bool CRCPass() { return rf12_crc == 0x1d0f; }
     942:	80 91 4d 01 	lds	r24, 0x014D
     946:	90 91 4e 01 	lds	r25, 0x014E
				}
				
				//_delay_ms(5);
				#endif
			
		if(radio.CRCPass()){ //  CRC of the received packet, zero indicates correct reception.
     94a:	8f 30       	cpi	r24, 0x0F	; 15
     94c:	9d 41       	sbci	r25, 0x1D	; 29
     94e:	99 f7       	brne	.-26     	; 0x936 <__stack+0x37>
		
			if (radio.ACKRequested()) {
     950:	8e e1       	ldi	r24, 0x1E	; 30
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	b8 d5       	rcall	.+2928   	; 0x14c6 <_ZN6RFM12B12ACKRequestedEv>
     956:	88 23       	and	r24, r24
     958:	89 f0       	breq	.+34     	; 0x97c <__stack+0x7d>
				log_s(".");
     95a:	8e e0       	ldi	r24, 0x0E	; 14
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	af de       	rcall	.-674    	; 0x6be <log_s>
				radio.SendACK();
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	61 e1       	ldi	r22, 0x11	; 17
     966:	71 e0       	ldi	r23, 0x01	; 1
     968:	8e e1       	ldi	r24, 0x1E	; 30
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	77 d6       	rcall	.+3310   	; 0x165c <_ZN6RFM12B7SendACKEPKvhh>
				log_s("+");
     96e:	80 e1       	ldi	r24, 0x10	; 16
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	a5 de       	rcall	.-694    	; 0x6be <log_s>
				radio.SendWait(1); // don't power down too soon
     974:	66 2d       	mov	r22, r6
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	91 e0       	ldi	r25, 0x01	; 1
     97a:	5d d5       	rcall	.+2746   	; 0x1436 <_ZN6RFM12B8SendWaitEh>
				
			}
			
					
		// only react to packets with first byte 0x99
		if(radio.GetData()[0] == 0x99) { // 153
     97c:	8e e1       	ldi	r24, 0x1E	; 30
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	9f d5       	rcall	.+2878   	; 0x14c0 <_ZN6RFM12B7GetDataEv>
     982:	fc 01       	movw	r30, r24
     984:	80 81       	ld	r24, Z
     986:	89 39       	cpi	r24, 0x99	; 153
     988:	b1 f6       	brne	.-84     	; 0x936 <__stack+0x37>
		// process incoming data here	
			
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = radio.GetData()[1]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     98a:	8e e1       	ldi	r24, 0x1E	; 30
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	98 d5       	rcall	.+2864   	; 0x14c0 <_ZN6RFM12B7GetDataEv>
     990:	fc 01       	movw	r30, r24
     992:	71 80       	ldd	r7, Z+1	; 0x01

				if(data & 0x10){
     994:	37 2d       	mov	r19, r7
     996:	30 71       	andi	r19, 0x10	; 16
     998:	74 fe       	sbrs	r7, 4
     99a:	06 c0       	rjmp	.+12     	; 0x9a8 <__stack+0xa9>
					 // start alarm	 
					 active_alarm = active_alarm | data; // 00001111 
     99c:	80 91 39 01 	lds	r24, 0x0139
     9a0:	87 29       	or	r24, r7
     9a2:	80 93 39 01 	sts	0x0139, r24
     9a6:	07 c0       	rjmp	.+14     	; 0x9b6 <__stack+0xb7>
					 
				 }else{
					 // stop alarm
					 active_alarm =  active_alarm & (~data); // invert data, compare with active alarm array to clear the right alarm bit 		 
     9a8:	87 2d       	mov	r24, r7
     9aa:	80 95       	com	r24
     9ac:	90 91 39 01 	lds	r25, 0x0139
     9b0:	89 23       	and	r24, r25
     9b2:	80 93 39 01 	sts	0x0139, r24
				 }
				 
				////////////////		Fill alarm array		 ////////////////				 
				
			 // IS ER EEN ALARM ACTIEF in array active_alarm?
				 if(active_alarm & 0x0F){
     9b6:	20 91 39 01 	lds	r18, 0x0139
     9ba:	82 2f       	mov	r24, r18
     9bc:	8f 70       	andi	r24, 0x0F	; 15
     9be:	09 f4       	brne	.+2      	; 0x9c2 <__stack+0xc3>
     9c0:	7d c0       	rjmp	.+250    	; 0xabc <__stack+0x1bd>
				  
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
     9c2:	80 91 35 01 	lds	r24, 0x0135
     9c6:	90 91 36 01 	lds	r25, 0x0136
     9ca:	a0 91 37 01 	lds	r26, 0x0137
     9ce:	b0 91 38 01 	lds	r27, 0x0138
     9d2:	89 2b       	or	r24, r25
     9d4:	8a 2b       	or	r24, r26
     9d6:	8b 2b       	or	r24, r27
     9d8:	b9 f5       	brne	.+110    	; 0xa48 <__stack+0x149>
							// Geen alarm actief
										 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
     9da:	10 92 3a 01 	sts	0x013A, r1
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     9de:	23 fd       	sbrc	r18, 3
     9e0:	0c c0       	rjmp	.+24     	; 0x9fa <__stack+0xfb>
     9e2:	22 fd       	sbrc	r18, 2
     9e4:	06 c0       	rjmp	.+12     	; 0x9f2 <__stack+0xf3>
     9e6:	21 fd       	sbrc	r18, 1
     9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <__stack+0xf7>
     9ea:	20 ff       	sbrs	r18, 0
     9ec:	0b c0       	rjmp	.+22     	; 0xa04 <__stack+0x105>
     9ee:	83 e0       	ldi	r24, 0x03	; 3
     9f0:	05 c0       	rjmp	.+10     	; 0x9fc <__stack+0xfd>
							// Geen alarm actief
										 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     9f2:	86 2d       	mov	r24, r6
     9f4:	03 c0       	rjmp	.+6      	; 0x9fc <__stack+0xfd>
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <__stack+0xfd>
     9fa:	80 e0       	ldi	r24, 0x00	; 0
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
									sound_current_alarm = i;
     9fc:	80 93 34 01 	sts	0x0134, r24
									icon_current_alarm  = i;
     a00:	80 93 29 01 	sts	0x0129, r24
									break;
								} 
							 }

							// 2. timer 0 - millis starten
							millis_reset();
     a04:	92 de       	rcall	.-732    	; 0x72a <millis_reset>
							millis_resume();
     a06:	7b de       	rcall	.-778    	; 0x6fe <millis_resume>
							
							active_alarm_time = millis_get() + alarm_duration;
     a08:	66 de       	rcall	.-820    	; 0x6d6 <millis_get>
     a0a:	00 91 00 01 	lds	r16, 0x0100
     a0e:	10 91 01 01 	lds	r17, 0x0101
     a12:	20 91 02 01 	lds	r18, 0x0102
     a16:	30 91 03 01 	lds	r19, 0x0103
     a1a:	dc 01       	movw	r26, r24
     a1c:	cb 01       	movw	r24, r22
     a1e:	80 0f       	add	r24, r16
     a20:	91 1f       	adc	r25, r17
     a22:	a2 1f       	adc	r26, r18
     a24:	b3 1f       	adc	r27, r19
     a26:	80 93 35 01 	sts	0x0135, r24
     a2a:	90 93 36 01 	sts	0x0136, r25
     a2e:	a0 93 37 01 	sts	0x0137, r26
     a32:	b0 93 38 01 	sts	0x0138, r27
							
							// wake up pca9635!
							power_twi_enable();
     a36:	f5 01       	movw	r30, r10
     a38:	80 81       	ld	r24, Z
     a3a:	8f 77       	andi	r24, 0x7F	; 127
     a3c:	80 83       	st	Z, r24
							I2C_init();
     a3e:	f5 dd       	rcall	.-1046   	; 0x62a <I2C_init>
							pca9635_set_sleep(0);
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	52 d3       	rcall	.+1700   	; 0x10e8 <pca9635_set_sleep>
				 
							// 3. timer 2 - alarm timer starten
							timer2_resume();							
     a44:	ad de       	rcall	.-678    	; 0x7a0 <_Z13timer2_resumev>
     a46:	77 cf       	rjmp	.-274    	; 0x936 <__stack+0x37>
										 
							
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     a48:	31 11       	cpse	r19, r1
     a4a:	5e c0       	rjmp	.+188    	; 0xb08 <__stack+0x209>
     a4c:	71 01       	movw	r14, r2
     a4e:	84 01       	movw	r16, r8
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     a50:	f7 01       	movw	r30, r14
     a52:	21 91       	ld	r18, Z+
     a54:	7f 01       	movw	r14, r30
     a56:	27 21       	and	r18, r7
     a58:	99 f0       	breq	.+38     	; 0xa80 <__stack+0x181>
     a5a:	c4 2d       	mov	r28, r4
     a5c:	d5 2d       	mov	r29, r5
											for (byte j = 0; j <= 2; j++){
												pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[i].lednr[j])), 0); // leds off!
     a5e:	68 01       	movw	r12, r16
     a60:	cc 0c       	add	r12, r12
     a62:	dd 1c       	adc	r13, r13
     a64:	c0 0e       	add	r12, r16
     a66:	d1 1e       	adc	r13, r17
     a68:	f6 01       	movw	r30, r12
     a6a:	ec 0f       	add	r30, r28
     a6c:	fd 1f       	adc	r31, r29
     a6e:	e8 59       	subi	r30, 0x98	; 152
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	84 91       	lpm	r24, Z
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	17 d3       	rcall	.+1582   	; 0x10a6 <pca9635_set_led_pwm>
     a78:	21 96       	adiw	r28, 0x01	; 1
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
											for (byte j = 0; j <= 2; j++){
     a7a:	c3 30       	cpi	r28, 0x03	; 3
     a7c:	d1 05       	cpc	r29, r1
     a7e:	a1 f7       	brne	.-24     	; 0xa68 <__stack+0x169>
     a80:	0f 5f       	subi	r16, 0xFF	; 255
     a82:	1f 4f       	sbci	r17, 0xFF	; 255
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
     a84:	04 30       	cpi	r16, 0x04	; 4
     a86:	11 05       	cpc	r17, r1
     a88:	19 f7       	brne	.-58     	; 0xa50 <__stack+0x151>
     a8a:	55 cf       	rjmp	.-342    	; 0x936 <__stack+0x37>
							
							
								// Only reset active alarm timer if there is a new alarm...
								// 0x10 = activate bit 0x0F are bits of the alarms
								if( (data & 0x10) && (data & 0x0F)){
										active_alarm_time = millis_get() + alarm_duration;
     a8c:	24 de       	rcall	.-952    	; 0x6d6 <millis_get>
     a8e:	00 91 00 01 	lds	r16, 0x0100
     a92:	10 91 01 01 	lds	r17, 0x0101
     a96:	20 91 02 01 	lds	r18, 0x0102
     a9a:	30 91 03 01 	lds	r19, 0x0103
     a9e:	dc 01       	movw	r26, r24
     aa0:	cb 01       	movw	r24, r22
     aa2:	80 0f       	add	r24, r16
     aa4:	91 1f       	adc	r25, r17
     aa6:	a2 1f       	adc	r26, r18
     aa8:	b3 1f       	adc	r27, r19
     aaa:	80 93 35 01 	sts	0x0135, r24
     aae:	90 93 36 01 	sts	0x0136, r25
     ab2:	a0 93 37 01 	sts	0x0137, r26
     ab6:	b0 93 38 01 	sts	0x0138, r27
     aba:	3d cf       	rjmp	.-390    	; 0x936 <__stack+0x37>
				 
		 

				}else{ //  if(active_alarm & 0x0F){ // IS ER EEN ALARM ACTIEF in active_alarm?
						// no active alarm in array	
						active_alarm_time = 0; // set alarm time to zero, timers will be disabled in next timer 2 interrupt
     abc:	10 92 35 01 	sts	0x0135, r1
     ac0:	10 92 36 01 	sts	0x0136, r1
     ac4:	10 92 37 01 	sts	0x0137, r1
     ac8:	10 92 38 01 	sts	0x0138, r1
     acc:	34 cf       	rjmp	.-408    	; 0x936 <__stack+0x37>
			} // if(rf12_crc == 0){ 
									
		} else {
		
			// switch into idle mode until the next interrupt - Choose our preferred sleep mode:
			if(deep_sleep_ok == 1){
     ace:	80 91 3a 01 	lds	r24, 0x013A
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	71 f4       	brne	.+28     	; 0xaf2 <__stack+0x1f3>
								
				set_sleep_mode(SLEEP_MODE_STANDBY); // if active alarm, go in pwr save mode to keep timer 2 running
     ad6:	83 b7       	in	r24, 0x33	; 51
     ad8:	81 7f       	andi	r24, 0xF1	; 241
     ada:	8c 60       	ori	r24, 0x0C	; 12
     adc:	83 bf       	out	0x33, r24	; 51
				sleep_enable();
     ade:	83 b7       	in	r24, 0x33	; 51
     ae0:	81 60       	ori	r24, 0x01	; 1
     ae2:	83 bf       	out	0x33, r24	; 51
				// turn off brown-out enable in software
				 sleep_bod_disable();
     ae4:	85 b7       	in	r24, 0x35	; 53
     ae6:	80 66       	ori	r24, 0x60	; 96
     ae8:	85 bf       	out	0x35, r24	; 53
     aea:	8f 7d       	andi	r24, 0xDF	; 223
     aec:	85 bf       	out	0x35, r24	; 53
			 
				// Put the device to sleep:
				sleep_cpu();
     aee:	88 95       	sleep
     af0:	07 c0       	rjmp	.+14     	; 0xb00 <__stack+0x201>
			}else{
				// disable various adc + usart0
				set_sleep_mode(SLEEP_MODE_IDLE);
     af2:	83 b7       	in	r24, 0x33	; 51
     af4:	81 7f       	andi	r24, 0xF1	; 241
     af6:	83 bf       	out	0x33, r24	; 51
				sleep_enable();
     af8:	83 b7       	in	r24, 0x33	; 51
     afa:	81 60       	ori	r24, 0x01	; 1
     afc:	83 bf       	out	0x33, r24	; 51
			
				// Put the device to sleep:
				sleep_cpu();
     afe:	88 95       	sleep
			}
	
			// Clear sleep enable (SE) bit:
			sleep_disable();
     b00:	83 b7       	in	r24, 0x33	; 51
     b02:	8e 7f       	andi	r24, 0xFE	; 254
     b04:	83 bf       	out	0x33, r24	; 51
     b06:	17 cf       	rjmp	.-466    	; 0x936 <__stack+0x37>
								}
							
							
								// Only reset active alarm timer if there is a new alarm...
								// 0x10 = activate bit 0x0F are bits of the alarms
								if( (data & 0x10) && (data & 0x0F)){
     b08:	87 2d       	mov	r24, r7
     b0a:	8f 70       	andi	r24, 0x0F	; 15
     b0c:	09 f4       	brne	.+2      	; 0xb10 <__stack+0x211>
     b0e:	13 cf       	rjmp	.-474    	; 0x936 <__stack+0x37>
     b10:	bd cf       	rjmp	.-134    	; 0xa8c <__stack+0x18d>

00000b12 <_Z9isr_soundv>:
	}
						
}


	void isr_sound(){
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
		
			// Stop note if necessary 
			if(_sound_note_time != 0){ // sound already playing?		
     b16:	80 91 2f 01 	lds	r24, 0x012F
     b1a:	90 91 30 01 	lds	r25, 0x0130
     b1e:	a0 91 31 01 	lds	r26, 0x0131
     b22:	b0 91 32 01 	lds	r27, 0x0132
     b26:	89 2b       	or	r24, r25
     b28:	8a 2b       	or	r24, r26
     b2a:	8b 2b       	or	r24, r27
     b2c:	81 f0       	breq	.+32     	; 0xb4e <_Z9isr_soundv+0x3c>
				if(millis_get() < _sound_note_time ){ // Do we need to stop the current note?
     b2e:	d3 dd       	rcall	.-1114   	; 0x6d6 <millis_get>
     b30:	00 91 2f 01 	lds	r16, 0x012F
     b34:	10 91 30 01 	lds	r17, 0x0130
     b38:	20 91 31 01 	lds	r18, 0x0131
     b3c:	30 91 32 01 	lds	r19, 0x0132
     b40:	60 17       	cp	r22, r16
     b42:	71 07       	cpc	r23, r17
     b44:	82 07       	cpc	r24, r18
     b46:	93 07       	cpc	r25, r19
     b48:	08 f4       	brcc	.+2      	; 0xb4c <_Z9isr_soundv+0x3a>
     b4a:	ef c0       	rjmp	.+478    	; 0xd2a <_Z9isr_soundv+0x218>
					return; // dont stop current note
					
				}else{
					noTone(); // stop current note
     b4c:	af d5       	rcall	.+2910   	; 0x16ac <noTone>
				}
	
			}
			
			// play next tone
			if(sound_current_alarm == 0 ){
     b4e:	80 91 34 01 	lds	r24, 0x0134
     b52:	81 11       	cpse	r24, r1
     b54:	2e c0       	rjmp	.+92     	; 0xbb2 <_Z9isr_soundv+0xa0>
				tone(pgm_read_word(&(sound_pattern_doorbell[sound_current_step].frequency)), sound_alarm_volume); // freq, volume
     b56:	e0 91 33 01 	lds	r30, 0x0133
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	ee 0f       	add	r30, r30
     b62:	ff 1f       	adc	r31, r31
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	ec 58       	subi	r30, 0x8C	; 140
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	65 91       	lpm	r22, Z+
     b6e:	74 91       	lpm	r23, Z
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	a7 d5       	rcall	.+2894   	; 0x16c6 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_doorbell[sound_current_step].time)));
     b78:	ae dd       	rcall	.-1188   	; 0x6d6 <millis_get>
     b7a:	e0 91 33 01 	lds	r30, 0x0133
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	e8 58       	subi	r30, 0x88	; 136
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	25 91       	lpm	r18, Z+
     b92:	34 91       	lpm	r19, Z
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	82 0f       	add	r24, r18
     b9a:	93 1f       	adc	r25, r19
     b9c:	a1 1d       	adc	r26, r1
     b9e:	b1 1d       	adc	r27, r1
     ba0:	80 93 2f 01 	sts	0x012F, r24
     ba4:	90 93 30 01 	sts	0x0130, r25
     ba8:	a0 93 31 01 	sts	0x0131, r26
     bac:	b0 93 32 01 	sts	0x0132, r27
     bb0:	8f c0       	rjmp	.+286    	; 0xcd0 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 1 ){
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	71 f5       	brne	.+92     	; 0xc12 <_Z9isr_soundv+0x100>
				tone(pgm_read_word(&(sound_pattern_phone[sound_current_step].frequency)), sound_alarm_volume);
     bb6:	e0 91 33 01 	lds	r30, 0x0133
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	ee 0f       	add	r30, r30
     bc2:	ff 1f       	adc	r31, r31
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	ec 54       	subi	r30, 0x4C	; 76
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	65 91       	lpm	r22, Z+
     bce:	74 91       	lpm	r23, Z
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	41 e0       	ldi	r20, 0x01	; 1
     bd6:	77 d5       	rcall	.+2798   	; 0x16c6 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_phone[sound_current_step].time)));
     bd8:	7e dd       	rcall	.-1284   	; 0x6d6 <millis_get>
     bda:	e0 91 33 01 	lds	r30, 0x0133
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	ee 0f       	add	r30, r30
     be2:	ff 1f       	adc	r31, r31
     be4:	ee 0f       	add	r30, r30
     be6:	ff 1f       	adc	r31, r31
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	e8 54       	subi	r30, 0x48	; 72
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	25 91       	lpm	r18, Z+
     bf2:	34 91       	lpm	r19, Z
     bf4:	dc 01       	movw	r26, r24
     bf6:	cb 01       	movw	r24, r22
     bf8:	82 0f       	add	r24, r18
     bfa:	93 1f       	adc	r25, r19
     bfc:	a1 1d       	adc	r26, r1
     bfe:	b1 1d       	adc	r27, r1
     c00:	80 93 2f 01 	sts	0x012F, r24
     c04:	90 93 30 01 	sts	0x0130, r25
     c08:	a0 93 31 01 	sts	0x0131, r26
     c0c:	b0 93 32 01 	sts	0x0132, r27
     c10:	5f c0       	rjmp	.+190    	; 0xcd0 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 2 ){
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	71 f5       	brne	.+92     	; 0xc72 <_Z9isr_soundv+0x160>
				tone(pgm_read_word(&(sound_pattern_fire[sound_current_step].frequency)), sound_alarm_volume);
     c16:	e0 91 33 01 	lds	r30, 0x0133
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	ee 0f       	add	r30, r30
     c1e:	ff 1f       	adc	r31, r31
     c20:	ee 0f       	add	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	ec 54       	subi	r30, 0x4C	; 76
     c2a:	fc 4f       	sbci	r31, 0xFC	; 252
     c2c:	65 91       	lpm	r22, Z+
     c2e:	74 91       	lpm	r23, Z
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	41 e0       	ldi	r20, 0x01	; 1
     c36:	47 d5       	rcall	.+2702   	; 0x16c6 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_fire[sound_current_step].time)));
     c38:	4e dd       	rcall	.-1380   	; 0x6d6 <millis_get>
     c3a:	e0 91 33 01 	lds	r30, 0x0133
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	ee 0f       	add	r30, r30
     c42:	ff 1f       	adc	r31, r31
     c44:	ee 0f       	add	r30, r30
     c46:	ff 1f       	adc	r31, r31
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	e8 54       	subi	r30, 0x48	; 72
     c4e:	fc 4f       	sbci	r31, 0xFC	; 252
     c50:	25 91       	lpm	r18, Z+
     c52:	34 91       	lpm	r19, Z
     c54:	dc 01       	movw	r26, r24
     c56:	cb 01       	movw	r24, r22
     c58:	82 0f       	add	r24, r18
     c5a:	93 1f       	adc	r25, r19
     c5c:	a1 1d       	adc	r26, r1
     c5e:	b1 1d       	adc	r27, r1
     c60:	80 93 2f 01 	sts	0x012F, r24
     c64:	90 93 30 01 	sts	0x0130, r25
     c68:	a0 93 31 01 	sts	0x0131, r26
     c6c:	b0 93 32 01 	sts	0x0132, r27
     c70:	2f c0       	rjmp	.+94     	; 0xcd0 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 3 ){
     c72:	83 30       	cpi	r24, 0x03	; 3
     c74:	69 f5       	brne	.+90     	; 0xcd0 <_Z9isr_soundv+0x1be>
				tone(pgm_read_word(&(sound_pattern_help[sound_current_step].frequency)),sound_alarm_volume);
     c76:	e0 91 33 01 	lds	r30, 0x0133
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	ee 0f       	add	r30, r30
     c7e:	ff 1f       	adc	r31, r31
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	ee 0f       	add	r30, r30
     c86:	ff 1f       	adc	r31, r31
     c88:	ec 5c       	subi	r30, 0xCC	; 204
     c8a:	fb 4f       	sbci	r31, 0xFB	; 251
     c8c:	65 91       	lpm	r22, Z+
     c8e:	74 91       	lpm	r23, Z
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	41 e0       	ldi	r20, 0x01	; 1
     c96:	17 d5       	rcall	.+2606   	; 0x16c6 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_help[sound_current_step].time)));
     c98:	1e dd       	rcall	.-1476   	; 0x6d6 <millis_get>
     c9a:	e0 91 33 01 	lds	r30, 0x0133
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	ee 0f       	add	r30, r30
     ca6:	ff 1f       	adc	r31, r31
     ca8:	ee 0f       	add	r30, r30
     caa:	ff 1f       	adc	r31, r31
     cac:	e8 5c       	subi	r30, 0xC8	; 200
     cae:	fb 4f       	sbci	r31, 0xFB	; 251
     cb0:	25 91       	lpm	r18, Z+
     cb2:	34 91       	lpm	r19, Z
     cb4:	dc 01       	movw	r26, r24
     cb6:	cb 01       	movw	r24, r22
     cb8:	82 0f       	add	r24, r18
     cba:	93 1f       	adc	r25, r19
     cbc:	a1 1d       	adc	r26, r1
     cbe:	b1 1d       	adc	r27, r1
     cc0:	80 93 2f 01 	sts	0x012F, r24
     cc4:	90 93 30 01 	sts	0x0130, r25
     cc8:	a0 93 31 01 	sts	0x0131, r26
     ccc:	b0 93 32 01 	sts	0x0132, r27
			}
			
		//_sound_note_time = millis_get() + 1000;
			
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
     cd0:	50 91 33 01 	lds	r21, 0x0133
     cd4:	40 91 34 01 	lds	r20, 0x0134
     cd8:	25 2f       	mov	r18, r21
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	e4 2f       	mov	r30, r20
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	ea 5e       	subi	r30, 0xEA	; 234
     ce2:	fe 4f       	sbci	r31, 0xFE	; 254
     ce4:	80 81       	ld	r24, Z
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	28 17       	cp	r18, r24
     cec:	39 07       	cpc	r19, r25
     cee:	d4 f0       	brlt	.+52     	; 0xd24 <_Z9isr_soundv+0x212>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     cf0:	20 91 39 01 	lds	r18, 0x0139
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     cf4:	92 2f       	mov	r25, r18
     cf6:	9f 70       	andi	r25, 0x0F	; 15
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
     cfa:	4f 5f       	subi	r20, 0xFF	; 255
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     cfc:	44 30       	cpi	r20, 0x04	; 4
     cfe:	09 f4       	brne	.+2      	; 0xd02 <_Z9isr_soundv+0x1f0>
     d00:	43 2f       	mov	r20, r19
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     d02:	e4 2f       	mov	r30, r20
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	ee 5e       	subi	r30, 0xEE	; 238
     d08:	fe 4f       	sbci	r31, 0xFE	; 254
     d0a:	80 81       	ld	r24, Z
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     d0c:	91 11       	cpse	r25, r1
     d0e:	03 c0       	rjmp	.+6      	; 0xd16 <_Z9isr_soundv+0x204>
     d10:	40 93 34 01 	sts	0x0134, r20
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <_Z9isr_soundv+0x20c>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     d16:	82 23       	and	r24, r18
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
     d18:	81 f3       	breq	.-32     	; 0xcfa <_Z9isr_soundv+0x1e8>
     d1a:	40 93 34 01 	sts	0x0134, r20
						done = 1; // in case there is no active alarm anymore, just breakout while
					}

				} // while
				
				sound_current_step = 0; // reset sound_current_step to zero to start the next sound	
     d1e:	10 92 33 01 	sts	0x0133, r1
     d22:	03 c0       	rjmp	.+6      	; 0xd2a <_Z9isr_soundv+0x218>
				
			}else{
				// set sound_current_step plus one
				sound_current_step++;
     d24:	5f 5f       	subi	r21, 0xFF	; 255
     d26:	50 93 33 01 	sts	0x0133, r21
			}
	
				
		} //void isr_sound()
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	08 95       	ret

00000d30 <_Z15isr_light_flashv>:
		
	void isr_light_flash(){
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
			
		// Do we need to go to the next flash?
		if(_flash_time != 0){ // is there already a flash ?
     d38:	80 91 2a 01 	lds	r24, 0x012A
     d3c:	90 91 2b 01 	lds	r25, 0x012B
     d40:	a0 91 2c 01 	lds	r26, 0x012C
     d44:	b0 91 2d 01 	lds	r27, 0x012D
     d48:	89 2b       	or	r24, r25
     d4a:	8a 2b       	or	r24, r26
     d4c:	8b 2b       	or	r24, r27
     d4e:	09 f4       	brne	.+2      	; 0xd52 <_Z15isr_light_flashv+0x22>
     d50:	48 c0       	rjmp	.+144    	; 0xde2 <_Z15isr_light_flashv+0xb2>
			if(millis_get() < _flash_time ){ // Do we need to stop the current note?
     d52:	c1 dc       	rcall	.-1662   	; 0x6d6 <millis_get>
     d54:	00 91 2a 01 	lds	r16, 0x012A
     d58:	10 91 2b 01 	lds	r17, 0x012B
     d5c:	20 91 2c 01 	lds	r18, 0x012C
     d60:	30 91 2d 01 	lds	r19, 0x012D
     d64:	60 17       	cp	r22, r16
     d66:	71 07       	cpc	r23, r17
     d68:	82 07       	cpc	r24, r18
     d6a:	93 07       	cpc	r25, r19
     d6c:	08 f0       	brcs	.+2      	; 0xd70 <_Z15isr_light_flashv+0x40>
     d6e:	39 c0       	rjmp	.+114    	; 0xde2 <_Z15isr_light_flashv+0xb2>
     d70:	3b c0       	rjmp	.+118    	; 0xde8 <_Z15isr_light_flashv+0xb8>
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
     d72:	80 91 2e 01 	lds	r24, 0x012E
     d76:	fe 01       	movw	r30, r28
     d78:	98 e0       	ldi	r25, 0x08	; 8
     d7a:	89 9f       	mul	r24, r25
     d7c:	e0 0d       	add	r30, r0
     d7e:	f1 1d       	adc	r31, r1
     d80:	11 24       	eor	r1, r1
     d82:	e4 53       	subi	r30, 0x34	; 52
     d84:	fb 4f       	sbci	r31, 0xFB	; 251
     d86:	64 91       	lpm	r22, Z
     d88:	8c 2f       	mov	r24, r28
     d8a:	8d 5f       	subi	r24, 0xFD	; 253
     d8c:	8c d1       	rcall	.+792    	; 0x10a6 <pca9635_set_led_pwm>
     d8e:	21 96       	adiw	r28, 0x01	; 1
			}						
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
     d90:	c4 30       	cpi	r28, 0x04	; 4
     d92:	d1 05       	cpc	r29, r1
     d94:	71 f7       	brne	.-36     	; 0xd72 <_Z15isr_light_flashv+0x42>
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
		}
		
		_flash_time = millis_get() + pgm_read_word(&(flash_pattern[_flash_current_step].time));
     d96:	9f dc       	rcall	.-1730   	; 0x6d6 <millis_get>
     d98:	40 91 2e 01 	lds	r20, 0x012E
     d9c:	e4 2f       	mov	r30, r20
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	ee 0f       	add	r30, r30
     da2:	ff 1f       	adc	r31, r31
     da4:	ee 0f       	add	r30, r30
     da6:	ff 1f       	adc	r31, r31
     da8:	ee 0f       	add	r30, r30
     daa:	ff 1f       	adc	r31, r31
     dac:	e0 53       	subi	r30, 0x30	; 48
     dae:	fb 4f       	sbci	r31, 0xFB	; 251
     db0:	25 91       	lpm	r18, Z+
     db2:	34 91       	lpm	r19, Z
     db4:	dc 01       	movw	r26, r24
     db6:	cb 01       	movw	r24, r22
     db8:	82 0f       	add	r24, r18
     dba:	93 1f       	adc	r25, r19
     dbc:	a1 1d       	adc	r26, r1
     dbe:	b1 1d       	adc	r27, r1
     dc0:	80 93 2a 01 	sts	0x012A, r24
     dc4:	90 93 2b 01 	sts	0x012B, r25
     dc8:	a0 93 2c 01 	sts	0x012C, r26
     dcc:	b0 93 2d 01 	sts	0x012D, r27
			
		// is variable _flash_current_step equal to total steps?
		if(_flash_current_step == (flash_keys -1 )) {
     dd0:	4f 31       	cpi	r20, 0x1F	; 31
     dd2:	19 f4       	brne	.+6      	; 0xdda <_Z15isr_light_flashv+0xaa>
			//reset _flash_current_step to 0
			_flash_current_step = 0;				
     dd4:	10 92 2e 01 	sts	0x012E, r1
     dd8:	07 c0       	rjmp	.+14     	; 0xde8 <_Z15isr_light_flashv+0xb8>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
     dda:	4f 5f       	subi	r20, 0xFF	; 255
     ddc:	40 93 2e 01 	sts	0x012E, r20
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <_Z15isr_light_flashv+0xb8>
			}
	
				
		} //void isr_sound()
		
	void isr_light_flash(){
     de2:	c0 e0       	ldi	r28, 0x00	; 0
     de4:	d0 e0       	ldi	r29, 0x00	; 0
     de6:	c5 cf       	rjmp	.-118    	; 0xd72 <_Z15isr_light_flashv+0x42>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
		}
		
	} // END isr_light_flash
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <_Z14isr_light_iconv>:
		
		
		
		
		
	void isr_light_icon(){
     df2:	0f 93       	push	r16
     df4:	1f 93       	push	r17
     df6:	cf 93       	push	r28
     df8:	df 93       	push	r29
		
		// Do we need to go to the next flash?
		if(_icon_time != 0){ // is there already a flash ?
     dfa:	80 91 24 01 	lds	r24, 0x0124
     dfe:	90 91 25 01 	lds	r25, 0x0125
     e02:	a0 91 26 01 	lds	r26, 0x0126
     e06:	b0 91 27 01 	lds	r27, 0x0127
     e0a:	89 2b       	or	r24, r25
     e0c:	8a 2b       	or	r24, r26
     e0e:	8b 2b       	or	r24, r27
     e10:	79 f0       	breq	.+30     	; 0xe30 <_Z14isr_light_iconv+0x3e>
			if(millis_get() < _icon_time ){ // Do we need to stop the current note?
     e12:	61 dc       	rcall	.-1854   	; 0x6d6 <millis_get>
     e14:	00 91 24 01 	lds	r16, 0x0124
     e18:	10 91 25 01 	lds	r17, 0x0125
     e1c:	20 91 26 01 	lds	r18, 0x0126
     e20:	30 91 27 01 	lds	r19, 0x0127
     e24:	60 17       	cp	r22, r16
     e26:	71 07       	cpc	r23, r17
     e28:	82 07       	cpc	r24, r18
     e2a:	93 07       	cpc	r25, r19
     e2c:	08 f4       	brcc	.+2      	; 0xe30 <_Z14isr_light_iconv+0x3e>
     e2e:	81 c0       	rjmp	.+258    	; 0xf32 <_Z14isr_light_iconv+0x140>
	// step 2 = 250 - (2 x 25)  = 200
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
     e30:	20 91 28 01 	lds	r18, 0x0128
     e34:	22 23       	and	r18, r18
     e36:	19 f0       	breq	.+6      	; 0xe3e <_Z14isr_light_iconv+0x4c>
     e38:	2b 30       	cpi	r18, 0x0B	; 11
     e3a:	21 f5       	brne	.+72     	; 0xe84 <_Z14isr_light_iconv+0x92>
     e3c:	12 c0       	rjmp	.+36     	; 0xe62 <_Z14isr_light_iconv+0x70>
		intensity = 255;
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 650;
     e3e:	4b dc       	rcall	.-1898   	; 0x6d6 <millis_get>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	86 57       	subi	r24, 0x76	; 118
     e46:	9d 4f       	sbci	r25, 0xFD	; 253
     e48:	af 4f       	sbci	r26, 0xFF	; 255
     e4a:	bf 4f       	sbci	r27, 0xFF	; 255
     e4c:	80 93 24 01 	sts	0x0124, r24
     e50:	90 93 25 01 	sts	0x0125, r25
     e54:	a0 93 26 01 	sts	0x0126, r26
     e58:	b0 93 27 01 	sts	0x0127, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     e5c:	cf ef       	ldi	r28, 0xFF	; 255
     e5e:	d0 e0       	ldi	r29, 0x00	; 0
     e60:	25 c0       	rjmp	.+74     	; 0xeac <_Z14isr_light_iconv+0xba>
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 650;
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
     e62:	39 dc       	rcall	.-1934   	; 0x6d6 <millis_get>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	a1 1d       	adc	r26, r1
     e6c:	b1 1d       	adc	r27, r1
     e6e:	80 93 24 01 	sts	0x0124, r24
     e72:	90 93 25 01 	sts	0x0125, r25
     e76:	a0 93 26 01 	sts	0x0126, r26
     e7a:	b0 93 27 01 	sts	0x0127, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     e7e:	cf ef       	ldi	r28, 0xFF	; 255
     e80:	d0 e0       	ldi	r29, 0x00	; 0
     e82:	14 c0       	rjmp	.+40     	; 0xeac <_Z14isr_light_iconv+0xba>
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
		}
			
	}else{
		intensity = (250 - (icon_current_step * 25)); // step 1 to 10, 
     e84:	37 ee       	ldi	r19, 0xE7	; 231
     e86:	32 03       	mulsu	r19, r18
     e88:	e0 01       	movw	r28, r0
     e8a:	11 24       	eor	r1, r1
     e8c:	c6 50       	subi	r28, 0x06	; 6
     e8e:	df 4f       	sbci	r29, 0xFF	; 255
		_icon_time = millis_get() + 30;
     e90:	22 dc       	rcall	.-1980   	; 0x6d6 <millis_get>
     e92:	dc 01       	movw	r26, r24
     e94:	cb 01       	movw	r24, r22
     e96:	4e 96       	adiw	r24, 0x1e	; 30
     e98:	a1 1d       	adc	r26, r1
     e9a:	b1 1d       	adc	r27, r1
     e9c:	80 93 24 01 	sts	0x0124, r24
     ea0:	90 93 25 01 	sts	0x0125, r25
     ea4:	a0 93 26 01 	sts	0x0126, r26
     ea8:	b0 93 27 01 	sts	0x0127, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     eac:	00 e0       	ldi	r16, 0x00	; 0
     eae:	10 e0       	ldi	r17, 0x00	; 0
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     eb0:	80 91 29 01 	lds	r24, 0x0129
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	9c 01       	movw	r18, r24
     eb8:	22 0f       	add	r18, r18
     eba:	33 1f       	adc	r19, r19
     ebc:	82 0f       	add	r24, r18
     ebe:	93 1f       	adc	r25, r19
     ec0:	80 0f       	add	r24, r16
     ec2:	91 1f       	adc	r25, r17
     ec4:	fc 01       	movw	r30, r24
     ec6:	e4 53       	subi	r30, 0x34	; 52
     ec8:	fa 4f       	sbci	r31, 0xFA	; 250
     eca:	44 91       	lpm	r20, Z
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     ecc:	fc 01       	movw	r30, r24
     ece:	e8 59       	subi	r30, 0x98	; 152
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	84 91       	lpm	r24, Z
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     ed4:	4c 9f       	mul	r20, r28
     ed6:	90 01       	movw	r18, r0
     ed8:	4d 9f       	mul	r20, r29
     eda:	30 0d       	add	r19, r0
     edc:	11 24       	eor	r1, r1
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     ede:	63 2f       	mov	r22, r19
     ee0:	e2 d0       	rcall	.+452    	; 0x10a6 <pca9635_set_led_pwm>
     ee2:	0f 5f       	subi	r16, 0xFF	; 255
     ee4:	1f 4f       	sbci	r17, 0xFF	; 255
		_icon_time = millis_get() + 30;
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
     ee6:	03 30       	cpi	r16, 0x03	; 3
     ee8:	11 05       	cpc	r17, r1
     eea:	11 f7       	brne	.-60     	; 0xeb0 <_Z14isr_light_iconv+0xbe>
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
	}
	

	// is variable _flash_current_step equal to total steps?
	if(icon_current_step == 11) {
     eec:	80 91 28 01 	lds	r24, 0x0128
     ef0:	8b 30       	cpi	r24, 0x0B	; 11
     ef2:	e1 f4       	brne	.+56     	; 0xf2c <_Z14isr_light_iconv+0x13a>
		//reset _flash_current_step to 0
		icon_current_step = 0;
     ef4:	10 92 28 01 	sts	0x0128, r1
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     ef8:	30 91 39 01 	lds	r19, 0x0139
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     efc:	23 2f       	mov	r18, r19
     efe:	2f 70       	andi	r18, 0x0F	; 15
     f00:	80 91 29 01 	lds	r24, 0x0129
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     f04:	40 e0       	ldi	r20, 0x00	; 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
     f06:	8f 5f       	subi	r24, 0xFF	; 255
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     f08:	84 30       	cpi	r24, 0x04	; 4
     f0a:	09 f4       	brne	.+2      	; 0xf0e <_Z14isr_light_iconv+0x11c>
     f0c:	84 2f       	mov	r24, r20
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     f0e:	e8 2f       	mov	r30, r24
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	ee 5e       	subi	r30, 0xEE	; 238
     f14:	fe 4f       	sbci	r31, 0xFE	; 254
     f16:	90 81       	ld	r25, Z
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     f18:	21 11       	cpse	r18, r1
     f1a:	03 c0       	rjmp	.+6      	; 0xf22 <_Z14isr_light_iconv+0x130>
     f1c:	80 93 29 01 	sts	0x0129, r24
     f20:	08 c0       	rjmp	.+16     	; 0xf32 <_Z14isr_light_iconv+0x140>
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     f22:	93 23       	and	r25, r19
		//reset _flash_current_step to 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
     f24:	81 f3       	breq	.-32     	; 0xf06 <_Z14isr_light_iconv+0x114>
     f26:	80 93 29 01 	sts	0x0129, r24
     f2a:	03 c0       	rjmp	.+6      	; 0xf32 <_Z14isr_light_iconv+0x140>
			} // while
			
			
		}else{
		// set _flash_current_step +1
		icon_current_step++;
     f2c:	8f 5f       	subi	r24, 0xFF	; 255
     f2e:	80 93 28 01 	sts	0x0128, r24
	}
	
     f32:	df 91       	pop	r29
     f34:	cf 91       	pop	r28
     f36:	1f 91       	pop	r17
     f38:	0f 91       	pop	r16
     f3a:	08 95       	ret

00000f3c <__vector_7>:
	} // end main

	

	
ISR (TIMER2_COMPA_vect) {
     f3c:	1f 92       	push	r1
     f3e:	0f 92       	push	r0
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	0f 92       	push	r0
     f44:	11 24       	eor	r1, r1
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	2f 93       	push	r18
     f4c:	3f 93       	push	r19
     f4e:	4f 93       	push	r20
     f50:	5f 93       	push	r21
     f52:	6f 93       	push	r22
     f54:	7f 93       	push	r23
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	af 93       	push	r26
     f5c:	bf 93       	push	r27
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31

	// check if the alarm needs to be stopped
	if(millis_get() >= active_alarm_time || active_alarm_time == 0){
     f62:	b9 db       	rcall	.-2190   	; 0x6d6 <millis_get>
     f64:	00 91 35 01 	lds	r16, 0x0135
     f68:	10 91 36 01 	lds	r17, 0x0136
     f6c:	20 91 37 01 	lds	r18, 0x0137
     f70:	30 91 38 01 	lds	r19, 0x0138
     f74:	60 17       	cp	r22, r16
     f76:	71 07       	cpc	r23, r17
     f78:	82 07       	cpc	r24, r18
     f7a:	93 07       	cpc	r25, r19
     f7c:	20 f4       	brcc	.+8      	; 0xf86 <__vector_7+0x4a>
     f7e:	01 2b       	or	r16, r17
     f80:	02 2b       	or	r16, r18
     f82:	03 2b       	or	r16, r19
     f84:	c1 f5       	brne	.+112    	; 0xff6 <__vector_7+0xba>
		// stop alarm
			
			// reset steps of sound, flash and icon
			sound_current_step		= 0;
     f86:	10 92 33 01 	sts	0x0133, r1
			_sound_note_time		= 0;
     f8a:	10 92 2f 01 	sts	0x012F, r1
     f8e:	10 92 30 01 	sts	0x0130, r1
     f92:	10 92 31 01 	sts	0x0131, r1
     f96:	10 92 32 01 	sts	0x0132, r1
										
			_flash_current_step		= 0;
     f9a:	10 92 2e 01 	sts	0x012E, r1
			_flash_time				= 0;
     f9e:	10 92 2a 01 	sts	0x012A, r1
     fa2:	10 92 2b 01 	sts	0x012B, r1
     fa6:	10 92 2c 01 	sts	0x012C, r1
     faa:	10 92 2d 01 	sts	0x012D, r1
										
			icon_current_step		= 0;
     fae:	10 92 28 01 	sts	0x0128, r1
			_icon_time				= 0;
     fb2:	10 92 24 01 	sts	0x0124, r1
     fb6:	10 92 25 01 	sts	0x0125, r1
     fba:	10 92 26 01 	sts	0x0126, r1
     fbe:	10 92 27 01 	sts	0x0127, r1
										
			// empty alarm arrray
			active_alarm = 0x00; 
     fc2:	10 92 39 01 	sts	0x0139, r1
			active_alarm_time = 0;
     fc6:	10 92 35 01 	sts	0x0135, r1
     fca:	10 92 36 01 	sts	0x0136, r1
     fce:	10 92 37 01 	sts	0x0137, r1
     fd2:	10 92 38 01 	sts	0x0138, r1
					
			// alle leds uit, pca in slaapstand
			pca9635_set_all_led_pwm(0); // dimm all leds to zero
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	77 d0       	rcall	.+238    	; 0x10c8 <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1); // put pca9635 in sleep
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	85 d0       	rcall	.+266    	; 0x10e8 <pca9635_set_sleep>
			power_twi_disable();
     fde:	e4 e6       	ldi	r30, 0x64	; 100
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	80 68       	ori	r24, 0x80	; 128
     fe6:	80 83       	st	Z, r24
			
			// automatisch slapen in loop.

			//uart0_puts("STOPINT");
			// stop timer 0
			millis_pause();
     fe8:	95 db       	rcall	.-2262   	; 0x714 <millis_pause>
			
			// stop sound
			noTone();
     fea:	60 d3       	rcall	.+1728   	; 0x16ac <noTone>
			
			// stop timer 2
			timer2_pause();
     fec:	e4 db       	rcall	.-2104   	; 0x7b6 <_Z12timer2_pausev>
			
			deep_sleep_ok = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	80 93 3a 01 	sts	0x013A, r24
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <__vector_7+0xc0>
					
	}else{
		// continue alarm
		isr_sound();
     ff6:	8d dd       	rcall	.-1254   	; 0xb12 <_Z9isr_soundv>
	    isr_light_flash();
     ff8:	9b de       	rcall	.-714    	; 0xd30 <_Z15isr_light_flashv>
		isr_light_icon();		
     ffa:	fb de       	rcall	.-522    	; 0xdf2 <_Z14isr_light_iconv>
	}
						
}
     ffc:	ff 91       	pop	r31
     ffe:	ef 91       	pop	r30
    1000:	bf 91       	pop	r27
    1002:	af 91       	pop	r26
    1004:	9f 91       	pop	r25
    1006:	8f 91       	pop	r24
    1008:	7f 91       	pop	r23
    100a:	6f 91       	pop	r22
    100c:	5f 91       	pop	r21
    100e:	4f 91       	pop	r20
    1010:	3f 91       	pop	r19
    1012:	2f 91       	pop	r18
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <_GLOBAL__sub_I_mychannel>:
	  volatile uint8_t* DataLen;
	  
	  
	public:
	//constructor
	RFM12B():Data(rf12_data),DataLen(&rf12_buf[3]){}
    1022:	82 e4       	ldi	r24, 0x42	; 66
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	90 93 21 01 	sts	0x0121, r25
    102a:	80 93 20 01 	sts	0x0120, r24
    102e:	80 e4       	ldi	r24, 0x40	; 64
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	90 93 23 01 	sts	0x0123, r25
    1036:	80 93 22 01 	sts	0x0122, r24
    103a:	08 95       	ret

0000103c <pca9635_init>:
	   I2C_write(value);	
  	}
			  
  	I2C_stop();
		  
}
    103c:	80 e8       	ldi	r24, 0x80	; 128
    103e:	f9 da       	rcall	.-2574   	; 0x632 <I2C_start>
    1040:	80 e8       	ldi	r24, 0x80	; 128
    1042:	1c db       	rcall	.-2504   	; 0x67c <I2C_write>
    1044:	80 e8       	ldi	r24, 0x80	; 128
    1046:	1a db       	rcall	.-2508   	; 0x67c <I2C_write>
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	18 db       	rcall	.-2512   	; 0x67c <I2C_write>
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	16 db       	rcall	.-2516   	; 0x67c <I2C_write>
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	14 db       	rcall	.-2520   	; 0x67c <I2C_write>
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	12 db       	rcall	.-2524   	; 0x67c <I2C_write>
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	10 db       	rcall	.-2528   	; 0x67c <I2C_write>
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	0e db       	rcall	.-2532   	; 0x67c <I2C_write>
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	0c db       	rcall	.-2536   	; 0x67c <I2C_write>
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	0a db       	rcall	.-2540   	; 0x67c <I2C_write>
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	08 db       	rcall	.-2544   	; 0x67c <I2C_write>
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	06 db       	rcall	.-2548   	; 0x67c <I2C_write>
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	04 db       	rcall	.-2552   	; 0x67c <I2C_write>
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	02 db       	rcall	.-2556   	; 0x67c <I2C_write>
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	00 db       	rcall	.-2560   	; 0x67c <I2C_write>
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	fe da       	rcall	.-2564   	; 0x67c <I2C_write>
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	fc da       	rcall	.-2568   	; 0x67c <I2C_write>
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	fa da       	rcall	.-2572   	; 0x67c <I2C_write>
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	f8 da       	rcall	.-2576   	; 0x67c <I2C_write>
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	f6 da       	rcall	.-2580   	; 0x67c <I2C_write>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	f4 da       	rcall	.-2584   	; 0x67c <I2C_write>
    1094:	8a ea       	ldi	r24, 0xAA	; 170
    1096:	f2 da       	rcall	.-2588   	; 0x67c <I2C_write>
    1098:	8a ea       	ldi	r24, 0xAA	; 170
    109a:	f0 da       	rcall	.-2592   	; 0x67c <I2C_write>
    109c:	8a ea       	ldi	r24, 0xAA	; 170
    109e:	ee da       	rcall	.-2596   	; 0x67c <I2C_write>
    10a0:	8a ea       	ldi	r24, 0xAA	; 170
    10a2:	ec da       	rcall	.-2600   	; 0x67c <I2C_write>
    10a4:	08 cb       	rjmp	.-2544   	; 0x6b6 <I2C_stop>

000010a6 <pca9635_set_led_pwm>:
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	d8 2f       	mov	r29, r24
    10ac:	c6 2f       	mov	r28, r22
    10ae:	80 e8       	ldi	r24, 0x80	; 128
    10b0:	c0 da       	rcall	.-2688   	; 0x632 <I2C_start>
    10b2:	8d 2f       	mov	r24, r29
    10b4:	8e 5f       	subi	r24, 0xFE	; 254
    10b6:	80 68       	ori	r24, 0x80	; 128
    10b8:	e1 da       	rcall	.-2622   	; 0x67c <I2C_write>
    10ba:	8c 2f       	mov	r24, r28
    10bc:	df da       	rcall	.-2626   	; 0x67c <I2C_write>
    10be:	fb da       	rcall	.-2570   	; 0x6b6 <I2C_stop>
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	08 95       	ret

000010c8 <pca9635_set_all_led_pwm>:
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	d8 2f       	mov	r29, r24
    10ce:	80 e8       	ldi	r24, 0x80	; 128
    10d0:	b0 da       	rcall	.-2720   	; 0x632 <I2C_start>
    10d2:	82 e8       	ldi	r24, 0x82	; 130
    10d4:	d3 da       	rcall	.-2650   	; 0x67c <I2C_write>
    10d6:	c0 e1       	ldi	r28, 0x10	; 16
    10d8:	8d 2f       	mov	r24, r29
    10da:	d0 da       	rcall	.-2656   	; 0x67c <I2C_write>
    10dc:	c1 50       	subi	r28, 0x01	; 1
    10de:	e1 f7       	brne	.-8      	; 0x10d8 <pca9635_set_all_led_pwm+0x10>
    10e0:	ea da       	rcall	.-2604   	; 0x6b6 <I2C_stop>
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	08 95       	ret

000010e8 <pca9635_set_sleep>:

/**
* Changes the oscillator mode between sleep (1) and active (0)
*/
uint8_t pca9635_set_sleep(uint8_t sleep)
{
    10e8:	cf 93       	push	r28
    10ea:	c8 2f       	mov	r28, r24
	I2C_start((0x40<<1)+I2C_READ);
    10ec:	81 e8       	ldi	r24, 0x81	; 129
    10ee:	a1 da       	rcall	.-2750   	; 0x632 <I2C_start>
	I2C_write(0x80); // autoincrement, mode 0,
    10f0:	80 e8       	ldi	r24, 0x80	; 128
    10f2:	c4 da       	rcall	.-2680   	; 0x67c <I2C_write>
	// I2C_stop(); ???nodig?
	uint8_t data = I2C_read_ack();
    10f4:	d5 da       	rcall	.-2646   	; 0x6a0 <I2C_read_ack>
	
	if(sleep){		// set or unset bit 4
    10f6:	cc 23       	and	r28, r28
    10f8:	11 f0       	breq	.+4      	; 0x10fe <pca9635_set_sleep+0x16>
		data |= (1<<4);
    10fa:	80 61       	ori	r24, 0x10	; 16
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <pca9635_set_sleep+0x18>
	}else{
		data &= ~(1<<4);
    10fe:	8f 7e       	andi	r24, 0xEF	; 239
	}
	
	uint8_t ack = I2C_write(data);  
    1100:	bd da       	rcall	.-2694   	; 0x67c <I2C_write>
    1102:	c8 2f       	mov	r28, r24
	I2C_stop();
    1104:	d8 da       	rcall	.-2640   	; 0x6b6 <I2C_stop>
	return ack;
}
    1106:	8c 2f       	mov	r24, r28
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <_ZN6RFM12B7SPIInitEv>:

void RFM12B::Send(uint8_t toNodeID, const void* sendBuf, uint8_t sendLen, bool requestACK, uint8_t waitMode)
{
	while (!CanSend()) ReceiveComplete();
	SendStart(toNodeID, sendBuf, sendLen, requestACK, false, waitMode);
}
    110c:	84 b1       	in	r24, 0x04	; 4
    110e:	8c 62       	ori	r24, 0x2C	; 44
    1110:	84 b9       	out	0x04, r24	; 4
    1112:	2a 9a       	sbi	0x05, 2	; 5
    1114:	24 98       	cbi	0x04, 4	; 4
    1116:	80 e5       	ldi	r24, 0x50	; 80
    1118:	8c bd       	out	0x2c, r24	; 44
    111a:	8d b5       	in	r24, 0x2d	; 45
    111c:	81 60       	ori	r24, 0x01	; 1
    111e:	8d bd       	out	0x2d, r24	; 45
    1120:	52 98       	cbi	0x0a, 2	; 10
    1122:	5a 9a       	sbi	0x0b, 2	; 11
    1124:	08 95       	ret

00001126 <_ZN6RFM12B4ByteEh>:
    1126:	8e bd       	out	0x2e, r24	; 46
    1128:	0d b4       	in	r0, 0x2d	; 45
    112a:	07 fe       	sbrs	r0, 7
    112c:	fd cf       	rjmp	.-6      	; 0x1128 <_ZN6RFM12B4ByteEh+0x2>
    112e:	8e b5       	in	r24, 0x2e	; 46
    1130:	08 95       	ret

00001132 <_ZN6RFM12B8XFERSlowEj>:
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	18 2f       	mov	r17, r24
    113a:	8c b5       	in	r24, 0x2c	; 44
    113c:	81 60       	ori	r24, 0x01	; 1
    113e:	8c bd       	out	0x2c, r24	; 44
    1140:	2a 98       	cbi	0x05, 2	; 5
    1142:	89 2f       	mov	r24, r25
    1144:	f0 df       	rcall	.-32     	; 0x1126 <_ZN6RFM12B4ByteEh>
    1146:	d8 2f       	mov	r29, r24
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	c8 2f       	mov	r28, r24
    114c:	81 2f       	mov	r24, r17
    114e:	eb df       	rcall	.-42     	; 0x1126 <_ZN6RFM12B4ByteEh>
    1150:	2a 9a       	sbi	0x05, 2	; 5
    1152:	9c b5       	in	r25, 0x2c	; 44
    1154:	9e 7f       	andi	r25, 0xFE	; 254
    1156:	9c bd       	out	0x2c, r25	; 44
    1158:	c8 2b       	or	r28, r24
    115a:	8c 2f       	mov	r24, r28
    115c:	9d 2f       	mov	r25, r29
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	1f 91       	pop	r17
    1164:	08 95       	ret

00001166 <_ZN6RFM12B4XFEREj>:
    1166:	cf 93       	push	r28
    1168:	c8 2f       	mov	r28, r24
    116a:	2a 98       	cbi	0x05, 2	; 5
    116c:	89 2f       	mov	r24, r25
    116e:	db df       	rcall	.-74     	; 0x1126 <_ZN6RFM12B4ByteEh>
    1170:	8c 2f       	mov	r24, r28
    1172:	d9 df       	rcall	.-78     	; 0x1126 <_ZN6RFM12B4ByteEh>
    1174:	2a 9a       	sbi	0x05, 2	; 5
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <_ZN6RFM12B19InitializeInterruptEv>:
    117a:	e9 e6       	ldi	r30, 0x69	; 105
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	8d 7f       	andi	r24, 0xFD	; 253
    1182:	80 83       	st	Z, r24
    1184:	e8 9a       	sbi	0x1d, 0	; 29
    1186:	08 95       	ret

00001188 <_ZN6RFM12B10InitializeEhhhhhh>:
    1188:	ef 92       	push	r14
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	ec 01       	movw	r28, r24
    1194:	14 2f       	mov	r17, r20
    1196:	60 93 56 01 	sts	0x0156, r22
    119a:	20 93 55 01 	sts	0x0155, r18
    119e:	b6 df       	rcall	.-148    	; 0x110c <_ZN6RFM12B7SPIInitEv>
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	e0 df       	rcall	.-64     	; 0x1166 <_ZN6RFM12B4XFEREj>
    11a6:	85 e0       	ldi	r24, 0x05	; 5
    11a8:	92 e8       	ldi	r25, 0x82	; 130
    11aa:	dd df       	rcall	.-70     	; 0x1166 <_ZN6RFM12B4XFEREj>
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	98 eb       	ldi	r25, 0xB8	; 184
    11b0:	da df       	rcall	.-76     	; 0x1166 <_ZN6RFM12B4XFEREj>
    11b2:	4a 99       	sbic	0x09, 2	; 9
    11b4:	05 c0       	rjmp	.+10     	; 0x11c0 <_ZN6RFM12B10InitializeEhhhhhh+0x38>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	d5 df       	rcall	.-86     	; 0x1166 <_ZN6RFM12B4XFEREj>
    11bc:	4a 9b       	sbis	0x09, 2	; 9
    11be:	fb cf       	rjmp	.-10     	; 0x11b6 <_ZN6RFM12B10InitializeEhhhhhh+0x2e>
    11c0:	20 e1       	ldi	r18, 0x10	; 16
    11c2:	12 9f       	mul	r17, r18
    11c4:	c0 01       	movw	r24, r0
    11c6:	11 24       	eor	r1, r1
    11c8:	87 6c       	ori	r24, 0xC7	; 199
    11ca:	90 68       	ori	r25, 0x80	; 128
    11cc:	cc df       	rcall	.-104    	; 0x1166 <_ZN6RFM12B4XFEREj>
    11ce:	80 e4       	ldi	r24, 0x40	; 64
    11d0:	96 ea       	ldi	r25, 0xA6	; 166
    11d2:	c9 df       	rcall	.-110    	; 0x1166 <_ZN6RFM12B4XFEREj>
    11d4:	8e 2d       	mov	r24, r14
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	96 6c       	ori	r25, 0xC6	; 198
    11da:	c5 df       	rcall	.-118    	; 0x1166 <_ZN6RFM12B4XFEREj>
    11dc:	82 ea       	ldi	r24, 0xA2	; 162
    11de:	94 e9       	ldi	r25, 0x94	; 148
    11e0:	c2 df       	rcall	.-124    	; 0x1166 <_ZN6RFM12B4XFEREj>
    11e2:	8c ea       	ldi	r24, 0xAC	; 172
    11e4:	92 ec       	ldi	r25, 0xC2	; 194
    11e6:	bf df       	rcall	.-130    	; 0x1166 <_ZN6RFM12B4XFEREj>
    11e8:	80 91 55 01 	lds	r24, 0x0155
    11ec:	88 23       	and	r24, r24
    11ee:	49 f0       	breq	.+18     	; 0x1202 <_ZN6RFM12B10InitializeEhhhhhh+0x7a>
    11f0:	83 e8       	ldi	r24, 0x83	; 131
    11f2:	9a ec       	ldi	r25, 0xCA	; 202
    11f4:	b8 df       	rcall	.-144    	; 0x1166 <_ZN6RFM12B4XFEREj>
    11f6:	80 91 55 01 	lds	r24, 0x0155
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	9e 6c       	ori	r25, 0xCE	; 206
    11fe:	b3 df       	rcall	.-154    	; 0x1166 <_ZN6RFM12B4XFEREj>
    1200:	06 c0       	rjmp	.+12     	; 0x120e <_ZN6RFM12B10InitializeEhhhhhh+0x86>
    1202:	8b e8       	ldi	r24, 0x8B	; 139
    1204:	9a ec       	ldi	r25, 0xCA	; 202
    1206:	af df       	rcall	.-162    	; 0x1166 <_ZN6RFM12B4XFEREj>
    1208:	8d e2       	ldi	r24, 0x2D	; 45
    120a:	9e ec       	ldi	r25, 0xCE	; 206
    120c:	ac df       	rcall	.-168    	; 0x1166 <_ZN6RFM12B4XFEREj>
    120e:	83 e8       	ldi	r24, 0x83	; 131
    1210:	94 ec       	ldi	r25, 0xC4	; 196
    1212:	a9 df       	rcall	.-174    	; 0x1166 <_ZN6RFM12B4XFEREj>
    1214:	08 30       	cpi	r16, 0x08	; 8
    1216:	28 f4       	brcc	.+10     	; 0x1222 <_ZN6RFM12B10InitializeEhhhhhh+0x9a>
    1218:	80 2f       	mov	r24, r16
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	80 65       	ori	r24, 0x50	; 80
    121e:	98 69       	ori	r25, 0x98	; 152
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <_ZN6RFM12B10InitializeEhhhhhh+0x9e>
    1222:	87 e5       	ldi	r24, 0x57	; 87
    1224:	98 e9       	ldi	r25, 0x98	; 152
    1226:	9f df       	rcall	.-194    	; 0x1166 <_ZN6RFM12B4XFEREj>
    1228:	87 e7       	ldi	r24, 0x77	; 119
    122a:	9c ec       	ldi	r25, 0xCC	; 204
    122c:	9c df       	rcall	.-200    	; 0x1166 <_ZN6RFM12B4XFEREj>
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 ee       	ldi	r25, 0xE0	; 224
    1232:	99 df       	rcall	.-206    	; 0x1166 <_ZN6RFM12B4XFEREj>
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	98 ec       	ldi	r25, 0xC8	; 200
    1238:	96 df       	rcall	.-212    	; 0x1166 <_ZN6RFM12B4XFEREj>
    123a:	83 e4       	ldi	r24, 0x43	; 67
    123c:	90 ec       	ldi	r25, 0xC0	; 192
    123e:	93 df       	rcall	.-218    	; 0x1166 <_ZN6RFM12B4XFEREj>
    1240:	84 e0       	ldi	r24, 0x04	; 4
    1242:	80 93 4f 01 	sts	0x014F, r24
    1246:	80 91 56 01 	lds	r24, 0x0156
    124a:	88 23       	and	r24, r24
    124c:	11 f0       	breq	.+4      	; 0x1252 <_ZN6RFM12B10InitializeEhhhhhh+0xca>
    124e:	ce 01       	movw	r24, r28
    1250:	94 df       	rcall	.-216    	; 0x117a <_ZN6RFM12B19InitializeInterruptEv>
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ef 90       	pop	r14
    125c:	08 95       	ret

0000125e <_ZN6RFM12B16InterruptHandlerEv>:
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	81 df       	rcall	.-254    	; 0x1166 <_ZN6RFM12B4XFEREj>
    1264:	80 91 4f 01 	lds	r24, 0x014F
    1268:	85 30       	cpi	r24, 0x05	; 5
    126a:	09 f0       	breq	.+2      	; 0x126e <_ZN6RFM12B16InterruptHandlerEv+0x10>
    126c:	48 c0       	rjmp	.+144    	; 0x12fe <_ZN6RFM12B16InterruptHandlerEv+0xa0>
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 eb       	ldi	r25, 0xB0	; 176
    1272:	5f df       	rcall	.-322    	; 0x1132 <_ZN6RFM12B8XFERSlowEj>
    1274:	90 91 50 01 	lds	r25, 0x0150
    1278:	91 11       	cpse	r25, r1
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <_ZN6RFM12B16InterruptHandlerEv+0x26>
    127c:	90 91 55 01 	lds	r25, 0x0155
    1280:	91 11       	cpse	r25, r1
    1282:	a7 c0       	rjmp	.+334    	; 0x13d2 <_ZN6RFM12B16InterruptHandlerEv+0x174>
    1284:	90 91 50 01 	lds	r25, 0x0150
    1288:	e9 2f       	mov	r30, r25
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	e3 5c       	subi	r30, 0xC3	; 195
    128e:	fe 4f       	sbci	r31, 0xFE	; 254
    1290:	80 83       	st	Z, r24
    1292:	9f 5f       	subi	r25, 0xFF	; 255
    1294:	90 93 50 01 	sts	0x0150, r25
    1298:	20 91 4d 01 	lds	r18, 0x014D
    129c:	30 91 4e 01 	lds	r19, 0x014E
    12a0:	38 27       	eor	r19, r24
    12a2:	03 2e       	mov	r0, r19
    12a4:	02 94       	swap	r0
    12a6:	80 2d       	mov	r24, r0
    12a8:	8f 70       	andi	r24, 0x0F	; 15
    12aa:	83 27       	eor	r24, r19
    12ac:	93 2f       	mov	r25, r19
    12ae:	90 25       	eor	r25, r0
    12b0:	99 0f       	add	r25, r25
    12b2:	90 7e       	andi	r25, 0xE0	; 224
    12b4:	89 27       	eor	r24, r25
    12b6:	90 2d       	mov	r25, r0
    12b8:	93 27       	eor	r25, r19
    12ba:	90 7f       	andi	r25, 0xF0	; 240
    12bc:	96 95       	lsr	r25
    12be:	03 2e       	mov	r0, r19
    12c0:	00 0c       	add	r0, r0
    12c2:	99 1f       	adc	r25, r25
    12c4:	36 95       	lsr	r19
    12c6:	36 95       	lsr	r19
    12c8:	36 95       	lsr	r19
    12ca:	3f 71       	andi	r19, 0x1F	; 31
    12cc:	39 27       	eor	r19, r25
    12ce:	32 27       	eor	r19, r18
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 93 4e 01 	sts	0x014E, r19
    12d6:	20 93 4d 01 	sts	0x014D, r18
    12da:	20 91 50 01 	lds	r18, 0x0150
    12de:	80 91 3e 01 	lds	r24, 0x013E
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	04 96       	adiw	r24, 0x04	; 4
    12e8:	28 17       	cp	r18, r24
    12ea:	39 07       	cpc	r19, r25
    12ec:	2c f4       	brge	.+10     	; 0x12f8 <_ZN6RFM12B16InterruptHandlerEv+0x9a>
    12ee:	80 91 50 01 	lds	r24, 0x0150
    12f2:	80 31       	cpi	r24, 0x10	; 16
    12f4:	08 f4       	brcc	.+2      	; 0x12f8 <_ZN6RFM12B16InterruptHandlerEv+0x9a>
    12f6:	78 c0       	rjmp	.+240    	; 0x13e8 <_ZN6RFM12B16InterruptHandlerEv+0x18a>
    12f8:	8d e0       	ldi	r24, 0x0D	; 13
    12fa:	92 e8       	ldi	r25, 0x82	; 130
    12fc:	34 cf       	rjmp	.-408    	; 0x1166 <_ZN6RFM12B4XFEREj>
    12fe:	80 91 4f 01 	lds	r24, 0x014F
    1302:	88 23       	and	r24, r24
    1304:	0c f0       	brlt	.+2      	; 0x1308 <_ZN6RFM12B16InterruptHandlerEv+0xaa>
    1306:	31 c0       	rjmp	.+98     	; 0x136a <_ZN6RFM12B16InterruptHandlerEv+0x10c>
    1308:	e0 91 3e 01 	lds	r30, 0x013E
    130c:	80 91 4f 01 	lds	r24, 0x014F
    1310:	98 2f       	mov	r25, r24
    1312:	9f 5f       	subi	r25, 0xFF	; 255
    1314:	90 93 4f 01 	sts	0x014F, r25
    1318:	ee 5f       	subi	r30, 0xFE	; 254
    131a:	8e 0f       	add	r24, r30
    131c:	e8 2f       	mov	r30, r24
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	e3 5c       	subi	r30, 0xC3	; 195
    1322:	fe 4f       	sbci	r31, 0xFE	; 254
    1324:	80 81       	ld	r24, Z
    1326:	20 91 4d 01 	lds	r18, 0x014D
    132a:	30 91 4e 01 	lds	r19, 0x014E
    132e:	38 27       	eor	r19, r24
    1330:	03 2e       	mov	r0, r19
    1332:	02 94       	swap	r0
    1334:	90 2d       	mov	r25, r0
    1336:	9f 70       	andi	r25, 0x0F	; 15
    1338:	93 27       	eor	r25, r19
    133a:	43 2f       	mov	r20, r19
    133c:	40 25       	eor	r20, r0
    133e:	44 0f       	add	r20, r20
    1340:	40 7e       	andi	r20, 0xE0	; 224
    1342:	94 27       	eor	r25, r20
    1344:	40 2d       	mov	r20, r0
    1346:	43 27       	eor	r20, r19
    1348:	40 7f       	andi	r20, 0xF0	; 240
    134a:	46 95       	lsr	r20
    134c:	03 2e       	mov	r0, r19
    134e:	00 0c       	add	r0, r0
    1350:	44 1f       	adc	r20, r20
    1352:	36 95       	lsr	r19
    1354:	36 95       	lsr	r19
    1356:	36 95       	lsr	r19
    1358:	3f 71       	andi	r19, 0x1F	; 31
    135a:	34 27       	eor	r19, r20
    135c:	32 27       	eor	r19, r18
    135e:	29 2f       	mov	r18, r25
    1360:	30 93 4e 01 	sts	0x014E, r19
    1364:	20 93 4d 01 	sts	0x014D, r18
    1368:	31 c0       	rjmp	.+98     	; 0x13cc <_ZN6RFM12B16InterruptHandlerEv+0x16e>
    136a:	80 91 4f 01 	lds	r24, 0x014F
    136e:	98 2f       	mov	r25, r24
    1370:	9f 5f       	subi	r25, 0xFF	; 255
    1372:	90 93 4f 01 	sts	0x014F, r25
    1376:	83 30       	cpi	r24, 0x03	; 3
    1378:	19 f1       	breq	.+70     	; 0x13c0 <_ZN6RFM12B16InterruptHandlerEv+0x162>
    137a:	2c f4       	brge	.+10     	; 0x1386 <_ZN6RFM12B16InterruptHandlerEv+0x128>
    137c:	88 23       	and	r24, r24
    137e:	91 f0       	breq	.+36     	; 0x13a4 <_ZN6RFM12B16InterruptHandlerEv+0x146>
    1380:	81 30       	cpi	r24, 0x01	; 1
    1382:	19 f5       	brne	.+70     	; 0x13ca <_ZN6RFM12B16InterruptHandlerEv+0x16c>
    1384:	17 c0       	rjmp	.+46     	; 0x13b4 <_ZN6RFM12B16InterruptHandlerEv+0x156>
    1386:	89 30       	cpi	r24, 0x09	; 9
    1388:	19 f0       	breq	.+6      	; 0x1390 <_ZN6RFM12B16InterruptHandlerEv+0x132>
    138a:	8a 30       	cpi	r24, 0x0A	; 10
    138c:	f1 f4       	brne	.+60     	; 0x13ca <_ZN6RFM12B16InterruptHandlerEv+0x16c>
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <_ZN6RFM12B16InterruptHandlerEv+0x136>
    1390:	8d e2       	ldi	r24, 0x2D	; 45
    1392:	1c c0       	rjmp	.+56     	; 0x13cc <_ZN6RFM12B16InterruptHandlerEv+0x16e>
    1394:	80 91 55 01 	lds	r24, 0x0155
    1398:	90 91 3e 01 	lds	r25, 0x013E
    139c:	90 95       	com	r25
    139e:	90 93 4f 01 	sts	0x014F, r25
    13a2:	14 c0       	rjmp	.+40     	; 0x13cc <_ZN6RFM12B16InterruptHandlerEv+0x16e>
    13a4:	80 91 4d 01 	lds	r24, 0x014D
    13a8:	90 91 4e 01 	lds	r25, 0x014E
    13ac:	80 95       	com	r24
    13ae:	90 95       	com	r25
    13b0:	89 2f       	mov	r24, r25
    13b2:	0c c0       	rjmp	.+24     	; 0x13cc <_ZN6RFM12B16InterruptHandlerEv+0x16e>
    13b4:	80 91 4d 01 	lds	r24, 0x014D
    13b8:	90 91 4e 01 	lds	r25, 0x014E
    13bc:	80 95       	com	r24
    13be:	06 c0       	rjmp	.+12     	; 0x13cc <_ZN6RFM12B16InterruptHandlerEv+0x16e>
    13c0:	8d e0       	ldi	r24, 0x0D	; 13
    13c2:	92 e8       	ldi	r25, 0x82	; 130
    13c4:	d0 de       	rcall	.-608    	; 0x1166 <_ZN6RFM12B4XFEREj>
    13c6:	8a ea       	ldi	r24, 0xAA	; 170
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <_ZN6RFM12B16InterruptHandlerEv+0x16e>
    13ca:	8a ea       	ldi	r24, 0xAA	; 170
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	98 54       	subi	r25, 0x48	; 72
    13d0:	ca ce       	rjmp	.-620    	; 0x1166 <_ZN6RFM12B4XFEREj>
    13d2:	20 91 50 01 	lds	r18, 0x0150
    13d6:	e2 2f       	mov	r30, r18
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	e3 5c       	subi	r30, 0xC3	; 195
    13dc:	fe 4f       	sbci	r31, 0xFE	; 254
    13de:	90 83       	st	Z, r25
    13e0:	2f 5f       	subi	r18, 0xFF	; 255
    13e2:	20 93 50 01 	sts	0x0150, r18
    13e6:	4e cf       	rjmp	.-356    	; 0x1284 <_ZN6RFM12B16InterruptHandlerEv+0x26>
    13e8:	08 95       	ret

000013ea <_ZN6RFM12B9SendStartEhbb>:
    13ea:	60 93 3f 01 	sts	0x013F, r22
    13ee:	30 91 56 01 	lds	r19, 0x0156
    13f2:	30 93 40 01 	sts	0x0140, r19
    13f6:	22 23       	and	r18, r18
    13f8:	11 f0       	breq	.+4      	; 0x13fe <_ZN6RFM12B9SendStartEhbb+0x14>
    13fa:	20 e8       	ldi	r18, 0x80	; 128
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <_ZN6RFM12B9SendStartEhbb+0x16>
    13fe:	20 e0       	ldi	r18, 0x00	; 0
    1400:	44 23       	and	r20, r20
    1402:	11 f0       	breq	.+4      	; 0x1408 <_ZN6RFM12B9SendStartEhbb+0x1e>
    1404:	30 e4       	ldi	r19, 0x40	; 64
    1406:	01 c0       	rjmp	.+2      	; 0x140a <_ZN6RFM12B9SendStartEhbb+0x20>
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	23 2b       	or	r18, r19
    140c:	20 93 41 01 	sts	0x0141, r18
    1410:	dc 01       	movw	r26, r24
    1412:	ed 91       	ld	r30, X+
    1414:	fc 91       	ld	r31, X
    1416:	30 97       	sbiw	r30, 0x00	; 0
    1418:	11 f0       	breq	.+4      	; 0x141e <_ZN6RFM12B9SendStartEhbb+0x34>
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	09 95       	icall
    141e:	8f e0       	ldi	r24, 0x0F	; 15
    1420:	9d e1       	ldi	r25, 0x1D	; 29
    1422:	90 93 4e 01 	sts	0x014E, r25
    1426:	80 93 4d 01 	sts	0x014D, r24
    142a:	86 e0       	ldi	r24, 0x06	; 6
    142c:	80 93 4f 01 	sts	0x014F, r24
    1430:	8d e3       	ldi	r24, 0x3D	; 61
    1432:	92 e8       	ldi	r25, 0x82	; 130
    1434:	98 ce       	rjmp	.-720    	; 0x1166 <_ZN6RFM12B4XFEREj>

00001436 <_ZN6RFM12B8SendWaitEh>:
    1436:	34 e0       	ldi	r19, 0x04	; 4
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	4c e0       	ldi	r20, 0x0C	; 12
    143c:	16 c0       	rjmp	.+44     	; 0x146a <_ZN6RFM12B8SendWaitEh+0x34>
    143e:	66 23       	and	r22, r22
    1440:	a1 f0       	breq	.+40     	; 0x146a <_ZN6RFM12B8SendWaitEh+0x34>
    1442:	83 b7       	in	r24, 0x33	; 51
    1444:	81 7f       	andi	r24, 0xF1	; 241
    1446:	63 30       	cpi	r22, 0x03	; 3
    1448:	21 f0       	breq	.+8      	; 0x1452 <_ZN6RFM12B8SendWaitEh+0x1c>
    144a:	62 30       	cpi	r22, 0x02	; 2
    144c:	21 f4       	brne	.+8      	; 0x1456 <_ZN6RFM12B8SendWaitEh+0x20>
    144e:	94 2f       	mov	r25, r20
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <_ZN6RFM12B8SendWaitEh+0x22>
    1452:	93 2f       	mov	r25, r19
    1454:	01 c0       	rjmp	.+2      	; 0x1458 <_ZN6RFM12B8SendWaitEh+0x22>
    1456:	92 2f       	mov	r25, r18
    1458:	89 2b       	or	r24, r25
    145a:	83 bf       	out	0x33, r24	; 51
    145c:	83 b7       	in	r24, 0x33	; 51
    145e:	81 60       	ori	r24, 0x01	; 1
    1460:	83 bf       	out	0x33, r24	; 51
    1462:	88 95       	sleep
    1464:	83 b7       	in	r24, 0x33	; 51
    1466:	8e 7f       	andi	r24, 0xFE	; 254
    1468:	83 bf       	out	0x33, r24	; 51
    146a:	80 91 4f 01 	lds	r24, 0x014F
    146e:	84 30       	cpi	r24, 0x04	; 4
    1470:	31 f7       	brne	.-52     	; 0x143e <_ZN6RFM12B8SendWaitEh+0x8>
    1472:	08 95       	ret

00001474 <_ZN6RFM12B9SendStartEhPKvhbbh>:
    1474:	cf 92       	push	r12
    1476:	ef 92       	push	r14
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	ec 01       	movw	r28, r24
    1482:	16 2f       	mov	r17, r22
    1484:	64 2f       	mov	r22, r20
    1486:	75 2f       	mov	r23, r21
    1488:	ee e3       	ldi	r30, 0x3E	; 62
    148a:	f1 e0       	ldi	r31, 0x01	; 1
    148c:	20 83       	st	Z, r18
    148e:	90 81       	ld	r25, Z
    1490:	9d 5f       	subi	r25, 0xFD	; 253
    1492:	90 83       	st	Z, r25
    1494:	e2 e4       	ldi	r30, 0x42	; 66
    1496:	f1 e0       	ldi	r31, 0x01	; 1
    1498:	42 2f       	mov	r20, r18
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	8e 2f       	mov	r24, r30
    149e:	9f 2f       	mov	r25, r31
    14a0:	2d d2       	rcall	.+1114   	; 0x18fc <memcpy>
    14a2:	2e 2d       	mov	r18, r14
    14a4:	40 2f       	mov	r20, r16
    14a6:	61 2f       	mov	r22, r17
    14a8:	ce 01       	movw	r24, r28
    14aa:	9f df       	rcall	.-194    	; 0x13ea <_ZN6RFM12B9SendStartEhbb>
    14ac:	6c 2d       	mov	r22, r12
    14ae:	ce 01       	movw	r24, r28
    14b0:	c2 df       	rcall	.-124    	; 0x1436 <_ZN6RFM12B8SendWaitEh>
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	ef 90       	pop	r14
    14bc:	cf 90       	pop	r12
    14be:	08 95       	ret

000014c0 <_ZN6RFM12B7GetDataEv>:
    14c0:	82 e4       	ldi	r24, 0x42	; 66
    14c2:	91 e0       	ldi	r25, 0x01	; 1
    14c4:	08 95       	ret

000014c6 <_ZN6RFM12B12ACKRequestedEv>:
    14c6:	80 91 41 01 	lds	r24, 0x0141
    14ca:	86 ff       	sbrs	r24, 6
    14cc:	07 c0       	rjmp	.+14     	; 0x14dc <_ZN6RFM12B12ACKRequestedEv+0x16>
    14ce:	80 91 3f 01 	lds	r24, 0x013F
    14d2:	80 95       	com	r24
    14d4:	88 1f       	adc	r24, r24
    14d6:	88 27       	eor	r24, r24
    14d8:	88 1f       	adc	r24, r24
    14da:	08 95       	ret
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	08 95       	ret

000014e0 <_ZN6RFM12B10SetLowDutyEm>:
    14e0:	4f 3f       	cpi	r20, 0xFF	; 255
    14e2:	51 05       	cpc	r21, r1
    14e4:	61 05       	cpc	r22, r1
    14e6:	71 05       	cpc	r23, r1
    14e8:	59 f0       	breq	.+22     	; 0x1500 <_ZN6RFM12B10SetLowDutyEm+0x20>
    14ea:	50 f0       	brcs	.+20     	; 0x1500 <_ZN6RFM12B10SetLowDutyEm+0x20>
    14ec:	76 95       	lsr	r23
    14ee:	67 95       	ror	r22
    14f0:	57 95       	ror	r21
    14f2:	47 95       	ror	r20
    14f4:	4f 3f       	cpi	r20, 0xFF	; 255
    14f6:	51 05       	cpc	r21, r1
    14f8:	61 05       	cpc	r22, r1
    14fa:	71 05       	cpc	r23, r1
    14fc:	09 f0       	breq	.+2      	; 0x1500 <_ZN6RFM12B10SetLowDutyEm+0x20>
    14fe:	b0 f7       	brcc	.-20     	; 0x14ec <_ZN6RFM12B10SetLowDutyEm+0xc>
    1500:	8a ef       	ldi	r24, 0xFA	; 250
    1502:	91 ee       	ldi	r25, 0xE1	; 225
    1504:	30 de       	rcall	.-928    	; 0x1166 <_ZN6RFM12B4XFEREj>
    1506:	82 e3       	ldi	r24, 0x32	; 50
    1508:	98 ec       	ldi	r25, 0xC8	; 200
    150a:	90 93 3c 01 	sts	0x013C, r25
    150e:	80 93 3b 01 	sts	0x013B, r24
    1512:	80 91 3b 01 	lds	r24, 0x013B
    1516:	90 91 3c 01 	lds	r25, 0x013C
    151a:	25 ce       	rjmp	.-950    	; 0x1166 <_ZN6RFM12B4XFEREj>

0000151c <_ZN6RFM12B15SetLowDutyOnOffEh>:
    151c:	66 23       	and	r22, r22
    151e:	71 f0       	breq	.+28     	; 0x153c <_ZN6RFM12B15SetLowDutyOnOffEh+0x20>
    1520:	80 91 3b 01 	lds	r24, 0x013B
    1524:	90 91 3c 01 	lds	r25, 0x013C
    1528:	81 60       	ori	r24, 0x01	; 1
    152a:	90 93 3c 01 	sts	0x013C, r25
    152e:	80 93 3b 01 	sts	0x013B, r24
    1532:	80 91 3b 01 	lds	r24, 0x013B
    1536:	90 91 3c 01 	lds	r25, 0x013C
    153a:	15 ce       	rjmp	.-982    	; 0x1166 <_ZN6RFM12B4XFEREj>
    153c:	80 91 3b 01 	lds	r24, 0x013B
    1540:	90 91 3c 01 	lds	r25, 0x013C
    1544:	8e 7f       	andi	r24, 0xFE	; 254
    1546:	90 93 3c 01 	sts	0x013C, r25
    154a:	80 93 3b 01 	sts	0x013B, r24
    154e:	80 91 3b 01 	lds	r24, 0x013B
    1552:	90 91 3c 01 	lds	r25, 0x013C
    1556:	07 ce       	rjmp	.-1010   	; 0x1166 <_ZN6RFM12B4XFEREj>

00001558 <_ZN6RFM12B7CanSendEv>:
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	ec 01       	movw	r28, r24
    155e:	80 91 4f 01 	lds	r24, 0x014F
    1562:	85 30       	cpi	r24, 0x05	; 5
    1564:	81 f4       	brne	.+32     	; 0x1586 <_ZN6RFM12B7CanSendEv+0x2e>
    1566:	80 91 50 01 	lds	r24, 0x0150
    156a:	81 11       	cpse	r24, r1
    156c:	0e c0       	rjmp	.+28     	; 0x158a <_ZN6RFM12B7CanSendEv+0x32>
    156e:	db dd       	rcall	.-1098   	; 0x1126 <_ZN6RFM12B4ByteEh>
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	ce 01       	movw	r24, r28
    1574:	d3 df       	rcall	.-90     	; 0x151c <_ZN6RFM12B15SetLowDutyOnOffEh>
    1576:	8d e0       	ldi	r24, 0x0D	; 13
    1578:	92 e8       	ldi	r25, 0x82	; 130
    157a:	f5 dd       	rcall	.-1046   	; 0x1166 <_ZN6RFM12B4XFEREj>
    157c:	84 e0       	ldi	r24, 0x04	; 4
    157e:	80 93 4f 01 	sts	0x014F, r24
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	03 c0       	rjmp	.+6      	; 0x158c <_ZN6RFM12B7CanSendEv+0x34>
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	01 c0       	rjmp	.+2      	; 0x158c <_ZN6RFM12B7CanSendEv+0x34>
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	08 95       	ret

00001592 <_ZN6RFM12B12ReceiveStartEv>:
    1592:	10 92 3e 01 	sts	0x013E, r1
    1596:	10 92 50 01 	sts	0x0150, r1
    159a:	2f e0       	ldi	r18, 0x0F	; 15
    159c:	3d e1       	ldi	r19, 0x1D	; 29
    159e:	30 93 4e 01 	sts	0x014E, r19
    15a2:	20 93 4d 01 	sts	0x014D, r18
    15a6:	25 e0       	ldi	r18, 0x05	; 5
    15a8:	20 93 4f 01 	sts	0x014F, r18
    15ac:	61 e0       	ldi	r22, 0x01	; 1
    15ae:	b6 df       	rcall	.-148    	; 0x151c <_ZN6RFM12B15SetLowDutyOnOffEh>
    15b0:	86 e0       	ldi	r24, 0x06	; 6
    15b2:	92 e8       	ldi	r25, 0x82	; 130
    15b4:	d8 cd       	rjmp	.-1104   	; 0x1166 <_ZN6RFM12B4XFEREj>

000015b6 <_ZN6RFM12B15ReceiveCompleteEv>:
    15b6:	20 91 4f 01 	lds	r18, 0x014F
    15ba:	25 30       	cpi	r18, 0x05	; 5
    15bc:	69 f5       	brne	.+90     	; 0x1618 <_ZN6RFM12B15ReceiveCompleteEv+0x62>
    15be:	40 91 50 01 	lds	r20, 0x0150
    15c2:	20 91 3e 01 	lds	r18, 0x013E
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	2c 5f       	subi	r18, 0xFC	; 252
    15cc:	3f 4f       	sbci	r19, 0xFF	; 255
    15ce:	42 17       	cp	r20, r18
    15d0:	53 07       	cpc	r21, r19
    15d2:	5c f5       	brge	.+86     	; 0x162a <_ZN6RFM12B15ReceiveCompleteEv+0x74>
    15d4:	20 91 50 01 	lds	r18, 0x0150
    15d8:	20 31       	cpi	r18, 0x10	; 16
    15da:	38 f5       	brcc	.+78     	; 0x162a <_ZN6RFM12B15ReceiveCompleteEv+0x74>
    15dc:	1d c0       	rjmp	.+58     	; 0x1618 <_ZN6RFM12B15ReceiveCompleteEv+0x62>
    15de:	21 e0       	ldi	r18, 0x01	; 1
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	30 93 4e 01 	sts	0x014E, r19
    15e6:	20 93 4d 01 	sts	0x014D, r18
    15ea:	20 91 3f 01 	lds	r18, 0x013F
    15ee:	2f 77       	andi	r18, 0x7F	; 127
    15f0:	39 f0       	breq	.+14     	; 0x1600 <_ZN6RFM12B15ReceiveCompleteEv+0x4a>
    15f2:	30 91 3f 01 	lds	r19, 0x013F
    15f6:	3f 77       	andi	r19, 0x7F	; 127
    15f8:	20 91 56 01 	lds	r18, 0x0156
    15fc:	32 13       	cpse	r19, r18
    15fe:	0c c0       	rjmp	.+24     	; 0x1618 <_ZN6RFM12B15ReceiveCompleteEv+0x62>
    1600:	20 91 4d 01 	lds	r18, 0x014D
    1604:	30 91 4e 01 	lds	r19, 0x014E
    1608:	23 2b       	or	r18, r19
    160a:	d9 f4       	brne	.+54     	; 0x1642 <_ZN6RFM12B15ReceiveCompleteEv+0x8c>
    160c:	dc 01       	movw	r26, r24
    160e:	ed 91       	ld	r30, X+
    1610:	fc 91       	ld	r31, X
    1612:	30 97       	sbiw	r30, 0x00	; 0
    1614:	91 f4       	brne	.+36     	; 0x163a <_ZN6RFM12B15ReceiveCompleteEv+0x84>
    1616:	15 c0       	rjmp	.+42     	; 0x1642 <_ZN6RFM12B15ReceiveCompleteEv+0x8c>
    1618:	20 91 4f 01 	lds	r18, 0x014F
    161c:	24 30       	cpi	r18, 0x04	; 4
    161e:	19 f4       	brne	.+6      	; 0x1626 <_ZN6RFM12B15ReceiveCompleteEv+0x70>
    1620:	b8 df       	rcall	.-144    	; 0x1592 <_ZN6RFM12B12ReceiveStartEv>
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	08 95       	ret
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	08 95       	ret
    162a:	24 e0       	ldi	r18, 0x04	; 4
    162c:	20 93 4f 01 	sts	0x014F, r18
    1630:	20 91 3e 01 	lds	r18, 0x013E
    1634:	2b 30       	cpi	r18, 0x0B	; 11
    1636:	98 f6       	brcc	.-90     	; 0x15de <_ZN6RFM12B15ReceiveCompleteEv+0x28>
    1638:	d8 cf       	rjmp	.-80     	; 0x15ea <_ZN6RFM12B15ReceiveCompleteEv+0x34>
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	09 95       	icall
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	08 95       	ret
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	9f ef       	ldi	r25, 0xFF	; 255
    1646:	dc 01       	movw	r26, r24
    1648:	80 93 51 01 	sts	0x0151, r24
    164c:	90 93 52 01 	sts	0x0152, r25
    1650:	a0 93 53 01 	sts	0x0153, r26
    1654:	b0 93 54 01 	sts	0x0154, r27
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	08 95       	ret

0000165c <_ZN6RFM12B7SendACKEPKvhh>:
	SendStart(toNodeID, requestACK, sendACK);
	SendWait(waitMode);
}

/// Should be called immediately after reception in case sender wants ACK
void RFM12B::SendACK(const void* sendBuf, uint8_t sendLen, uint8_t waitMode) {
    165c:	af 92       	push	r10
    165e:	bf 92       	push	r11
    1660:	cf 92       	push	r12
    1662:	ef 92       	push	r14
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    166c:	ec 01       	movw	r28, r24
    166e:	5b 01       	movw	r10, r22
    1670:	14 2f       	mov	r17, r20
    1672:	c2 2e       	mov	r12, r18
	while (!CanSend()) ReceiveComplete();
    1674:	02 c0       	rjmp	.+4      	; 0x167a <_ZN6RFM12B7SendACKEPKvhh+0x1e>
    1676:	ce 01       	movw	r24, r28
    1678:	9e df       	rcall	.-196    	; 0x15b6 <_ZN6RFM12B15ReceiveCompleteEv>
    167a:	ce 01       	movw	r24, r28
    167c:	6d df       	rcall	.-294    	; 0x1558 <_ZN6RFM12B7CanSendEv>
    167e:	88 23       	and	r24, r24
    1680:	d1 f3       	breq	.-12     	; 0x1676 <_ZN6RFM12B7SendACKEPKvhh+0x1a>
	SendStart(RF12_SOURCEID, sendBuf, sendLen, false, true, waitMode);
    1682:	60 91 40 01 	lds	r22, 0x0140
    1686:	6f 77       	andi	r22, 0x7F	; 127
    1688:	ee 24       	eor	r14, r14
    168a:	e3 94       	inc	r14
    168c:	00 e0       	ldi	r16, 0x00	; 0
    168e:	21 2f       	mov	r18, r17
    1690:	a5 01       	movw	r20, r10
    1692:	ce 01       	movw	r24, r28
    1694:	ef de       	rcall	.-546    	; 0x1474 <_ZN6RFM12B9SendStartEhPKvhbbh>
}
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ef 90       	pop	r14
    16a0:	cf 90       	pop	r12
    16a2:	bf 90       	pop	r11
    16a4:	af 90       	pop	r10
    16a6:	08 95       	ret

000016a8 <tone_init>:
#include <avr/power.h>

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume counsigned long _tAC_time;ntrol.

void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
    16a8:	21 9a       	sbi	0x04, 1	; 4
    16aa:	08 95       	ret

000016ac <noTone>:


	void noTone() {
	//	uart0_puts("STOP");
	//	TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
		 TCCR1B  &= ~(1<<0) | ~(1<<1) | ~(1<<2) ;        // No clock source (Timer/Counter stopped).
    16ac:	e1 e8       	ldi	r30, 0x81	; 129
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	80 83       	st	Z, r24
		 TCCR1A  = 0x00;       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
    16b4:	10 92 80 00 	sts	0x0080, r1
		 power_timer1_disable();
    16b8:	e4 e6       	ldi	r30, 0x64	; 100
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	88 60       	ori	r24, 0x08	; 8
    16c0:	80 83       	st	Z, r24
		PORTB &= ~(1 << 1); // Set pin PB1 to LOW.
    16c2:	29 98       	cbi	0x05, 1	; 5
    16c4:	08 95       	ret

000016c6 <tone>:
void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
	
}

void tone(unsigned long frequency, uint8_t volume) {
    16c6:	cf 92       	push	r12
    16c8:	df 92       	push	r13
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	6b 01       	movw	r12, r22
    16d4:	7c 01       	movw	r14, r24
	 power_timer1_enable();
    16d6:	e4 e6       	ldi	r30, 0x64	; 100
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	87 7f       	andi	r24, 0xF7	; 247
    16de:	80 83       	st	Z, r24
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
    16e0:	c1 14       	cp	r12, r1
    16e2:	d1 04       	cpc	r13, r1
    16e4:	e1 04       	cpc	r14, r1
    16e6:	f1 04       	cpc	r15, r1
    16e8:	11 f0       	breq	.+4      	; 0x16ee <tone+0x28>
    16ea:	41 11       	cpse	r20, r1
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <tone+0x2c>
    16ee:	de df       	rcall	.-68     	; 0x16ac <noTone>
    16f0:	4d c0       	rjmp	.+154    	; 0x178c <tone+0xc6>
    16f2:	d4 2f       	mov	r29, r20
    16f4:	4b 30       	cpi	r20, 0x0B	; 11
    16f6:	08 f0       	brcs	.+2      	; 0x16fa <tone+0x34>
    16f8:	da e0       	ldi	r29, 0x0A	; 10
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	72 e1       	ldi	r23, 0x12	; 18
    16fe:	8a e7       	ldi	r24, 0x7A	; 122
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a7 01       	movw	r20, r14
    1704:	96 01       	movw	r18, r12
    1706:	d2 d0       	rcall	.+420    	; 0x18ac <__udivmodsi4>
    1708:	cc 24       	eor	r12, r12
    170a:	ca 94       	dec	r12
    170c:	dc 2c       	mov	r13, r12
    170e:	76 01       	movw	r14, r12
    1710:	c2 0e       	add	r12, r18
    1712:	d3 1e       	adc	r13, r19
    1714:	e4 1e       	adc	r14, r20
    1716:	f5 1e       	adc	r15, r21
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    1718:	c1 14       	cp	r12, r1
    171a:	d1 04       	cpc	r13, r1
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	e8 06       	cpc	r14, r24
    1720:	f1 04       	cpc	r15, r1
    1722:	58 f0       	brcs	.+22     	; 0x173a <tone+0x74>
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
    1724:	cd 2c       	mov	r12, r13
    1726:	de 2c       	mov	r13, r14
    1728:	ef 2c       	mov	r14, r15
    172a:	ff 24       	eor	r15, r15
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	c8 1a       	sub	r12, r24
    1730:	d1 08       	sbc	r13, r1
    1732:	e1 08       	sbc	r14, r1
    1734:	f1 08       	sbc	r15, r1
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    1736:	c4 e0       	ldi	r28, 0x04	; 4
    1738:	01 c0       	rjmp	.+2      	; 0x173c <tone+0x76>
	 power_timer1_enable();
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
    173a:	c1 e0       	ldi	r28, 0x01	; 1
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
		}
	
		unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
    173c:	ed 2f       	mov	r30, r29
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	ed 5f       	subi	r30, 0xFD	; 253
    1742:	fe 4f       	sbci	r31, 0xFE	; 254
    1744:	20 81       	ld	r18, Z
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	50 e0       	ldi	r21, 0x00	; 0
    174c:	c7 01       	movw	r24, r14
    174e:	b6 01       	movw	r22, r12
    1750:	ad d0       	rcall	.+346    	; 0x18ac <__udivmodsi4>
		
		ICR1   = top;							// Set the top.
    1752:	d0 92 87 00 	sts	0x0087, r13
    1756:	c0 92 86 00 	sts	0x0086, r12
		if (TCNT1 > top) TCNT1 = top;			// Counter over the top, put within range.
    175a:	80 91 84 00 	lds	r24, 0x0084
    175e:	90 91 85 00 	lds	r25, 0x0085
    1762:	a0 e0       	ldi	r26, 0x00	; 0
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	c8 16       	cp	r12, r24
    1768:	d9 06       	cpc	r13, r25
    176a:	ea 06       	cpc	r14, r26
    176c:	fb 06       	cpc	r15, r27
    176e:	20 f4       	brcc	.+8      	; 0x1778 <tone+0xb2>
    1770:	d0 92 85 00 	sts	0x0085, r13
    1774:	c0 92 84 00 	sts	0x0084, r12
			TCCR1B = _BV(WGM13)  | prescaler;   // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
    1778:	c0 61       	ori	r28, 0x10	; 16
    177a:	c0 93 81 00 	sts	0x0081, r28
			OCR1A  = duty;						// Set the duty cycle (volume).
    177e:	30 93 89 00 	sts	0x0089, r19
    1782:	20 93 88 00 	sts	0x0088, r18
			TCCR1A = _BV(COM1A1);				// Clear OC1A/OC1B on Compare Match (Set output to low level).
    1786:	80 e8       	ldi	r24, 0x80	; 128
    1788:	80 93 80 00 	sts	0x0080, r24
			

}
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	ff 90       	pop	r15
    1792:	ef 90       	pop	r14
    1794:	df 90       	pop	r13
    1796:	cf 90       	pop	r12
    1798:	08 95       	ret

0000179a <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    179a:	1f 92       	push	r1
    179c:	0f 92       	push	r0
    179e:	0f b6       	in	r0, 0x3f	; 63
    17a0:	0f 92       	push	r0
    17a2:	11 24       	eor	r1, r1
    17a4:	2f 93       	push	r18
    17a6:	3f 93       	push	r19
    17a8:	4f 93       	push	r20
    17aa:	5f 93       	push	r21
    17ac:	8f 93       	push	r24
    17ae:	9f 93       	push	r25
    17b0:	ef 93       	push	r30
    17b2:	ff 93       	push	r31
    17b4:	40 91 c0 00 	lds	r20, 0x00C0
    17b8:	50 91 c6 00 	lds	r21, 0x00C6
    17bc:	48 71       	andi	r20, 0x18	; 24
    17be:	80 91 59 01 	lds	r24, 0x0159
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	01 96       	adiw	r24, 0x01	; 1
    17c6:	8f 77       	andi	r24, 0x7F	; 127
    17c8:	99 27       	eor	r25, r25
    17ca:	20 91 58 01 	lds	r18, 0x0158
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	28 17       	cp	r18, r24
    17d2:	39 07       	cpc	r19, r25
    17d4:	39 f0       	breq	.+14     	; 0x17e4 <__vector_18+0x4a>
    17d6:	80 93 59 01 	sts	0x0159, r24
    17da:	fc 01       	movw	r30, r24
    17dc:	e4 5a       	subi	r30, 0xA4	; 164
    17de:	fe 4f       	sbci	r31, 0xFE	; 254
    17e0:	50 83       	st	Z, r21
    17e2:	01 c0       	rjmp	.+2      	; 0x17e6 <__vector_18+0x4c>
    17e4:	42 e0       	ldi	r20, 0x02	; 2
    17e6:	40 93 57 01 	sts	0x0157, r20
    17ea:	ff 91       	pop	r31
    17ec:	ef 91       	pop	r30
    17ee:	9f 91       	pop	r25
    17f0:	8f 91       	pop	r24
    17f2:	5f 91       	pop	r21
    17f4:	4f 91       	pop	r20
    17f6:	3f 91       	pop	r19
    17f8:	2f 91       	pop	r18
    17fa:	0f 90       	pop	r0
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	0f 90       	pop	r0
    1800:	1f 90       	pop	r1
    1802:	18 95       	reti

00001804 <__vector_19>:
    1804:	1f 92       	push	r1
    1806:	0f 92       	push	r0
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	0f 92       	push	r0
    180c:	11 24       	eor	r1, r1
    180e:	8f 93       	push	r24
    1810:	9f 93       	push	r25
    1812:	ef 93       	push	r30
    1814:	ff 93       	push	r31
    1816:	90 91 5b 01 	lds	r25, 0x015B
    181a:	80 91 5a 01 	lds	r24, 0x015A
    181e:	98 17       	cp	r25, r24
    1820:	79 f0       	breq	.+30     	; 0x1840 <__vector_19+0x3c>
    1822:	80 91 5a 01 	lds	r24, 0x015A
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	01 96       	adiw	r24, 0x01	; 1
    182a:	8f 77       	andi	r24, 0x7F	; 127
    182c:	99 27       	eor	r25, r25
    182e:	80 93 5a 01 	sts	0x015A, r24
    1832:	fc 01       	movw	r30, r24
    1834:	e4 52       	subi	r30, 0x24	; 36
    1836:	fe 4f       	sbci	r31, 0xFE	; 254
    1838:	80 81       	ld	r24, Z
    183a:	80 93 c6 00 	sts	0x00C6, r24
    183e:	05 c0       	rjmp	.+10     	; 0x184a <__vector_19+0x46>
    1840:	e1 ec       	ldi	r30, 0xC1	; 193
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	8f 7d       	andi	r24, 0xDF	; 223
    1848:	80 83       	st	Z, r24
    184a:	ff 91       	pop	r31
    184c:	ef 91       	pop	r30
    184e:	9f 91       	pop	r25
    1850:	8f 91       	pop	r24
    1852:	0f 90       	pop	r0
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	0f 90       	pop	r0
    1858:	1f 90       	pop	r1
    185a:	18 95       	reti

0000185c <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    185c:	60 91 5b 01 	lds	r22, 0x015B
    1860:	70 e0       	ldi	r23, 0x00	; 0
    1862:	6f 5f       	subi	r22, 0xFF	; 255
    1864:	7f 4f       	sbci	r23, 0xFF	; 255
    1866:	6f 77       	andi	r22, 0x7F	; 127
    1868:	77 27       	eor	r23, r23
    186a:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
    186c:	20 91 5a 01 	lds	r18, 0x015A
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	24 17       	cp	r18, r20
    1874:	35 07       	cpc	r19, r21
    1876:	d1 f3       	breq	.-12     	; 0x186c <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    1878:	fb 01       	movw	r30, r22
    187a:	e4 52       	subi	r30, 0x24	; 36
    187c:	fe 4f       	sbci	r31, 0xFE	; 254
    187e:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    1880:	60 93 5b 01 	sts	0x015B, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
    1884:	e1 ec       	ldi	r30, 0xC1	; 193
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	80 62       	ori	r24, 0x20	; 32
    188c:	80 83       	st	Z, r24
    188e:	08 95       	ret

00001890 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	ec 01       	movw	r28, r24
	while (*s) {
    1896:	88 81       	ld	r24, Y
    1898:	88 23       	and	r24, r24
    189a:	29 f0       	breq	.+10     	; 0x18a6 <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
    189c:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
    189e:	de df       	rcall	.-68     	; 0x185c <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
    18a0:	89 91       	ld	r24, Y+
    18a2:	81 11       	cpse	r24, r1
    18a4:	fc cf       	rjmp	.-8      	; 0x189e <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	08 95       	ret

000018ac <__udivmodsi4>:
    18ac:	a1 e2       	ldi	r26, 0x21	; 33
    18ae:	1a 2e       	mov	r1, r26
    18b0:	aa 1b       	sub	r26, r26
    18b2:	bb 1b       	sub	r27, r27
    18b4:	fd 01       	movw	r30, r26
    18b6:	0d c0       	rjmp	.+26     	; 0x18d2 <__udivmodsi4_ep>

000018b8 <__udivmodsi4_loop>:
    18b8:	aa 1f       	adc	r26, r26
    18ba:	bb 1f       	adc	r27, r27
    18bc:	ee 1f       	adc	r30, r30
    18be:	ff 1f       	adc	r31, r31
    18c0:	a2 17       	cp	r26, r18
    18c2:	b3 07       	cpc	r27, r19
    18c4:	e4 07       	cpc	r30, r20
    18c6:	f5 07       	cpc	r31, r21
    18c8:	20 f0       	brcs	.+8      	; 0x18d2 <__udivmodsi4_ep>
    18ca:	a2 1b       	sub	r26, r18
    18cc:	b3 0b       	sbc	r27, r19
    18ce:	e4 0b       	sbc	r30, r20
    18d0:	f5 0b       	sbc	r31, r21

000018d2 <__udivmodsi4_ep>:
    18d2:	66 1f       	adc	r22, r22
    18d4:	77 1f       	adc	r23, r23
    18d6:	88 1f       	adc	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	1a 94       	dec	r1
    18dc:	69 f7       	brne	.-38     	; 0x18b8 <__udivmodsi4_loop>
    18de:	60 95       	com	r22
    18e0:	70 95       	com	r23
    18e2:	80 95       	com	r24
    18e4:	90 95       	com	r25
    18e6:	9b 01       	movw	r18, r22
    18e8:	ac 01       	movw	r20, r24
    18ea:	bd 01       	movw	r22, r26
    18ec:	cf 01       	movw	r24, r30
    18ee:	08 95       	ret

000018f0 <__tablejump2__>:
    18f0:	ee 0f       	add	r30, r30
    18f2:	ff 1f       	adc	r31, r31

000018f4 <__tablejump__>:
    18f4:	05 90       	lpm	r0, Z+
    18f6:	f4 91       	lpm	r31, Z
    18f8:	e0 2d       	mov	r30, r0
    18fa:	09 94       	ijmp

000018fc <memcpy>:
    18fc:	fb 01       	movw	r30, r22
    18fe:	dc 01       	movw	r26, r24
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <memcpy+0xa>
    1902:	01 90       	ld	r0, Z+
    1904:	0d 92       	st	X+, r0
    1906:	41 50       	subi	r20, 0x01	; 1
    1908:	50 40       	sbci	r21, 0x00	; 0
    190a:	d8 f7       	brcc	.-10     	; 0x1902 <memcpy+0x6>
    190c:	08 95       	ret

0000190e <_exit>:
    190e:	f8 94       	cli

00001910 <__stop_program>:
    1910:	ff cf       	rjmp	.-2      	; 0x1910 <__stop_program>
