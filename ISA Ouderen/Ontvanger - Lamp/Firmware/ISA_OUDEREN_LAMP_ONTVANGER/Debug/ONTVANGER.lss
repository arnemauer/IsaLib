
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  0000192c  000019c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000192c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014f  00800148  00800148  00001a08  2**0
                  ALLOC
  3 .stab         00000d08  00000000  00000000  00001a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000272  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002982  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003f8  00000000  00000000  000029b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004ad9  00000000  00000000  00002da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001495  00000000  00000000  00007882  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000027f9  00000000  00000000  00008d17  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a1c  00000000  00000000  0000b510  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000010a6  00000000  00000000  0000bf2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002aa9  00000000  00000000  0000cfd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003a8  00000000  00000000  0000fa7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ec c2       	rjmp	.+1496   	; 0x5da <__ctors_end>
       2:	00 00       	nop
       4:	e3 c3       	rjmp	.+1990   	; 0x7cc <__vector_1>
       6:	00 00       	nop
       8:	0f c3       	rjmp	.+1566   	; 0x628 <__bad_interrupt>
       a:	00 00       	nop
       c:	0d c3       	rjmp	.+1562   	; 0x628 <__bad_interrupt>
       e:	00 00       	nop
      10:	0b c3       	rjmp	.+1558   	; 0x628 <__bad_interrupt>
      12:	00 00       	nop
      14:	09 c3       	rjmp	.+1554   	; 0x628 <__bad_interrupt>
      16:	00 00       	nop
      18:	07 c3       	rjmp	.+1550   	; 0x628 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c7       	rjmp	.+3974   	; 0xfa4 <__vector_7>
      1e:	00 00       	nop
      20:	03 c3       	rjmp	.+1542   	; 0x628 <__bad_interrupt>
      22:	00 00       	nop
      24:	01 c3       	rjmp	.+1538   	; 0x628 <__bad_interrupt>
      26:	00 00       	nop
      28:	ff c2       	rjmp	.+1534   	; 0x628 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fd c2       	rjmp	.+1530   	; 0x628 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fb c2       	rjmp	.+1526   	; 0x628 <__bad_interrupt>
      32:	00 00       	nop
      34:	f9 c2       	rjmp	.+1522   	; 0x628 <__bad_interrupt>
      36:	00 00       	nop
      38:	84 c3       	rjmp	.+1800   	; 0x742 <__vector_14>
      3a:	00 00       	nop
      3c:	f5 c2       	rjmp	.+1514   	; 0x628 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f3 c2       	rjmp	.+1510   	; 0x628 <__bad_interrupt>
      42:	00 00       	nop
      44:	f1 c2       	rjmp	.+1506   	; 0x628 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__vector_18>
      4c:	0c 94 f6 0b 	jmp	0x17ec	; 0x17ec <__vector_19>
      50:	eb c2       	rjmp	.+1494   	; 0x628 <__bad_interrupt>
      52:	00 00       	nop
      54:	e9 c2       	rjmp	.+1490   	; 0x628 <__bad_interrupt>
      56:	00 00       	nop
      58:	e7 c2       	rjmp	.+1486   	; 0x628 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e5 c2       	rjmp	.+1482   	; 0x628 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e3 c2       	rjmp	.+1478   	; 0x628 <__bad_interrupt>
      62:	00 00       	nop
      64:	e1 c2       	rjmp	.+1474   	; 0x628 <__bad_interrupt>
	...

00000068 <_ZL16icon_led_numbers>:
      68:	0c 0b 0a 0f 0e 0d 07 08 09 02 01 00                 ............

00000074 <_ZL22sound_pattern_doorbell>:
      74:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      84:	b0 04 00 00 f4 01 00 00 00 00 00 00 e8 03 00 00     ................
      94:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      a4:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000000b4 <_ZL19sound_pattern_phone>:
      b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     104:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     114:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     124:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     134:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     144:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     154:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     164:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     174:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     184:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     194:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     1a4:	00 00 00 00 e8 03 00 00 e8 03 00 00 28 00 00 00     ............(...
     1b4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1c4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1d4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1e4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1f4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     204:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     214:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     224:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     234:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     244:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     254:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     264:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     274:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     284:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     294:	ee 02 00 00 28 00 00 00 00 00 00 00 e8 03 00 00     ....(...........
     2a4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     304:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     314:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     324:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     334:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     344:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     354:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     364:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     374:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     384:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     394:	00 00 00 00 e8 03 00 00 00 00 00 00 00 00 00 00     ................
	...

000003b4 <_ZL18sound_pattern_fire>:
     3b4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3c4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3d4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3e4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3f4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     404:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     414:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     424:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...

00000434 <_ZL18sound_pattern_help>:
     434:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     444:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     454:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     464:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     474:	00 00 00 00 e8 03 00 00 1c 07 00 00 c8 00 00 00     ................
     484:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     494:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     4a4:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     4b4:	a5 05 00 00 c8 00 00 00 00 00 00 00 e8 03 00 00     ................
	...

000004cc <_ZL13flash_pattern>:
     4cc:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4dc:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4ec:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4fc:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     50c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     51c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     52c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     53c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     54c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     55c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     56c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     57c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     58c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     59c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     5ac:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     5bc:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...

000005cc <_ZL11icon_colors>:
     5cc:	3d f5 00 00 b8 f5 ff 00 00 ff ff 00                 =...........

000005d8 <__ctors_start>:
     5d8:	45 08       	sbc	r4, r5

000005da <__ctors_end>:
     5da:	11 24       	eor	r1, r1
     5dc:	1f be       	out	0x3f, r1	; 63
     5de:	cf ef       	ldi	r28, 0xFF	; 255
     5e0:	d8 e0       	ldi	r29, 0x08	; 8
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	cd bf       	out	0x3d, r28	; 61

000005e6 <__do_copy_data>:
     5e6:	11 e0       	ldi	r17, 0x01	; 1
     5e8:	a0 e0       	ldi	r26, 0x00	; 0
     5ea:	b1 e0       	ldi	r27, 0x01	; 1
     5ec:	ec e2       	ldi	r30, 0x2C	; 44
     5ee:	f9 e1       	ldi	r31, 0x19	; 25
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <__do_copy_data+0x10>
     5f2:	05 90       	lpm	r0, Z+
     5f4:	0d 92       	st	X+, r0
     5f6:	a8 34       	cpi	r26, 0x48	; 72
     5f8:	b1 07       	cpc	r27, r17
     5fa:	d9 f7       	brne	.-10     	; 0x5f2 <__do_copy_data+0xc>

000005fc <__do_clear_bss>:
     5fc:	22 e0       	ldi	r18, 0x02	; 2
     5fe:	a8 e4       	ldi	r26, 0x48	; 72
     600:	b1 e0       	ldi	r27, 0x01	; 1
     602:	01 c0       	rjmp	.+2      	; 0x606 <.do_clear_bss_start>

00000604 <.do_clear_bss_loop>:
     604:	1d 92       	st	X+, r1

00000606 <.do_clear_bss_start>:
     606:	a7 39       	cpi	r26, 0x97	; 151
     608:	b2 07       	cpc	r27, r18
     60a:	e1 f7       	brne	.-8      	; 0x604 <.do_clear_bss_loop>

0000060c <__do_global_ctors>:
     60c:	15 e0       	ldi	r17, 0x05	; 5
     60e:	ca ed       	ldi	r28, 0xDA	; 218
     610:	d5 e0       	ldi	r29, 0x05	; 5
     612:	04 c0       	rjmp	.+8      	; 0x61c <__do_global_ctors+0x10>
     614:	22 97       	sbiw	r28, 0x02	; 2
     616:	fe 01       	movw	r30, r28
     618:	0e 94 87 0c 	call	0x190e	; 0x190e <__tablejump__>
     61c:	c8 3d       	cpi	r28, 0xD8	; 216
     61e:	d1 07       	cpc	r29, r17
     620:	c9 f7       	brne	.-14     	; 0x614 <__do_global_ctors+0x8>
     622:	f7 d0       	rcall	.+494    	; 0x812 <main>
     624:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <_exit>

00000628 <__bad_interrupt>:
     628:	eb cc       	rjmp	.-1578   	; 0x0 <__vectors>

0000062a <I2C_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
     62a:	88 e4       	ldi	r24, 0x48	; 72
     62c:	80 93 b8 00 	sts	0x00B8, r24
     630:	08 95       	ret

00000632 <I2C_start>:
     632:	ec eb       	ldi	r30, 0xBC	; 188
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	10 82       	st	Z, r1
     638:	94 ea       	ldi	r25, 0xA4	; 164
     63a:	90 83       	st	Z, r25
     63c:	90 81       	ld	r25, Z
     63e:	99 23       	and	r25, r25
     640:	ec f7       	brge	.-6      	; 0x63c <I2C_start+0xa>
     642:	90 91 b9 00 	lds	r25, 0x00B9
     646:	98 7f       	andi	r25, 0xF8	; 248
     648:	98 30       	cpi	r25, 0x08	; 8
     64a:	a1 f4       	brne	.+40     	; 0x674 <I2C_start+0x42>
     64c:	80 93 bb 00 	sts	0x00BB, r24
     650:	84 e8       	ldi	r24, 0x84	; 132
     652:	80 93 bc 00 	sts	0x00BC, r24
     656:	ec eb       	ldi	r30, 0xBC	; 188
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	88 23       	and	r24, r24
     65e:	ec f7       	brge	.-6      	; 0x65a <I2C_start+0x28>
     660:	90 91 b9 00 	lds	r25, 0x00B9
     664:	98 7f       	andi	r25, 0xF8	; 248
     666:	98 31       	cpi	r25, 0x18	; 24
     668:	39 f0       	breq	.+14     	; 0x678 <I2C_start+0x46>
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 34       	cpi	r25, 0x40	; 64
     66e:	29 f4       	brne	.+10     	; 0x67a <I2C_start+0x48>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	08 95       	ret
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	08 95       	ret
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	08 95       	ret

0000067c <I2C_write>:
     67c:	80 93 bb 00 	sts	0x00BB, r24
     680:	84 e8       	ldi	r24, 0x84	; 132
     682:	80 93 bc 00 	sts	0x00BC, r24
     686:	ec eb       	ldi	r30, 0xBC	; 188
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	88 23       	and	r24, r24
     68e:	ec f7       	brge	.-6      	; 0x68a <I2C_write+0xe>
     690:	90 91 b9 00 	lds	r25, 0x00B9
     694:	98 7f       	andi	r25, 0xF8	; 248
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	98 32       	cpi	r25, 0x28	; 40
     69a:	09 f4       	brne	.+2      	; 0x69e <I2C_write+0x22>
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	08 95       	ret

000006a0 <I2C_read_ack>:
     6a0:	84 ec       	ldi	r24, 0xC4	; 196
     6a2:	80 93 bc 00 	sts	0x00BC, r24
     6a6:	ec eb       	ldi	r30, 0xBC	; 188
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	88 23       	and	r24, r24
     6ae:	ec f7       	brge	.-6      	; 0x6aa <I2C_read_ack+0xa>
     6b0:	80 91 bb 00 	lds	r24, 0x00BB
     6b4:	08 95       	ret

000006b6 <I2C_stop>:

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     6b6:	84 e9       	ldi	r24, 0x94	; 148
     6b8:	80 93 bc 00 	sts	0x00BC, r24
     6bc:	08 95       	ret

000006be <log_s>:
 *
 * @param s The specified string
 */
void log_s(const char *s) {
#ifdef LOG_AVAILABLE
    uart0_puts(s);
     6be:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <uart0_puts>
     6c2:	08 95       	ret

000006c4 <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	84 bd       	out	0x24, r24	; 36
     6c8:	93 e0       	ldi	r25, 0x03	; 3
     6ca:	95 bd       	out	0x25, r25	; 37
     6cc:	80 93 6e 00 	sts	0x006E, r24
     6d0:	8a ef       	ldi	r24, 0xFA	; 250
     6d2:	87 bd       	out	0x27, r24	; 39
     6d4:	08 95       	ret

000006d6 <millis_get>:
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	8f b7       	in	r24, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	00 91 48 01 	lds	r16, 0x0148
     6e2:	10 91 49 01 	lds	r17, 0x0149
     6e6:	20 91 4a 01 	lds	r18, 0x014A
     6ea:	30 91 4b 01 	lds	r19, 0x014B
     6ee:	8f bf       	out	0x3f, r24	; 63
     6f0:	60 2f       	mov	r22, r16
     6f2:	71 2f       	mov	r23, r17
     6f4:	82 2f       	mov	r24, r18
     6f6:	93 2f       	mov	r25, r19
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <millis_resume>:
     6fe:	e4 e6       	ldi	r30, 0x64	; 100
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 81       	ld	r24, Z
     704:	8f 7d       	andi	r24, 0xDF	; 223
     706:	80 83       	st	Z, r24
     708:	ee e6       	ldi	r30, 0x6E	; 110
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	82 60       	ori	r24, 0x02	; 2
     710:	80 83       	st	Z, r24
     712:	08 95       	ret

00000714 <millis_pause>:
     714:	ee e6       	ldi	r30, 0x6E	; 110
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	8d 7f       	andi	r24, 0xFD	; 253
     71c:	80 83       	st	Z, r24
     71e:	e4 e6       	ldi	r30, 0x64	; 100
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	80 62       	ori	r24, 0x20	; 32
     726:	80 83       	st	Z, r24
     728:	08 95       	ret

0000072a <millis_reset>:
     72a:	8f b7       	in	r24, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	10 92 48 01 	sts	0x0148, r1
     732:	10 92 49 01 	sts	0x0149, r1
     736:	10 92 4a 01 	sts	0x014A, r1
     73a:	10 92 4b 01 	sts	0x014B, r1
     73e:	8f bf       	out	0x3f, r24	; 63
     740:	08 95       	ret

00000742 <__vector_14>:

ISR(ISR_VECT)
{
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	8f 93       	push	r24
     74e:	9f 93       	push	r25
     750:	af 93       	push	r26
     752:	bf 93       	push	r27
	++milliseconds;
     754:	80 91 48 01 	lds	r24, 0x0148
     758:	90 91 49 01 	lds	r25, 0x0149
     75c:	a0 91 4a 01 	lds	r26, 0x014A
     760:	b0 91 4b 01 	lds	r27, 0x014B
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	a1 1d       	adc	r26, r1
     768:	b1 1d       	adc	r27, r1
     76a:	80 93 48 01 	sts	0x0148, r24
     76e:	90 93 49 01 	sts	0x0149, r25
     772:	a0 93 4a 01 	sts	0x014A, r26
     776:	b0 93 4b 01 	sts	0x014B, r27
}
     77a:	bf 91       	pop	r27
     77c:	af 91       	pop	r26
     77e:	9f 91       	pop	r25
     780:	8f 91       	pop	r24
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	0f 90       	pop	r0
     788:	1f 90       	pop	r1
     78a:	18 95       	reti

0000078c <_Z11timer2_initv>:

// Initialise library
void timer2_init()
{
	// Timer settings
	TCCR2A = _BV(WGM21); // prescaler 128
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22)|_BV(CS20);
     792:	85 e0       	ldi	r24, 0x05	; 5
     794:	80 93 b1 00 	sts	0x00B1, r24
	
	OCR2A = ((F_CPU / 128) / 1000);
     798:	8d e7       	ldi	r24, 0x7D	; 125
     79a:	80 93 b3 00 	sts	0x00B3, r24
     79e:	08 95       	ret

000007a0 <_Z13timer2_resumev>:


// Turn on timer and resume interrupts
void timer2_resume()
{
	power_timer2_enable();
     7a0:	e4 e6       	ldi	r30, 0x64	; 100
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	80 81       	ld	r24, Z
     7a6:	8f 7b       	andi	r24, 0xBF	; 191
     7a8:	80 83       	st	Z, r24
	TIMSK2 |= _BV(OCIE2A);
     7aa:	e0 e7       	ldi	r30, 0x70	; 112
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	80 81       	ld	r24, Z
     7b0:	82 60       	ori	r24, 0x02	; 2
     7b2:	80 83       	st	Z, r24
     7b4:	08 95       	ret

000007b6 <_Z12timer2_pausev>:
}

// Pause interrupts and turn off timer to save power
void timer2_pause()
{
	TIMSK2 &= ~_BV(OCIE2A);
     7b6:	e0 e7       	ldi	r30, 0x70	; 112
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	8d 7f       	andi	r24, 0xFD	; 253
     7be:	80 83       	st	Z, r24
	power_timer2_disable();
     7c0:	e4 e6       	ldi	r30, 0x64	; 100
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	80 64       	ori	r24, 0x40	; 64
     7c8:	80 83       	st	Z, r24
     7ca:	08 95       	ret

000007cc <__vector_1>:
	#include "tone.h"
};

RFM12B radio;

ISR(INT0_vect) {
     7cc:	1f 92       	push	r1
     7ce:	0f 92       	push	r0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
	radio.InterruptHandler();
     7ee:	6b d5       	rcall	.+2774   	; 0x12c6 <_ZN6RFM12B16InterruptHandlerEv>
}
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	bf 91       	pop	r27
     7f6:	af 91       	pop	r26
     7f8:	9f 91       	pop	r25
     7fa:	8f 91       	pop	r24
     7fc:	7f 91       	pop	r23
     7fe:	6f 91       	pop	r22
     800:	5f 91       	pop	r21
     802:	4f 91       	pop	r20
     804:	3f 91       	pop	r19
     806:	2f 91       	pop	r18
     808:	0f 90       	pop	r0
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	0f 90       	pop	r0
     80e:	1f 90       	pop	r1
     810:	18 95       	reti

00000812 <main>:
#define NODEID             2  //this node's ID, should be unique among nodes on this NETWORKID

	
int main() {	
// disable ADC for less power 
	ADCSRA &= ~_BV(ADEN); // ADC off 
     812:	ea e7       	ldi	r30, 0x7A	; 122
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	8f 77       	andi	r24, 0x7F	; 127
     81a:	80 83       	st	Z, r24
	sei();
     81c:	78 94       	sei
	

			/* Initialize MILLIS */
	        millis_init();
     81e:	52 df       	rcall	.-348    	; 0x6c4 <millis_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     820:	2f ef       	ldi	r18, 0xFF	; 255
     822:	83 ed       	ldi	r24, 0xD3	; 211
     824:	90 e3       	ldi	r25, 0x30	; 48
     826:	21 50       	subi	r18, 0x01	; 1
     828:	80 40       	sbci	r24, 0x00	; 0
     82a:	90 40       	sbci	r25, 0x00	; 0
     82c:	e1 f7       	brne	.-8      	; 0x826 <main+0x14>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <main+0x1e>
     830:	00 00       	nop
			_delay_ms(1000);
			/* Initialize MILLIS */

			/* Initialize TONE */						
			tone_init();	
     832:	2e d7       	rcall	.+3676   	; 0x1690 <tone_init>
			noTone();	
     834:	2f d7       	rcall	.+3678   	; 0x1694 <noTone>
			/* Initialize TONE */						
						
						
			/* Initialize TIMER 2 */
			timer2_init();
     836:	aa df       	rcall	.-172    	; 0x78c <_Z11timer2_initv>
			timer2_pause();
     838:	be df       	rcall	.-132    	; 0x7b6 <_Z12timer2_pausev>
			/* Initialize TIMER 2 */			
			
			
			/* Initialize UART */
			#ifdef DEBUG_SERIAL
			uart_init( ((F_CPU)/((UART_BAUD_RATE)*16l)-1)) ;
     83a:	80 e1       	ldi	r24, 0x10	; 16
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 22 0c 	call	0x1844	; 0x1844 <uart0_init>
     842:	ef ef       	ldi	r30, 0xFF	; 255
     844:	f3 ed       	ldi	r31, 0xD3	; 211
     846:	20 e3       	ldi	r18, 0x30	; 48
     848:	e1 50       	subi	r30, 0x01	; 1
     84a:	f0 40       	sbci	r31, 0x00	; 0
     84c:	20 40       	sbci	r18, 0x00	; 0
     84e:	e1 f7       	brne	.-8      	; 0x848 <main+0x36>
     850:	00 c0       	rjmp	.+0      	; 0x852 <main+0x40>
     852:	00 00       	nop
			_delay_ms(1000);
			log_s("UART OK\r");
     854:	8e e0       	ldi	r24, 0x0E	; 14
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	32 df       	rcall	.-412    	; 0x6be <log_s>
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	93 ed       	ldi	r25, 0xD3	; 211
     85e:	e0 e3       	ldi	r30, 0x30	; 48
     860:	81 50       	subi	r24, 0x01	; 1
     862:	90 40       	sbci	r25, 0x00	; 0
     864:	e0 40       	sbci	r30, 0x00	; 0
     866:	e1 f7       	brne	.-8      	; 0x860 <main+0x4e>
     868:	00 c0       	rjmp	.+0      	; 0x86a <main+0x58>
     86a:	00 00       	nop
			power_usart0_disable();
			#endif
			/* Initialize UART */
		
			/* Initialize I2C */
			I2C_init();	
     86c:	de de       	rcall	.-580    	; 0x62a <I2C_init>
			/* Initialize I2C */
			
			/* Initialize PCA9634 */
			pca9635_init();
     86e:	1a d4       	rcall	.+2100   	; 0x10a4 <pca9635_init>
     870:	c3 e0       	ldi	r28, 0x03	; 3
			
			// blink 3 times fast
			for (byte i = 0; i <= 2; ++i){
			pca9635_set_all_led_pwm(255);
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	5d d4       	rcall	.+2234   	; 0x1130 <pca9635_set_all_led_pwm>
     876:	ff ef       	ldi	r31, 0xFF	; 255
     878:	21 ee       	ldi	r18, 0xE1	; 225
     87a:	84 e0       	ldi	r24, 0x04	; 4
     87c:	f1 50       	subi	r31, 0x01	; 1
     87e:	20 40       	sbci	r18, 0x00	; 0
     880:	80 40       	sbci	r24, 0x00	; 0
     882:	e1 f7       	brne	.-8      	; 0x87c <main+0x6a>
     884:	00 c0       	rjmp	.+0      	; 0x886 <main+0x74>
     886:	00 00       	nop
			_delay_ms(100);
			pca9635_set_all_led_pwm(0);
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	52 d4       	rcall	.+2212   	; 0x1130 <pca9635_set_all_led_pwm>
     88c:	9f ef       	ldi	r25, 0xFF	; 255
     88e:	e1 ee       	ldi	r30, 0xE1	; 225
     890:	f4 e0       	ldi	r31, 0x04	; 4
     892:	91 50       	subi	r25, 0x01	; 1
     894:	e0 40       	sbci	r30, 0x00	; 0
     896:	f0 40       	sbci	r31, 0x00	; 0
     898:	e1 f7       	brne	.-8      	; 0x892 <main+0x80>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <main+0x8a>
     89c:	00 00       	nop
     89e:	c1 50       	subi	r28, 0x01	; 1
			
			/* Initialize PCA9634 */
			pca9635_init();
			
			// blink 3 times fast
			for (byte i = 0; i <= 2; ++i){
     8a0:	41 f7       	brne	.-48     	; 0x872 <main+0x60>
			
			/* Initialize PCA9634 */
			
		
			// node id, rfband, group id
			radio.Initialize(NODEID, RF12_868MHZ, NETWORKID);
     8a2:	0f 2e       	mov	r0, r31
     8a4:	f5 e0       	ldi	r31, 0x05	; 5
     8a6:	cf 2e       	mov	r12, r31
     8a8:	f0 2d       	mov	r31, r0
     8aa:	0f 2e       	mov	r0, r31
     8ac:	f6 e0       	ldi	r31, 0x06	; 6
     8ae:	ef 2e       	mov	r14, r31
     8b0:	f0 2d       	mov	r31, r0
     8b2:	00 e0       	ldi	r16, 0x00	; 0
     8b4:	2e e0       	ldi	r18, 0x0E	; 14
     8b6:	42 e0       	ldi	r20, 0x02	; 2
     8b8:	62 e0       	ldi	r22, 0x02	; 2
     8ba:	8c e4       	ldi	r24, 0x4C	; 76
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	98 d4       	rcall	.+2352   	; 0x11f0 <_ZN6RFM12B10InitializeEhhhhhh>
			// see http://tools.jeelabs.org/rfm12b
		//	radio.SetLowDuty(500);

	#ifdef DEBUG_SERIAL
	log_s("RF OK!");
     8c0:	87 e1       	ldi	r24, 0x17	; 23
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	fc de       	rcall	.-520    	; 0x6be <log_s>
     8c6:	2f ef       	ldi	r18, 0xFF	; 255
     8c8:	83 ed       	ldi	r24, 0xD3	; 211
     8ca:	90 e3       	ldi	r25, 0x30	; 48
     8cc:	21 50       	subi	r18, 0x01	; 1
     8ce:	80 40       	sbci	r24, 0x00	; 0
     8d0:	90 40       	sbci	r25, 0x00	; 0
     8d2:	e1 f7       	brne	.-8      	; 0x8cc <main+0xba>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <main+0xc4>
     8d6:	00 00       	nop
	_delay_ms(1000);
	#endif
		
			// initialised
			
				pca9635_set_led_pwm(1, 255);
     8d8:	6f ef       	ldi	r22, 0xFF	; 255
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	18 d4       	rcall	.+2096   	; 0x110e <pca9635_set_led_pwm>
     8de:	ef ef       	ldi	r30, 0xFF	; 255
     8e0:	f7 e8       	ldi	r31, 0x87	; 135
     8e2:	23 e1       	ldi	r18, 0x13	; 19
     8e4:	e1 50       	subi	r30, 0x01	; 1
     8e6:	f0 40       	sbci	r31, 0x00	; 0
     8e8:	20 40       	sbci	r18, 0x00	; 0
     8ea:	e1 f7       	brne	.-8      	; 0x8e4 <main+0xd2>
     8ec:	00 c0       	rjmp	.+0      	; 0x8ee <main+0xdc>
     8ee:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(8, 255);
     8f0:	6f ef       	ldi	r22, 0xFF	; 255
     8f2:	88 e0       	ldi	r24, 0x08	; 8
     8f4:	0c d4       	rcall	.+2072   	; 0x110e <pca9635_set_led_pwm>
     8f6:	8f ef       	ldi	r24, 0xFF	; 255
     8f8:	97 e8       	ldi	r25, 0x87	; 135
     8fa:	e3 e1       	ldi	r30, 0x13	; 19
     8fc:	81 50       	subi	r24, 0x01	; 1
     8fe:	90 40       	sbci	r25, 0x00	; 0
     900:	e0 40       	sbci	r30, 0x00	; 0
     902:	e1 f7       	brne	.-8      	; 0x8fc <main+0xea>
     904:	00 c0       	rjmp	.+0      	; 0x906 <__stack+0x7>
     906:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(11, 255);
     908:	6f ef       	ldi	r22, 0xFF	; 255
     90a:	8b e0       	ldi	r24, 0x0B	; 11
     90c:	00 d4       	rcall	.+2048   	; 0x110e <pca9635_set_led_pwm>
     90e:	ff ef       	ldi	r31, 0xFF	; 255
     910:	27 e8       	ldi	r18, 0x87	; 135
     912:	83 e1       	ldi	r24, 0x13	; 19
     914:	f1 50       	subi	r31, 0x01	; 1
     916:	20 40       	sbci	r18, 0x00	; 0
     918:	80 40       	sbci	r24, 0x00	; 0
     91a:	e1 f7       	brne	.-8      	; 0x914 <__stack+0x15>
     91c:	00 c0       	rjmp	.+0      	; 0x91e <__stack+0x1f>
     91e:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(14, 255);
     920:	6f ef       	ldi	r22, 0xFF	; 255
     922:	8e e0       	ldi	r24, 0x0E	; 14
     924:	f4 d3       	rcall	.+2024   	; 0x110e <pca9635_set_led_pwm>
     926:	9f ef       	ldi	r25, 0xFF	; 255
     928:	ef e0       	ldi	r30, 0x0F	; 15
     92a:	f7 e2       	ldi	r31, 0x27	; 39
     92c:	91 50       	subi	r25, 0x01	; 1
     92e:	e0 40       	sbci	r30, 0x00	; 0
     930:	f0 40       	sbci	r31, 0x00	; 0
     932:	e1 f7       	brne	.-8      	; 0x92c <__stack+0x2d>
     934:	00 c0       	rjmp	.+0      	; 0x936 <__stack+0x37>
     936:	00 00       	nop
				_delay_ms(800);
				pca9635_set_all_led_pwm(0);
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	fa d3       	rcall	.+2036   	; 0x1130 <pca9635_set_all_led_pwm>
				pca9635_set_sleep(1);
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	08 d4       	rcall	.+2064   	; 0x1150 <pca9635_set_sleep>
				
			deep_sleep_ok = 1; // put device in deep sleep after initializing
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	80 93 68 01 	sts	0x0168, r24
			
			#ifdef DEBUG_SERIAL
				log_s("initialized!");
     946:	8e e1       	ldi	r24, 0x1E	; 30
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	b9 de       	rcall	.-654    	; 0x6be <log_s>
     94c:	2f ef       	ldi	r18, 0xFF	; 255
     94e:	83 ed       	ldi	r24, 0xD3	; 211
     950:	90 e3       	ldi	r25, 0x30	; 48
     952:	21 50       	subi	r18, 0x01	; 1
     954:	80 40       	sbci	r24, 0x00	; 0
     956:	90 40       	sbci	r25, 0x00	; 0
     958:	e1 f7       	brne	.-8      	; 0x952 <__stack+0x53>
     95a:	00 c0       	rjmp	.+0      	; 0x95c <__stack+0x5d>
     95c:	00 00       	nop
     95e:	0f 2e       	mov	r0, r31
     960:	f0 e4       	ldi	r31, 0x40	; 64
     962:	2f 2e       	mov	r2, r31
     964:	f1 e0       	ldi	r31, 0x01	; 1
     966:	3f 2e       	mov	r3, r31
     968:	f0 2d       	mov	r31, r0
										 
							
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     96a:	81 2c       	mov	r8, r1
     96c:	91 2c       	mov	r9, r1
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     96e:	48 2c       	mov	r4, r8
     970:	59 2c       	mov	r5, r9
							millis_resume();
							
							active_alarm_time = millis_get() + alarm_duration;
							
							// wake up pca9635!
							power_twi_enable();
     972:	0f 2e       	mov	r0, r31
     974:	f4 e6       	ldi	r31, 0x64	; 100
     976:	af 2e       	mov	r10, r31
     978:	b1 2c       	mov	r11, r1
     97a:	f0 2d       	mov	r31, r0
							// Geen alarm actief
										 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     97c:	66 24       	eor	r6, r6
     97e:	63 94       	inc	r6
				
				
				
	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).

	if (radio.ReceiveComplete()) { // a packet has been received
     980:	8c e4       	ldi	r24, 0x4C	; 76
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	76 d5       	rcall	.+2796   	; 0x1472 <_ZN6RFM12B15ReceiveCompleteEv>
     986:	88 23       	and	r24, r24
     988:	09 f4       	brne	.+2      	; 0x98c <__stack+0x8d>
     98a:	d5 c0       	rjmp	.+426    	; 0xb36 <__stack+0x237>
	
	void SetLowDuty(unsigned long m=255);
	
	static void CryptFunction(bool sending);
	void Encrypt(const uint8_t* key, uint8_t keyLen = 16);
	 bool CRCPass() { return rf12_crc == 0x1d0f; }
     98c:	80 91 88 01 	lds	r24, 0x0188
     990:	90 91 89 01 	lds	r25, 0x0189
		
				#ifdef DEBUG_SERIAL
				if(radio.CRCPass()){
     994:	8f 30       	cpi	r24, 0x0F	; 15
     996:	9d 41       	sbci	r25, 0x1D	; 29
     998:	21 f4       	brne	.+8      	; 0x9a2 <__stack+0xa3>
				log_s("CRCOK\r");
     99a:	8b e2       	ldi	r24, 0x2B	; 43
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	8f de       	rcall	.-738    	; 0x6be <log_s>
     9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <__stack+0xa9>
				}else{
					log_s("CRC NOOK\r");
     9a2:	82 e3       	ldi	r24, 0x32	; 50
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	8b de       	rcall	.-746    	; 0x6be <log_s>
     9a8:	80 91 88 01 	lds	r24, 0x0188
     9ac:	90 91 89 01 	lds	r25, 0x0189
				}
				
				//_delay_ms(5);
				#endif
			
		if(radio.CRCPass()){ //  CRC of the received packet, zero indicates correct reception.
     9b0:	8f 30       	cpi	r24, 0x0F	; 15
     9b2:	9d 41       	sbci	r25, 0x1D	; 29
     9b4:	29 f7       	brne	.-54     	; 0x980 <__stack+0x81>
		
			if (radio.ACKRequested()) {
     9b6:	8c e4       	ldi	r24, 0x4C	; 76
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	5d d6       	rcall	.+3258   	; 0x1676 <_ZN6RFM12B12ACKRequestedEv>
     9bc:	88 23       	and	r24, r24
     9be:	89 f0       	breq	.+34     	; 0x9e2 <__stack+0xe3>
				log_s(".");
     9c0:	8c e3       	ldi	r24, 0x3C	; 60
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	7c de       	rcall	.-776    	; 0x6be <log_s>
				radio.SendACK();
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	40 e0       	ldi	r20, 0x00	; 0
     9ca:	66 e1       	ldi	r22, 0x16	; 22
     9cc:	71 e0       	ldi	r23, 0x01	; 1
     9ce:	8c e4       	ldi	r24, 0x4C	; 76
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	28 d6       	rcall	.+3152   	; 0x1624 <_ZN6RFM12B7SendACKEPKvhh>
				log_s("+");
     9d4:	8e e3       	ldi	r24, 0x3E	; 62
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	72 de       	rcall	.-796    	; 0x6be <log_s>
				radio.SendWait(1); // don't power down too soon
     9da:	66 2d       	mov	r22, r6
     9dc:	8c e4       	ldi	r24, 0x4C	; 76
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	dc d5       	rcall	.+3000   	; 0x159a <_ZN6RFM12B8SendWaitEh>
				
			}
			
					
		// only react to packets with first byte 0x99
		if(radio.GetData()[0] == 0x99) { // 153
     9e2:	8c e4       	ldi	r24, 0x4C	; 76
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	44 d6       	rcall	.+3208   	; 0x1670 <_ZN6RFM12B7GetDataEv>
     9e8:	fc 01       	movw	r30, r24
     9ea:	80 81       	ld	r24, Z
     9ec:	89 39       	cpi	r24, 0x99	; 153
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	c7 cf       	rjmp	.-114    	; 0x980 <__stack+0x81>
		// process incoming data here	
			
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = radio.GetData()[1]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     9f2:	8c e4       	ldi	r24, 0x4C	; 76
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	3c d6       	rcall	.+3192   	; 0x1670 <_ZN6RFM12B7GetDataEv>
     9f8:	fc 01       	movw	r30, r24
     9fa:	71 80       	ldd	r7, Z+1	; 0x01

				if(data & 0x10){
     9fc:	37 2d       	mov	r19, r7
     9fe:	30 71       	andi	r19, 0x10	; 16
     a00:	74 fe       	sbrs	r7, 4
     a02:	06 c0       	rjmp	.+12     	; 0xa10 <__stack+0x111>
					 // start alarm	 
					 active_alarm = active_alarm | data; // 00001111 
     a04:	80 91 67 01 	lds	r24, 0x0167
     a08:	87 29       	or	r24, r7
     a0a:	80 93 67 01 	sts	0x0167, r24
     a0e:	07 c0       	rjmp	.+14     	; 0xa1e <__stack+0x11f>
					 
				 }else{
					 // stop alarm
					 active_alarm =  active_alarm & (~data); // invert data, compare with active alarm array to clear the right alarm bit 		 
     a10:	87 2d       	mov	r24, r7
     a12:	80 95       	com	r24
     a14:	90 91 67 01 	lds	r25, 0x0167
     a18:	89 23       	and	r24, r25
     a1a:	80 93 67 01 	sts	0x0167, r24
				 }
				 
				////////////////		Fill alarm array		 ////////////////				 
				
			 // IS ER EEN ALARM ACTIEF in array active_alarm?
				 if(active_alarm & 0x0F){
     a1e:	20 91 67 01 	lds	r18, 0x0167
     a22:	82 2f       	mov	r24, r18
     a24:	8f 70       	andi	r24, 0x0F	; 15
     a26:	09 f4       	brne	.+2      	; 0xa2a <__stack+0x12b>
     a28:	7d c0       	rjmp	.+250    	; 0xb24 <__stack+0x225>
				  
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
     a2a:	80 91 63 01 	lds	r24, 0x0163
     a2e:	90 91 64 01 	lds	r25, 0x0164
     a32:	a0 91 65 01 	lds	r26, 0x0165
     a36:	b0 91 66 01 	lds	r27, 0x0166
     a3a:	89 2b       	or	r24, r25
     a3c:	8a 2b       	or	r24, r26
     a3e:	8b 2b       	or	r24, r27
     a40:	b9 f5       	brne	.+110    	; 0xab0 <__stack+0x1b1>
							// Geen alarm actief
										 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
     a42:	10 92 68 01 	sts	0x0168, r1
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     a46:	23 fd       	sbrc	r18, 3
     a48:	0c c0       	rjmp	.+24     	; 0xa62 <__stack+0x163>
     a4a:	22 fd       	sbrc	r18, 2
     a4c:	06 c0       	rjmp	.+12     	; 0xa5a <__stack+0x15b>
     a4e:	21 fd       	sbrc	r18, 1
     a50:	06 c0       	rjmp	.+12     	; 0xa5e <__stack+0x15f>
     a52:	20 ff       	sbrs	r18, 0
     a54:	0b c0       	rjmp	.+22     	; 0xa6c <__stack+0x16d>
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	05 c0       	rjmp	.+10     	; 0xa64 <__stack+0x165>
							// Geen alarm actief
										 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     a5a:	86 2d       	mov	r24, r6
     a5c:	03 c0       	rjmp	.+6      	; 0xa64 <__stack+0x165>
     a5e:	82 e0       	ldi	r24, 0x02	; 2
     a60:	01 c0       	rjmp	.+2      	; 0xa64 <__stack+0x165>
     a62:	80 e0       	ldi	r24, 0x00	; 0
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
									sound_current_alarm = i;
     a64:	80 93 62 01 	sts	0x0162, r24
									icon_current_alarm  = i;
     a68:	80 93 57 01 	sts	0x0157, r24
									break;
								} 
							 }

							// 2. timer 0 - millis starten
							millis_reset();
     a6c:	5e de       	rcall	.-836    	; 0x72a <millis_reset>
							millis_resume();
     a6e:	47 de       	rcall	.-882    	; 0x6fe <millis_resume>
							
							active_alarm_time = millis_get() + alarm_duration;
     a70:	32 de       	rcall	.-924    	; 0x6d6 <millis_get>
     a72:	00 91 00 01 	lds	r16, 0x0100
     a76:	10 91 01 01 	lds	r17, 0x0101
     a7a:	20 91 02 01 	lds	r18, 0x0102
     a7e:	30 91 03 01 	lds	r19, 0x0103
     a82:	dc 01       	movw	r26, r24
     a84:	cb 01       	movw	r24, r22
     a86:	80 0f       	add	r24, r16
     a88:	91 1f       	adc	r25, r17
     a8a:	a2 1f       	adc	r26, r18
     a8c:	b3 1f       	adc	r27, r19
     a8e:	80 93 63 01 	sts	0x0163, r24
     a92:	90 93 64 01 	sts	0x0164, r25
     a96:	a0 93 65 01 	sts	0x0165, r26
     a9a:	b0 93 66 01 	sts	0x0166, r27
							
							// wake up pca9635!
							power_twi_enable();
     a9e:	f5 01       	movw	r30, r10
     aa0:	80 81       	ld	r24, Z
     aa2:	8f 77       	andi	r24, 0x7F	; 127
     aa4:	80 83       	st	Z, r24
							I2C_init();
     aa6:	c1 dd       	rcall	.-1150   	; 0x62a <I2C_init>
							pca9635_set_sleep(0);
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	52 d3       	rcall	.+1700   	; 0x1150 <pca9635_set_sleep>
				 
							// 3. timer 2 - alarm timer starten
							timer2_resume();							
     aac:	79 de       	rcall	.-782    	; 0x7a0 <_Z13timer2_resumev>
     aae:	68 cf       	rjmp	.-304    	; 0x980 <__stack+0x81>
										 
							
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     ab0:	31 11       	cpse	r19, r1
     ab2:	5e c0       	rjmp	.+188    	; 0xb70 <__stack+0x271>
     ab4:	71 01       	movw	r14, r2
     ab6:	84 01       	movw	r16, r8
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     ab8:	f7 01       	movw	r30, r14
     aba:	21 91       	ld	r18, Z+
     abc:	7f 01       	movw	r14, r30
     abe:	27 21       	and	r18, r7
     ac0:	99 f0       	breq	.+38     	; 0xae8 <__stack+0x1e9>
     ac2:	c4 2d       	mov	r28, r4
     ac4:	d5 2d       	mov	r29, r5
											for (byte j = 0; j <= 2; j++){
												pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[i].lednr[j])), 0); // leds off!
     ac6:	68 01       	movw	r12, r16
     ac8:	cc 0c       	add	r12, r12
     aca:	dd 1c       	adc	r13, r13
     acc:	c0 0e       	add	r12, r16
     ace:	d1 1e       	adc	r13, r17
     ad0:	f6 01       	movw	r30, r12
     ad2:	ec 0f       	add	r30, r28
     ad4:	fd 1f       	adc	r31, r29
     ad6:	e8 59       	subi	r30, 0x98	; 152
     ad8:	ff 4f       	sbci	r31, 0xFF	; 255
     ada:	84 91       	lpm	r24, Z
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	17 d3       	rcall	.+1582   	; 0x110e <pca9635_set_led_pwm>
     ae0:	21 96       	adiw	r28, 0x01	; 1
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
											for (byte j = 0; j <= 2; j++){
     ae2:	c3 30       	cpi	r28, 0x03	; 3
     ae4:	d1 05       	cpc	r29, r1
     ae6:	a1 f7       	brne	.-24     	; 0xad0 <__stack+0x1d1>
     ae8:	0f 5f       	subi	r16, 0xFF	; 255
     aea:	1f 4f       	sbci	r17, 0xFF	; 255
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
     aec:	04 30       	cpi	r16, 0x04	; 4
     aee:	11 05       	cpc	r17, r1
     af0:	19 f7       	brne	.-58     	; 0xab8 <__stack+0x1b9>
     af2:	46 cf       	rjmp	.-372    	; 0x980 <__stack+0x81>
							
							
								// Only reset active alarm timer if there is a new alarm...
								// 0x10 = activate bit 0x0F are bits of the alarms
								if( (data & 0x10) && (data & 0x0F)){
										active_alarm_time = millis_get() + alarm_duration;
     af4:	f0 dd       	rcall	.-1056   	; 0x6d6 <millis_get>
     af6:	00 91 00 01 	lds	r16, 0x0100
     afa:	10 91 01 01 	lds	r17, 0x0101
     afe:	20 91 02 01 	lds	r18, 0x0102
     b02:	30 91 03 01 	lds	r19, 0x0103
     b06:	dc 01       	movw	r26, r24
     b08:	cb 01       	movw	r24, r22
     b0a:	80 0f       	add	r24, r16
     b0c:	91 1f       	adc	r25, r17
     b0e:	a2 1f       	adc	r26, r18
     b10:	b3 1f       	adc	r27, r19
     b12:	80 93 63 01 	sts	0x0163, r24
     b16:	90 93 64 01 	sts	0x0164, r25
     b1a:	a0 93 65 01 	sts	0x0165, r26
     b1e:	b0 93 66 01 	sts	0x0166, r27
     b22:	2e cf       	rjmp	.-420    	; 0x980 <__stack+0x81>
				 
		 

				}else{ //  if(active_alarm & 0x0F){ // IS ER EEN ALARM ACTIEF in active_alarm?
						// no active alarm in array	
						active_alarm_time = 0; // set alarm time to zero, timers will be disabled in next timer 2 interrupt
     b24:	10 92 63 01 	sts	0x0163, r1
     b28:	10 92 64 01 	sts	0x0164, r1
     b2c:	10 92 65 01 	sts	0x0165, r1
     b30:	10 92 66 01 	sts	0x0166, r1
     b34:	25 cf       	rjmp	.-438    	; 0x980 <__stack+0x81>
			} // if(rf12_crc == 0){ 
									
		} else {
		
			// switch into idle mode until the next interrupt - Choose our preferred sleep mode:
			if(deep_sleep_ok == 1){
     b36:	80 91 68 01 	lds	r24, 0x0168
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	71 f4       	brne	.+28     	; 0xb5a <__stack+0x25b>
								
				set_sleep_mode(SLEEP_MODE_STANDBY); // if active alarm, go in pwr save mode to keep timer 2 running
     b3e:	83 b7       	in	r24, 0x33	; 51
     b40:	81 7f       	andi	r24, 0xF1	; 241
     b42:	8c 60       	ori	r24, 0x0C	; 12
     b44:	83 bf       	out	0x33, r24	; 51
				sleep_enable();
     b46:	83 b7       	in	r24, 0x33	; 51
     b48:	81 60       	ori	r24, 0x01	; 1
     b4a:	83 bf       	out	0x33, r24	; 51
				// turn off brown-out enable in software
				 sleep_bod_disable();
     b4c:	85 b7       	in	r24, 0x35	; 53
     b4e:	80 66       	ori	r24, 0x60	; 96
     b50:	85 bf       	out	0x35, r24	; 53
     b52:	8f 7d       	andi	r24, 0xDF	; 223
     b54:	85 bf       	out	0x35, r24	; 53
			 
				// Put the device to sleep:
				sleep_cpu();
     b56:	88 95       	sleep
     b58:	07 c0       	rjmp	.+14     	; 0xb68 <__stack+0x269>
			}else{
				// disable various adc + usart0
				set_sleep_mode(SLEEP_MODE_IDLE);
     b5a:	83 b7       	in	r24, 0x33	; 51
     b5c:	81 7f       	andi	r24, 0xF1	; 241
     b5e:	83 bf       	out	0x33, r24	; 51
				sleep_enable();
     b60:	83 b7       	in	r24, 0x33	; 51
     b62:	81 60       	ori	r24, 0x01	; 1
     b64:	83 bf       	out	0x33, r24	; 51
			
				// Put the device to sleep:
				sleep_cpu();
     b66:	88 95       	sleep
			}
	
			// Clear sleep enable (SE) bit:
			sleep_disable();
     b68:	83 b7       	in	r24, 0x33	; 51
     b6a:	8e 7f       	andi	r24, 0xFE	; 254
     b6c:	83 bf       	out	0x33, r24	; 51
     b6e:	08 cf       	rjmp	.-496    	; 0x980 <__stack+0x81>
								}
							
							
								// Only reset active alarm timer if there is a new alarm...
								// 0x10 = activate bit 0x0F are bits of the alarms
								if( (data & 0x10) && (data & 0x0F)){
     b70:	87 2d       	mov	r24, r7
     b72:	8f 70       	andi	r24, 0x0F	; 15
     b74:	09 f4       	brne	.+2      	; 0xb78 <__stack+0x279>
     b76:	04 cf       	rjmp	.-504    	; 0x980 <__stack+0x81>
     b78:	bd cf       	rjmp	.-134    	; 0xaf4 <__stack+0x1f5>

00000b7a <_Z9isr_soundv>:
	}
						
}


	void isr_sound(){
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
		
			// Stop note if necessary 
			if(_sound_note_time != 0){ // sound already playing?		
     b7e:	80 91 5d 01 	lds	r24, 0x015D
     b82:	90 91 5e 01 	lds	r25, 0x015E
     b86:	a0 91 5f 01 	lds	r26, 0x015F
     b8a:	b0 91 60 01 	lds	r27, 0x0160
     b8e:	89 2b       	or	r24, r25
     b90:	8a 2b       	or	r24, r26
     b92:	8b 2b       	or	r24, r27
     b94:	81 f0       	breq	.+32     	; 0xbb6 <_Z9isr_soundv+0x3c>
				if(millis_get() < _sound_note_time ){ // Do we need to stop the current note?
     b96:	9f dd       	rcall	.-1218   	; 0x6d6 <millis_get>
     b98:	00 91 5d 01 	lds	r16, 0x015D
     b9c:	10 91 5e 01 	lds	r17, 0x015E
     ba0:	20 91 5f 01 	lds	r18, 0x015F
     ba4:	30 91 60 01 	lds	r19, 0x0160
     ba8:	60 17       	cp	r22, r16
     baa:	71 07       	cpc	r23, r17
     bac:	82 07       	cpc	r24, r18
     bae:	93 07       	cpc	r25, r19
     bb0:	08 f4       	brcc	.+2      	; 0xbb4 <_Z9isr_soundv+0x3a>
     bb2:	ef c0       	rjmp	.+478    	; 0xd92 <_Z9isr_soundv+0x218>
					return; // dont stop current note
					
				}else{
					noTone(); // stop current note
     bb4:	6f d5       	rcall	.+2782   	; 0x1694 <noTone>
				}
	
			}
			
			// play next tone
			if(sound_current_alarm == 0 ){
     bb6:	80 91 62 01 	lds	r24, 0x0162
     bba:	81 11       	cpse	r24, r1
     bbc:	2e c0       	rjmp	.+92     	; 0xc1a <_Z9isr_soundv+0xa0>
				tone(pgm_read_word(&(sound_pattern_doorbell[sound_current_step].frequency)), sound_alarm_volume); // freq, volume
     bbe:	e0 91 61 01 	lds	r30, 0x0161
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	ec 58       	subi	r30, 0x8C	; 140
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	65 91       	lpm	r22, Z+
     bd6:	74 91       	lpm	r23, Z
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	41 e0       	ldi	r20, 0x01	; 1
     bde:	67 d5       	rcall	.+2766   	; 0x16ae <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_doorbell[sound_current_step].time)));
     be0:	7a dd       	rcall	.-1292   	; 0x6d6 <millis_get>
     be2:	e0 91 61 01 	lds	r30, 0x0161
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	ee 0f       	add	r30, r30
     bea:	ff 1f       	adc	r31, r31
     bec:	ee 0f       	add	r30, r30
     bee:	ff 1f       	adc	r31, r31
     bf0:	ee 0f       	add	r30, r30
     bf2:	ff 1f       	adc	r31, r31
     bf4:	e8 58       	subi	r30, 0x88	; 136
     bf6:	ff 4f       	sbci	r31, 0xFF	; 255
     bf8:	25 91       	lpm	r18, Z+
     bfa:	34 91       	lpm	r19, Z
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	82 0f       	add	r24, r18
     c02:	93 1f       	adc	r25, r19
     c04:	a1 1d       	adc	r26, r1
     c06:	b1 1d       	adc	r27, r1
     c08:	80 93 5d 01 	sts	0x015D, r24
     c0c:	90 93 5e 01 	sts	0x015E, r25
     c10:	a0 93 5f 01 	sts	0x015F, r26
     c14:	b0 93 60 01 	sts	0x0160, r27
     c18:	8f c0       	rjmp	.+286    	; 0xd38 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 1 ){
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	71 f5       	brne	.+92     	; 0xc7a <_Z9isr_soundv+0x100>
				tone(pgm_read_word(&(sound_pattern_phone[sound_current_step].frequency)), sound_alarm_volume);
     c1e:	e0 91 61 01 	lds	r30, 0x0161
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	ee 0f       	add	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	ec 54       	subi	r30, 0x4C	; 76
     c32:	ff 4f       	sbci	r31, 0xFF	; 255
     c34:	65 91       	lpm	r22, Z+
     c36:	74 91       	lpm	r23, Z
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	41 e0       	ldi	r20, 0x01	; 1
     c3e:	37 d5       	rcall	.+2670   	; 0x16ae <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_phone[sound_current_step].time)));
     c40:	4a dd       	rcall	.-1388   	; 0x6d6 <millis_get>
     c42:	e0 91 61 01 	lds	r30, 0x0161
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	ee 0f       	add	r30, r30
     c4a:	ff 1f       	adc	r31, r31
     c4c:	ee 0f       	add	r30, r30
     c4e:	ff 1f       	adc	r31, r31
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	e8 54       	subi	r30, 0x48	; 72
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	25 91       	lpm	r18, Z+
     c5a:	34 91       	lpm	r19, Z
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	82 0f       	add	r24, r18
     c62:	93 1f       	adc	r25, r19
     c64:	a1 1d       	adc	r26, r1
     c66:	b1 1d       	adc	r27, r1
     c68:	80 93 5d 01 	sts	0x015D, r24
     c6c:	90 93 5e 01 	sts	0x015E, r25
     c70:	a0 93 5f 01 	sts	0x015F, r26
     c74:	b0 93 60 01 	sts	0x0160, r27
     c78:	5f c0       	rjmp	.+190    	; 0xd38 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 2 ){
     c7a:	82 30       	cpi	r24, 0x02	; 2
     c7c:	71 f5       	brne	.+92     	; 0xcda <_Z9isr_soundv+0x160>
				tone(pgm_read_word(&(sound_pattern_fire[sound_current_step].frequency)), sound_alarm_volume);
     c7e:	e0 91 61 01 	lds	r30, 0x0161
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	ee 0f       	add	r30, r30
     c86:	ff 1f       	adc	r31, r31
     c88:	ee 0f       	add	r30, r30
     c8a:	ff 1f       	adc	r31, r31
     c8c:	ee 0f       	add	r30, r30
     c8e:	ff 1f       	adc	r31, r31
     c90:	ec 54       	subi	r30, 0x4C	; 76
     c92:	fc 4f       	sbci	r31, 0xFC	; 252
     c94:	65 91       	lpm	r22, Z+
     c96:	74 91       	lpm	r23, Z
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	07 d5       	rcall	.+2574   	; 0x16ae <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_fire[sound_current_step].time)));
     ca0:	1a dd       	rcall	.-1484   	; 0x6d6 <millis_get>
     ca2:	e0 91 61 01 	lds	r30, 0x0161
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	ee 0f       	add	r30, r30
     caa:	ff 1f       	adc	r31, r31
     cac:	ee 0f       	add	r30, r30
     cae:	ff 1f       	adc	r31, r31
     cb0:	ee 0f       	add	r30, r30
     cb2:	ff 1f       	adc	r31, r31
     cb4:	e8 54       	subi	r30, 0x48	; 72
     cb6:	fc 4f       	sbci	r31, 0xFC	; 252
     cb8:	25 91       	lpm	r18, Z+
     cba:	34 91       	lpm	r19, Z
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	82 0f       	add	r24, r18
     cc2:	93 1f       	adc	r25, r19
     cc4:	a1 1d       	adc	r26, r1
     cc6:	b1 1d       	adc	r27, r1
     cc8:	80 93 5d 01 	sts	0x015D, r24
     ccc:	90 93 5e 01 	sts	0x015E, r25
     cd0:	a0 93 5f 01 	sts	0x015F, r26
     cd4:	b0 93 60 01 	sts	0x0160, r27
     cd8:	2f c0       	rjmp	.+94     	; 0xd38 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 3 ){
     cda:	83 30       	cpi	r24, 0x03	; 3
     cdc:	69 f5       	brne	.+90     	; 0xd38 <_Z9isr_soundv+0x1be>
				tone(pgm_read_word(&(sound_pattern_help[sound_current_step].frequency)),sound_alarm_volume);
     cde:	e0 91 61 01 	lds	r30, 0x0161
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	ee 0f       	add	r30, r30
     cee:	ff 1f       	adc	r31, r31
     cf0:	ec 5c       	subi	r30, 0xCC	; 204
     cf2:	fb 4f       	sbci	r31, 0xFB	; 251
     cf4:	65 91       	lpm	r22, Z+
     cf6:	74 91       	lpm	r23, Z
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	41 e0       	ldi	r20, 0x01	; 1
     cfe:	d7 d4       	rcall	.+2478   	; 0x16ae <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_help[sound_current_step].time)));
     d00:	ea dc       	rcall	.-1580   	; 0x6d6 <millis_get>
     d02:	e0 91 61 01 	lds	r30, 0x0161
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	ee 0f       	add	r30, r30
     d0a:	ff 1f       	adc	r31, r31
     d0c:	ee 0f       	add	r30, r30
     d0e:	ff 1f       	adc	r31, r31
     d10:	ee 0f       	add	r30, r30
     d12:	ff 1f       	adc	r31, r31
     d14:	e8 5c       	subi	r30, 0xC8	; 200
     d16:	fb 4f       	sbci	r31, 0xFB	; 251
     d18:	25 91       	lpm	r18, Z+
     d1a:	34 91       	lpm	r19, Z
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	82 0f       	add	r24, r18
     d22:	93 1f       	adc	r25, r19
     d24:	a1 1d       	adc	r26, r1
     d26:	b1 1d       	adc	r27, r1
     d28:	80 93 5d 01 	sts	0x015D, r24
     d2c:	90 93 5e 01 	sts	0x015E, r25
     d30:	a0 93 5f 01 	sts	0x015F, r26
     d34:	b0 93 60 01 	sts	0x0160, r27
			}
			
		//_sound_note_time = millis_get() + 1000;
			
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
     d38:	50 91 61 01 	lds	r21, 0x0161
     d3c:	40 91 62 01 	lds	r20, 0x0162
     d40:	25 2f       	mov	r18, r21
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	e4 2f       	mov	r30, r20
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	ec 5b       	subi	r30, 0xBC	; 188
     d4a:	fe 4f       	sbci	r31, 0xFE	; 254
     d4c:	80 81       	ld	r24, Z
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	28 17       	cp	r18, r24
     d54:	39 07       	cpc	r19, r25
     d56:	d4 f0       	brlt	.+52     	; 0xd8c <_Z9isr_soundv+0x212>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     d58:	20 91 67 01 	lds	r18, 0x0167
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     d5c:	92 2f       	mov	r25, r18
     d5e:	9f 70       	andi	r25, 0x0F	; 15
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
     d62:	4f 5f       	subi	r20, 0xFF	; 255
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     d64:	44 30       	cpi	r20, 0x04	; 4
     d66:	09 f4       	brne	.+2      	; 0xd6a <_Z9isr_soundv+0x1f0>
     d68:	43 2f       	mov	r20, r19
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     d6a:	e4 2f       	mov	r30, r20
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	e0 5c       	subi	r30, 0xC0	; 192
     d70:	fe 4f       	sbci	r31, 0xFE	; 254
     d72:	80 81       	ld	r24, Z
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     d74:	91 11       	cpse	r25, r1
     d76:	03 c0       	rjmp	.+6      	; 0xd7e <_Z9isr_soundv+0x204>
     d78:	40 93 62 01 	sts	0x0162, r20
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <_Z9isr_soundv+0x20c>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     d7e:	82 23       	and	r24, r18
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
     d80:	81 f3       	breq	.-32     	; 0xd62 <_Z9isr_soundv+0x1e8>
     d82:	40 93 62 01 	sts	0x0162, r20
						done = 1; // in case there is no active alarm anymore, just breakout while
					}

				} // while
				
				sound_current_step = 0; // reset sound_current_step to zero to start the next sound	
     d86:	10 92 61 01 	sts	0x0161, r1
     d8a:	03 c0       	rjmp	.+6      	; 0xd92 <_Z9isr_soundv+0x218>
				
			}else{
				// set sound_current_step plus one
				sound_current_step++;
     d8c:	5f 5f       	subi	r21, 0xFF	; 255
     d8e:	50 93 61 01 	sts	0x0161, r21
			}
	
				
		} //void isr_sound()
     d92:	1f 91       	pop	r17
     d94:	0f 91       	pop	r16
     d96:	08 95       	ret

00000d98 <_Z15isr_light_flashv>:
		
	void isr_light_flash(){
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
			
		// Do we need to go to the next flash?
		if(_flash_time != 0){ // is there already a flash ?
     da0:	80 91 58 01 	lds	r24, 0x0158
     da4:	90 91 59 01 	lds	r25, 0x0159
     da8:	a0 91 5a 01 	lds	r26, 0x015A
     dac:	b0 91 5b 01 	lds	r27, 0x015B
     db0:	89 2b       	or	r24, r25
     db2:	8a 2b       	or	r24, r26
     db4:	8b 2b       	or	r24, r27
     db6:	09 f4       	brne	.+2      	; 0xdba <_Z15isr_light_flashv+0x22>
     db8:	48 c0       	rjmp	.+144    	; 0xe4a <_Z15isr_light_flashv+0xb2>
			if(millis_get() < _flash_time ){ // Do we need to stop the current note?
     dba:	8d dc       	rcall	.-1766   	; 0x6d6 <millis_get>
     dbc:	00 91 58 01 	lds	r16, 0x0158
     dc0:	10 91 59 01 	lds	r17, 0x0159
     dc4:	20 91 5a 01 	lds	r18, 0x015A
     dc8:	30 91 5b 01 	lds	r19, 0x015B
     dcc:	60 17       	cp	r22, r16
     dce:	71 07       	cpc	r23, r17
     dd0:	82 07       	cpc	r24, r18
     dd2:	93 07       	cpc	r25, r19
     dd4:	08 f0       	brcs	.+2      	; 0xdd8 <_Z15isr_light_flashv+0x40>
     dd6:	39 c0       	rjmp	.+114    	; 0xe4a <_Z15isr_light_flashv+0xb2>
     dd8:	3b c0       	rjmp	.+118    	; 0xe50 <_Z15isr_light_flashv+0xb8>
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
     dda:	80 91 5c 01 	lds	r24, 0x015C
     dde:	fe 01       	movw	r30, r28
     de0:	98 e0       	ldi	r25, 0x08	; 8
     de2:	89 9f       	mul	r24, r25
     de4:	e0 0d       	add	r30, r0
     de6:	f1 1d       	adc	r31, r1
     de8:	11 24       	eor	r1, r1
     dea:	e4 53       	subi	r30, 0x34	; 52
     dec:	fb 4f       	sbci	r31, 0xFB	; 251
     dee:	64 91       	lpm	r22, Z
     df0:	8c 2f       	mov	r24, r28
     df2:	8d 5f       	subi	r24, 0xFD	; 253
     df4:	8c d1       	rcall	.+792    	; 0x110e <pca9635_set_led_pwm>
     df6:	21 96       	adiw	r28, 0x01	; 1
			}						
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
     df8:	c4 30       	cpi	r28, 0x04	; 4
     dfa:	d1 05       	cpc	r29, r1
     dfc:	71 f7       	brne	.-36     	; 0xdda <_Z15isr_light_flashv+0x42>
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
		}
		
		_flash_time = millis_get() + pgm_read_word(&(flash_pattern[_flash_current_step].time));
     dfe:	6b dc       	rcall	.-1834   	; 0x6d6 <millis_get>
     e00:	40 91 5c 01 	lds	r20, 0x015C
     e04:	e4 2f       	mov	r30, r20
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	ee 0f       	add	r30, r30
     e0a:	ff 1f       	adc	r31, r31
     e0c:	ee 0f       	add	r30, r30
     e0e:	ff 1f       	adc	r31, r31
     e10:	ee 0f       	add	r30, r30
     e12:	ff 1f       	adc	r31, r31
     e14:	e0 53       	subi	r30, 0x30	; 48
     e16:	fb 4f       	sbci	r31, 0xFB	; 251
     e18:	25 91       	lpm	r18, Z+
     e1a:	34 91       	lpm	r19, Z
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	82 0f       	add	r24, r18
     e22:	93 1f       	adc	r25, r19
     e24:	a1 1d       	adc	r26, r1
     e26:	b1 1d       	adc	r27, r1
     e28:	80 93 58 01 	sts	0x0158, r24
     e2c:	90 93 59 01 	sts	0x0159, r25
     e30:	a0 93 5a 01 	sts	0x015A, r26
     e34:	b0 93 5b 01 	sts	0x015B, r27
			
		// is variable _flash_current_step equal to total steps?
		if(_flash_current_step == (flash_keys -1 )) {
     e38:	4f 31       	cpi	r20, 0x1F	; 31
     e3a:	19 f4       	brne	.+6      	; 0xe42 <_Z15isr_light_flashv+0xaa>
			//reset _flash_current_step to 0
			_flash_current_step = 0;				
     e3c:	10 92 5c 01 	sts	0x015C, r1
     e40:	07 c0       	rjmp	.+14     	; 0xe50 <_Z15isr_light_flashv+0xb8>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
     e42:	4f 5f       	subi	r20, 0xFF	; 255
     e44:	40 93 5c 01 	sts	0x015C, r20
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <_Z15isr_light_flashv+0xb8>
			}
	
				
		} //void isr_sound()
		
	void isr_light_flash(){
     e4a:	c0 e0       	ldi	r28, 0x00	; 0
     e4c:	d0 e0       	ldi	r29, 0x00	; 0
     e4e:	c5 cf       	rjmp	.-118    	; 0xdda <_Z15isr_light_flashv+0x42>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
		}
		
	} // END isr_light_flash
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	08 95       	ret

00000e5a <_Z14isr_light_iconv>:
		
		
		
		
		
	void isr_light_icon(){
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	cf 93       	push	r28
     e60:	df 93       	push	r29
		
		// Do we need to go to the next flash?
		if(_icon_time != 0){ // is there already a flash ?
     e62:	80 91 52 01 	lds	r24, 0x0152
     e66:	90 91 53 01 	lds	r25, 0x0153
     e6a:	a0 91 54 01 	lds	r26, 0x0154
     e6e:	b0 91 55 01 	lds	r27, 0x0155
     e72:	89 2b       	or	r24, r25
     e74:	8a 2b       	or	r24, r26
     e76:	8b 2b       	or	r24, r27
     e78:	79 f0       	breq	.+30     	; 0xe98 <_Z14isr_light_iconv+0x3e>
			if(millis_get() < _icon_time ){ // Do we need to stop the current note?
     e7a:	2d dc       	rcall	.-1958   	; 0x6d6 <millis_get>
     e7c:	00 91 52 01 	lds	r16, 0x0152
     e80:	10 91 53 01 	lds	r17, 0x0153
     e84:	20 91 54 01 	lds	r18, 0x0154
     e88:	30 91 55 01 	lds	r19, 0x0155
     e8c:	60 17       	cp	r22, r16
     e8e:	71 07       	cpc	r23, r17
     e90:	82 07       	cpc	r24, r18
     e92:	93 07       	cpc	r25, r19
     e94:	08 f4       	brcc	.+2      	; 0xe98 <_Z14isr_light_iconv+0x3e>
     e96:	81 c0       	rjmp	.+258    	; 0xf9a <_Z14isr_light_iconv+0x140>
	// step 2 = 250 - (2 x 25)  = 200
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
     e98:	20 91 56 01 	lds	r18, 0x0156
     e9c:	22 23       	and	r18, r18
     e9e:	19 f0       	breq	.+6      	; 0xea6 <_Z14isr_light_iconv+0x4c>
     ea0:	2b 30       	cpi	r18, 0x0B	; 11
     ea2:	21 f5       	brne	.+72     	; 0xeec <_Z14isr_light_iconv+0x92>
     ea4:	12 c0       	rjmp	.+36     	; 0xeca <_Z14isr_light_iconv+0x70>
		intensity = 255;
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 650;
     ea6:	17 dc       	rcall	.-2002   	; 0x6d6 <millis_get>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	86 57       	subi	r24, 0x76	; 118
     eae:	9d 4f       	sbci	r25, 0xFD	; 253
     eb0:	af 4f       	sbci	r26, 0xFF	; 255
     eb2:	bf 4f       	sbci	r27, 0xFF	; 255
     eb4:	80 93 52 01 	sts	0x0152, r24
     eb8:	90 93 53 01 	sts	0x0153, r25
     ebc:	a0 93 54 01 	sts	0x0154, r26
     ec0:	b0 93 55 01 	sts	0x0155, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     ec4:	cf ef       	ldi	r28, 0xFF	; 255
     ec6:	d0 e0       	ldi	r29, 0x00	; 0
     ec8:	25 c0       	rjmp	.+74     	; 0xf14 <_Z14isr_light_iconv+0xba>
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 650;
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
     eca:	05 dc       	rcall	.-2038   	; 0x6d6 <millis_get>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	a1 1d       	adc	r26, r1
     ed4:	b1 1d       	adc	r27, r1
     ed6:	80 93 52 01 	sts	0x0152, r24
     eda:	90 93 53 01 	sts	0x0153, r25
     ede:	a0 93 54 01 	sts	0x0154, r26
     ee2:	b0 93 55 01 	sts	0x0155, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     ee6:	cf ef       	ldi	r28, 0xFF	; 255
     ee8:	d0 e0       	ldi	r29, 0x00	; 0
     eea:	14 c0       	rjmp	.+40     	; 0xf14 <_Z14isr_light_iconv+0xba>
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
		}
			
	}else{
		intensity = (250 - (icon_current_step * 25)); // step 1 to 10, 
     eec:	37 ee       	ldi	r19, 0xE7	; 231
     eee:	32 03       	mulsu	r19, r18
     ef0:	e0 01       	movw	r28, r0
     ef2:	11 24       	eor	r1, r1
     ef4:	c6 50       	subi	r28, 0x06	; 6
     ef6:	df 4f       	sbci	r29, 0xFF	; 255
		_icon_time = millis_get() + 30;
     ef8:	ee db       	rcall	.-2084   	; 0x6d6 <millis_get>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	4e 96       	adiw	r24, 0x1e	; 30
     f00:	a1 1d       	adc	r26, r1
     f02:	b1 1d       	adc	r27, r1
     f04:	80 93 52 01 	sts	0x0152, r24
     f08:	90 93 53 01 	sts	0x0153, r25
     f0c:	a0 93 54 01 	sts	0x0154, r26
     f10:	b0 93 55 01 	sts	0x0155, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     f14:	00 e0       	ldi	r16, 0x00	; 0
     f16:	10 e0       	ldi	r17, 0x00	; 0
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     f18:	80 91 57 01 	lds	r24, 0x0157
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9c 01       	movw	r18, r24
     f20:	22 0f       	add	r18, r18
     f22:	33 1f       	adc	r19, r19
     f24:	82 0f       	add	r24, r18
     f26:	93 1f       	adc	r25, r19
     f28:	80 0f       	add	r24, r16
     f2a:	91 1f       	adc	r25, r17
     f2c:	fc 01       	movw	r30, r24
     f2e:	e4 53       	subi	r30, 0x34	; 52
     f30:	fa 4f       	sbci	r31, 0xFA	; 250
     f32:	44 91       	lpm	r20, Z
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     f34:	fc 01       	movw	r30, r24
     f36:	e8 59       	subi	r30, 0x98	; 152
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	84 91       	lpm	r24, Z
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     f3c:	4c 9f       	mul	r20, r28
     f3e:	90 01       	movw	r18, r0
     f40:	4d 9f       	mul	r20, r29
     f42:	30 0d       	add	r19, r0
     f44:	11 24       	eor	r1, r1
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     f46:	63 2f       	mov	r22, r19
     f48:	e2 d0       	rcall	.+452    	; 0x110e <pca9635_set_led_pwm>
     f4a:	0f 5f       	subi	r16, 0xFF	; 255
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
		_icon_time = millis_get() + 30;
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
     f4e:	03 30       	cpi	r16, 0x03	; 3
     f50:	11 05       	cpc	r17, r1
     f52:	11 f7       	brne	.-60     	; 0xf18 <_Z14isr_light_iconv+0xbe>
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
	}
	

	// is variable _flash_current_step equal to total steps?
	if(icon_current_step == 11) {
     f54:	80 91 56 01 	lds	r24, 0x0156
     f58:	8b 30       	cpi	r24, 0x0B	; 11
     f5a:	e1 f4       	brne	.+56     	; 0xf94 <_Z14isr_light_iconv+0x13a>
		//reset _flash_current_step to 0
		icon_current_step = 0;
     f5c:	10 92 56 01 	sts	0x0156, r1
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     f60:	30 91 67 01 	lds	r19, 0x0167
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     f64:	23 2f       	mov	r18, r19
     f66:	2f 70       	andi	r18, 0x0F	; 15
     f68:	80 91 57 01 	lds	r24, 0x0157
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     f6c:	40 e0       	ldi	r20, 0x00	; 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
     f6e:	8f 5f       	subi	r24, 0xFF	; 255
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     f70:	84 30       	cpi	r24, 0x04	; 4
     f72:	09 f4       	brne	.+2      	; 0xf76 <_Z14isr_light_iconv+0x11c>
     f74:	84 2f       	mov	r24, r20
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     f76:	e8 2f       	mov	r30, r24
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	e0 5c       	subi	r30, 0xC0	; 192
     f7c:	fe 4f       	sbci	r31, 0xFE	; 254
     f7e:	90 81       	ld	r25, Z
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     f80:	21 11       	cpse	r18, r1
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <_Z14isr_light_iconv+0x130>
     f84:	80 93 57 01 	sts	0x0157, r24
     f88:	08 c0       	rjmp	.+16     	; 0xf9a <_Z14isr_light_iconv+0x140>
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     f8a:	93 23       	and	r25, r19
		//reset _flash_current_step to 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
     f8c:	81 f3       	breq	.-32     	; 0xf6e <_Z14isr_light_iconv+0x114>
     f8e:	80 93 57 01 	sts	0x0157, r24
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <_Z14isr_light_iconv+0x140>
			} // while
			
			
		}else{
		// set _flash_current_step +1
		icon_current_step++;
     f94:	8f 5f       	subi	r24, 0xFF	; 255
     f96:	80 93 56 01 	sts	0x0156, r24
	}
	
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	08 95       	ret

00000fa4 <__vector_7>:
	} // end main

	

	
ISR (TIMER2_COMPA_vect) {
     fa4:	1f 92       	push	r1
     fa6:	0f 92       	push	r0
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	0f 92       	push	r0
     fac:	11 24       	eor	r1, r1
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	2f 93       	push	r18
     fb4:	3f 93       	push	r19
     fb6:	4f 93       	push	r20
     fb8:	5f 93       	push	r21
     fba:	6f 93       	push	r22
     fbc:	7f 93       	push	r23
     fbe:	8f 93       	push	r24
     fc0:	9f 93       	push	r25
     fc2:	af 93       	push	r26
     fc4:	bf 93       	push	r27
     fc6:	ef 93       	push	r30
     fc8:	ff 93       	push	r31

	// check if the alarm needs to be stopped
	if(millis_get() >= active_alarm_time || active_alarm_time == 0){
     fca:	85 db       	rcall	.-2294   	; 0x6d6 <millis_get>
     fcc:	00 91 63 01 	lds	r16, 0x0163
     fd0:	10 91 64 01 	lds	r17, 0x0164
     fd4:	20 91 65 01 	lds	r18, 0x0165
     fd8:	30 91 66 01 	lds	r19, 0x0166
     fdc:	60 17       	cp	r22, r16
     fde:	71 07       	cpc	r23, r17
     fe0:	82 07       	cpc	r24, r18
     fe2:	93 07       	cpc	r25, r19
     fe4:	20 f4       	brcc	.+8      	; 0xfee <__vector_7+0x4a>
     fe6:	01 2b       	or	r16, r17
     fe8:	02 2b       	or	r16, r18
     fea:	03 2b       	or	r16, r19
     fec:	c1 f5       	brne	.+112    	; 0x105e <__vector_7+0xba>
		// stop alarm
			
			// reset steps of sound, flash and icon
			sound_current_step		= 0;
     fee:	10 92 61 01 	sts	0x0161, r1
			_sound_note_time		= 0;
     ff2:	10 92 5d 01 	sts	0x015D, r1
     ff6:	10 92 5e 01 	sts	0x015E, r1
     ffa:	10 92 5f 01 	sts	0x015F, r1
     ffe:	10 92 60 01 	sts	0x0160, r1
										
			_flash_current_step		= 0;
    1002:	10 92 5c 01 	sts	0x015C, r1
			_flash_time				= 0;
    1006:	10 92 58 01 	sts	0x0158, r1
    100a:	10 92 59 01 	sts	0x0159, r1
    100e:	10 92 5a 01 	sts	0x015A, r1
    1012:	10 92 5b 01 	sts	0x015B, r1
										
			icon_current_step		= 0;
    1016:	10 92 56 01 	sts	0x0156, r1
			_icon_time				= 0;
    101a:	10 92 52 01 	sts	0x0152, r1
    101e:	10 92 53 01 	sts	0x0153, r1
    1022:	10 92 54 01 	sts	0x0154, r1
    1026:	10 92 55 01 	sts	0x0155, r1
										
			// empty alarm arrray
			active_alarm = 0x00; 
    102a:	10 92 67 01 	sts	0x0167, r1
			active_alarm_time = 0;
    102e:	10 92 63 01 	sts	0x0163, r1
    1032:	10 92 64 01 	sts	0x0164, r1
    1036:	10 92 65 01 	sts	0x0165, r1
    103a:	10 92 66 01 	sts	0x0166, r1
					
			// alle leds uit, pca in slaapstand
			pca9635_set_all_led_pwm(0); // dimm all leds to zero
    103e:	80 e0       	ldi	r24, 0x00	; 0
    1040:	77 d0       	rcall	.+238    	; 0x1130 <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1); // put pca9635 in sleep
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	85 d0       	rcall	.+266    	; 0x1150 <pca9635_set_sleep>
			power_twi_disable();
    1046:	e4 e6       	ldi	r30, 0x64	; 100
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	80 68       	ori	r24, 0x80	; 128
    104e:	80 83       	st	Z, r24
			
			// automatisch slapen in loop.

			//uart0_puts("STOPINT");
			// stop timer 0
			millis_pause();
    1050:	61 db       	rcall	.-2366   	; 0x714 <millis_pause>
			
			// stop sound
			noTone();
    1052:	20 d3       	rcall	.+1600   	; 0x1694 <noTone>
			
			// stop timer 2
			timer2_pause();
    1054:	b0 db       	rcall	.-2208   	; 0x7b6 <_Z12timer2_pausev>
			
			deep_sleep_ok = 1;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	80 93 68 01 	sts	0x0168, r24
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <__vector_7+0xc0>
					
	}else{
		// continue alarm
		isr_sound();
    105e:	8d dd       	rcall	.-1254   	; 0xb7a <_Z9isr_soundv>
	    isr_light_flash();
    1060:	9b de       	rcall	.-714    	; 0xd98 <_Z15isr_light_flashv>
		isr_light_icon();		
    1062:	fb de       	rcall	.-522    	; 0xe5a <_Z14isr_light_iconv>
	}
						
}
    1064:	ff 91       	pop	r31
    1066:	ef 91       	pop	r30
    1068:	bf 91       	pop	r27
    106a:	af 91       	pop	r26
    106c:	9f 91       	pop	r25
    106e:	8f 91       	pop	r24
    1070:	7f 91       	pop	r23
    1072:	6f 91       	pop	r22
    1074:	5f 91       	pop	r21
    1076:	4f 91       	pop	r20
    1078:	3f 91       	pop	r19
    107a:	2f 91       	pop	r18
    107c:	1f 91       	pop	r17
    107e:	0f 91       	pop	r16
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <_GLOBAL__sub_I_mychannel>:
	  volatile uint8_t* DataLen;
	  
	  
	public:
	//constructor
	RFM12B():Data(rf12_data),DataLen(&rf12_buf[3]){}
    108a:	8e e6       	ldi	r24, 0x6E	; 110
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	90 93 4f 01 	sts	0x014F, r25
    1092:	80 93 4e 01 	sts	0x014E, r24
    1096:	8c e6       	ldi	r24, 0x6C	; 108
    1098:	91 e0       	ldi	r25, 0x01	; 1
    109a:	90 93 51 01 	sts	0x0151, r25
    109e:	80 93 50 01 	sts	0x0150, r24
    10a2:	08 95       	ret

000010a4 <pca9635_init>:
	   I2C_write(value);	
  	}
			  
  	I2C_stop();
		  
}
    10a4:	80 e8       	ldi	r24, 0x80	; 128
    10a6:	c5 da       	rcall	.-2678   	; 0x632 <I2C_start>
    10a8:	80 e8       	ldi	r24, 0x80	; 128
    10aa:	e8 da       	rcall	.-2608   	; 0x67c <I2C_write>
    10ac:	80 e8       	ldi	r24, 0x80	; 128
    10ae:	e6 da       	rcall	.-2612   	; 0x67c <I2C_write>
    10b0:	82 e0       	ldi	r24, 0x02	; 2
    10b2:	e4 da       	rcall	.-2616   	; 0x67c <I2C_write>
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	e2 da       	rcall	.-2620   	; 0x67c <I2C_write>
    10b8:	81 e0       	ldi	r24, 0x01	; 1
    10ba:	e0 da       	rcall	.-2624   	; 0x67c <I2C_write>
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	de da       	rcall	.-2628   	; 0x67c <I2C_write>
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	dc da       	rcall	.-2632   	; 0x67c <I2C_write>
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	da da       	rcall	.-2636   	; 0x67c <I2C_write>
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	d8 da       	rcall	.-2640   	; 0x67c <I2C_write>
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	d6 da       	rcall	.-2644   	; 0x67c <I2C_write>
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	d4 da       	rcall	.-2648   	; 0x67c <I2C_write>
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	d2 da       	rcall	.-2652   	; 0x67c <I2C_write>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	d0 da       	rcall	.-2656   	; 0x67c <I2C_write>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	ce da       	rcall	.-2660   	; 0x67c <I2C_write>
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	cc da       	rcall	.-2664   	; 0x67c <I2C_write>
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	ca da       	rcall	.-2668   	; 0x67c <I2C_write>
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	c8 da       	rcall	.-2672   	; 0x67c <I2C_write>
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	c6 da       	rcall	.-2676   	; 0x67c <I2C_write>
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	c4 da       	rcall	.-2680   	; 0x67c <I2C_write>
    10f4:	8f ef       	ldi	r24, 0xFF	; 255
    10f6:	c2 da       	rcall	.-2684   	; 0x67c <I2C_write>
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	c0 da       	rcall	.-2688   	; 0x67c <I2C_write>
    10fc:	8a ea       	ldi	r24, 0xAA	; 170
    10fe:	be da       	rcall	.-2692   	; 0x67c <I2C_write>
    1100:	8a ea       	ldi	r24, 0xAA	; 170
    1102:	bc da       	rcall	.-2696   	; 0x67c <I2C_write>
    1104:	8a ea       	ldi	r24, 0xAA	; 170
    1106:	ba da       	rcall	.-2700   	; 0x67c <I2C_write>
    1108:	8a ea       	ldi	r24, 0xAA	; 170
    110a:	b8 da       	rcall	.-2704   	; 0x67c <I2C_write>
    110c:	d4 ca       	rjmp	.-2648   	; 0x6b6 <I2C_stop>

0000110e <pca9635_set_led_pwm>:
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	d8 2f       	mov	r29, r24
    1114:	c6 2f       	mov	r28, r22
    1116:	80 e8       	ldi	r24, 0x80	; 128
    1118:	8c da       	rcall	.-2792   	; 0x632 <I2C_start>
    111a:	8d 2f       	mov	r24, r29
    111c:	8e 5f       	subi	r24, 0xFE	; 254
    111e:	80 68       	ori	r24, 0x80	; 128
    1120:	ad da       	rcall	.-2726   	; 0x67c <I2C_write>
    1122:	8c 2f       	mov	r24, r28
    1124:	ab da       	rcall	.-2730   	; 0x67c <I2C_write>
    1126:	c7 da       	rcall	.-2674   	; 0x6b6 <I2C_stop>
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	df 91       	pop	r29
    112c:	cf 91       	pop	r28
    112e:	08 95       	ret

00001130 <pca9635_set_all_led_pwm>:
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	d8 2f       	mov	r29, r24
    1136:	80 e8       	ldi	r24, 0x80	; 128
    1138:	7c da       	rcall	.-2824   	; 0x632 <I2C_start>
    113a:	82 e8       	ldi	r24, 0x82	; 130
    113c:	9f da       	rcall	.-2754   	; 0x67c <I2C_write>
    113e:	c0 e1       	ldi	r28, 0x10	; 16
    1140:	8d 2f       	mov	r24, r29
    1142:	9c da       	rcall	.-2760   	; 0x67c <I2C_write>
    1144:	c1 50       	subi	r28, 0x01	; 1
    1146:	e1 f7       	brne	.-8      	; 0x1140 <pca9635_set_all_led_pwm+0x10>
    1148:	b6 da       	rcall	.-2708   	; 0x6b6 <I2C_stop>
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	08 95       	ret

00001150 <pca9635_set_sleep>:

/**
* Changes the oscillator mode between sleep (1) and active (0)
*/
uint8_t pca9635_set_sleep(uint8_t sleep)
{
    1150:	cf 93       	push	r28
    1152:	c8 2f       	mov	r28, r24
	I2C_start((0x40<<1)+I2C_READ);
    1154:	81 e8       	ldi	r24, 0x81	; 129
    1156:	6d da       	rcall	.-2854   	; 0x632 <I2C_start>
	I2C_write(0x80); // autoincrement, mode 0,
    1158:	80 e8       	ldi	r24, 0x80	; 128
    115a:	90 da       	rcall	.-2784   	; 0x67c <I2C_write>
	// I2C_stop(); ???nodig?
	uint8_t data = I2C_read_ack();
    115c:	a1 da       	rcall	.-2750   	; 0x6a0 <I2C_read_ack>
	
	if(sleep){		// set or unset bit 4
    115e:	cc 23       	and	r28, r28
    1160:	11 f0       	breq	.+4      	; 0x1166 <pca9635_set_sleep+0x16>
		data |= (1<<4);
    1162:	80 61       	ori	r24, 0x10	; 16
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <pca9635_set_sleep+0x18>
	}else{
		data &= ~(1<<4);
    1166:	8f 7e       	andi	r24, 0xEF	; 239
	}
	
	uint8_t ack = I2C_write(data);  
    1168:	89 da       	rcall	.-2798   	; 0x67c <I2C_write>
    116a:	c8 2f       	mov	r28, r24
	I2C_stop();
    116c:	a4 da       	rcall	.-2744   	; 0x6b6 <I2C_stop>
	return ack;
}
    116e:	8c 2f       	mov	r24, r28
    1170:	cf 91       	pop	r28
    1172:	08 95       	ret

00001174 <_ZN6RFM12B7SPIInitEv>:
uint8_t RFM12B::GetSender(){
	return RF12_SOURCEID;
}

volatile uint8_t * RFM12B::GetData() { return rf12_data; }
uint8_t RFM12B::GetDataLen() { return *DataLen; }
    1174:	84 b1       	in	r24, 0x04	; 4
    1176:	8c 62       	ori	r24, 0x2C	; 44
    1178:	84 b9       	out	0x04, r24	; 4
    117a:	2a 9a       	sbi	0x05, 2	; 5
    117c:	24 98       	cbi	0x04, 4	; 4
    117e:	80 e5       	ldi	r24, 0x50	; 80
    1180:	8c bd       	out	0x2c, r24	; 44
    1182:	8d b5       	in	r24, 0x2d	; 45
    1184:	81 60       	ori	r24, 0x01	; 1
    1186:	8d bd       	out	0x2d, r24	; 45
    1188:	52 98       	cbi	0x0a, 2	; 10
    118a:	5a 9a       	sbi	0x0b, 2	; 11
    118c:	08 95       	ret

0000118e <_ZN6RFM12B4ByteEh>:
    118e:	8e bd       	out	0x2e, r24	; 46
    1190:	0d b4       	in	r0, 0x2d	; 45
    1192:	07 fe       	sbrs	r0, 7
    1194:	fd cf       	rjmp	.-6      	; 0x1190 <_ZN6RFM12B4ByteEh+0x2>
    1196:	8e b5       	in	r24, 0x2e	; 46
    1198:	08 95       	ret

0000119a <_ZN6RFM12B8XFERSlowEj>:
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	18 2f       	mov	r17, r24
    11a2:	8c b5       	in	r24, 0x2c	; 44
    11a4:	81 60       	ori	r24, 0x01	; 1
    11a6:	8c bd       	out	0x2c, r24	; 44
    11a8:	2a 98       	cbi	0x05, 2	; 5
    11aa:	89 2f       	mov	r24, r25
    11ac:	f0 df       	rcall	.-32     	; 0x118e <_ZN6RFM12B4ByteEh>
    11ae:	d8 2f       	mov	r29, r24
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	c8 2f       	mov	r28, r24
    11b4:	81 2f       	mov	r24, r17
    11b6:	eb df       	rcall	.-42     	; 0x118e <_ZN6RFM12B4ByteEh>
    11b8:	2a 9a       	sbi	0x05, 2	; 5
    11ba:	9c b5       	in	r25, 0x2c	; 44
    11bc:	9e 7f       	andi	r25, 0xFE	; 254
    11be:	9c bd       	out	0x2c, r25	; 44
    11c0:	c8 2b       	or	r28, r24
    11c2:	8c 2f       	mov	r24, r28
    11c4:	9d 2f       	mov	r25, r29
    11c6:	df 91       	pop	r29
    11c8:	cf 91       	pop	r28
    11ca:	1f 91       	pop	r17
    11cc:	08 95       	ret

000011ce <_ZN6RFM12B4XFEREj>:
    11ce:	cf 93       	push	r28
    11d0:	c8 2f       	mov	r28, r24
    11d2:	2a 98       	cbi	0x05, 2	; 5
    11d4:	89 2f       	mov	r24, r25
    11d6:	db df       	rcall	.-74     	; 0x118e <_ZN6RFM12B4ByteEh>
    11d8:	8c 2f       	mov	r24, r28
    11da:	d9 df       	rcall	.-78     	; 0x118e <_ZN6RFM12B4ByteEh>
    11dc:	2a 9a       	sbi	0x05, 2	; 5
    11de:	cf 91       	pop	r28
    11e0:	08 95       	ret

000011e2 <_ZN6RFM12B19InitializeInterruptEv>:
    11e2:	e9 e6       	ldi	r30, 0x69	; 105
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	80 81       	ld	r24, Z
    11e8:	8d 7f       	andi	r24, 0xFD	; 253
    11ea:	80 83       	st	Z, r24
    11ec:	e8 9a       	sbi	0x1d, 0	; 29
    11ee:	08 95       	ret

000011f0 <_ZN6RFM12B10InitializeEhhhhhh>:
    11f0:	ef 92       	push	r14
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	ec 01       	movw	r28, r24
    11fc:	14 2f       	mov	r17, r20
    11fe:	60 93 91 01 	sts	0x0191, r22
    1202:	20 93 90 01 	sts	0x0190, r18
    1206:	b6 df       	rcall	.-148    	; 0x1174 <_ZN6RFM12B7SPIInitEv>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	e0 df       	rcall	.-64     	; 0x11ce <_ZN6RFM12B4XFEREj>
    120e:	85 e0       	ldi	r24, 0x05	; 5
    1210:	92 e8       	ldi	r25, 0x82	; 130
    1212:	dd df       	rcall	.-70     	; 0x11ce <_ZN6RFM12B4XFEREj>
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	98 eb       	ldi	r25, 0xB8	; 184
    1218:	da df       	rcall	.-76     	; 0x11ce <_ZN6RFM12B4XFEREj>
    121a:	4a 99       	sbic	0x09, 2	; 9
    121c:	05 c0       	rjmp	.+10     	; 0x1228 <_ZN6RFM12B10InitializeEhhhhhh+0x38>
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	d5 df       	rcall	.-86     	; 0x11ce <_ZN6RFM12B4XFEREj>
    1224:	4a 9b       	sbis	0x09, 2	; 9
    1226:	fb cf       	rjmp	.-10     	; 0x121e <_ZN6RFM12B10InitializeEhhhhhh+0x2e>
    1228:	20 e1       	ldi	r18, 0x10	; 16
    122a:	12 9f       	mul	r17, r18
    122c:	c0 01       	movw	r24, r0
    122e:	11 24       	eor	r1, r1
    1230:	87 6c       	ori	r24, 0xC7	; 199
    1232:	90 68       	ori	r25, 0x80	; 128
    1234:	cc df       	rcall	.-104    	; 0x11ce <_ZN6RFM12B4XFEREj>
    1236:	80 e4       	ldi	r24, 0x40	; 64
    1238:	96 ea       	ldi	r25, 0xA6	; 166
    123a:	c9 df       	rcall	.-110    	; 0x11ce <_ZN6RFM12B4XFEREj>
    123c:	8e 2d       	mov	r24, r14
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	96 6c       	ori	r25, 0xC6	; 198
    1242:	c5 df       	rcall	.-118    	; 0x11ce <_ZN6RFM12B4XFEREj>
    1244:	82 ea       	ldi	r24, 0xA2	; 162
    1246:	94 e9       	ldi	r25, 0x94	; 148
    1248:	c2 df       	rcall	.-124    	; 0x11ce <_ZN6RFM12B4XFEREj>
    124a:	8c ea       	ldi	r24, 0xAC	; 172
    124c:	92 ec       	ldi	r25, 0xC2	; 194
    124e:	bf df       	rcall	.-130    	; 0x11ce <_ZN6RFM12B4XFEREj>
    1250:	80 91 90 01 	lds	r24, 0x0190
    1254:	88 23       	and	r24, r24
    1256:	49 f0       	breq	.+18     	; 0x126a <_ZN6RFM12B10InitializeEhhhhhh+0x7a>
    1258:	83 e8       	ldi	r24, 0x83	; 131
    125a:	9a ec       	ldi	r25, 0xCA	; 202
    125c:	b8 df       	rcall	.-144    	; 0x11ce <_ZN6RFM12B4XFEREj>
    125e:	80 91 90 01 	lds	r24, 0x0190
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	9e 6c       	ori	r25, 0xCE	; 206
    1266:	b3 df       	rcall	.-154    	; 0x11ce <_ZN6RFM12B4XFEREj>
    1268:	06 c0       	rjmp	.+12     	; 0x1276 <_ZN6RFM12B10InitializeEhhhhhh+0x86>
    126a:	8b e8       	ldi	r24, 0x8B	; 139
    126c:	9a ec       	ldi	r25, 0xCA	; 202
    126e:	af df       	rcall	.-162    	; 0x11ce <_ZN6RFM12B4XFEREj>
    1270:	8d e2       	ldi	r24, 0x2D	; 45
    1272:	9e ec       	ldi	r25, 0xCE	; 206
    1274:	ac df       	rcall	.-168    	; 0x11ce <_ZN6RFM12B4XFEREj>
    1276:	83 e8       	ldi	r24, 0x83	; 131
    1278:	94 ec       	ldi	r25, 0xC4	; 196
    127a:	a9 df       	rcall	.-174    	; 0x11ce <_ZN6RFM12B4XFEREj>
    127c:	08 30       	cpi	r16, 0x08	; 8
    127e:	28 f4       	brcc	.+10     	; 0x128a <_ZN6RFM12B10InitializeEhhhhhh+0x9a>
    1280:	80 2f       	mov	r24, r16
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	80 65       	ori	r24, 0x50	; 80
    1286:	98 69       	ori	r25, 0x98	; 152
    1288:	02 c0       	rjmp	.+4      	; 0x128e <_ZN6RFM12B10InitializeEhhhhhh+0x9e>
    128a:	87 e5       	ldi	r24, 0x57	; 87
    128c:	98 e9       	ldi	r25, 0x98	; 152
    128e:	9f df       	rcall	.-194    	; 0x11ce <_ZN6RFM12B4XFEREj>
    1290:	87 e7       	ldi	r24, 0x77	; 119
    1292:	9c ec       	ldi	r25, 0xCC	; 204
    1294:	9c df       	rcall	.-200    	; 0x11ce <_ZN6RFM12B4XFEREj>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 ee       	ldi	r25, 0xE0	; 224
    129a:	99 df       	rcall	.-206    	; 0x11ce <_ZN6RFM12B4XFEREj>
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	98 ec       	ldi	r25, 0xC8	; 200
    12a0:	96 df       	rcall	.-212    	; 0x11ce <_ZN6RFM12B4XFEREj>
    12a2:	83 e4       	ldi	r24, 0x43	; 67
    12a4:	90 ec       	ldi	r25, 0xC0	; 192
    12a6:	93 df       	rcall	.-218    	; 0x11ce <_ZN6RFM12B4XFEREj>
    12a8:	84 e0       	ldi	r24, 0x04	; 4
    12aa:	80 93 8a 01 	sts	0x018A, r24
    12ae:	80 91 91 01 	lds	r24, 0x0191
    12b2:	88 23       	and	r24, r24
    12b4:	11 f0       	breq	.+4      	; 0x12ba <_ZN6RFM12B10InitializeEhhhhhh+0xca>
    12b6:	ce 01       	movw	r24, r28
    12b8:	94 df       	rcall	.-216    	; 0x11e2 <_ZN6RFM12B19InitializeInterruptEv>
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ef 90       	pop	r14
    12c4:	08 95       	ret

000012c6 <_ZN6RFM12B16InterruptHandlerEv>:
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	81 df       	rcall	.-254    	; 0x11ce <_ZN6RFM12B4XFEREj>
    12cc:	80 91 8a 01 	lds	r24, 0x018A
    12d0:	85 30       	cpi	r24, 0x05	; 5
    12d2:	09 f0       	breq	.+2      	; 0x12d6 <_ZN6RFM12B16InterruptHandlerEv+0x10>
    12d4:	48 c0       	rjmp	.+144    	; 0x1366 <_ZN6RFM12B16InterruptHandlerEv+0xa0>
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 eb       	ldi	r25, 0xB0	; 176
    12da:	5f df       	rcall	.-322    	; 0x119a <_ZN6RFM12B8XFERSlowEj>
    12dc:	90 91 8b 01 	lds	r25, 0x018B
    12e0:	91 11       	cpse	r25, r1
    12e2:	04 c0       	rjmp	.+8      	; 0x12ec <_ZN6RFM12B16InterruptHandlerEv+0x26>
    12e4:	90 91 90 01 	lds	r25, 0x0190
    12e8:	91 11       	cpse	r25, r1
    12ea:	a7 c0       	rjmp	.+334    	; 0x143a <_ZN6RFM12B16InterruptHandlerEv+0x174>
    12ec:	90 91 8b 01 	lds	r25, 0x018B
    12f0:	e9 2f       	mov	r30, r25
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	e7 59       	subi	r30, 0x97	; 151
    12f6:	fe 4f       	sbci	r31, 0xFE	; 254
    12f8:	80 83       	st	Z, r24
    12fa:	9f 5f       	subi	r25, 0xFF	; 255
    12fc:	90 93 8b 01 	sts	0x018B, r25
    1300:	20 91 88 01 	lds	r18, 0x0188
    1304:	30 91 89 01 	lds	r19, 0x0189
    1308:	38 27       	eor	r19, r24
    130a:	03 2e       	mov	r0, r19
    130c:	02 94       	swap	r0
    130e:	80 2d       	mov	r24, r0
    1310:	8f 70       	andi	r24, 0x0F	; 15
    1312:	83 27       	eor	r24, r19
    1314:	93 2f       	mov	r25, r19
    1316:	90 25       	eor	r25, r0
    1318:	99 0f       	add	r25, r25
    131a:	90 7e       	andi	r25, 0xE0	; 224
    131c:	89 27       	eor	r24, r25
    131e:	90 2d       	mov	r25, r0
    1320:	93 27       	eor	r25, r19
    1322:	90 7f       	andi	r25, 0xF0	; 240
    1324:	96 95       	lsr	r25
    1326:	03 2e       	mov	r0, r19
    1328:	00 0c       	add	r0, r0
    132a:	99 1f       	adc	r25, r25
    132c:	36 95       	lsr	r19
    132e:	36 95       	lsr	r19
    1330:	36 95       	lsr	r19
    1332:	3f 71       	andi	r19, 0x1F	; 31
    1334:	39 27       	eor	r19, r25
    1336:	32 27       	eor	r19, r18
    1338:	28 2f       	mov	r18, r24
    133a:	30 93 89 01 	sts	0x0189, r19
    133e:	20 93 88 01 	sts	0x0188, r18
    1342:	20 91 8b 01 	lds	r18, 0x018B
    1346:	80 91 6a 01 	lds	r24, 0x016A
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	04 96       	adiw	r24, 0x04	; 4
    1350:	28 17       	cp	r18, r24
    1352:	39 07       	cpc	r19, r25
    1354:	2c f4       	brge	.+10     	; 0x1360 <_ZN6RFM12B16InterruptHandlerEv+0x9a>
    1356:	80 91 8b 01 	lds	r24, 0x018B
    135a:	8f 31       	cpi	r24, 0x1F	; 31
    135c:	08 f4       	brcc	.+2      	; 0x1360 <_ZN6RFM12B16InterruptHandlerEv+0x9a>
    135e:	78 c0       	rjmp	.+240    	; 0x1450 <_ZN6RFM12B16InterruptHandlerEv+0x18a>
    1360:	8d e0       	ldi	r24, 0x0D	; 13
    1362:	92 e8       	ldi	r25, 0x82	; 130
    1364:	34 cf       	rjmp	.-408    	; 0x11ce <_ZN6RFM12B4XFEREj>
    1366:	80 91 8a 01 	lds	r24, 0x018A
    136a:	88 23       	and	r24, r24
    136c:	0c f0       	brlt	.+2      	; 0x1370 <_ZN6RFM12B16InterruptHandlerEv+0xaa>
    136e:	31 c0       	rjmp	.+98     	; 0x13d2 <_ZN6RFM12B16InterruptHandlerEv+0x10c>
    1370:	e0 91 6a 01 	lds	r30, 0x016A
    1374:	80 91 8a 01 	lds	r24, 0x018A
    1378:	98 2f       	mov	r25, r24
    137a:	9f 5f       	subi	r25, 0xFF	; 255
    137c:	90 93 8a 01 	sts	0x018A, r25
    1380:	ee 5f       	subi	r30, 0xFE	; 254
    1382:	8e 0f       	add	r24, r30
    1384:	e8 2f       	mov	r30, r24
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	e7 59       	subi	r30, 0x97	; 151
    138a:	fe 4f       	sbci	r31, 0xFE	; 254
    138c:	80 81       	ld	r24, Z
    138e:	20 91 88 01 	lds	r18, 0x0188
    1392:	30 91 89 01 	lds	r19, 0x0189
    1396:	38 27       	eor	r19, r24
    1398:	03 2e       	mov	r0, r19
    139a:	02 94       	swap	r0
    139c:	90 2d       	mov	r25, r0
    139e:	9f 70       	andi	r25, 0x0F	; 15
    13a0:	93 27       	eor	r25, r19
    13a2:	43 2f       	mov	r20, r19
    13a4:	40 25       	eor	r20, r0
    13a6:	44 0f       	add	r20, r20
    13a8:	40 7e       	andi	r20, 0xE0	; 224
    13aa:	94 27       	eor	r25, r20
    13ac:	40 2d       	mov	r20, r0
    13ae:	43 27       	eor	r20, r19
    13b0:	40 7f       	andi	r20, 0xF0	; 240
    13b2:	46 95       	lsr	r20
    13b4:	03 2e       	mov	r0, r19
    13b6:	00 0c       	add	r0, r0
    13b8:	44 1f       	adc	r20, r20
    13ba:	36 95       	lsr	r19
    13bc:	36 95       	lsr	r19
    13be:	36 95       	lsr	r19
    13c0:	3f 71       	andi	r19, 0x1F	; 31
    13c2:	34 27       	eor	r19, r20
    13c4:	32 27       	eor	r19, r18
    13c6:	29 2f       	mov	r18, r25
    13c8:	30 93 89 01 	sts	0x0189, r19
    13cc:	20 93 88 01 	sts	0x0188, r18
    13d0:	31 c0       	rjmp	.+98     	; 0x1434 <_ZN6RFM12B16InterruptHandlerEv+0x16e>
    13d2:	80 91 8a 01 	lds	r24, 0x018A
    13d6:	98 2f       	mov	r25, r24
    13d8:	9f 5f       	subi	r25, 0xFF	; 255
    13da:	90 93 8a 01 	sts	0x018A, r25
    13de:	83 30       	cpi	r24, 0x03	; 3
    13e0:	19 f1       	breq	.+70     	; 0x1428 <_ZN6RFM12B16InterruptHandlerEv+0x162>
    13e2:	2c f4       	brge	.+10     	; 0x13ee <_ZN6RFM12B16InterruptHandlerEv+0x128>
    13e4:	88 23       	and	r24, r24
    13e6:	91 f0       	breq	.+36     	; 0x140c <_ZN6RFM12B16InterruptHandlerEv+0x146>
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	19 f5       	brne	.+70     	; 0x1432 <_ZN6RFM12B16InterruptHandlerEv+0x16c>
    13ec:	17 c0       	rjmp	.+46     	; 0x141c <_ZN6RFM12B16InterruptHandlerEv+0x156>
    13ee:	89 30       	cpi	r24, 0x09	; 9
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <_ZN6RFM12B16InterruptHandlerEv+0x132>
    13f2:	8a 30       	cpi	r24, 0x0A	; 10
    13f4:	f1 f4       	brne	.+60     	; 0x1432 <_ZN6RFM12B16InterruptHandlerEv+0x16c>
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <_ZN6RFM12B16InterruptHandlerEv+0x136>
    13f8:	8d e2       	ldi	r24, 0x2D	; 45
    13fa:	1c c0       	rjmp	.+56     	; 0x1434 <_ZN6RFM12B16InterruptHandlerEv+0x16e>
    13fc:	80 91 90 01 	lds	r24, 0x0190
    1400:	90 91 6a 01 	lds	r25, 0x016A
    1404:	90 95       	com	r25
    1406:	90 93 8a 01 	sts	0x018A, r25
    140a:	14 c0       	rjmp	.+40     	; 0x1434 <_ZN6RFM12B16InterruptHandlerEv+0x16e>
    140c:	80 91 88 01 	lds	r24, 0x0188
    1410:	90 91 89 01 	lds	r25, 0x0189
    1414:	80 95       	com	r24
    1416:	90 95       	com	r25
    1418:	89 2f       	mov	r24, r25
    141a:	0c c0       	rjmp	.+24     	; 0x1434 <_ZN6RFM12B16InterruptHandlerEv+0x16e>
    141c:	80 91 88 01 	lds	r24, 0x0188
    1420:	90 91 89 01 	lds	r25, 0x0189
    1424:	80 95       	com	r24
    1426:	06 c0       	rjmp	.+12     	; 0x1434 <_ZN6RFM12B16InterruptHandlerEv+0x16e>
    1428:	8d e0       	ldi	r24, 0x0D	; 13
    142a:	92 e8       	ldi	r25, 0x82	; 130
    142c:	d0 de       	rcall	.-608    	; 0x11ce <_ZN6RFM12B4XFEREj>
    142e:	8a ea       	ldi	r24, 0xAA	; 170
    1430:	01 c0       	rjmp	.+2      	; 0x1434 <_ZN6RFM12B16InterruptHandlerEv+0x16e>
    1432:	8a ea       	ldi	r24, 0xAA	; 170
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	98 54       	subi	r25, 0x48	; 72
    1438:	ca ce       	rjmp	.-620    	; 0x11ce <_ZN6RFM12B4XFEREj>
    143a:	20 91 8b 01 	lds	r18, 0x018B
    143e:	e2 2f       	mov	r30, r18
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	e7 59       	subi	r30, 0x97	; 151
    1444:	fe 4f       	sbci	r31, 0xFE	; 254
    1446:	90 83       	st	Z, r25
    1448:	2f 5f       	subi	r18, 0xFF	; 255
    144a:	20 93 8b 01 	sts	0x018B, r18
    144e:	4e cf       	rjmp	.-356    	; 0x12ec <_ZN6RFM12B16InterruptHandlerEv+0x26>
    1450:	08 95       	ret

00001452 <_ZN6RFM12B12ReceiveStartEv>:
    1452:	10 92 6a 01 	sts	0x016A, r1
    1456:	10 92 8b 01 	sts	0x018B, r1
    145a:	8f e0       	ldi	r24, 0x0F	; 15
    145c:	9d e1       	ldi	r25, 0x1D	; 29
    145e:	90 93 89 01 	sts	0x0189, r25
    1462:	80 93 88 01 	sts	0x0188, r24
    1466:	85 e0       	ldi	r24, 0x05	; 5
    1468:	80 93 8a 01 	sts	0x018A, r24
    146c:	8d ed       	ldi	r24, 0xDD	; 221
    146e:	92 e8       	ldi	r25, 0x82	; 130
    1470:	ae ce       	rjmp	.-676    	; 0x11ce <_ZN6RFM12B4XFEREj>

00001472 <_ZN6RFM12B15ReceiveCompleteEv>:
    1472:	20 91 8a 01 	lds	r18, 0x018A
    1476:	25 30       	cpi	r18, 0x05	; 5
    1478:	69 f5       	brne	.+90     	; 0x14d4 <_ZN6RFM12B15ReceiveCompleteEv+0x62>
    147a:	40 91 8b 01 	lds	r20, 0x018B
    147e:	20 91 6a 01 	lds	r18, 0x016A
    1482:	50 e0       	ldi	r21, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	2c 5f       	subi	r18, 0xFC	; 252
    1488:	3f 4f       	sbci	r19, 0xFF	; 255
    148a:	42 17       	cp	r20, r18
    148c:	53 07       	cpc	r21, r19
    148e:	5c f5       	brge	.+86     	; 0x14e6 <_ZN6RFM12B15ReceiveCompleteEv+0x74>
    1490:	20 91 8b 01 	lds	r18, 0x018B
    1494:	2f 31       	cpi	r18, 0x1F	; 31
    1496:	38 f5       	brcc	.+78     	; 0x14e6 <_ZN6RFM12B15ReceiveCompleteEv+0x74>
    1498:	1d c0       	rjmp	.+58     	; 0x14d4 <_ZN6RFM12B15ReceiveCompleteEv+0x62>
    149a:	21 e0       	ldi	r18, 0x01	; 1
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	30 93 89 01 	sts	0x0189, r19
    14a2:	20 93 88 01 	sts	0x0188, r18
    14a6:	20 91 6b 01 	lds	r18, 0x016B
    14aa:	2f 77       	andi	r18, 0x7F	; 127
    14ac:	39 f0       	breq	.+14     	; 0x14bc <_ZN6RFM12B15ReceiveCompleteEv+0x4a>
    14ae:	30 91 6b 01 	lds	r19, 0x016B
    14b2:	3f 77       	andi	r19, 0x7F	; 127
    14b4:	20 91 91 01 	lds	r18, 0x0191
    14b8:	32 13       	cpse	r19, r18
    14ba:	0c c0       	rjmp	.+24     	; 0x14d4 <_ZN6RFM12B15ReceiveCompleteEv+0x62>
    14bc:	20 91 88 01 	lds	r18, 0x0188
    14c0:	30 91 89 01 	lds	r19, 0x0189
    14c4:	23 2b       	or	r18, r19
    14c6:	d9 f4       	brne	.+54     	; 0x14fe <_ZN6RFM12B15ReceiveCompleteEv+0x8c>
    14c8:	dc 01       	movw	r26, r24
    14ca:	ed 91       	ld	r30, X+
    14cc:	fc 91       	ld	r31, X
    14ce:	30 97       	sbiw	r30, 0x00	; 0
    14d0:	91 f4       	brne	.+36     	; 0x14f6 <_ZN6RFM12B15ReceiveCompleteEv+0x84>
    14d2:	15 c0       	rjmp	.+42     	; 0x14fe <_ZN6RFM12B15ReceiveCompleteEv+0x8c>
    14d4:	20 91 8a 01 	lds	r18, 0x018A
    14d8:	24 30       	cpi	r18, 0x04	; 4
    14da:	19 f4       	brne	.+6      	; 0x14e2 <_ZN6RFM12B15ReceiveCompleteEv+0x70>
    14dc:	ba df       	rcall	.-140    	; 0x1452 <_ZN6RFM12B12ReceiveStartEv>
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	08 95       	ret
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	08 95       	ret
    14e6:	24 e0       	ldi	r18, 0x04	; 4
    14e8:	20 93 8a 01 	sts	0x018A, r18
    14ec:	20 91 6a 01 	lds	r18, 0x016A
    14f0:	2a 31       	cpi	r18, 0x1A	; 26
    14f2:	98 f6       	brcc	.-90     	; 0x149a <_ZN6RFM12B15ReceiveCompleteEv+0x28>
    14f4:	d8 cf       	rjmp	.-80     	; 0x14a6 <_ZN6RFM12B15ReceiveCompleteEv+0x34>
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	09 95       	icall
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	08 95       	ret
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	9f ef       	ldi	r25, 0xFF	; 255
    1502:	dc 01       	movw	r26, r24
    1504:	80 93 8c 01 	sts	0x018C, r24
    1508:	90 93 8d 01 	sts	0x018D, r25
    150c:	a0 93 8e 01 	sts	0x018E, r26
    1510:	b0 93 8f 01 	sts	0x018F, r27
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	08 95       	ret

00001518 <_ZN6RFM12B7CanSendEv>:
    1518:	80 91 8a 01 	lds	r24, 0x018A
    151c:	85 30       	cpi	r24, 0x05	; 5
    151e:	89 f4       	brne	.+34     	; 0x1542 <_ZN6RFM12B7CanSendEv+0x2a>
    1520:	80 91 8b 01 	lds	r24, 0x018B
    1524:	81 11       	cpse	r24, r1
    1526:	0f c0       	rjmp	.+30     	; 0x1546 <_ZN6RFM12B7CanSendEv+0x2e>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	36 de       	rcall	.-916    	; 0x119a <_ZN6RFM12B8XFERSlowEj>
    152e:	90 fd       	sbrc	r25, 0
    1530:	0c c0       	rjmp	.+24     	; 0x154a <_ZN6RFM12B7CanSendEv+0x32>
    1532:	8d e0       	ldi	r24, 0x0D	; 13
    1534:	92 e8       	ldi	r25, 0x82	; 130
    1536:	4b de       	rcall	.-874    	; 0x11ce <_ZN6RFM12B4XFEREj>
    1538:	84 e0       	ldi	r24, 0x04	; 4
    153a:	80 93 8a 01 	sts	0x018A, r24
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	08 95       	ret
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	08 95       	ret
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	08 95       	ret
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	08 95       	ret

0000154e <_ZN6RFM12B9SendStartEhbb>:
    154e:	60 93 6b 01 	sts	0x016B, r22
    1552:	30 91 91 01 	lds	r19, 0x0191
    1556:	30 93 6c 01 	sts	0x016C, r19
    155a:	22 23       	and	r18, r18
    155c:	11 f0       	breq	.+4      	; 0x1562 <_ZN6RFM12B9SendStartEhbb+0x14>
    155e:	20 e8       	ldi	r18, 0x80	; 128
    1560:	01 c0       	rjmp	.+2      	; 0x1564 <_ZN6RFM12B9SendStartEhbb+0x16>
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	44 23       	and	r20, r20
    1566:	11 f0       	breq	.+4      	; 0x156c <_ZN6RFM12B9SendStartEhbb+0x1e>
    1568:	30 e4       	ldi	r19, 0x40	; 64
    156a:	01 c0       	rjmp	.+2      	; 0x156e <_ZN6RFM12B9SendStartEhbb+0x20>
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	23 2b       	or	r18, r19
    1570:	20 93 6d 01 	sts	0x016D, r18
    1574:	dc 01       	movw	r26, r24
    1576:	ed 91       	ld	r30, X+
    1578:	fc 91       	ld	r31, X
    157a:	30 97       	sbiw	r30, 0x00	; 0
    157c:	11 f0       	breq	.+4      	; 0x1582 <_ZN6RFM12B9SendStartEhbb+0x34>
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	09 95       	icall
    1582:	8f e0       	ldi	r24, 0x0F	; 15
    1584:	9d e1       	ldi	r25, 0x1D	; 29
    1586:	90 93 89 01 	sts	0x0189, r25
    158a:	80 93 88 01 	sts	0x0188, r24
    158e:	86 e0       	ldi	r24, 0x06	; 6
    1590:	80 93 8a 01 	sts	0x018A, r24
    1594:	8d e3       	ldi	r24, 0x3D	; 61
    1596:	92 e8       	ldi	r25, 0x82	; 130
    1598:	1a ce       	rjmp	.-972    	; 0x11ce <_ZN6RFM12B4XFEREj>

0000159a <_ZN6RFM12B8SendWaitEh>:
    159a:	34 e0       	ldi	r19, 0x04	; 4
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	4c e0       	ldi	r20, 0x0C	; 12
    15a0:	16 c0       	rjmp	.+44     	; 0x15ce <_ZN6RFM12B8SendWaitEh+0x34>
    15a2:	66 23       	and	r22, r22
    15a4:	a1 f0       	breq	.+40     	; 0x15ce <_ZN6RFM12B8SendWaitEh+0x34>
    15a6:	83 b7       	in	r24, 0x33	; 51
    15a8:	81 7f       	andi	r24, 0xF1	; 241
    15aa:	63 30       	cpi	r22, 0x03	; 3
    15ac:	21 f0       	breq	.+8      	; 0x15b6 <_ZN6RFM12B8SendWaitEh+0x1c>
    15ae:	62 30       	cpi	r22, 0x02	; 2
    15b0:	21 f4       	brne	.+8      	; 0x15ba <_ZN6RFM12B8SendWaitEh+0x20>
    15b2:	94 2f       	mov	r25, r20
    15b4:	03 c0       	rjmp	.+6      	; 0x15bc <_ZN6RFM12B8SendWaitEh+0x22>
    15b6:	93 2f       	mov	r25, r19
    15b8:	01 c0       	rjmp	.+2      	; 0x15bc <_ZN6RFM12B8SendWaitEh+0x22>
    15ba:	92 2f       	mov	r25, r18
    15bc:	89 2b       	or	r24, r25
    15be:	83 bf       	out	0x33, r24	; 51
    15c0:	83 b7       	in	r24, 0x33	; 51
    15c2:	81 60       	ori	r24, 0x01	; 1
    15c4:	83 bf       	out	0x33, r24	; 51
    15c6:	88 95       	sleep
    15c8:	83 b7       	in	r24, 0x33	; 51
    15ca:	8e 7f       	andi	r24, 0xFE	; 254
    15cc:	83 bf       	out	0x33, r24	; 51
    15ce:	80 91 8a 01 	lds	r24, 0x018A
    15d2:	84 30       	cpi	r24, 0x04	; 4
    15d4:	31 f7       	brne	.-52     	; 0x15a2 <_ZN6RFM12B8SendWaitEh+0x8>
    15d6:	08 95       	ret

000015d8 <_ZN6RFM12B9SendStartEhPKvhbbh>:
    15d8:	cf 92       	push	r12
    15da:	ef 92       	push	r14
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	ec 01       	movw	r28, r24
    15e6:	16 2f       	mov	r17, r22
    15e8:	64 2f       	mov	r22, r20
    15ea:	75 2f       	mov	r23, r21
    15ec:	ea e6       	ldi	r30, 0x6A	; 106
    15ee:	f1 e0       	ldi	r31, 0x01	; 1
    15f0:	20 83       	st	Z, r18
    15f2:	90 81       	ld	r25, Z
    15f4:	9d 5f       	subi	r25, 0xFD	; 253
    15f6:	90 83       	st	Z, r25
    15f8:	ee e6       	ldi	r30, 0x6E	; 110
    15fa:	f1 e0       	ldi	r31, 0x01	; 1
    15fc:	42 2f       	mov	r20, r18
    15fe:	50 e0       	ldi	r21, 0x00	; 0
    1600:	8e 2f       	mov	r24, r30
    1602:	9f 2f       	mov	r25, r31
    1604:	88 d1       	rcall	.+784    	; 0x1916 <memcpy>
    1606:	2e 2d       	mov	r18, r14
    1608:	40 2f       	mov	r20, r16
    160a:	61 2f       	mov	r22, r17
    160c:	ce 01       	movw	r24, r28
    160e:	9f df       	rcall	.-194    	; 0x154e <_ZN6RFM12B9SendStartEhbb>
    1610:	6c 2d       	mov	r22, r12
    1612:	ce 01       	movw	r24, r28
    1614:	c2 df       	rcall	.-124    	; 0x159a <_ZN6RFM12B8SendWaitEh>
    1616:	df 91       	pop	r29
    1618:	cf 91       	pop	r28
    161a:	1f 91       	pop	r17
    161c:	0f 91       	pop	r16
    161e:	ef 90       	pop	r14
    1620:	cf 90       	pop	r12
    1622:	08 95       	ret

00001624 <_ZN6RFM12B7SendACKEPKvhh>:
    1624:	af 92       	push	r10
    1626:	bf 92       	push	r11
    1628:	cf 92       	push	r12
    162a:	ef 92       	push	r14
    162c:	0f 93       	push	r16
    162e:	1f 93       	push	r17
    1630:	cf 93       	push	r28
    1632:	df 93       	push	r29
    1634:	ec 01       	movw	r28, r24
    1636:	5b 01       	movw	r10, r22
    1638:	14 2f       	mov	r17, r20
    163a:	c2 2e       	mov	r12, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <_ZN6RFM12B7SendACKEPKvhh+0x1e>
    163e:	ce 01       	movw	r24, r28
    1640:	18 df       	rcall	.-464    	; 0x1472 <_ZN6RFM12B15ReceiveCompleteEv>
    1642:	ce 01       	movw	r24, r28
    1644:	69 df       	rcall	.-302    	; 0x1518 <_ZN6RFM12B7CanSendEv>
    1646:	88 23       	and	r24, r24
    1648:	d1 f3       	breq	.-12     	; 0x163e <_ZN6RFM12B7SendACKEPKvhh+0x1a>
    164a:	60 91 6c 01 	lds	r22, 0x016C
    164e:	6f 77       	andi	r22, 0x7F	; 127
    1650:	ee 24       	eor	r14, r14
    1652:	e3 94       	inc	r14
    1654:	00 e0       	ldi	r16, 0x00	; 0
    1656:	21 2f       	mov	r18, r17
    1658:	a5 01       	movw	r20, r10
    165a:	ce 01       	movw	r24, r28
    165c:	bd df       	rcall	.-134    	; 0x15d8 <_ZN6RFM12B9SendStartEhPKvhbbh>
    165e:	df 91       	pop	r29
    1660:	cf 91       	pop	r28
    1662:	1f 91       	pop	r17
    1664:	0f 91       	pop	r16
    1666:	ef 90       	pop	r14
    1668:	cf 90       	pop	r12
    166a:	bf 90       	pop	r11
    166c:	af 90       	pop	r10
    166e:	08 95       	ret

00001670 <_ZN6RFM12B7GetDataEv>:
    1670:	8e e6       	ldi	r24, 0x6E	; 110
    1672:	91 e0       	ldi	r25, 0x01	; 1
    1674:	08 95       	ret

00001676 <_ZN6RFM12B12ACKRequestedEv>:
bool RFM12B::ACKRequested() { return RF12_WANTS_ACK; }
    1676:	80 91 6d 01 	lds	r24, 0x016D
    167a:	86 ff       	sbrs	r24, 6
    167c:	07 c0       	rjmp	.+14     	; 0x168c <_ZN6RFM12B12ACKRequestedEv+0x16>
    167e:	80 91 6b 01 	lds	r24, 0x016B
    1682:	80 95       	com	r24
    1684:	88 1f       	adc	r24, r24
    1686:	88 27       	eor	r24, r24
    1688:	88 1f       	adc	r24, r24
    168a:	08 95       	ret
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	08 95       	ret

00001690 <tone_init>:
#include <avr/power.h>

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume counsigned long _tAC_time;ntrol.

void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
    1690:	21 9a       	sbi	0x04, 1	; 4
    1692:	08 95       	ret

00001694 <noTone>:


	void noTone() {
	//	uart0_puts("STOP");
	//	TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
		 TCCR1B  &= ~(1<<0) | ~(1<<1) | ~(1<<2) ;        // No clock source (Timer/Counter stopped).
    1694:	e1 e8       	ldi	r30, 0x81	; 129
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	80 83       	st	Z, r24
		 TCCR1A  = 0x00;       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
    169c:	10 92 80 00 	sts	0x0080, r1
		 power_timer1_disable();
    16a0:	e4 e6       	ldi	r30, 0x64	; 100
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	88 60       	ori	r24, 0x08	; 8
    16a8:	80 83       	st	Z, r24
		PORTB &= ~(1 << 1); // Set pin PB1 to LOW.
    16aa:	29 98       	cbi	0x05, 1	; 5
    16ac:	08 95       	ret

000016ae <tone>:
void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
	
}

void tone(unsigned long frequency, uint8_t volume) {
    16ae:	cf 92       	push	r12
    16b0:	df 92       	push	r13
    16b2:	ef 92       	push	r14
    16b4:	ff 92       	push	r15
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	6b 01       	movw	r12, r22
    16bc:	7c 01       	movw	r14, r24
	 power_timer1_enable();
    16be:	e4 e6       	ldi	r30, 0x64	; 100
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	87 7f       	andi	r24, 0xF7	; 247
    16c6:	80 83       	st	Z, r24
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
    16c8:	c1 14       	cp	r12, r1
    16ca:	d1 04       	cpc	r13, r1
    16cc:	e1 04       	cpc	r14, r1
    16ce:	f1 04       	cpc	r15, r1
    16d0:	11 f0       	breq	.+4      	; 0x16d6 <tone+0x28>
    16d2:	41 11       	cpse	r20, r1
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <tone+0x2c>
    16d6:	de df       	rcall	.-68     	; 0x1694 <noTone>
    16d8:	4d c0       	rjmp	.+154    	; 0x1774 <tone+0xc6>
    16da:	d4 2f       	mov	r29, r20
    16dc:	4b 30       	cpi	r20, 0x0B	; 11
    16de:	08 f0       	brcs	.+2      	; 0x16e2 <tone+0x34>
    16e0:	da e0       	ldi	r29, 0x0A	; 10
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
    16e2:	60 e0       	ldi	r22, 0x00	; 0
    16e4:	72 e1       	ldi	r23, 0x12	; 18
    16e6:	8a e7       	ldi	r24, 0x7A	; 122
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	a7 01       	movw	r20, r14
    16ec:	96 01       	movw	r18, r12
    16ee:	eb d0       	rcall	.+470    	; 0x18c6 <__udivmodsi4>
    16f0:	cc 24       	eor	r12, r12
    16f2:	ca 94       	dec	r12
    16f4:	dc 2c       	mov	r13, r12
    16f6:	76 01       	movw	r14, r12
    16f8:	c2 0e       	add	r12, r18
    16fa:	d3 1e       	adc	r13, r19
    16fc:	e4 1e       	adc	r14, r20
    16fe:	f5 1e       	adc	r15, r21
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    1700:	c1 14       	cp	r12, r1
    1702:	d1 04       	cpc	r13, r1
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	e8 06       	cpc	r14, r24
    1708:	f1 04       	cpc	r15, r1
    170a:	58 f0       	brcs	.+22     	; 0x1722 <tone+0x74>
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
    170c:	cd 2c       	mov	r12, r13
    170e:	de 2c       	mov	r13, r14
    1710:	ef 2c       	mov	r14, r15
    1712:	ff 24       	eor	r15, r15
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	c8 1a       	sub	r12, r24
    1718:	d1 08       	sbc	r13, r1
    171a:	e1 08       	sbc	r14, r1
    171c:	f1 08       	sbc	r15, r1
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    171e:	c4 e0       	ldi	r28, 0x04	; 4
    1720:	01 c0       	rjmp	.+2      	; 0x1724 <tone+0x76>
	 power_timer1_enable();
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
    1722:	c1 e0       	ldi	r28, 0x01	; 1
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
		}
	
		unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
    1724:	ed 2f       	mov	r30, r29
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	ed 5f       	subi	r30, 0xFD	; 253
    172a:	fe 4f       	sbci	r31, 0xFE	; 254
    172c:	20 81       	ld	r18, Z
    172e:	30 e0       	ldi	r19, 0x00	; 0
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	c7 01       	movw	r24, r14
    1736:	b6 01       	movw	r22, r12
    1738:	c6 d0       	rcall	.+396    	; 0x18c6 <__udivmodsi4>
		
		ICR1   = top;							// Set the top.
    173a:	d0 92 87 00 	sts	0x0087, r13
    173e:	c0 92 86 00 	sts	0x0086, r12
		if (TCNT1 > top) TCNT1 = top;			// Counter over the top, put within range.
    1742:	80 91 84 00 	lds	r24, 0x0084
    1746:	90 91 85 00 	lds	r25, 0x0085
    174a:	a0 e0       	ldi	r26, 0x00	; 0
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	c8 16       	cp	r12, r24
    1750:	d9 06       	cpc	r13, r25
    1752:	ea 06       	cpc	r14, r26
    1754:	fb 06       	cpc	r15, r27
    1756:	20 f4       	brcc	.+8      	; 0x1760 <tone+0xb2>
    1758:	d0 92 85 00 	sts	0x0085, r13
    175c:	c0 92 84 00 	sts	0x0084, r12
			TCCR1B = _BV(WGM13)  | prescaler;   // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
    1760:	c0 61       	ori	r28, 0x10	; 16
    1762:	c0 93 81 00 	sts	0x0081, r28
			OCR1A  = duty;						// Set the duty cycle (volume).
    1766:	30 93 89 00 	sts	0x0089, r19
    176a:	20 93 88 00 	sts	0x0088, r18
			TCCR1A = _BV(COM1A1);				// Clear OC1A/OC1B on Compare Match (Set output to low level).
    176e:	80 e8       	ldi	r24, 0x80	; 128
    1770:	80 93 80 00 	sts	0x0080, r24
			

}
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	ff 90       	pop	r15
    177a:	ef 90       	pop	r14
    177c:	df 90       	pop	r13
    177e:	cf 90       	pop	r12
    1780:	08 95       	ret

00001782 <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    1782:	1f 92       	push	r1
    1784:	0f 92       	push	r0
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	0f 92       	push	r0
    178a:	11 24       	eor	r1, r1
    178c:	2f 93       	push	r18
    178e:	3f 93       	push	r19
    1790:	4f 93       	push	r20
    1792:	5f 93       	push	r21
    1794:	8f 93       	push	r24
    1796:	9f 93       	push	r25
    1798:	ef 93       	push	r30
    179a:	ff 93       	push	r31
    179c:	40 91 c0 00 	lds	r20, 0x00C0
    17a0:	50 91 c6 00 	lds	r21, 0x00C6
    17a4:	48 71       	andi	r20, 0x18	; 24
    17a6:	80 91 94 01 	lds	r24, 0x0194
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	8f 77       	andi	r24, 0x7F	; 127
    17b0:	99 27       	eor	r25, r25
    17b2:	20 91 93 01 	lds	r18, 0x0193
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	28 17       	cp	r18, r24
    17ba:	39 07       	cpc	r19, r25
    17bc:	39 f0       	breq	.+14     	; 0x17cc <__vector_18+0x4a>
    17be:	80 93 94 01 	sts	0x0194, r24
    17c2:	fc 01       	movw	r30, r24
    17c4:	e9 56       	subi	r30, 0x69	; 105
    17c6:	fe 4f       	sbci	r31, 0xFE	; 254
    17c8:	50 83       	st	Z, r21
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <__vector_18+0x4c>
    17cc:	42 e0       	ldi	r20, 0x02	; 2
    17ce:	40 93 92 01 	sts	0x0192, r20
    17d2:	ff 91       	pop	r31
    17d4:	ef 91       	pop	r30
    17d6:	9f 91       	pop	r25
    17d8:	8f 91       	pop	r24
    17da:	5f 91       	pop	r21
    17dc:	4f 91       	pop	r20
    17de:	3f 91       	pop	r19
    17e0:	2f 91       	pop	r18
    17e2:	0f 90       	pop	r0
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	0f 90       	pop	r0
    17e8:	1f 90       	pop	r1
    17ea:	18 95       	reti

000017ec <__vector_19>:
    17ec:	1f 92       	push	r1
    17ee:	0f 92       	push	r0
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	8f 93       	push	r24
    17f8:	9f 93       	push	r25
    17fa:	ef 93       	push	r30
    17fc:	ff 93       	push	r31
    17fe:	90 91 96 01 	lds	r25, 0x0196
    1802:	80 91 95 01 	lds	r24, 0x0195
    1806:	98 17       	cp	r25, r24
    1808:	79 f0       	breq	.+30     	; 0x1828 <__vector_19+0x3c>
    180a:	80 91 95 01 	lds	r24, 0x0195
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	8f 77       	andi	r24, 0x7F	; 127
    1814:	99 27       	eor	r25, r25
    1816:	80 93 95 01 	sts	0x0195, r24
    181a:	fc 01       	movw	r30, r24
    181c:	e9 5e       	subi	r30, 0xE9	; 233
    181e:	fd 4f       	sbci	r31, 0xFD	; 253
    1820:	80 81       	ld	r24, Z
    1822:	80 93 c6 00 	sts	0x00C6, r24
    1826:	05 c0       	rjmp	.+10     	; 0x1832 <__vector_19+0x46>
    1828:	e1 ec       	ldi	r30, 0xC1	; 193
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	8f 7d       	andi	r24, 0xDF	; 223
    1830:	80 83       	st	Z, r24
    1832:	ff 91       	pop	r31
    1834:	ef 91       	pop	r30
    1836:	9f 91       	pop	r25
    1838:	8f 91       	pop	r24
    183a:	0f 90       	pop	r0
    183c:	0f be       	out	0x3f, r0	; 63
    183e:	0f 90       	pop	r0
    1840:	1f 90       	pop	r1
    1842:	18 95       	reti

00001844 <uart0_init>:
    1844:	10 92 96 01 	sts	0x0196, r1
    1848:	10 92 95 01 	sts	0x0195, r1
    184c:	10 92 94 01 	sts	0x0194, r1
    1850:	10 92 93 01 	sts	0x0193, r1
    1854:	99 23       	and	r25, r25
    1856:	24 f4       	brge	.+8      	; 0x1860 <uart0_init+0x1c>
    1858:	22 e0       	ldi	r18, 0x02	; 2
    185a:	20 93 c0 00 	sts	0x00C0, r18
    185e:	9f 77       	andi	r25, 0x7F	; 127
    1860:	90 93 c5 00 	sts	0x00C5, r25
    1864:	80 93 c4 00 	sts	0x00C4, r24
    1868:	88 e9       	ldi	r24, 0x98	; 152
    186a:	80 93 c1 00 	sts	0x00C1, r24
    186e:	86 e0       	ldi	r24, 0x06	; 6
    1870:	80 93 c2 00 	sts	0x00C2, r24
    1874:	08 95       	ret

00001876 <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    1876:	60 91 96 01 	lds	r22, 0x0196
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	6f 5f       	subi	r22, 0xFF	; 255
    187e:	7f 4f       	sbci	r23, 0xFF	; 255
    1880:	6f 77       	andi	r22, 0x7F	; 127
    1882:	77 27       	eor	r23, r23
    1884:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
    1886:	20 91 95 01 	lds	r18, 0x0195
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	24 17       	cp	r18, r20
    188e:	35 07       	cpc	r19, r21
    1890:	d1 f3       	breq	.-12     	; 0x1886 <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    1892:	fb 01       	movw	r30, r22
    1894:	e9 5e       	subi	r30, 0xE9	; 233
    1896:	fd 4f       	sbci	r31, 0xFD	; 253
    1898:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    189a:	60 93 96 01 	sts	0x0196, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
    189e:	e1 ec       	ldi	r30, 0xC1	; 193
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	80 62       	ori	r24, 0x20	; 32
    18a6:	80 83       	st	Z, r24
    18a8:	08 95       	ret

000018aa <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	ec 01       	movw	r28, r24
	while (*s) {
    18b0:	88 81       	ld	r24, Y
    18b2:	88 23       	and	r24, r24
    18b4:	29 f0       	breq	.+10     	; 0x18c0 <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
    18b6:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
    18b8:	de df       	rcall	.-68     	; 0x1876 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
    18ba:	89 91       	ld	r24, Y+
    18bc:	81 11       	cpse	r24, r1
    18be:	fc cf       	rjmp	.-8      	; 0x18b8 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	08 95       	ret

000018c6 <__udivmodsi4>:
    18c6:	a1 e2       	ldi	r26, 0x21	; 33
    18c8:	1a 2e       	mov	r1, r26
    18ca:	aa 1b       	sub	r26, r26
    18cc:	bb 1b       	sub	r27, r27
    18ce:	fd 01       	movw	r30, r26
    18d0:	0d c0       	rjmp	.+26     	; 0x18ec <__udivmodsi4_ep>

000018d2 <__udivmodsi4_loop>:
    18d2:	aa 1f       	adc	r26, r26
    18d4:	bb 1f       	adc	r27, r27
    18d6:	ee 1f       	adc	r30, r30
    18d8:	ff 1f       	adc	r31, r31
    18da:	a2 17       	cp	r26, r18
    18dc:	b3 07       	cpc	r27, r19
    18de:	e4 07       	cpc	r30, r20
    18e0:	f5 07       	cpc	r31, r21
    18e2:	20 f0       	brcs	.+8      	; 0x18ec <__udivmodsi4_ep>
    18e4:	a2 1b       	sub	r26, r18
    18e6:	b3 0b       	sbc	r27, r19
    18e8:	e4 0b       	sbc	r30, r20
    18ea:	f5 0b       	sbc	r31, r21

000018ec <__udivmodsi4_ep>:
    18ec:	66 1f       	adc	r22, r22
    18ee:	77 1f       	adc	r23, r23
    18f0:	88 1f       	adc	r24, r24
    18f2:	99 1f       	adc	r25, r25
    18f4:	1a 94       	dec	r1
    18f6:	69 f7       	brne	.-38     	; 0x18d2 <__udivmodsi4_loop>
    18f8:	60 95       	com	r22
    18fa:	70 95       	com	r23
    18fc:	80 95       	com	r24
    18fe:	90 95       	com	r25
    1900:	9b 01       	movw	r18, r22
    1902:	ac 01       	movw	r20, r24
    1904:	bd 01       	movw	r22, r26
    1906:	cf 01       	movw	r24, r30
    1908:	08 95       	ret

0000190a <__tablejump2__>:
    190a:	ee 0f       	add	r30, r30
    190c:	ff 1f       	adc	r31, r31

0000190e <__tablejump__>:
    190e:	05 90       	lpm	r0, Z+
    1910:	f4 91       	lpm	r31, Z
    1912:	e0 2d       	mov	r30, r0
    1914:	09 94       	ijmp

00001916 <memcpy>:
    1916:	fb 01       	movw	r30, r22
    1918:	dc 01       	movw	r26, r24
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <memcpy+0xa>
    191c:	01 90       	ld	r0, Z+
    191e:	0d 92       	st	X+, r0
    1920:	41 50       	subi	r20, 0x01	; 1
    1922:	50 40       	sbci	r21, 0x00	; 0
    1924:	d8 f7       	brcc	.-10     	; 0x191c <memcpy+0x6>
    1926:	08 95       	ret

00001928 <_exit>:
    1928:	f8 94       	cli

0000192a <__stop_program>:
    192a:	ff cf       	rjmp	.-2      	; 0x192a <__stop_program>
