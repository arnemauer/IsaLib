
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00001904  00001998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001904  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000170  0080013a  0080013a  000019d2  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  000019d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fe  00000000  00000000  00002658  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002856  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000420  00000000  00000000  00002885  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004e9a  00000000  00000000  00002ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000126d  00000000  00000000  00007b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000026fd  00000000  00000000  00008dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bb4  00000000  00000000  0000b4ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000011b8  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003003  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003b0  00000000  00000000  0001021b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ec c2       	rjmp	.+1496   	; 0x5da <__ctors_end>
       2:	00 00       	nop
       4:	c1 c3       	rjmp	.+1922   	; 0x788 <__vector_1>
       6:	00 00       	nop
       8:	0f c3       	rjmp	.+1566   	; 0x628 <__bad_interrupt>
       a:	00 00       	nop
       c:	0d c3       	rjmp	.+1562   	; 0x628 <__bad_interrupt>
       e:	00 00       	nop
      10:	0b c3       	rjmp	.+1558   	; 0x628 <__bad_interrupt>
      12:	00 00       	nop
      14:	09 c3       	rjmp	.+1554   	; 0x628 <__bad_interrupt>
      16:	00 00       	nop
      18:	07 c3       	rjmp	.+1550   	; 0x628 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b4 c6       	rjmp	.+3432   	; 0xd86 <__vector_7>
      1e:	00 00       	nop
      20:	03 c3       	rjmp	.+1542   	; 0x628 <__bad_interrupt>
      22:	00 00       	nop
      24:	01 c3       	rjmp	.+1538   	; 0x628 <__bad_interrupt>
      26:	00 00       	nop
      28:	ff c2       	rjmp	.+1534   	; 0x628 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fd c2       	rjmp	.+1530   	; 0x628 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fb c2       	rjmp	.+1526   	; 0x628 <__bad_interrupt>
      32:	00 00       	nop
      34:	f9 c2       	rjmp	.+1522   	; 0x628 <__bad_interrupt>
      36:	00 00       	nop
      38:	6d c3       	rjmp	.+1754   	; 0x714 <__vector_14>
      3a:	00 00       	nop
      3c:	f5 c2       	rjmp	.+1514   	; 0x628 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f3 c2       	rjmp	.+1510   	; 0x628 <__bad_interrupt>
      42:	00 00       	nop
      44:	f1 c2       	rjmp	.+1506   	; 0x628 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 b6 0b 	jmp	0x176c	; 0x176c <__vector_18>
      4c:	0c 94 eb 0b 	jmp	0x17d6	; 0x17d6 <__vector_19>
      50:	eb c2       	rjmp	.+1494   	; 0x628 <__bad_interrupt>
      52:	00 00       	nop
      54:	e9 c2       	rjmp	.+1490   	; 0x628 <__bad_interrupt>
      56:	00 00       	nop
      58:	e7 c2       	rjmp	.+1486   	; 0x628 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e5 c2       	rjmp	.+1482   	; 0x628 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e3 c2       	rjmp	.+1478   	; 0x628 <__bad_interrupt>
      62:	00 00       	nop
      64:	e1 c2       	rjmp	.+1474   	; 0x628 <__bad_interrupt>
	...

00000068 <_ZL22sound_pattern_doorbell>:
      68:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      78:	b0 04 00 00 f4 01 00 00 00 00 00 00 e8 03 00 00     ................
      88:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      98:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000000a8 <_ZL19sound_pattern_phone>:
      a8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      b8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      c8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      d8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      e8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      f8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     108:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     118:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     128:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     138:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     148:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     158:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     168:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     178:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     188:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     198:	00 00 00 00 e8 03 00 00 e8 03 00 00 28 00 00 00     ............(...
     1a8:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1b8:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1c8:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1d8:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1e8:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1f8:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     208:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     218:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     228:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     238:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     248:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     258:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     268:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     278:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     288:	ee 02 00 00 28 00 00 00 00 00 00 00 e8 03 00 00     ....(...........
     298:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2a8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2b8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2c8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2d8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2e8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2f8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     308:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     318:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     328:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     338:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     348:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     358:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     368:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     378:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     388:	00 00 00 00 e8 03 00 00 00 00 00 00 00 00 00 00     ................
	...

000003a8 <_ZL18sound_pattern_fire>:
     3a8:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3b8:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3c8:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3d8:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3e8:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3f8:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     408:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     418:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...

00000428 <_ZL18sound_pattern_help>:
     428:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     438:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     448:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     458:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     468:	00 00 00 00 e8 03 00 00 1c 07 00 00 c8 00 00 00     ................
     478:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     488:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     498:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     4a8:	a5 05 00 00 c8 00 00 00 00 00 00 00 e8 03 00 00     ................
	...

000004c0 <_ZL13flash_pattern>:
     4c0:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4d0:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4e0:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4f0:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     500:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     510:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     520:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     530:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     540:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     550:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     560:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     570:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     580:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     590:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     5a0:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     5b0:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...

000005c0 <_ZL11icon_colors>:
     5c0:	3d f5 00 00 b8 f5 ff 00 00 ff ff 00                 =...........

000005cc <_ZL16icon_led_numbers>:
     5cc:	0c 0b 0a 0f 0e 0d 07 08 09 02 01 00                 ............

000005d8 <__ctors_start>:
     5d8:	36 07       	cpc	r19, r22

000005da <__ctors_end>:
     5da:	11 24       	eor	r1, r1
     5dc:	1f be       	out	0x3f, r1	; 63
     5de:	cf ef       	ldi	r28, 0xFF	; 255
     5e0:	d8 e0       	ldi	r29, 0x08	; 8
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	cd bf       	out	0x3d, r28	; 61

000005e6 <__do_copy_data>:
     5e6:	11 e0       	ldi	r17, 0x01	; 1
     5e8:	a0 e0       	ldi	r26, 0x00	; 0
     5ea:	b1 e0       	ldi	r27, 0x01	; 1
     5ec:	e4 e0       	ldi	r30, 0x04	; 4
     5ee:	f9 e1       	ldi	r31, 0x19	; 25
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <__do_copy_data+0x10>
     5f2:	05 90       	lpm	r0, Z+
     5f4:	0d 92       	st	X+, r0
     5f6:	aa 33       	cpi	r26, 0x3A	; 58
     5f8:	b1 07       	cpc	r27, r17
     5fa:	d9 f7       	brne	.-10     	; 0x5f2 <__do_copy_data+0xc>

000005fc <__do_clear_bss>:
     5fc:	22 e0       	ldi	r18, 0x02	; 2
     5fe:	aa e3       	ldi	r26, 0x3A	; 58
     600:	b1 e0       	ldi	r27, 0x01	; 1
     602:	01 c0       	rjmp	.+2      	; 0x606 <.do_clear_bss_start>

00000604 <.do_clear_bss_loop>:
     604:	1d 92       	st	X+, r1

00000606 <.do_clear_bss_start>:
     606:	aa 3a       	cpi	r26, 0xAA	; 170
     608:	b2 07       	cpc	r27, r18
     60a:	e1 f7       	brne	.-8      	; 0x604 <.do_clear_bss_loop>

0000060c <__do_global_ctors>:
     60c:	15 e0       	ldi	r17, 0x05	; 5
     60e:	ca ed       	ldi	r28, 0xDA	; 218
     610:	d5 e0       	ldi	r29, 0x05	; 5
     612:	04 c0       	rjmp	.+8      	; 0x61c <__do_global_ctors+0x10>
     614:	22 97       	sbiw	r28, 0x02	; 2
     616:	fe 01       	movw	r30, r28
     618:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <__tablejump__>
     61c:	c8 3d       	cpi	r28, 0xD8	; 216
     61e:	d1 07       	cpc	r29, r17
     620:	c9 f7       	brne	.-14     	; 0x614 <__do_global_ctors+0x8>
     622:	d5 d0       	rcall	.+426    	; 0x7ce <main>
     624:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <_exit>

00000628 <__bad_interrupt>:
     628:	eb cc       	rjmp	.-1578   	; 0x0 <__vectors>

0000062a <I2C_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
     62a:	88 e4       	ldi	r24, 0x48	; 72
     62c:	80 93 b8 00 	sts	0x00B8, r24
     630:	08 95       	ret

00000632 <I2C_start>:
     632:	ec eb       	ldi	r30, 0xBC	; 188
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	10 82       	st	Z, r1
     638:	94 ea       	ldi	r25, 0xA4	; 164
     63a:	90 83       	st	Z, r25
     63c:	90 81       	ld	r25, Z
     63e:	99 23       	and	r25, r25
     640:	ec f7       	brge	.-6      	; 0x63c <I2C_start+0xa>
     642:	90 91 b9 00 	lds	r25, 0x00B9
     646:	98 7f       	andi	r25, 0xF8	; 248
     648:	98 30       	cpi	r25, 0x08	; 8
     64a:	a1 f4       	brne	.+40     	; 0x674 <I2C_start+0x42>
     64c:	80 93 bb 00 	sts	0x00BB, r24
     650:	84 e8       	ldi	r24, 0x84	; 132
     652:	80 93 bc 00 	sts	0x00BC, r24
     656:	ec eb       	ldi	r30, 0xBC	; 188
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	88 23       	and	r24, r24
     65e:	ec f7       	brge	.-6      	; 0x65a <I2C_start+0x28>
     660:	90 91 b9 00 	lds	r25, 0x00B9
     664:	98 7f       	andi	r25, 0xF8	; 248
     666:	98 31       	cpi	r25, 0x18	; 24
     668:	39 f0       	breq	.+14     	; 0x678 <I2C_start+0x46>
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 34       	cpi	r25, 0x40	; 64
     66e:	29 f4       	brne	.+10     	; 0x67a <I2C_start+0x48>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	08 95       	ret
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	08 95       	ret
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	08 95       	ret

0000067c <I2C_write>:
     67c:	80 93 bb 00 	sts	0x00BB, r24
     680:	84 e8       	ldi	r24, 0x84	; 132
     682:	80 93 bc 00 	sts	0x00BC, r24
     686:	ec eb       	ldi	r30, 0xBC	; 188
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	88 23       	and	r24, r24
     68e:	ec f7       	brge	.-6      	; 0x68a <I2C_write+0xe>
     690:	90 91 b9 00 	lds	r25, 0x00B9
     694:	98 7f       	andi	r25, 0xF8	; 248
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	98 32       	cpi	r25, 0x28	; 40
     69a:	09 f4       	brne	.+2      	; 0x69e <I2C_write+0x22>
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	08 95       	ret

000006a0 <I2C_read_ack>:
     6a0:	84 ec       	ldi	r24, 0xC4	; 196
     6a2:	80 93 bc 00 	sts	0x00BC, r24
     6a6:	ec eb       	ldi	r30, 0xBC	; 188
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	88 23       	and	r24, r24
     6ae:	ec f7       	brge	.-6      	; 0x6aa <I2C_read_ack+0xa>
     6b0:	80 91 bb 00 	lds	r24, 0x00BB
     6b4:	08 95       	ret

000006b6 <I2C_stop>:

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     6b6:	84 e9       	ldi	r24, 0x94	; 148
     6b8:	80 93 bc 00 	sts	0x00BC, r24
     6bc:	08 95       	ret

000006be <log_s>:
 *
 * @param s The specified string
 */
void log_s(const char *s) {
#ifdef LOG_AVAILABLE
    uart0_puts(s);
     6be:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <uart0_puts>
     6c2:	08 95       	ret

000006c4 <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	84 bd       	out	0x24, r24	; 36
     6c8:	93 e0       	ldi	r25, 0x03	; 3
     6ca:	95 bd       	out	0x25, r25	; 37
     6cc:	80 93 6e 00 	sts	0x006E, r24
     6d0:	8a ef       	ldi	r24, 0xFA	; 250
     6d2:	87 bd       	out	0x27, r24	; 39
     6d4:	08 95       	ret

000006d6 <millis_get>:
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	8f b7       	in	r24, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	00 91 3a 01 	lds	r16, 0x013A
     6e2:	10 91 3b 01 	lds	r17, 0x013B
     6e6:	20 91 3c 01 	lds	r18, 0x013C
     6ea:	30 91 3d 01 	lds	r19, 0x013D
     6ee:	8f bf       	out	0x3f, r24	; 63
     6f0:	60 2f       	mov	r22, r16
     6f2:	71 2f       	mov	r23, r17
     6f4:	82 2f       	mov	r24, r18
     6f6:	93 2f       	mov	r25, r19
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <millis_pause>:
     6fe:	ee e6       	ldi	r30, 0x6E	; 110
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 81       	ld	r24, Z
     704:	8d 7f       	andi	r24, 0xFD	; 253
     706:	80 83       	st	Z, r24
     708:	e4 e6       	ldi	r30, 0x64	; 100
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	80 62       	ori	r24, 0x20	; 32
     710:	80 83       	st	Z, r24
     712:	08 95       	ret

00000714 <__vector_14>:

ISR(ISR_VECT)
{
     714:	1f 92       	push	r1
     716:	0f 92       	push	r0
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	0f 92       	push	r0
     71c:	11 24       	eor	r1, r1
     71e:	8f 93       	push	r24
     720:	9f 93       	push	r25
     722:	af 93       	push	r26
     724:	bf 93       	push	r27
	++milliseconds;
     726:	80 91 3a 01 	lds	r24, 0x013A
     72a:	90 91 3b 01 	lds	r25, 0x013B
     72e:	a0 91 3c 01 	lds	r26, 0x013C
     732:	b0 91 3d 01 	lds	r27, 0x013D
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	a1 1d       	adc	r26, r1
     73a:	b1 1d       	adc	r27, r1
     73c:	80 93 3a 01 	sts	0x013A, r24
     740:	90 93 3b 01 	sts	0x013B, r25
     744:	a0 93 3c 01 	sts	0x013C, r26
     748:	b0 93 3d 01 	sts	0x013D, r27
}
     74c:	bf 91       	pop	r27
     74e:	af 91       	pop	r26
     750:	9f 91       	pop	r25
     752:	8f 91       	pop	r24
     754:	0f 90       	pop	r0
     756:	0f be       	out	0x3f, r0	; 63
     758:	0f 90       	pop	r0
     75a:	1f 90       	pop	r1
     75c:	18 95       	reti

0000075e <_Z11timer2_initv>:

// Turn on timer and resume interrupts
void timer2_resume()
{
	power_timer2_enable();
	TIMSK2 |= _BV(OCIE2A);
     75e:	82 e0       	ldi	r24, 0x02	; 2
     760:	80 93 b0 00 	sts	0x00B0, r24
     764:	85 e0       	ldi	r24, 0x05	; 5
     766:	80 93 b1 00 	sts	0x00B1, r24
     76a:	8d e7       	ldi	r24, 0x7D	; 125
     76c:	80 93 b3 00 	sts	0x00B3, r24
     770:	08 95       	ret

00000772 <_Z12timer2_pausev>:
}

// Pause interrupts and turn off timer to save power
void timer2_pause()
{
	TIMSK2 &= ~_BV(OCIE2A);
     772:	e0 e7       	ldi	r30, 0x70	; 112
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	8d 7f       	andi	r24, 0xFD	; 253
     77a:	80 83       	st	Z, r24
	power_timer2_disable();
     77c:	e4 e6       	ldi	r30, 0x64	; 100
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	80 81       	ld	r24, Z
     782:	80 64       	ori	r24, 0x40	; 64
     784:	80 83       	st	Z, r24
     786:	08 95       	ret

00000788 <__vector_1>:
#define NODE_ID				2
#define NETWORKID			14  //the same on all nodes that talk to each other
RFM69 radio;


	ISR(INT0_vect) {
     788:	1f 92       	push	r1
     78a:	0f 92       	push	r0
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	0f 92       	push	r0
     790:	11 24       	eor	r1, r1
     792:	2f 93       	push	r18
     794:	3f 93       	push	r19
     796:	4f 93       	push	r20
     798:	5f 93       	push	r21
     79a:	6f 93       	push	r22
     79c:	7f 93       	push	r23
     79e:	8f 93       	push	r24
     7a0:	9f 93       	push	r25
     7a2:	af 93       	push	r26
     7a4:	bf 93       	push	r27
     7a6:	ef 93       	push	r30
     7a8:	ff 93       	push	r31
		RFM69::isr0();
     7aa:	eb d3       	rcall	.+2006   	; 0xf82 <_ZN5RFM694isr0Ev>
	}
     7ac:	ff 91       	pop	r31
     7ae:	ef 91       	pop	r30
     7b0:	bf 91       	pop	r27
     7b2:	af 91       	pop	r26
     7b4:	9f 91       	pop	r25
     7b6:	8f 91       	pop	r24
     7b8:	7f 91       	pop	r23
     7ba:	6f 91       	pop	r22
     7bc:	5f 91       	pop	r21
     7be:	4f 91       	pop	r20
     7c0:	3f 91       	pop	r19
     7c2:	2f 91       	pop	r18
     7c4:	0f 90       	pop	r0
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	0f 90       	pop	r0
     7ca:	1f 90       	pop	r1
     7cc:	18 95       	reti

000007ce <main>:


int main() {	
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <main+0x6>
     7d4:	1f 92       	push	r1
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
// disable ADC for less power 
	ADCSRA &= ~_BV(ADEN); // ADC off 
     7da:	ea e7       	ldi	r30, 0x7A	; 122
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 81       	ld	r24, Z
     7e0:	8f 77       	andi	r24, 0x7F	; 127
     7e2:	80 83       	st	Z, r24
	sei();
     7e4:	78 94       	sei
	

			/* Initialize MILLIS */
	        millis_init();
     7e6:	6e df       	rcall	.-292    	; 0x6c4 <millis_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7e8:	2f ef       	ldi	r18, 0xFF	; 255
     7ea:	83 ed       	ldi	r24, 0xD3	; 211
     7ec:	90 e3       	ldi	r25, 0x30	; 48
     7ee:	21 50       	subi	r18, 0x01	; 1
     7f0:	80 40       	sbci	r24, 0x00	; 0
     7f2:	90 40       	sbci	r25, 0x00	; 0
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <main+0x20>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <main+0x2a>
     7f8:	00 00       	nop
			_delay_ms(1000);
			/* Initialize MILLIS */

			/* Initialize TONE */						
			tone_init();	
     7fa:	3f d7       	rcall	.+3710   	; 0x167a <tone_init>
			noTone();	
     7fc:	40 d7       	rcall	.+3712   	; 0x167e <noTone>
			/* Initialize TONE */						
						
						
			/* Initialize TIMER 2 */
			timer2_init();
     7fe:	af df       	rcall	.-162    	; 0x75e <_Z11timer2_initv>
			timer2_pause();
     800:	b8 df       	rcall	.-144    	; 0x772 <_Z12timer2_pausev>
			/* Initialize TIMER 2 */			
			
			
			/* Initialize UART */
			#ifdef DEBUG_SERIAL
			uart_init( ((F_CPU)/((UART_BAUD_RATE)*16l)-1)) ;
     802:	80 e1       	ldi	r24, 0x10	; 16
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 17 0c 	call	0x182e	; 0x182e <uart0_init>
     80a:	2f ef       	ldi	r18, 0xFF	; 255
     80c:	83 ed       	ldi	r24, 0xD3	; 211
     80e:	90 e3       	ldi	r25, 0x30	; 48
     810:	21 50       	subi	r18, 0x01	; 1
     812:	80 40       	sbci	r24, 0x00	; 0
     814:	90 40       	sbci	r25, 0x00	; 0
     816:	e1 f7       	brne	.-8      	; 0x810 <main+0x42>
     818:	00 c0       	rjmp	.+0      	; 0x81a <main+0x4c>
     81a:	00 00       	nop
			_delay_ms(1000);
			log_s("UART OK\r");
     81c:	8a e0       	ldi	r24, 0x0A	; 10
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	4e df       	rcall	.-356    	; 0x6be <log_s>
     822:	2f ef       	ldi	r18, 0xFF	; 255
     824:	83 ed       	ldi	r24, 0xD3	; 211
     826:	90 e3       	ldi	r25, 0x30	; 48
     828:	21 50       	subi	r18, 0x01	; 1
     82a:	80 40       	sbci	r24, 0x00	; 0
     82c:	90 40       	sbci	r25, 0x00	; 0
     82e:	e1 f7       	brne	.-8      	; 0x828 <main+0x5a>
     830:	00 c0       	rjmp	.+0      	; 0x832 <main+0x64>
     832:	00 00       	nop
			power_usart0_disable();
			#endif
			/* Initialize UART */
		
			/* Initialize I2C */
			I2C_init();	
     834:	fa de       	rcall	.-524    	; 0x62a <I2C_init>
			/* Initialize I2C */
			
			/* Initialize PCA9634 */
			pca9635_init();
     836:	30 d3       	rcall	.+1632   	; 0xe98 <pca9635_init>
     838:	13 e0       	ldi	r17, 0x03	; 3
			
			// blink 3 times fast
			for (byte i = 0; i <= 2; ++i){
			pca9635_set_all_led_pwm(255);
     83a:	8f ef       	ldi	r24, 0xFF	; 255
     83c:	73 d3       	rcall	.+1766   	; 0xf24 <pca9635_set_all_led_pwm>
     83e:	2f ef       	ldi	r18, 0xFF	; 255
     840:	81 ee       	ldi	r24, 0xE1	; 225
     842:	94 e0       	ldi	r25, 0x04	; 4
     844:	21 50       	subi	r18, 0x01	; 1
     846:	80 40       	sbci	r24, 0x00	; 0
     848:	90 40       	sbci	r25, 0x00	; 0
     84a:	e1 f7       	brne	.-8      	; 0x844 <main+0x76>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <main+0x80>
     84e:	00 00       	nop
			_delay_ms(100);
			pca9635_set_all_led_pwm(0);
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	68 d3       	rcall	.+1744   	; 0xf24 <pca9635_set_all_led_pwm>
     854:	2f ef       	ldi	r18, 0xFF	; 255
     856:	81 ee       	ldi	r24, 0xE1	; 225
     858:	94 e0       	ldi	r25, 0x04	; 4
     85a:	21 50       	subi	r18, 0x01	; 1
     85c:	80 40       	sbci	r24, 0x00	; 0
     85e:	90 40       	sbci	r25, 0x00	; 0
     860:	e1 f7       	brne	.-8      	; 0x85a <main+0x8c>
     862:	00 c0       	rjmp	.+0      	; 0x864 <main+0x96>
     864:	00 00       	nop
     866:	11 50       	subi	r17, 0x01	; 1
			
			/* Initialize PCA9634 */
			pca9635_init();
			
			// blink 3 times fast
			for (byte i = 0; i <= 2; ++i){
     868:	41 f7       	brne	.-48     	; 0x83a <main+0x6c>
			
			/* Initialize PCA9634 */
			
		
			// node id, rfband, group id
			radio.initialize(RF69_868MHZ, NODE_ID, NETWORKID); // node id, rfband, group id
     86a:	2e e0       	ldi	r18, 0x0E	; 14
     86c:	42 e0       	ldi	r20, 0x02	; 2
     86e:	66 e5       	ldi	r22, 0x56	; 86
     870:	8e e3       	ldi	r24, 0x3E	; 62
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	f0 d4       	rcall	.+2528   	; 0x1256 <_ZN5RFM6910initializeEhhh>
			
			// see http://tools.jeelabs.org/rfm12b
		//	radio.SetLowDuty(500);

	#ifdef DEBUG_SERIAL
	log_s("RF OK!");
     876:	83 e1       	ldi	r24, 0x13	; 19
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	21 df       	rcall	.-446    	; 0x6be <log_s>
     87c:	2f ef       	ldi	r18, 0xFF	; 255
     87e:	83 ed       	ldi	r24, 0xD3	; 211
     880:	90 e3       	ldi	r25, 0x30	; 48
     882:	21 50       	subi	r18, 0x01	; 1
     884:	80 40       	sbci	r24, 0x00	; 0
     886:	90 40       	sbci	r25, 0x00	; 0
     888:	e1 f7       	brne	.-8      	; 0x882 <main+0xb4>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <main+0xbe>
     88c:	00 00       	nop
	_delay_ms(1000);
	#endif
		
	
		uint8_t payload[3] = {0x01, 0x02, 0x03}; // 10 DUMMY BYTES
     88e:	11 e0       	ldi	r17, 0x01	; 1
     890:	19 83       	std	Y+1, r17	; 0x01
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	8a 83       	std	Y+2, r24	; 0x02
     896:	83 e0       	ldi	r24, 0x03	; 3
     898:	8b 83       	std	Y+3, r24	; 0x03
     89a:	2f ef       	ldi	r18, 0xFF	; 255
     89c:	83 ed       	ldi	r24, 0xD3	; 211
     89e:	90 e3       	ldi	r25, 0x30	; 48
     8a0:	21 50       	subi	r18, 0x01	; 1
     8a2:	80 40       	sbci	r24, 0x00	; 0
     8a4:	90 40       	sbci	r25, 0x00	; 0
     8a6:	e1 f7       	brne	.-8      	; 0x8a0 <main+0xd2>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <main+0xdc>
     8aa:	00 00       	nop
	//	radio.sendACK();
		
		
			// initialised
			
				pca9635_set_led_pwm(1, 255);
     8ac:	6f ef       	ldi	r22, 0xFF	; 255
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	28 d3       	rcall	.+1616   	; 0xf02 <pca9635_set_led_pwm>
     8b2:	2f ef       	ldi	r18, 0xFF	; 255
     8b4:	87 e8       	ldi	r24, 0x87	; 135
     8b6:	93 e1       	ldi	r25, 0x13	; 19
     8b8:	21 50       	subi	r18, 0x01	; 1
     8ba:	80 40       	sbci	r24, 0x00	; 0
     8bc:	90 40       	sbci	r25, 0x00	; 0
     8be:	e1 f7       	brne	.-8      	; 0x8b8 <main+0xea>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <main+0xf4>
     8c2:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(8, 255);
     8c4:	6f ef       	ldi	r22, 0xFF	; 255
     8c6:	88 e0       	ldi	r24, 0x08	; 8
     8c8:	1c d3       	rcall	.+1592   	; 0xf02 <pca9635_set_led_pwm>
     8ca:	2f ef       	ldi	r18, 0xFF	; 255
     8cc:	87 e8       	ldi	r24, 0x87	; 135
     8ce:	93 e1       	ldi	r25, 0x13	; 19
     8d0:	21 50       	subi	r18, 0x01	; 1
     8d2:	80 40       	sbci	r24, 0x00	; 0
     8d4:	90 40       	sbci	r25, 0x00	; 0
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <main+0x102>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <main+0x10c>
     8da:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(11, 255);
     8dc:	6f ef       	ldi	r22, 0xFF	; 255
     8de:	8b e0       	ldi	r24, 0x0B	; 11
     8e0:	10 d3       	rcall	.+1568   	; 0xf02 <pca9635_set_led_pwm>
     8e2:	2f ef       	ldi	r18, 0xFF	; 255
     8e4:	87 e8       	ldi	r24, 0x87	; 135
     8e6:	93 e1       	ldi	r25, 0x13	; 19
     8e8:	21 50       	subi	r18, 0x01	; 1
     8ea:	80 40       	sbci	r24, 0x00	; 0
     8ec:	90 40       	sbci	r25, 0x00	; 0
     8ee:	e1 f7       	brne	.-8      	; 0x8e8 <main+0x11a>
     8f0:	00 c0       	rjmp	.+0      	; 0x8f2 <main+0x124>
     8f2:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(14, 255);
     8f4:	6f ef       	ldi	r22, 0xFF	; 255
     8f6:	8e e0       	ldi	r24, 0x0E	; 14
     8f8:	04 d3       	rcall	.+1544   	; 0xf02 <pca9635_set_led_pwm>
     8fa:	2f ef       	ldi	r18, 0xFF	; 255
     8fc:	8f e0       	ldi	r24, 0x0F	; 15
     8fe:	97 e2       	ldi	r25, 0x27	; 39
     900:	21 50       	subi	r18, 0x01	; 1
     902:	80 40       	sbci	r24, 0x00	; 0
     904:	90 40       	sbci	r25, 0x00	; 0
     906:	e1 f7       	brne	.-8      	; 0x900 <__stack+0x1>
     908:	00 c0       	rjmp	.+0      	; 0x90a <__stack+0xb>
     90a:	00 00       	nop
				_delay_ms(800);
				pca9635_set_all_led_pwm(0);
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	0a d3       	rcall	.+1556   	; 0xf24 <pca9635_set_all_led_pwm>
				pca9635_set_sleep(1);
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	18 d3       	rcall	.+1584   	; 0xf44 <pca9635_set_sleep>
				
			deep_sleep_ok = 1; // put device in deep sleep after initializing
     914:	10 93 5c 01 	sts	0x015C, r17
			
			#ifdef DEBUG_SERIAL
				log_s("initialized!");
     918:	8a e1       	ldi	r24, 0x1A	; 26
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	d0 de       	rcall	.-608    	; 0x6be <log_s>
     91e:	2f ef       	ldi	r18, 0xFF	; 255
     920:	83 ed       	ldi	r24, 0xD3	; 211
     922:	90 e3       	ldi	r25, 0x30	; 48
     924:	21 50       	subi	r18, 0x01	; 1
     926:	80 40       	sbci	r24, 0x00	; 0
     928:	90 40       	sbci	r25, 0x00	; 0
     92a:	e1 f7       	brne	.-8      	; 0x924 <__stack+0x25>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <__stack+0x2f>
     92e:	00 00       	nop
				
				
				while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
					
					
					radio.send(3, payload, sizeof(payload), true);
     930:	01 e0       	ldi	r16, 0x01	; 1
     932:	23 e0       	ldi	r18, 0x03	; 3
     934:	ae 01       	movw	r20, r28
     936:	4f 5f       	subi	r20, 0xFF	; 255
     938:	5f 4f       	sbci	r21, 0xFF	; 255
     93a:	63 e0       	ldi	r22, 0x03	; 3
     93c:	8e e3       	ldi	r24, 0x3E	; 62
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	54 d6       	rcall	.+3240   	; 0x15ea <_ZN5RFM694sendEhPKvhb>
					
						log_s("SOK");
     942:	87 e2       	ldi	r24, 0x27	; 39
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	bb de       	rcall	.-650    	; 0x6be <log_s>
     948:	2f ef       	ldi	r18, 0xFF	; 255
     94a:	83 ed       	ldi	r24, 0xD3	; 211
     94c:	90 e3       	ldi	r25, 0x30	; 48
     94e:	21 50       	subi	r18, 0x01	; 1
     950:	80 40       	sbci	r24, 0x00	; 0
     952:	90 40       	sbci	r25, 0x00	; 0
     954:	e1 f7       	brne	.-8      	; 0x94e <__stack+0x4f>
     956:	00 c0       	rjmp	.+0      	; 0x958 <__stack+0x59>
     958:	00 00       	nop
     95a:	ea cf       	rjmp	.-44     	; 0x930 <__stack+0x31>

0000095c <_Z9isr_soundv>:
	}
						
}


	void isr_sound(){
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
		
			// Stop note if necessary 
			if(_sound_note_time != 0){ // sound already playing?		
     960:	80 91 51 01 	lds	r24, 0x0151
     964:	90 91 52 01 	lds	r25, 0x0152
     968:	a0 91 53 01 	lds	r26, 0x0153
     96c:	b0 91 54 01 	lds	r27, 0x0154
     970:	89 2b       	or	r24, r25
     972:	8a 2b       	or	r24, r26
     974:	8b 2b       	or	r24, r27
     976:	81 f0       	breq	.+32     	; 0x998 <_Z9isr_soundv+0x3c>
				if(millis_get() < _sound_note_time ){ // Do we need to stop the current note?
     978:	ae de       	rcall	.-676    	; 0x6d6 <millis_get>
     97a:	00 91 51 01 	lds	r16, 0x0151
     97e:	10 91 52 01 	lds	r17, 0x0152
     982:	20 91 53 01 	lds	r18, 0x0153
     986:	30 91 54 01 	lds	r19, 0x0154
     98a:	60 17       	cp	r22, r16
     98c:	71 07       	cpc	r23, r17
     98e:	82 07       	cpc	r24, r18
     990:	93 07       	cpc	r25, r19
     992:	08 f4       	brcc	.+2      	; 0x996 <_Z9isr_soundv+0x3a>
     994:	ef c0       	rjmp	.+478    	; 0xb74 <_Z9isr_soundv+0x218>
					return; // dont stop current note
					
				}else{
					noTone(); // stop current note
     996:	73 d6       	rcall	.+3302   	; 0x167e <noTone>
				}
	
			}
			
			// play next tone
			if(sound_current_alarm == 0 ){
     998:	80 91 56 01 	lds	r24, 0x0156
     99c:	81 11       	cpse	r24, r1
     99e:	2e c0       	rjmp	.+92     	; 0x9fc <_Z9isr_soundv+0xa0>
				tone(pgm_read_word(&(sound_pattern_doorbell[sound_current_step].frequency)), sound_alarm_volume); // freq, volume
     9a0:	e0 91 55 01 	lds	r30, 0x0155
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	ee 0f       	add	r30, r30
     9a8:	ff 1f       	adc	r31, r31
     9aa:	ee 0f       	add	r30, r30
     9ac:	ff 1f       	adc	r31, r31
     9ae:	ee 0f       	add	r30, r30
     9b0:	ff 1f       	adc	r31, r31
     9b2:	e8 59       	subi	r30, 0x98	; 152
     9b4:	ff 4f       	sbci	r31, 0xFF	; 255
     9b6:	65 91       	lpm	r22, Z+
     9b8:	74 91       	lpm	r23, Z
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	41 e0       	ldi	r20, 0x01	; 1
     9c0:	6b d6       	rcall	.+3286   	; 0x1698 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_doorbell[sound_current_step].time)));
     9c2:	89 de       	rcall	.-750    	; 0x6d6 <millis_get>
     9c4:	e0 91 55 01 	lds	r30, 0x0155
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	ee 0f       	add	r30, r30
     9cc:	ff 1f       	adc	r31, r31
     9ce:	ee 0f       	add	r30, r30
     9d0:	ff 1f       	adc	r31, r31
     9d2:	ee 0f       	add	r30, r30
     9d4:	ff 1f       	adc	r31, r31
     9d6:	e4 59       	subi	r30, 0x94	; 148
     9d8:	ff 4f       	sbci	r31, 0xFF	; 255
     9da:	25 91       	lpm	r18, Z+
     9dc:	34 91       	lpm	r19, Z
     9de:	dc 01       	movw	r26, r24
     9e0:	cb 01       	movw	r24, r22
     9e2:	82 0f       	add	r24, r18
     9e4:	93 1f       	adc	r25, r19
     9e6:	a1 1d       	adc	r26, r1
     9e8:	b1 1d       	adc	r27, r1
     9ea:	80 93 51 01 	sts	0x0151, r24
     9ee:	90 93 52 01 	sts	0x0152, r25
     9f2:	a0 93 53 01 	sts	0x0153, r26
     9f6:	b0 93 54 01 	sts	0x0154, r27
     9fa:	8f c0       	rjmp	.+286    	; 0xb1a <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 1 ){
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	71 f5       	brne	.+92     	; 0xa5c <_Z9isr_soundv+0x100>
				tone(pgm_read_word(&(sound_pattern_phone[sound_current_step].frequency)), sound_alarm_volume);
     a00:	e0 91 55 01 	lds	r30, 0x0155
     a04:	f0 e0       	ldi	r31, 0x00	; 0
     a06:	ee 0f       	add	r30, r30
     a08:	ff 1f       	adc	r31, r31
     a0a:	ee 0f       	add	r30, r30
     a0c:	ff 1f       	adc	r31, r31
     a0e:	ee 0f       	add	r30, r30
     a10:	ff 1f       	adc	r31, r31
     a12:	e8 55       	subi	r30, 0x58	; 88
     a14:	ff 4f       	sbci	r31, 0xFF	; 255
     a16:	65 91       	lpm	r22, Z+
     a18:	74 91       	lpm	r23, Z
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	41 e0       	ldi	r20, 0x01	; 1
     a20:	3b d6       	rcall	.+3190   	; 0x1698 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_phone[sound_current_step].time)));
     a22:	59 de       	rcall	.-846    	; 0x6d6 <millis_get>
     a24:	e0 91 55 01 	lds	r30, 0x0155
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	ee 0f       	add	r30, r30
     a2c:	ff 1f       	adc	r31, r31
     a2e:	ee 0f       	add	r30, r30
     a30:	ff 1f       	adc	r31, r31
     a32:	ee 0f       	add	r30, r30
     a34:	ff 1f       	adc	r31, r31
     a36:	e4 55       	subi	r30, 0x54	; 84
     a38:	ff 4f       	sbci	r31, 0xFF	; 255
     a3a:	25 91       	lpm	r18, Z+
     a3c:	34 91       	lpm	r19, Z
     a3e:	dc 01       	movw	r26, r24
     a40:	cb 01       	movw	r24, r22
     a42:	82 0f       	add	r24, r18
     a44:	93 1f       	adc	r25, r19
     a46:	a1 1d       	adc	r26, r1
     a48:	b1 1d       	adc	r27, r1
     a4a:	80 93 51 01 	sts	0x0151, r24
     a4e:	90 93 52 01 	sts	0x0152, r25
     a52:	a0 93 53 01 	sts	0x0153, r26
     a56:	b0 93 54 01 	sts	0x0154, r27
     a5a:	5f c0       	rjmp	.+190    	; 0xb1a <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 2 ){
     a5c:	82 30       	cpi	r24, 0x02	; 2
     a5e:	71 f5       	brne	.+92     	; 0xabc <_Z9isr_soundv+0x160>
				tone(pgm_read_word(&(sound_pattern_fire[sound_current_step].frequency)), sound_alarm_volume);
     a60:	e0 91 55 01 	lds	r30, 0x0155
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	ee 0f       	add	r30, r30
     a68:	ff 1f       	adc	r31, r31
     a6a:	ee 0f       	add	r30, r30
     a6c:	ff 1f       	adc	r31, r31
     a6e:	ee 0f       	add	r30, r30
     a70:	ff 1f       	adc	r31, r31
     a72:	e8 55       	subi	r30, 0x58	; 88
     a74:	fc 4f       	sbci	r31, 0xFC	; 252
     a76:	65 91       	lpm	r22, Z+
     a78:	74 91       	lpm	r23, Z
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	41 e0       	ldi	r20, 0x01	; 1
     a80:	0b d6       	rcall	.+3094   	; 0x1698 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_fire[sound_current_step].time)));
     a82:	29 de       	rcall	.-942    	; 0x6d6 <millis_get>
     a84:	e0 91 55 01 	lds	r30, 0x0155
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	ee 0f       	add	r30, r30
     a8c:	ff 1f       	adc	r31, r31
     a8e:	ee 0f       	add	r30, r30
     a90:	ff 1f       	adc	r31, r31
     a92:	ee 0f       	add	r30, r30
     a94:	ff 1f       	adc	r31, r31
     a96:	e4 55       	subi	r30, 0x54	; 84
     a98:	fc 4f       	sbci	r31, 0xFC	; 252
     a9a:	25 91       	lpm	r18, Z+
     a9c:	34 91       	lpm	r19, Z
     a9e:	dc 01       	movw	r26, r24
     aa0:	cb 01       	movw	r24, r22
     aa2:	82 0f       	add	r24, r18
     aa4:	93 1f       	adc	r25, r19
     aa6:	a1 1d       	adc	r26, r1
     aa8:	b1 1d       	adc	r27, r1
     aaa:	80 93 51 01 	sts	0x0151, r24
     aae:	90 93 52 01 	sts	0x0152, r25
     ab2:	a0 93 53 01 	sts	0x0153, r26
     ab6:	b0 93 54 01 	sts	0x0154, r27
     aba:	2f c0       	rjmp	.+94     	; 0xb1a <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 3 ){
     abc:	83 30       	cpi	r24, 0x03	; 3
     abe:	69 f5       	brne	.+90     	; 0xb1a <_Z9isr_soundv+0x1be>
				tone(pgm_read_word(&(sound_pattern_help[sound_current_step].frequency)),sound_alarm_volume);
     ac0:	e0 91 55 01 	lds	r30, 0x0155
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	ee 0f       	add	r30, r30
     ac8:	ff 1f       	adc	r31, r31
     aca:	ee 0f       	add	r30, r30
     acc:	ff 1f       	adc	r31, r31
     ace:	ee 0f       	add	r30, r30
     ad0:	ff 1f       	adc	r31, r31
     ad2:	e8 5d       	subi	r30, 0xD8	; 216
     ad4:	fb 4f       	sbci	r31, 0xFB	; 251
     ad6:	65 91       	lpm	r22, Z+
     ad8:	74 91       	lpm	r23, Z
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	41 e0       	ldi	r20, 0x01	; 1
     ae0:	db d5       	rcall	.+2998   	; 0x1698 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_help[sound_current_step].time)));
     ae2:	f9 dd       	rcall	.-1038   	; 0x6d6 <millis_get>
     ae4:	e0 91 55 01 	lds	r30, 0x0155
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	ee 0f       	add	r30, r30
     aec:	ff 1f       	adc	r31, r31
     aee:	ee 0f       	add	r30, r30
     af0:	ff 1f       	adc	r31, r31
     af2:	ee 0f       	add	r30, r30
     af4:	ff 1f       	adc	r31, r31
     af6:	e4 5d       	subi	r30, 0xD4	; 212
     af8:	fb 4f       	sbci	r31, 0xFB	; 251
     afa:	25 91       	lpm	r18, Z+
     afc:	34 91       	lpm	r19, Z
     afe:	dc 01       	movw	r26, r24
     b00:	cb 01       	movw	r24, r22
     b02:	82 0f       	add	r24, r18
     b04:	93 1f       	adc	r25, r19
     b06:	a1 1d       	adc	r26, r1
     b08:	b1 1d       	adc	r27, r1
     b0a:	80 93 51 01 	sts	0x0151, r24
     b0e:	90 93 52 01 	sts	0x0152, r25
     b12:	a0 93 53 01 	sts	0x0153, r26
     b16:	b0 93 54 01 	sts	0x0154, r27
			}
			
		//_sound_note_time = millis_get() + 1000;
			
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
     b1a:	50 91 55 01 	lds	r21, 0x0155
     b1e:	40 91 56 01 	lds	r20, 0x0156
     b22:	25 2f       	mov	r18, r21
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	e4 2f       	mov	r30, r20
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	e5 5d       	subi	r30, 0xD5	; 213
     b2c:	fe 4f       	sbci	r31, 0xFE	; 254
     b2e:	80 81       	ld	r24, Z
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	01 97       	sbiw	r24, 0x01	; 1
     b34:	28 17       	cp	r18, r24
     b36:	39 07       	cpc	r19, r25
     b38:	d4 f0       	brlt	.+52     	; 0xb6e <_Z9isr_soundv+0x212>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     b3a:	20 91 5b 01 	lds	r18, 0x015B
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     b3e:	92 2f       	mov	r25, r18
     b40:	9f 70       	andi	r25, 0x0F	; 15
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
     b44:	4f 5f       	subi	r20, 0xFF	; 255
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     b46:	44 30       	cpi	r20, 0x04	; 4
     b48:	09 f4       	brne	.+2      	; 0xb4c <_Z9isr_soundv+0x1f0>
     b4a:	43 2f       	mov	r20, r19
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     b4c:	e4 2f       	mov	r30, r20
     b4e:	f0 e0       	ldi	r31, 0x00	; 0
     b50:	e1 5d       	subi	r30, 0xD1	; 209
     b52:	fe 4f       	sbci	r31, 0xFE	; 254
     b54:	80 81       	ld	r24, Z
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     b56:	91 11       	cpse	r25, r1
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <_Z9isr_soundv+0x204>
     b5a:	40 93 56 01 	sts	0x0156, r20
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <_Z9isr_soundv+0x20c>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     b60:	82 23       	and	r24, r18
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
     b62:	81 f3       	breq	.-32     	; 0xb44 <_Z9isr_soundv+0x1e8>
     b64:	40 93 56 01 	sts	0x0156, r20
						done = 1; // in case there is no active alarm anymore, just breakout while
					}

				} // while
				
				sound_current_step = 0; // reset sound_current_step to zero to start the next sound	
     b68:	10 92 55 01 	sts	0x0155, r1
     b6c:	03 c0       	rjmp	.+6      	; 0xb74 <_Z9isr_soundv+0x218>
				
			}else{
				// set sound_current_step plus one
				sound_current_step++;
     b6e:	5f 5f       	subi	r21, 0xFF	; 255
     b70:	50 93 55 01 	sts	0x0155, r21
			}
	
				
		} //void isr_sound()
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret

00000b7a <_Z15isr_light_flashv>:
		
	void isr_light_flash(){
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
			
		// Do we need to go to the next flash?
		if(_flash_time != 0){ // is there already a flash ?
     b82:	80 91 4c 01 	lds	r24, 0x014C
     b86:	90 91 4d 01 	lds	r25, 0x014D
     b8a:	a0 91 4e 01 	lds	r26, 0x014E
     b8e:	b0 91 4f 01 	lds	r27, 0x014F
     b92:	89 2b       	or	r24, r25
     b94:	8a 2b       	or	r24, r26
     b96:	8b 2b       	or	r24, r27
     b98:	09 f4       	brne	.+2      	; 0xb9c <_Z15isr_light_flashv+0x22>
     b9a:	48 c0       	rjmp	.+144    	; 0xc2c <_Z15isr_light_flashv+0xb2>
			if(millis_get() < _flash_time ){ // Do we need to stop the current note?
     b9c:	9c dd       	rcall	.-1224   	; 0x6d6 <millis_get>
     b9e:	00 91 4c 01 	lds	r16, 0x014C
     ba2:	10 91 4d 01 	lds	r17, 0x014D
     ba6:	20 91 4e 01 	lds	r18, 0x014E
     baa:	30 91 4f 01 	lds	r19, 0x014F
     bae:	60 17       	cp	r22, r16
     bb0:	71 07       	cpc	r23, r17
     bb2:	82 07       	cpc	r24, r18
     bb4:	93 07       	cpc	r25, r19
     bb6:	08 f0       	brcs	.+2      	; 0xbba <_Z15isr_light_flashv+0x40>
     bb8:	39 c0       	rjmp	.+114    	; 0xc2c <_Z15isr_light_flashv+0xb2>
     bba:	3b c0       	rjmp	.+118    	; 0xc32 <_Z15isr_light_flashv+0xb8>
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
     bbc:	80 91 50 01 	lds	r24, 0x0150
     bc0:	fe 01       	movw	r30, r28
     bc2:	98 e0       	ldi	r25, 0x08	; 8
     bc4:	89 9f       	mul	r24, r25
     bc6:	e0 0d       	add	r30, r0
     bc8:	f1 1d       	adc	r31, r1
     bca:	11 24       	eor	r1, r1
     bcc:	e0 54       	subi	r30, 0x40	; 64
     bce:	fb 4f       	sbci	r31, 0xFB	; 251
     bd0:	64 91       	lpm	r22, Z
     bd2:	8c 2f       	mov	r24, r28
     bd4:	8d 5f       	subi	r24, 0xFD	; 253
     bd6:	95 d1       	rcall	.+810    	; 0xf02 <pca9635_set_led_pwm>
     bd8:	21 96       	adiw	r28, 0x01	; 1
			}						
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
     bda:	c4 30       	cpi	r28, 0x04	; 4
     bdc:	d1 05       	cpc	r29, r1
     bde:	71 f7       	brne	.-36     	; 0xbbc <_Z15isr_light_flashv+0x42>
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
		}
		
		_flash_time = millis_get() + pgm_read_word(&(flash_pattern[_flash_current_step].time));
     be0:	7a dd       	rcall	.-1292   	; 0x6d6 <millis_get>
     be2:	40 91 50 01 	lds	r20, 0x0150
     be6:	e4 2f       	mov	r30, r20
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	ee 0f       	add	r30, r30
     bec:	ff 1f       	adc	r31, r31
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	ec 53       	subi	r30, 0x3C	; 60
     bf8:	fb 4f       	sbci	r31, 0xFB	; 251
     bfa:	25 91       	lpm	r18, Z+
     bfc:	34 91       	lpm	r19, Z
     bfe:	dc 01       	movw	r26, r24
     c00:	cb 01       	movw	r24, r22
     c02:	82 0f       	add	r24, r18
     c04:	93 1f       	adc	r25, r19
     c06:	a1 1d       	adc	r26, r1
     c08:	b1 1d       	adc	r27, r1
     c0a:	80 93 4c 01 	sts	0x014C, r24
     c0e:	90 93 4d 01 	sts	0x014D, r25
     c12:	a0 93 4e 01 	sts	0x014E, r26
     c16:	b0 93 4f 01 	sts	0x014F, r27
			
		// is variable _flash_current_step equal to total steps?
		if(_flash_current_step == (flash_keys -1 )) {
     c1a:	4f 31       	cpi	r20, 0x1F	; 31
     c1c:	19 f4       	brne	.+6      	; 0xc24 <_Z15isr_light_flashv+0xaa>
			//reset _flash_current_step to 0
			_flash_current_step = 0;				
     c1e:	10 92 50 01 	sts	0x0150, r1
     c22:	07 c0       	rjmp	.+14     	; 0xc32 <_Z15isr_light_flashv+0xb8>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
     c24:	4f 5f       	subi	r20, 0xFF	; 255
     c26:	40 93 50 01 	sts	0x0150, r20
     c2a:	03 c0       	rjmp	.+6      	; 0xc32 <_Z15isr_light_flashv+0xb8>
			}
	
				
		} //void isr_sound()
		
	void isr_light_flash(){
     c2c:	c0 e0       	ldi	r28, 0x00	; 0
     c2e:	d0 e0       	ldi	r29, 0x00	; 0
     c30:	c5 cf       	rjmp	.-118    	; 0xbbc <_Z15isr_light_flashv+0x42>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
		}
		
	} // END isr_light_flash
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	08 95       	ret

00000c3c <_Z14isr_light_iconv>:
		
		
		
		
		
	void isr_light_icon(){
     c3c:	0f 93       	push	r16
     c3e:	1f 93       	push	r17
     c40:	cf 93       	push	r28
     c42:	df 93       	push	r29
		
		// Do we need to go to the next flash?
		if(_icon_time != 0){ // is there already a flash ?
     c44:	80 91 46 01 	lds	r24, 0x0146
     c48:	90 91 47 01 	lds	r25, 0x0147
     c4c:	a0 91 48 01 	lds	r26, 0x0148
     c50:	b0 91 49 01 	lds	r27, 0x0149
     c54:	89 2b       	or	r24, r25
     c56:	8a 2b       	or	r24, r26
     c58:	8b 2b       	or	r24, r27
     c5a:	79 f0       	breq	.+30     	; 0xc7a <_Z14isr_light_iconv+0x3e>
			if(millis_get() < _icon_time ){ // Do we need to stop the current note?
     c5c:	3c dd       	rcall	.-1416   	; 0x6d6 <millis_get>
     c5e:	00 91 46 01 	lds	r16, 0x0146
     c62:	10 91 47 01 	lds	r17, 0x0147
     c66:	20 91 48 01 	lds	r18, 0x0148
     c6a:	30 91 49 01 	lds	r19, 0x0149
     c6e:	60 17       	cp	r22, r16
     c70:	71 07       	cpc	r23, r17
     c72:	82 07       	cpc	r24, r18
     c74:	93 07       	cpc	r25, r19
     c76:	08 f4       	brcc	.+2      	; 0xc7a <_Z14isr_light_iconv+0x3e>
     c78:	81 c0       	rjmp	.+258    	; 0xd7c <_Z14isr_light_iconv+0x140>
	// step 2 = 250 - (2 x 25)  = 200
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
     c7a:	20 91 4a 01 	lds	r18, 0x014A
     c7e:	22 23       	and	r18, r18
     c80:	19 f0       	breq	.+6      	; 0xc88 <_Z14isr_light_iconv+0x4c>
     c82:	2b 30       	cpi	r18, 0x0B	; 11
     c84:	21 f5       	brne	.+72     	; 0xcce <_Z14isr_light_iconv+0x92>
     c86:	12 c0       	rjmp	.+36     	; 0xcac <_Z14isr_light_iconv+0x70>
		intensity = 255;
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 650;
     c88:	26 dd       	rcall	.-1460   	; 0x6d6 <millis_get>
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	86 57       	subi	r24, 0x76	; 118
     c90:	9d 4f       	sbci	r25, 0xFD	; 253
     c92:	af 4f       	sbci	r26, 0xFF	; 255
     c94:	bf 4f       	sbci	r27, 0xFF	; 255
     c96:	80 93 46 01 	sts	0x0146, r24
     c9a:	90 93 47 01 	sts	0x0147, r25
     c9e:	a0 93 48 01 	sts	0x0148, r26
     ca2:	b0 93 49 01 	sts	0x0149, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     ca6:	cf ef       	ldi	r28, 0xFF	; 255
     ca8:	d0 e0       	ldi	r29, 0x00	; 0
     caa:	25 c0       	rjmp	.+74     	; 0xcf6 <_Z14isr_light_iconv+0xba>
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 650;
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
     cac:	14 dd       	rcall	.-1496   	; 0x6d6 <millis_get>
     cae:	dc 01       	movw	r26, r24
     cb0:	cb 01       	movw	r24, r22
     cb2:	01 96       	adiw	r24, 0x01	; 1
     cb4:	a1 1d       	adc	r26, r1
     cb6:	b1 1d       	adc	r27, r1
     cb8:	80 93 46 01 	sts	0x0146, r24
     cbc:	90 93 47 01 	sts	0x0147, r25
     cc0:	a0 93 48 01 	sts	0x0148, r26
     cc4:	b0 93 49 01 	sts	0x0149, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     cc8:	cf ef       	ldi	r28, 0xFF	; 255
     cca:	d0 e0       	ldi	r29, 0x00	; 0
     ccc:	14 c0       	rjmp	.+40     	; 0xcf6 <_Z14isr_light_iconv+0xba>
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
		}
			
	}else{
		intensity = (250 - (icon_current_step * 25)); // step 1 to 10, 
     cce:	37 ee       	ldi	r19, 0xE7	; 231
     cd0:	32 03       	mulsu	r19, r18
     cd2:	e0 01       	movw	r28, r0
     cd4:	11 24       	eor	r1, r1
     cd6:	c6 50       	subi	r28, 0x06	; 6
     cd8:	df 4f       	sbci	r29, 0xFF	; 255
		_icon_time = millis_get() + 30;
     cda:	fd dc       	rcall	.-1542   	; 0x6d6 <millis_get>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	4e 96       	adiw	r24, 0x1e	; 30
     ce2:	a1 1d       	adc	r26, r1
     ce4:	b1 1d       	adc	r27, r1
     ce6:	80 93 46 01 	sts	0x0146, r24
     cea:	90 93 47 01 	sts	0x0147, r25
     cee:	a0 93 48 01 	sts	0x0148, r26
     cf2:	b0 93 49 01 	sts	0x0149, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     cf6:	00 e0       	ldi	r16, 0x00	; 0
     cf8:	10 e0       	ldi	r17, 0x00	; 0
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     cfa:	80 91 4b 01 	lds	r24, 0x014B
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	9c 01       	movw	r18, r24
     d02:	22 0f       	add	r18, r18
     d04:	33 1f       	adc	r19, r19
     d06:	82 0f       	add	r24, r18
     d08:	93 1f       	adc	r25, r19
     d0a:	80 0f       	add	r24, r16
     d0c:	91 1f       	adc	r25, r17
     d0e:	fc 01       	movw	r30, r24
     d10:	e0 54       	subi	r30, 0x40	; 64
     d12:	fa 4f       	sbci	r31, 0xFA	; 250
     d14:	44 91       	lpm	r20, Z
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     d16:	fc 01       	movw	r30, r24
     d18:	e4 53       	subi	r30, 0x34	; 52
     d1a:	fa 4f       	sbci	r31, 0xFA	; 250
     d1c:	84 91       	lpm	r24, Z
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     d1e:	4c 9f       	mul	r20, r28
     d20:	90 01       	movw	r18, r0
     d22:	4d 9f       	mul	r20, r29
     d24:	30 0d       	add	r19, r0
     d26:	11 24       	eor	r1, r1
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     d28:	63 2f       	mov	r22, r19
     d2a:	eb d0       	rcall	.+470    	; 0xf02 <pca9635_set_led_pwm>
     d2c:	0f 5f       	subi	r16, 0xFF	; 255
     d2e:	1f 4f       	sbci	r17, 0xFF	; 255
		_icon_time = millis_get() + 30;
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
     d30:	03 30       	cpi	r16, 0x03	; 3
     d32:	11 05       	cpc	r17, r1
     d34:	11 f7       	brne	.-60     	; 0xcfa <_Z14isr_light_iconv+0xbe>
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
	}
	

	// is variable _flash_current_step equal to total steps?
	if(icon_current_step == 11) {
     d36:	80 91 4a 01 	lds	r24, 0x014A
     d3a:	8b 30       	cpi	r24, 0x0B	; 11
     d3c:	e1 f4       	brne	.+56     	; 0xd76 <_Z14isr_light_iconv+0x13a>
		//reset _flash_current_step to 0
		icon_current_step = 0;
     d3e:	10 92 4a 01 	sts	0x014A, r1
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     d42:	30 91 5b 01 	lds	r19, 0x015B
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     d46:	23 2f       	mov	r18, r19
     d48:	2f 70       	andi	r18, 0x0F	; 15
     d4a:	80 91 4b 01 	lds	r24, 0x014B
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     d4e:	40 e0       	ldi	r20, 0x00	; 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
     d50:	8f 5f       	subi	r24, 0xFF	; 255
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     d52:	84 30       	cpi	r24, 0x04	; 4
     d54:	09 f4       	brne	.+2      	; 0xd58 <_Z14isr_light_iconv+0x11c>
     d56:	84 2f       	mov	r24, r20
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     d58:	e8 2f       	mov	r30, r24
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	e1 5d       	subi	r30, 0xD1	; 209
     d5e:	fe 4f       	sbci	r31, 0xFE	; 254
     d60:	90 81       	ld	r25, Z
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     d62:	21 11       	cpse	r18, r1
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <_Z14isr_light_iconv+0x130>
     d66:	80 93 4b 01 	sts	0x014B, r24
     d6a:	08 c0       	rjmp	.+16     	; 0xd7c <_Z14isr_light_iconv+0x140>
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     d6c:	93 23       	and	r25, r19
		//reset _flash_current_step to 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
     d6e:	81 f3       	breq	.-32     	; 0xd50 <_Z14isr_light_iconv+0x114>
     d70:	80 93 4b 01 	sts	0x014B, r24
     d74:	03 c0       	rjmp	.+6      	; 0xd7c <_Z14isr_light_iconv+0x140>
			} // while
			
			
		}else{
		// set _flash_current_step +1
		icon_current_step++;
     d76:	8f 5f       	subi	r24, 0xFF	; 255
     d78:	80 93 4a 01 	sts	0x014A, r24
	}
	
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	08 95       	ret

00000d86 <__vector_7>:
	} // end main

	

	
ISR (TIMER2_COMPA_vect) {
     d86:	1f 92       	push	r1
     d88:	0f 92       	push	r0
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	0f 92       	push	r0
     d8e:	11 24       	eor	r1, r1
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	2f 93       	push	r18
     d96:	3f 93       	push	r19
     d98:	4f 93       	push	r20
     d9a:	5f 93       	push	r21
     d9c:	6f 93       	push	r22
     d9e:	7f 93       	push	r23
     da0:	8f 93       	push	r24
     da2:	9f 93       	push	r25
     da4:	af 93       	push	r26
     da6:	bf 93       	push	r27
     da8:	ef 93       	push	r30
     daa:	ff 93       	push	r31

	// check if the alarm needs to be stopped
	if(millis_get() >= active_alarm_time || active_alarm_time == 0){
     dac:	94 dc       	rcall	.-1752   	; 0x6d6 <millis_get>
     dae:	00 91 57 01 	lds	r16, 0x0157
     db2:	10 91 58 01 	lds	r17, 0x0158
     db6:	20 91 59 01 	lds	r18, 0x0159
     dba:	30 91 5a 01 	lds	r19, 0x015A
     dbe:	60 17       	cp	r22, r16
     dc0:	71 07       	cpc	r23, r17
     dc2:	82 07       	cpc	r24, r18
     dc4:	93 07       	cpc	r25, r19
     dc6:	20 f4       	brcc	.+8      	; 0xdd0 <__vector_7+0x4a>
     dc8:	01 2b       	or	r16, r17
     dca:	02 2b       	or	r16, r18
     dcc:	03 2b       	or	r16, r19
     dce:	c1 f5       	brne	.+112    	; 0xe40 <__vector_7+0xba>
		// stop alarm
			
			// reset steps of sound, flash and icon
			sound_current_step		= 0;
     dd0:	10 92 55 01 	sts	0x0155, r1
			_sound_note_time		= 0;
     dd4:	10 92 51 01 	sts	0x0151, r1
     dd8:	10 92 52 01 	sts	0x0152, r1
     ddc:	10 92 53 01 	sts	0x0153, r1
     de0:	10 92 54 01 	sts	0x0154, r1
										
			_flash_current_step		= 0;
     de4:	10 92 50 01 	sts	0x0150, r1
			_flash_time				= 0;
     de8:	10 92 4c 01 	sts	0x014C, r1
     dec:	10 92 4d 01 	sts	0x014D, r1
     df0:	10 92 4e 01 	sts	0x014E, r1
     df4:	10 92 4f 01 	sts	0x014F, r1
										
			icon_current_step		= 0;
     df8:	10 92 4a 01 	sts	0x014A, r1
			_icon_time				= 0;
     dfc:	10 92 46 01 	sts	0x0146, r1
     e00:	10 92 47 01 	sts	0x0147, r1
     e04:	10 92 48 01 	sts	0x0148, r1
     e08:	10 92 49 01 	sts	0x0149, r1
										
			// empty alarm arrray
			active_alarm = 0x00; 
     e0c:	10 92 5b 01 	sts	0x015B, r1
			active_alarm_time = 0;
     e10:	10 92 57 01 	sts	0x0157, r1
     e14:	10 92 58 01 	sts	0x0158, r1
     e18:	10 92 59 01 	sts	0x0159, r1
     e1c:	10 92 5a 01 	sts	0x015A, r1
					
			// alle leds uit, pca in slaapstand
			pca9635_set_all_led_pwm(0); // dimm all leds to zero
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	80 d0       	rcall	.+256    	; 0xf24 <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1); // put pca9635 in sleep
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	8e d0       	rcall	.+284    	; 0xf44 <pca9635_set_sleep>
			power_twi_disable();
     e28:	e4 e6       	ldi	r30, 0x64	; 100
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 68       	ori	r24, 0x80	; 128
     e30:	80 83       	st	Z, r24
			
			// automatisch slapen in loop.

			//uart0_puts("STOPINT");
			// stop timer 0
			millis_pause();
     e32:	65 dc       	rcall	.-1846   	; 0x6fe <millis_pause>
			
			// stop sound
			noTone();
     e34:	24 d4       	rcall	.+2120   	; 0x167e <noTone>
			
			// stop timer 2
			timer2_pause();
     e36:	9d dc       	rcall	.-1734   	; 0x772 <_Z12timer2_pausev>
			
			deep_sleep_ok = 1;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	80 93 5c 01 	sts	0x015C, r24
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <__vector_7+0xc0>
					
	}else{
		// continue alarm
		isr_sound();
     e40:	8d dd       	rcall	.-1254   	; 0x95c <_Z9isr_soundv>
	    isr_light_flash();
     e42:	9b de       	rcall	.-714    	; 0xb7a <_Z15isr_light_flashv>
		isr_light_icon();		
     e44:	fb de       	rcall	.-522    	; 0xc3c <_Z14isr_light_iconv>
	}
						
}
     e46:	ff 91       	pop	r31
     e48:	ef 91       	pop	r30
     e4a:	bf 91       	pop	r27
     e4c:	af 91       	pop	r26
     e4e:	9f 91       	pop	r25
     e50:	8f 91       	pop	r24
     e52:	7f 91       	pop	r23
     e54:	6f 91       	pop	r22
     e56:	5f 91       	pop	r21
     e58:	4f 91       	pop	r20
     e5a:	3f 91       	pop	r19
     e5c:	2f 91       	pop	r18
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <_GLOBAL__sub_I_mychannel>:
    static volatile uint8_t ACK_REQUESTED;
    static volatile uint8_t ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile uint8_t _mode; //should be protected?
    
    RFM69(uint8_t slaveSelectPin=BIT_RFM_CS, uint8_t interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false) {
     e6c:	87 e3       	ldi	r24, 0x37	; 55
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	90 93 3f 01 	sts	0x013F, r25
     e74:	80 93 3e 01 	sts	0x013E, r24
      _slaveSelectPin = slaveSelectPin;
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	80 93 40 01 	sts	0x0140, r24
      _interruptPin = interruptPin;
     e7e:	80 93 41 01 	sts	0x0141, r24
      _mode = RF69_MODE_STANDBY;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	80 93 67 01 	sts	0x0167, r24
      _promiscuousMode = false;
     e88:	10 92 43 01 	sts	0x0143, r1
      _powerLevel = 31;
     e8c:	8f e1       	ldi	r24, 0x1F	; 31
     e8e:	80 93 44 01 	sts	0x0144, r24
      _isRFM69HW = isRFM69HW;
     e92:	10 92 45 01 	sts	0x0145, r1
     e96:	08 95       	ret

00000e98 <pca9635_init>:
	   I2C_write(value);	
  	}
			  
  	I2C_stop();
		  
}
     e98:	80 e8       	ldi	r24, 0x80	; 128
     e9a:	cb db       	rcall	.-2154   	; 0x632 <I2C_start>
     e9c:	80 e8       	ldi	r24, 0x80	; 128
     e9e:	ee db       	rcall	.-2084   	; 0x67c <I2C_write>
     ea0:	80 e8       	ldi	r24, 0x80	; 128
     ea2:	ec db       	rcall	.-2088   	; 0x67c <I2C_write>
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	ea db       	rcall	.-2092   	; 0x67c <I2C_write>
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	e8 db       	rcall	.-2096   	; 0x67c <I2C_write>
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	e6 db       	rcall	.-2100   	; 0x67c <I2C_write>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	e4 db       	rcall	.-2104   	; 0x67c <I2C_write>
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	e2 db       	rcall	.-2108   	; 0x67c <I2C_write>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	e0 db       	rcall	.-2112   	; 0x67c <I2C_write>
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	de db       	rcall	.-2116   	; 0x67c <I2C_write>
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	dc db       	rcall	.-2120   	; 0x67c <I2C_write>
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	da db       	rcall	.-2124   	; 0x67c <I2C_write>
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	d8 db       	rcall	.-2128   	; 0x67c <I2C_write>
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	d6 db       	rcall	.-2132   	; 0x67c <I2C_write>
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	d4 db       	rcall	.-2136   	; 0x67c <I2C_write>
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	d2 db       	rcall	.-2140   	; 0x67c <I2C_write>
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	d0 db       	rcall	.-2144   	; 0x67c <I2C_write>
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	ce db       	rcall	.-2148   	; 0x67c <I2C_write>
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	cc db       	rcall	.-2152   	; 0x67c <I2C_write>
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	ca db       	rcall	.-2156   	; 0x67c <I2C_write>
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	c8 db       	rcall	.-2160   	; 0x67c <I2C_write>
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	c6 db       	rcall	.-2164   	; 0x67c <I2C_write>
     ef0:	8a ea       	ldi	r24, 0xAA	; 170
     ef2:	c4 db       	rcall	.-2168   	; 0x67c <I2C_write>
     ef4:	8a ea       	ldi	r24, 0xAA	; 170
     ef6:	c2 db       	rcall	.-2172   	; 0x67c <I2C_write>
     ef8:	8a ea       	ldi	r24, 0xAA	; 170
     efa:	c0 db       	rcall	.-2176   	; 0x67c <I2C_write>
     efc:	8a ea       	ldi	r24, 0xAA	; 170
     efe:	be db       	rcall	.-2180   	; 0x67c <I2C_write>
     f00:	da cb       	rjmp	.-2124   	; 0x6b6 <I2C_stop>

00000f02 <pca9635_set_led_pwm>:
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	d8 2f       	mov	r29, r24
     f08:	c6 2f       	mov	r28, r22
     f0a:	80 e8       	ldi	r24, 0x80	; 128
     f0c:	92 db       	rcall	.-2268   	; 0x632 <I2C_start>
     f0e:	8d 2f       	mov	r24, r29
     f10:	8e 5f       	subi	r24, 0xFE	; 254
     f12:	80 68       	ori	r24, 0x80	; 128
     f14:	b3 db       	rcall	.-2202   	; 0x67c <I2C_write>
     f16:	8c 2f       	mov	r24, r28
     f18:	b1 db       	rcall	.-2206   	; 0x67c <I2C_write>
     f1a:	cd db       	rcall	.-2150   	; 0x6b6 <I2C_stop>
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret

00000f24 <pca9635_set_all_led_pwm>:
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	d8 2f       	mov	r29, r24
     f2a:	80 e8       	ldi	r24, 0x80	; 128
     f2c:	82 db       	rcall	.-2300   	; 0x632 <I2C_start>
     f2e:	82 e8       	ldi	r24, 0x82	; 130
     f30:	a5 db       	rcall	.-2230   	; 0x67c <I2C_write>
     f32:	c0 e1       	ldi	r28, 0x10	; 16
     f34:	8d 2f       	mov	r24, r29
     f36:	a2 db       	rcall	.-2236   	; 0x67c <I2C_write>
     f38:	c1 50       	subi	r28, 0x01	; 1
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <pca9635_set_all_led_pwm+0x10>
     f3c:	bc db       	rcall	.-2184   	; 0x6b6 <I2C_stop>
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <pca9635_set_sleep>:

/**
* Changes the oscillator mode between sleep (1) and active (0)
*/
uint8_t pca9635_set_sleep(uint8_t sleep)
{
     f44:	cf 93       	push	r28
     f46:	c8 2f       	mov	r28, r24
	I2C_start((0x40<<1)+I2C_READ);
     f48:	81 e8       	ldi	r24, 0x81	; 129
     f4a:	73 db       	rcall	.-2330   	; 0x632 <I2C_start>
	I2C_write(0x80); // autoincrement, mode 0,
     f4c:	80 e8       	ldi	r24, 0x80	; 128
     f4e:	96 db       	rcall	.-2260   	; 0x67c <I2C_write>
	// I2C_stop(); ???nodig?
	uint8_t data = I2C_read_ack();
     f50:	a7 db       	rcall	.-2226   	; 0x6a0 <I2C_read_ack>
	
	if(sleep){		// set or unset bit 4
     f52:	cc 23       	and	r28, r28
     f54:	11 f0       	breq	.+4      	; 0xf5a <pca9635_set_sleep+0x16>
		data |= (1<<4);
     f56:	80 61       	ori	r24, 0x10	; 16
     f58:	01 c0       	rjmp	.+2      	; 0xf5c <pca9635_set_sleep+0x18>
	}else{
		data &= ~(1<<4);
     f5a:	8f 7e       	andi	r24, 0xEF	; 239
	}
	
	uint8_t ack = I2C_write(data);  
     f5c:	8f db       	rcall	.-2274   	; 0x67c <I2C_write>
     f5e:	c8 2f       	mov	r28, r24
	I2C_stop();
     f60:	aa db       	rcall	.-2220   	; 0x6b6 <I2C_stop>
	return ack;
}
     f62:	8c 2f       	mov	r24, r28
     f64:	cf 91       	pop	r28
     f66:	08 95       	ret

00000f68 <_ZN5RFM697spiInitEv>:
/// Should be polled immediately after sending a packet with ACK request
bool RFM69::ACKReceived(byte fromNodeID) {
  if (receiveDone())
    return (SENDERID == fromNodeID || fromNodeID == RF69_BROADCAST_ADDR) && ACK_RECEIVED;
  return false;
}
     f68:	84 b1       	in	r24, 0x04	; 4
     f6a:	8c 62       	ori	r24, 0x2C	; 44
     f6c:	84 b9       	out	0x04, r24	; 4
     f6e:	2a 9a       	sbi	0x05, 2	; 5
     f70:	24 98       	cbi	0x04, 4	; 4
     f72:	80 e5       	ldi	r24, 0x50	; 80
     f74:	8c bd       	out	0x2c, r24	; 44
     f76:	8d b5       	in	r24, 0x2d	; 45
     f78:	81 60       	ori	r24, 0x01	; 1
     f7a:	8d bd       	out	0x2d, r24	; 45
     f7c:	52 98       	cbi	0x0a, 2	; 10
     f7e:	5a 9a       	sbi	0x0b, 2	; 11
     f80:	08 95       	ret

00000f82 <_ZN5RFM694isr0Ev>:
     f82:	80 91 5d 01 	lds	r24, 0x015D
     f86:	90 91 5e 01 	lds	r25, 0x015E
     f8a:	dc 01       	movw	r26, r24
     f8c:	ed 91       	ld	r30, X+
     f8e:	fc 91       	ld	r31, X
     f90:	01 90       	ld	r0, Z+
     f92:	f0 81       	ld	r31, Z
     f94:	e0 2d       	mov	r30, r0
     f96:	09 95       	icall
     f98:	08 95       	ret

00000f9a <_ZN5RFM6915spiTransferByteEh>:
     f9a:	6e bd       	out	0x2e, r22	; 46
     f9c:	0d b4       	in	r0, 0x2d	; 45
     f9e:	07 fe       	sbrs	r0, 7
     fa0:	fd cf       	rjmp	.-6      	; 0xf9c <_ZN5RFM6915spiTransferByteEh+0x2>
     fa2:	8e b5       	in	r24, 0x2e	; 46
     fa4:	08 95       	ret

00000fa6 <_ZN5RFM6912noInterruptsEv>:
     fa6:	e8 98       	cbi	0x1d, 0	; 29
     fa8:	08 95       	ret

00000faa <_ZN5RFM696selectEv>:
     faa:	fd df       	rcall	.-6      	; 0xfa6 <_ZN5RFM6912noInterruptsEv>
     fac:	2a 98       	cbi	0x05, 2	; 5
     fae:	08 95       	ret

00000fb0 <_ZN5RFM6915allowInterruptsEv>:
     fb0:	e8 9a       	sbi	0x1d, 0	; 29
     fb2:	08 95       	ret

00000fb4 <_ZN5RFM698unselectEv>:
     fb4:	2a 9a       	sbi	0x05, 2	; 5
     fb6:	fc cf       	rjmp	.-8      	; 0xfb0 <_ZN5RFM6915allowInterruptsEv>

00000fb8 <_ZN5RFM6911spiTransferEhh>:
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	ec 01       	movw	r28, r24
     fc2:	06 2f       	mov	r16, r22
     fc4:	14 2f       	mov	r17, r20
     fc6:	f1 df       	rcall	.-30     	; 0xfaa <_ZN5RFM696selectEv>
     fc8:	60 2f       	mov	r22, r16
     fca:	ce 01       	movw	r24, r28
     fcc:	e6 df       	rcall	.-52     	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
     fce:	61 2f       	mov	r22, r17
     fd0:	ce 01       	movw	r24, r28
     fd2:	e3 df       	rcall	.-58     	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
     fd4:	18 2f       	mov	r17, r24
     fd6:	ce 01       	movw	r24, r28
     fd8:	ed df       	rcall	.-38     	; 0xfb4 <_ZN5RFM698unselectEv>
     fda:	81 2f       	mov	r24, r17
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	08 95       	ret

00000fe6 <_ZN5RFM698writeRegEhh>:
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	ec 01       	movw	r28, r24
     ff0:	06 2f       	mov	r16, r22
     ff2:	14 2f       	mov	r17, r20
     ff4:	da df       	rcall	.-76     	; 0xfaa <_ZN5RFM696selectEv>
     ff6:	60 2f       	mov	r22, r16
     ff8:	60 68       	ori	r22, 0x80	; 128
     ffa:	41 2f       	mov	r20, r17
     ffc:	ce 01       	movw	r24, r28
     ffe:	dc df       	rcall	.-72     	; 0xfb8 <_ZN5RFM6911spiTransferEhh>
    1000:	ce 01       	movw	r24, r28
    1002:	d8 df       	rcall	.-80     	; 0xfb4 <_ZN5RFM698unselectEv>
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	08 95       	ret

0000100e <_ZN5RFM6916setHighPowerRegsEb>:
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	ec 01       	movw	r28, r24
    1014:	61 11       	cpse	r22, r1
    1016:	0a c0       	rjmp	.+20     	; 0x102c <_ZN5RFM6916setHighPowerRegsEb+0x1e>
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <_ZN5RFM6916setHighPowerRegsEb+0x14>
    101a:	6c e5       	ldi	r22, 0x5C	; 92
    101c:	ce 01       	movw	r24, r28
    101e:	e3 df       	rcall	.-58     	; 0xfe6 <_ZN5RFM698writeRegEhh>
    1020:	0a c0       	rjmp	.+20     	; 0x1036 <_ZN5RFM6916setHighPowerRegsEb+0x28>
    1022:	45 e5       	ldi	r20, 0x55	; 85
    1024:	6a e5       	ldi	r22, 0x5A	; 90
    1026:	df df       	rcall	.-66     	; 0xfe6 <_ZN5RFM698writeRegEhh>
    1028:	40 e7       	ldi	r20, 0x70	; 112
    102a:	f7 cf       	rjmp	.-18     	; 0x101a <_ZN5RFM6916setHighPowerRegsEb+0xc>
    102c:	4d e5       	ldi	r20, 0x5D	; 93
    102e:	6a e5       	ldi	r22, 0x5A	; 90
    1030:	da df       	rcall	.-76     	; 0xfe6 <_ZN5RFM698writeRegEhh>
    1032:	4c e7       	ldi	r20, 0x7C	; 124
    1034:	f2 cf       	rjmp	.-28     	; 0x101a <_ZN5RFM6916setHighPowerRegsEb+0xc>
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <_ZN5RFM697readRegEh>:
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	ec 01       	movw	r28, r24
    1044:	16 2f       	mov	r17, r22
    1046:	b1 df       	rcall	.-158    	; 0xfaa <_ZN5RFM696selectEv>
    1048:	61 2f       	mov	r22, r17
    104a:	6f 77       	andi	r22, 0x7F	; 127
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	ce 01       	movw	r24, r28
    1050:	b3 df       	rcall	.-154    	; 0xfb8 <_ZN5RFM6911spiTransferEhh>
    1052:	18 2f       	mov	r17, r24
    1054:	ce 01       	movw	r24, r28
    1056:	ae df       	rcall	.-164    	; 0xfb4 <_ZN5RFM698unselectEv>
    1058:	81 2f       	mov	r24, r17
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	08 95       	ret

00001062 <_ZN5RFM698readRSSIEb>:
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	ec 01       	movw	r28, r24
    1068:	66 23       	and	r22, r22
    106a:	41 f0       	breq	.+16     	; 0x107c <_ZN5RFM698readRSSIEb+0x1a>
    106c:	41 e0       	ldi	r20, 0x01	; 1
    106e:	63 e2       	ldi	r22, 0x23	; 35
    1070:	ba df       	rcall	.-140    	; 0xfe6 <_ZN5RFM698writeRegEhh>
    1072:	63 e2       	ldi	r22, 0x23	; 35
    1074:	ce 01       	movw	r24, r28
    1076:	e2 df       	rcall	.-60     	; 0x103c <_ZN5RFM697readRegEh>
    1078:	81 ff       	sbrs	r24, 1
    107a:	fb cf       	rjmp	.-10     	; 0x1072 <_ZN5RFM698readRSSIEb+0x10>
    107c:	64 e2       	ldi	r22, 0x24	; 36
    107e:	ce 01       	movw	r24, r28
    1080:	dd df       	rcall	.-70     	; 0x103c <_ZN5RFM697readRegEh>
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	31 95       	neg	r19
    1088:	21 95       	neg	r18
    108a:	31 09       	sbc	r19, r1
    108c:	35 95       	asr	r19
    108e:	27 95       	ror	r18
    1090:	82 2f       	mov	r24, r18
    1092:	93 2f       	mov	r25, r19
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <_ZN5RFM697setModeEh>:
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	ec 01       	movw	r28, r24
    10a2:	16 2f       	mov	r17, r22
    10a4:	80 91 67 01 	lds	r24, 0x0167
    10a8:	86 17       	cp	r24, r22
    10aa:	09 f4       	brne	.+2      	; 0x10ae <_ZN5RFM697setModeEh+0x14>
    10ac:	56 c0       	rjmp	.+172    	; 0x115a <_ZN5RFM697setModeEh+0xc0>
    10ae:	62 30       	cpi	r22, 0x02	; 2
    10b0:	69 f1       	breq	.+90     	; 0x110c <_ZN5RFM697setModeEh+0x72>
    10b2:	38 f4       	brcc	.+14     	; 0x10c2 <_ZN5RFM697setModeEh+0x28>
    10b4:	66 23       	and	r22, r22
    10b6:	09 f4       	brne	.+2      	; 0x10ba <_ZN5RFM697setModeEh+0x20>
    10b8:	3d c0       	rjmp	.+122    	; 0x1134 <_ZN5RFM697setModeEh+0x9a>
    10ba:	61 30       	cpi	r22, 0x01	; 1
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <_ZN5RFM697setModeEh+0x26>
    10be:	4d c0       	rjmp	.+154    	; 0x115a <_ZN5RFM697setModeEh+0xc0>
    10c0:	2f c0       	rjmp	.+94     	; 0x1120 <_ZN5RFM697setModeEh+0x86>
    10c2:	63 30       	cpi	r22, 0x03	; 3
    10c4:	99 f0       	breq	.+38     	; 0x10ec <_ZN5RFM697setModeEh+0x52>
    10c6:	64 30       	cpi	r22, 0x04	; 4
    10c8:	09 f0       	breq	.+2      	; 0x10cc <_ZN5RFM697setModeEh+0x32>
    10ca:	47 c0       	rjmp	.+142    	; 0x115a <_ZN5RFM697setModeEh+0xc0>
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	ce 01       	movw	r24, r28
    10d0:	b5 df       	rcall	.-150    	; 0x103c <_ZN5RFM697readRegEh>
    10d2:	83 7e       	andi	r24, 0xE3	; 227
    10d4:	48 2f       	mov	r20, r24
    10d6:	4c 60       	ori	r20, 0x0C	; 12
    10d8:	61 e0       	ldi	r22, 0x01	; 1
    10da:	ce 01       	movw	r24, r28
    10dc:	84 df       	rcall	.-248    	; 0xfe6 <_ZN5RFM698writeRegEhh>
    10de:	8f 81       	ldd	r24, Y+7	; 0x07
    10e0:	88 23       	and	r24, r24
    10e2:	81 f1       	breq	.+96     	; 0x1144 <_ZN5RFM697setModeEh+0xaa>
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	ce 01       	movw	r24, r28
    10e8:	92 df       	rcall	.-220    	; 0x100e <_ZN5RFM6916setHighPowerRegsEb>
    10ea:	2c c0       	rjmp	.+88     	; 0x1144 <_ZN5RFM697setModeEh+0xaa>
    10ec:	61 e0       	ldi	r22, 0x01	; 1
    10ee:	ce 01       	movw	r24, r28
    10f0:	a5 df       	rcall	.-182    	; 0x103c <_ZN5RFM697readRegEh>
    10f2:	83 7e       	andi	r24, 0xE3	; 227
    10f4:	48 2f       	mov	r20, r24
    10f6:	40 61       	ori	r20, 0x10	; 16
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	ce 01       	movw	r24, r28
    10fc:	74 df       	rcall	.-280    	; 0xfe6 <_ZN5RFM698writeRegEhh>
    10fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1100:	88 23       	and	r24, r24
    1102:	01 f1       	breq	.+64     	; 0x1144 <_ZN5RFM697setModeEh+0xaa>
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	ce 01       	movw	r24, r28
    1108:	82 df       	rcall	.-252    	; 0x100e <_ZN5RFM6916setHighPowerRegsEb>
    110a:	1c c0       	rjmp	.+56     	; 0x1144 <_ZN5RFM697setModeEh+0xaa>
    110c:	61 e0       	ldi	r22, 0x01	; 1
    110e:	ce 01       	movw	r24, r28
    1110:	95 df       	rcall	.-214    	; 0x103c <_ZN5RFM697readRegEh>
    1112:	83 7e       	andi	r24, 0xE3	; 227
    1114:	48 2f       	mov	r20, r24
    1116:	48 60       	ori	r20, 0x08	; 8
    1118:	61 e0       	ldi	r22, 0x01	; 1
    111a:	ce 01       	movw	r24, r28
    111c:	64 df       	rcall	.-312    	; 0xfe6 <_ZN5RFM698writeRegEhh>
    111e:	12 c0       	rjmp	.+36     	; 0x1144 <_ZN5RFM697setModeEh+0xaa>
    1120:	61 e0       	ldi	r22, 0x01	; 1
    1122:	ce 01       	movw	r24, r28
    1124:	8b df       	rcall	.-234    	; 0x103c <_ZN5RFM697readRegEh>
    1126:	83 7e       	andi	r24, 0xE3	; 227
    1128:	48 2f       	mov	r20, r24
    112a:	44 60       	ori	r20, 0x04	; 4
    112c:	61 e0       	ldi	r22, 0x01	; 1
    112e:	ce 01       	movw	r24, r28
    1130:	5a df       	rcall	.-332    	; 0xfe6 <_ZN5RFM698writeRegEhh>
    1132:	08 c0       	rjmp	.+16     	; 0x1144 <_ZN5RFM697setModeEh+0xaa>
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	ce 01       	movw	r24, r28
    1138:	81 df       	rcall	.-254    	; 0x103c <_ZN5RFM697readRegEh>
    113a:	48 2f       	mov	r20, r24
    113c:	43 7e       	andi	r20, 0xE3	; 227
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	ce 01       	movw	r24, r28
    1142:	51 df       	rcall	.-350    	; 0xfe6 <_ZN5RFM698writeRegEhh>
    1144:	80 91 67 01 	lds	r24, 0x0167
    1148:	81 11       	cpse	r24, r1
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <_ZN5RFM697setModeEh+0xbc>
    114c:	67 e2       	ldi	r22, 0x27	; 39
    114e:	ce 01       	movw	r24, r28
    1150:	75 df       	rcall	.-278    	; 0x103c <_ZN5RFM697readRegEh>
    1152:	88 23       	and	r24, r24
    1154:	bc f7       	brge	.-18     	; 0x1144 <_ZN5RFM697setModeEh+0xaa>
    1156:	10 93 67 01 	sts	0x0167, r17
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	08 95       	ret

00001162 <_ZN5RFM697canSendEv>:
    1162:	cf 93       	push	r28
    1164:	df 93       	push	r29
    1166:	ec 01       	movw	r28, r24
    1168:	80 91 67 01 	lds	r24, 0x0167
    116c:	83 30       	cpi	r24, 0x03	; 3
    116e:	79 f4       	brne	.+30     	; 0x118e <_ZN5RFM697canSendEv+0x2c>
    1170:	80 91 63 01 	lds	r24, 0x0163
    1174:	81 11       	cpse	r24, r1
    1176:	0d c0       	rjmp	.+26     	; 0x1192 <_ZN5RFM697canSendEv+0x30>
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	ce 01       	movw	r24, r28
    117c:	72 df       	rcall	.-284    	; 0x1062 <_ZN5RFM698readRSSIEb>
    117e:	86 3a       	cpi	r24, 0xA6	; 166
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	4c f4       	brge	.+18     	; 0x1196 <_ZN5RFM697canSendEv+0x34>
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	ce 01       	movw	r24, r28
    1188:	88 df       	rcall	.-240    	; 0x109a <_ZN5RFM697setModeEh>
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <_ZN5RFM697canSendEv+0x36>
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <_ZN5RFM697canSendEv+0x36>
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <_ZN5RFM697canSendEv+0x36>
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <_ZN5RFM6912receiveBeginEv>:
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	ec 01       	movw	r28, r24
    11a4:	10 92 66 01 	sts	0x0166, r1
    11a8:	10 92 65 01 	sts	0x0165, r1
    11ac:	10 92 64 01 	sts	0x0164, r1
    11b0:	10 92 63 01 	sts	0x0163, r1
    11b4:	10 92 62 01 	sts	0x0162, r1
    11b8:	10 92 61 01 	sts	0x0161, r1
    11bc:	10 92 60 01 	sts	0x0160, r1
    11c0:	10 92 5f 01 	sts	0x015F, r1
    11c4:	68 e2       	ldi	r22, 0x28	; 40
    11c6:	3a df       	rcall	.-396    	; 0x103c <_ZN5RFM697readRegEh>
    11c8:	82 ff       	sbrs	r24, 2
    11ca:	08 c0       	rjmp	.+16     	; 0x11dc <_ZN5RFM6912receiveBeginEv+0x3e>
    11cc:	6d e3       	ldi	r22, 0x3D	; 61
    11ce:	ce 01       	movw	r24, r28
    11d0:	35 df       	rcall	.-406    	; 0x103c <_ZN5RFM697readRegEh>
    11d2:	48 2f       	mov	r20, r24
    11d4:	44 60       	ori	r20, 0x04	; 4
    11d6:	6d e3       	ldi	r22, 0x3D	; 61
    11d8:	ce 01       	movw	r24, r28
    11da:	05 df       	rcall	.-502    	; 0xfe6 <_ZN5RFM698writeRegEhh>
    11dc:	40 e4       	ldi	r20, 0x40	; 64
    11de:	65 e2       	ldi	r22, 0x25	; 37
    11e0:	ce 01       	movw	r24, r28
    11e2:	01 df       	rcall	.-510    	; 0xfe6 <_ZN5RFM698writeRegEhh>
    11e4:	63 e0       	ldi	r22, 0x03	; 3
    11e6:	ce 01       	movw	r24, r28
    11e8:	58 df       	rcall	.-336    	; 0x109a <_ZN5RFM697setModeEh>
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	08 95       	ret

000011f0 <_ZN5RFM697encryptEPKc>:
    11f0:	df 92       	push	r13
    11f2:	ef 92       	push	r14
    11f4:	ff 92       	push	r15
    11f6:	0f 93       	push	r16
    11f8:	1f 93       	push	r17
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	8c 01       	movw	r16, r24
    1200:	7b 01       	movw	r14, r22
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	4a df       	rcall	.-364    	; 0x109a <_ZN5RFM697setModeEh>
    1206:	e1 14       	cp	r14, r1
    1208:	f1 04       	cpc	r15, r1
    120a:	81 f0       	breq	.+32     	; 0x122c <_ZN5RFM697encryptEPKc+0x3c>
    120c:	c8 01       	movw	r24, r16
    120e:	cd de       	rcall	.-614    	; 0xfaa <_ZN5RFM696selectEv>
    1210:	6e eb       	ldi	r22, 0xBE	; 190
    1212:	c8 01       	movw	r24, r16
    1214:	c2 de       	rcall	.-636    	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    1216:	e7 01       	movw	r28, r14
    1218:	d1 2c       	mov	r13, r1
    121a:	69 91       	ld	r22, Y+
    121c:	c8 01       	movw	r24, r16
    121e:	bd de       	rcall	.-646    	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    1220:	d3 94       	inc	r13
    1222:	80 e1       	ldi	r24, 0x10	; 16
    1224:	d8 12       	cpse	r13, r24
    1226:	f9 cf       	rjmp	.-14     	; 0x121a <_ZN5RFM697encryptEPKc+0x2a>
    1228:	c8 01       	movw	r24, r16
    122a:	c4 de       	rcall	.-632    	; 0xfb4 <_ZN5RFM698unselectEv>
    122c:	6d e3       	ldi	r22, 0x3D	; 61
    122e:	c8 01       	movw	r24, r16
    1230:	05 df       	rcall	.-502    	; 0x103c <_ZN5RFM697readRegEh>
    1232:	8e 7f       	andi	r24, 0xFE	; 254
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	ef 28       	or	r14, r15
    1238:	09 f4       	brne	.+2      	; 0x123c <_ZN5RFM697encryptEPKc+0x4c>
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	48 2f       	mov	r20, r24
    123e:	49 2b       	or	r20, r25
    1240:	6d e3       	ldi	r22, 0x3D	; 61
    1242:	c8 01       	movw	r24, r16
    1244:	d0 de       	rcall	.-608    	; 0xfe6 <_ZN5RFM698writeRegEhh>
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	1f 91       	pop	r17
    124c:	0f 91       	pop	r16
    124e:	ff 90       	pop	r15
    1250:	ef 90       	pop	r14
    1252:	df 90       	pop	r13
    1254:	08 95       	ret

00001256 <_ZN5RFM6910initializeEhhh>:
    1256:	ef 92       	push	r14
    1258:	ff 92       	push	r15
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	aa 97       	sbiw	r28, 0x2a	; 42
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	8c 01       	movw	r16, r24
    1274:	f4 2e       	mov	r15, r20
    1276:	fe 01       	movw	r30, r28
    1278:	31 96       	adiw	r30, 0x01	; 1
    127a:	8a e2       	ldi	r24, 0x2A	; 42
    127c:	df 01       	movw	r26, r30
    127e:	1d 92       	st	X+, r1
    1280:	8a 95       	dec	r24
    1282:	e9 f7       	brne	.-6      	; 0x127e <_ZN5RFM6910initializeEhhh+0x28>
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	89 83       	std	Y+1, r24	; 0x01
    1288:	84 e0       	ldi	r24, 0x04	; 4
    128a:	8a 83       	std	Y+2, r24	; 0x02
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	9b 83       	std	Y+3, r25	; 0x03
    1290:	33 e0       	ldi	r19, 0x03	; 3
    1292:	3d 83       	std	Y+5, r19	; 0x05
    1294:	9e 83       	std	Y+6, r25	; 0x06
    1296:	8f 83       	std	Y+7, r24	; 0x07
    1298:	8a e8       	ldi	r24, 0x8A	; 138
    129a:	88 87       	std	Y+8, r24	; 0x08
    129c:	85 e0       	ldi	r24, 0x05	; 5
    129e:	89 87       	std	Y+9, r24	; 0x09
    12a0:	8a 87       	std	Y+10, r24	; 0x0a
    12a2:	86 e0       	ldi	r24, 0x06	; 6
    12a4:	8b 87       	std	Y+11, r24	; 0x0b
    12a6:	83 ec       	ldi	r24, 0xC3	; 195
    12a8:	8c 87       	std	Y+12, r24	; 0x0c
    12aa:	87 e0       	ldi	r24, 0x07	; 7
    12ac:	8d 87       	std	Y+13, r24	; 0x0d
    12ae:	88 e0       	ldi	r24, 0x08	; 8
    12b0:	8f 87       	std	Y+15, r24	; 0x0f
    12b2:	89 e0       	ldi	r24, 0x09	; 9
    12b4:	89 8b       	std	Y+17, r24	; 0x11
    12b6:	89 e1       	ldi	r24, 0x19	; 25
    12b8:	8b 8b       	std	Y+19, r24	; 0x13
    12ba:	92 e4       	ldi	r25, 0x42	; 66
    12bc:	9c 8b       	std	Y+20, r25	; 0x14
    12be:	85 e2       	ldi	r24, 0x25	; 37
    12c0:	8d 8b       	std	Y+21, r24	; 0x15
    12c2:	80 e4       	ldi	r24, 0x40	; 64
    12c4:	8e 8b       	std	Y+22, r24	; 0x16
    12c6:	89 e2       	ldi	r24, 0x29	; 41
    12c8:	8f 8b       	std	Y+23, r24	; 0x17
    12ca:	8c ed       	ldi	r24, 0xDC	; 220
    12cc:	88 8f       	std	Y+24, r24	; 0x18
    12ce:	8e e2       	ldi	r24, 0x2E	; 46
    12d0:	89 8f       	std	Y+25, r24	; 0x19
    12d2:	88 e8       	ldi	r24, 0x88	; 136
    12d4:	8a 8f       	std	Y+26, r24	; 0x1a
    12d6:	8f e2       	ldi	r24, 0x2F	; 47
    12d8:	8b 8f       	std	Y+27, r24	; 0x1b
    12da:	8d e2       	ldi	r24, 0x2D	; 45
    12dc:	8c 8f       	std	Y+28, r24	; 0x1c
    12de:	80 e3       	ldi	r24, 0x30	; 48
    12e0:	8d 8f       	std	Y+29, r24	; 0x1d
    12e2:	37 e3       	ldi	r19, 0x37	; 55
    12e4:	3f 8f       	std	Y+31, r19	; 0x1f
    12e6:	30 e9       	ldi	r19, 0x90	; 144
    12e8:	38 a3       	std	Y+32, r19	; 0x20
    12ea:	38 e3       	ldi	r19, 0x38	; 56
    12ec:	39 a3       	std	Y+33, r19	; 0x21
    12ee:	9a a3       	std	Y+34, r25	; 0x22
    12f0:	9c e3       	ldi	r25, 0x3C	; 60
    12f2:	9b a3       	std	Y+35, r25	; 0x23
    12f4:	9f e8       	ldi	r25, 0x8F	; 143
    12f6:	9c a3       	std	Y+36, r25	; 0x24
    12f8:	9d e3       	ldi	r25, 0x3D	; 61
    12fa:	9d a3       	std	Y+37, r25	; 0x25
    12fc:	92 e1       	ldi	r25, 0x12	; 18
    12fe:	9e a3       	std	Y+38, r25	; 0x26
    1300:	9f e6       	ldi	r25, 0x6F	; 111
    1302:	9f a3       	std	Y+39, r25	; 0x27
    1304:	88 a7       	std	Y+40, r24	; 0x28
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	89 a7       	std	Y+41, r24	; 0x29
    130a:	6f 31       	cpi	r22, 0x1F	; 31
    130c:	09 f4       	brne	.+2      	; 0x1310 <_ZN5RFM6910initializeEhhh+0xba>
    130e:	53 c0       	rjmp	.+166    	; 0x13b6 <_ZN5RFM6910initializeEhhh+0x160>
    1310:	6b 32       	cpi	r22, 0x2B	; 43
    1312:	09 f4       	brne	.+2      	; 0x1316 <_ZN5RFM6910initializeEhhh+0xc0>
    1314:	4c c0       	rjmp	.+152    	; 0x13ae <_ZN5RFM6910initializeEhhh+0x158>
    1316:	66 35       	cpi	r22, 0x56	; 86
    1318:	09 f0       	breq	.+2      	; 0x131c <_ZN5RFM6910initializeEhhh+0xc6>
    131a:	45 c0       	rjmp	.+138    	; 0x13a6 <_ZN5RFM6910initializeEhhh+0x150>
    131c:	50 c0       	rjmp	.+160    	; 0x13be <_ZN5RFM6910initializeEhhh+0x168>
    131e:	88 8b       	std	Y+16, r24	; 0x10
    1320:	2e 8f       	std	Y+30, r18	; 0x1e
    1322:	c8 01       	movw	r24, r16
    1324:	21 de       	rcall	.-958    	; 0xf68 <_ZN5RFM697spiInitEv>
    1326:	4a ea       	ldi	r20, 0xAA	; 170
    1328:	6f e2       	ldi	r22, 0x2F	; 47
    132a:	c8 01       	movw	r24, r16
    132c:	5c de       	rcall	.-840    	; 0xfe6 <_ZN5RFM698writeRegEhh>
    132e:	6f e2       	ldi	r22, 0x2F	; 47
    1330:	c8 01       	movw	r24, r16
    1332:	84 de       	rcall	.-760    	; 0x103c <_ZN5RFM697readRegEh>
    1334:	8a 3a       	cpi	r24, 0xAA	; 170
    1336:	b9 f7       	brne	.-18     	; 0x1326 <_ZN5RFM6910initializeEhhh+0xd0>
    1338:	45 e5       	ldi	r20, 0x55	; 85
    133a:	6f e2       	ldi	r22, 0x2F	; 47
    133c:	c8 01       	movw	r24, r16
    133e:	53 de       	rcall	.-858    	; 0xfe6 <_ZN5RFM698writeRegEhh>
    1340:	6f e2       	ldi	r22, 0x2F	; 47
    1342:	c8 01       	movw	r24, r16
    1344:	7b de       	rcall	.-778    	; 0x103c <_ZN5RFM697readRegEh>
    1346:	85 35       	cpi	r24, 0x55	; 85
    1348:	b9 f7       	brne	.-18     	; 0x1338 <_ZN5RFM6910initializeEhhh+0xe2>
    134a:	69 81       	ldd	r22, Y+1	; 0x01
    134c:	6f 3f       	cpi	r22, 0xFF	; 255
    134e:	f1 f0       	breq	.+60     	; 0x138c <_ZN5RFM6910initializeEhhh+0x136>
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	e1 2c       	mov	r14, r1
    1356:	fc 01       	movw	r30, r24
    1358:	ee 0f       	add	r30, r30
    135a:	ff 1f       	adc	r31, r31
    135c:	21 e0       	ldi	r18, 0x01	; 1
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	2c 0f       	add	r18, r28
    1362:	3d 1f       	adc	r19, r29
    1364:	e2 0f       	add	r30, r18
    1366:	f3 1f       	adc	r31, r19
    1368:	41 81       	ldd	r20, Z+1	; 0x01
    136a:	c8 01       	movw	r24, r16
    136c:	3c de       	rcall	.-904    	; 0xfe6 <_ZN5RFM698writeRegEhh>
    136e:	e3 94       	inc	r14
    1370:	8e 2d       	mov	r24, r14
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	fc 01       	movw	r30, r24
    1376:	ee 0f       	add	r30, r30
    1378:	ff 1f       	adc	r31, r31
    137a:	a1 e0       	ldi	r26, 0x01	; 1
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	ac 0f       	add	r26, r28
    1380:	bd 1f       	adc	r27, r29
    1382:	ea 0f       	add	r30, r26
    1384:	fb 1f       	adc	r31, r27
    1386:	60 81       	ld	r22, Z
    1388:	6f 3f       	cpi	r22, 0xFF	; 255
    138a:	29 f7       	brne	.-54     	; 0x1356 <_ZN5RFM6910initializeEhhh+0x100>
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	c8 01       	movw	r24, r16
    1392:	2e df       	rcall	.-420    	; 0x11f0 <_ZN5RFM697encryptEPKc>
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	c8 01       	movw	r24, r16
    1398:	80 de       	rcall	.-768    	; 0x109a <_ZN5RFM697setModeEh>
    139a:	67 e2       	ldi	r22, 0x27	; 39
    139c:	c8 01       	movw	r24, r16
    139e:	4e de       	rcall	.-868    	; 0x103c <_ZN5RFM697readRegEh>
    13a0:	88 23       	and	r24, r24
    13a2:	dc f7       	brge	.-10     	; 0x139a <_ZN5RFM6910initializeEhhh+0x144>
    13a4:	10 c0       	rjmp	.+32     	; 0x13c6 <_ZN5RFM6910initializeEhhh+0x170>
    13a6:	84 ee       	ldi	r24, 0xE4	; 228
    13a8:	8e 87       	std	Y+14, r24	; 0x0e
    13aa:	80 ec       	ldi	r24, 0xC0	; 192
    13ac:	b8 cf       	rjmp	.-144    	; 0x131e <_ZN5RFM6910initializeEhhh+0xc8>
    13ae:	8c e6       	ldi	r24, 0x6C	; 108
    13b0:	8e 87       	std	Y+14, r24	; 0x0e
    13b2:	80 e4       	ldi	r24, 0x40	; 64
    13b4:	b4 cf       	rjmp	.-152    	; 0x131e <_ZN5RFM6910initializeEhhh+0xc8>
    13b6:	8e e4       	ldi	r24, 0x4E	; 78
    13b8:	8e 87       	std	Y+14, r24	; 0x0e
    13ba:	80 ec       	ldi	r24, 0xC0	; 192
    13bc:	b0 cf       	rjmp	.-160    	; 0x131e <_ZN5RFM6910initializeEhhh+0xc8>
    13be:	89 ed       	ldi	r24, 0xD9	; 217
    13c0:	8e 87       	std	Y+14, r24	; 0x0e
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	ac cf       	rjmp	.-168    	; 0x131e <_ZN5RFM6910initializeEhhh+0xc8>
    13c6:	e9 e6       	ldi	r30, 0x69	; 105
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8d 7f       	andi	r24, 0xFD	; 253
    13ce:	80 83       	st	Z, r24
    13d0:	e8 9a       	sbi	0x1d, 0	; 29
    13d2:	10 93 5e 01 	sts	0x015E, r17
    13d6:	00 93 5d 01 	sts	0x015D, r16
    13da:	f8 01       	movw	r30, r16
    13dc:	f4 82       	std	Z+4, r15	; 0x04
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	aa 96       	adiw	r28, 0x2a	; 42
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	ff 90       	pop	r15
    13f6:	ef 90       	pop	r14
    13f8:	08 95       	ret

000013fa <_ZN5RFM6916interruptHandlerEv>:
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	ec 01       	movw	r28, r24
    1406:	80 91 67 01 	lds	r24, 0x0167
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	09 f0       	breq	.+2      	; 0x1410 <_ZN5RFM6916interruptHandlerEv+0x16>
    140e:	42 c0       	rjmp	.+132    	; 0x1494 <_ZN5RFM6916interruptHandlerEv+0x9a>
    1410:	68 e2       	ldi	r22, 0x28	; 40
    1412:	ce 01       	movw	r24, r28
    1414:	13 de       	rcall	.-986    	; 0x103c <_ZN5RFM697readRegEh>
    1416:	82 ff       	sbrs	r24, 2
    1418:	3d c0       	rjmp	.+122    	; 0x1494 <_ZN5RFM6916interruptHandlerEv+0x9a>
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	ce 01       	movw	r24, r28
    141e:	3d de       	rcall	.-902    	; 0x109a <_ZN5RFM697setModeEh>
    1420:	ce 01       	movw	r24, r28
    1422:	c3 dd       	rcall	.-1146   	; 0xfaa <_ZN5RFM696selectEv>
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	ce 01       	movw	r24, r28
    1428:	b8 dd       	rcall	.-1168   	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	ce 01       	movw	r24, r28
    142e:	b5 dd       	rcall	.-1174   	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    1430:	80 93 63 01 	sts	0x0163, r24
    1434:	80 91 63 01 	lds	r24, 0x0163
    1438:	83 34       	cpi	r24, 0x43	; 67
    143a:	18 f4       	brcc	.+6      	; 0x1442 <_ZN5RFM6916interruptHandlerEv+0x48>
    143c:	80 91 63 01 	lds	r24, 0x0163
    1440:	01 c0       	rjmp	.+2      	; 0x1444 <_ZN5RFM6916interruptHandlerEv+0x4a>
    1442:	82 e4       	ldi	r24, 0x42	; 66
    1444:	80 93 63 01 	sts	0x0163, r24
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	ce 01       	movw	r24, r28
    144c:	a6 dd       	rcall	.-1204   	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    144e:	80 93 64 01 	sts	0x0164, r24
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	81 11       	cpse	r24, r1
    1456:	2b c0       	rjmp	.+86     	; 0x14ae <_ZN5RFM6916interruptHandlerEv+0xb4>
    1458:	80 91 64 01 	lds	r24, 0x0164
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	98 17       	cp	r25, r24
    1460:	31 f1       	breq	.+76     	; 0x14ae <_ZN5RFM6916interruptHandlerEv+0xb4>
    1462:	80 91 64 01 	lds	r24, 0x0164
    1466:	8f 3f       	cpi	r24, 0xFF	; 255
    1468:	e9 f4       	brne	.+58     	; 0x14a4 <_ZN5RFM6916interruptHandlerEv+0xaa>
    146a:	21 c0       	rjmp	.+66     	; 0x14ae <_ZN5RFM6916interruptHandlerEv+0xb4>
    146c:	f1 2c       	mov	r15, r1
    146e:	0f 2d       	mov	r16, r15
    1470:	10 e0       	ldi	r17, 0x00	; 0
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	ce 01       	movw	r24, r28
    1476:	91 dd       	rcall	.-1246   	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    1478:	f8 01       	movw	r30, r16
    147a:	e8 59       	subi	r30, 0x98	; 152
    147c:	fe 4f       	sbci	r31, 0xFE	; 254
    147e:	80 83       	st	Z, r24
    1480:	f3 94       	inc	r15
    1482:	80 91 66 01 	lds	r24, 0x0166
    1486:	f8 16       	cp	r15, r24
    1488:	90 f3       	brcs	.-28     	; 0x146e <_ZN5RFM6916interruptHandlerEv+0x74>
    148a:	ce 01       	movw	r24, r28
    148c:	93 dd       	rcall	.-1242   	; 0xfb4 <_ZN5RFM698unselectEv>
    148e:	63 e0       	ldi	r22, 0x03	; 3
    1490:	ce 01       	movw	r24, r28
    1492:	03 de       	rcall	.-1018   	; 0x109a <_ZN5RFM697setModeEh>
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	ce 01       	movw	r24, r28
    1498:	e4 dd       	rcall	.-1080   	; 0x1062 <_ZN5RFM698readRSSIEb>
    149a:	90 93 60 01 	sts	0x0160, r25
    149e:	80 93 5f 01 	sts	0x015F, r24
    14a2:	1e c0       	rjmp	.+60     	; 0x14e0 <_ZN5RFM6916interruptHandlerEv+0xe6>
    14a4:	10 92 63 01 	sts	0x0163, r1
    14a8:	ce 01       	movw	r24, r28
    14aa:	84 dd       	rcall	.-1272   	; 0xfb4 <_ZN5RFM698unselectEv>
    14ac:	19 c0       	rjmp	.+50     	; 0x14e0 <_ZN5RFM6916interruptHandlerEv+0xe6>
    14ae:	80 91 63 01 	lds	r24, 0x0163
    14b2:	83 50       	subi	r24, 0x03	; 3
    14b4:	80 93 66 01 	sts	0x0166, r24
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	ce 01       	movw	r24, r28
    14bc:	6e dd       	rcall	.-1316   	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    14be:	80 93 65 01 	sts	0x0165, r24
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	ce 01       	movw	r24, r28
    14c6:	69 dd       	rcall	.-1326   	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    14c8:	98 2f       	mov	r25, r24
    14ca:	90 78       	andi	r25, 0x80	; 128
    14cc:	90 93 61 01 	sts	0x0161, r25
    14d0:	80 74       	andi	r24, 0x40	; 64
    14d2:	80 93 62 01 	sts	0x0162, r24
    14d6:	80 91 66 01 	lds	r24, 0x0166
    14da:	81 11       	cpse	r24, r1
    14dc:	c7 cf       	rjmp	.-114    	; 0x146c <_ZN5RFM6916interruptHandlerEv+0x72>
    14de:	d5 cf       	rjmp	.-86     	; 0x148a <_ZN5RFM6916interruptHandlerEv+0x90>
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	ff 90       	pop	r15
    14ea:	08 95       	ret

000014ec <_ZN5RFM699sendFrameEhPKvhbb>:
    14ec:	bf 92       	push	r11
    14ee:	cf 92       	push	r12
    14f0:	df 92       	push	r13
    14f2:	ef 92       	push	r14
    14f4:	ff 92       	push	r15
    14f6:	0f 93       	push	r16
    14f8:	1f 93       	push	r17
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	6c 01       	movw	r12, r24
    1500:	c6 2f       	mov	r28, r22
    1502:	f4 2e       	mov	r15, r20
    1504:	b5 2e       	mov	r11, r21
    1506:	12 2f       	mov	r17, r18
    1508:	61 e0       	ldi	r22, 0x01	; 1
    150a:	c7 dd       	rcall	.-1138   	; 0x109a <_ZN5RFM697setModeEh>
    150c:	67 e2       	ldi	r22, 0x27	; 39
    150e:	c6 01       	movw	r24, r12
    1510:	95 dd       	rcall	.-1238   	; 0x103c <_ZN5RFM697readRegEh>
    1512:	88 23       	and	r24, r24
    1514:	dc f7       	brge	.-10     	; 0x150c <_ZN5RFM699sendFrameEhPKvhbb+0x20>
    1516:	40 e0       	ldi	r20, 0x00	; 0
    1518:	65 e2       	ldi	r22, 0x25	; 37
    151a:	c6 01       	movw	r24, r12
    151c:	64 dd       	rcall	.-1336   	; 0xfe6 <_ZN5RFM698writeRegEhh>
    151e:	1e 33       	cpi	r17, 0x3E	; 62
    1520:	08 f0       	brcs	.+2      	; 0x1524 <_ZN5RFM699sendFrameEhPKvhbb+0x38>
    1522:	1d e3       	ldi	r17, 0x3D	; 61
    1524:	c6 01       	movw	r24, r12
    1526:	41 dd       	rcall	.-1406   	; 0xfaa <_ZN5RFM696selectEv>
    1528:	60 e8       	ldi	r22, 0x80	; 128
    152a:	c6 01       	movw	r24, r12
    152c:	36 dd       	rcall	.-1428   	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    152e:	61 2f       	mov	r22, r17
    1530:	6d 5f       	subi	r22, 0xFD	; 253
    1532:	c6 01       	movw	r24, r12
    1534:	32 dd       	rcall	.-1436   	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    1536:	6c 2f       	mov	r22, r28
    1538:	c6 01       	movw	r24, r12
    153a:	2f dd       	rcall	.-1442   	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    153c:	f6 01       	movw	r30, r12
    153e:	64 81       	ldd	r22, Z+4	; 0x04
    1540:	c6 01       	movw	r24, r12
    1542:	2b dd       	rcall	.-1450   	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    1544:	ee 20       	and	r14, r14
    1546:	31 f0       	breq	.+12     	; 0x1554 <_ZN5RFM699sendFrameEhPKvhbb+0x68>
    1548:	60 e8       	ldi	r22, 0x80	; 128
    154a:	c6 01       	movw	r24, r12
    154c:	26 dd       	rcall	.-1460   	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    154e:	11 11       	cpse	r17, r1
    1550:	0b c0       	rjmp	.+22     	; 0x1568 <_ZN5RFM699sendFrameEhPKvhbb+0x7c>
    1552:	14 c0       	rjmp	.+40     	; 0x157c <_ZN5RFM699sendFrameEhPKvhbb+0x90>
    1554:	00 23       	and	r16, r16
    1556:	21 f0       	breq	.+8      	; 0x1560 <_ZN5RFM699sendFrameEhPKvhbb+0x74>
    1558:	60 e4       	ldi	r22, 0x40	; 64
    155a:	c6 01       	movw	r24, r12
    155c:	1e dd       	rcall	.-1476   	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    155e:	f7 cf       	rjmp	.-18     	; 0x154e <_ZN5RFM699sendFrameEhPKvhbb+0x62>
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	c6 01       	movw	r24, r12
    1564:	1a dd       	rcall	.-1484   	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    1566:	f3 cf       	rjmp	.-26     	; 0x154e <_ZN5RFM699sendFrameEhPKvhbb+0x62>
    1568:	0f 2d       	mov	r16, r15
    156a:	cf 2d       	mov	r28, r15
    156c:	db 2d       	mov	r29, r11
    156e:	69 91       	ld	r22, Y+
    1570:	c6 01       	movw	r24, r12
    1572:	13 dd       	rcall	.-1498   	; 0xf9a <_ZN5RFM6915spiTransferByteEh>
    1574:	8c 2f       	mov	r24, r28
    1576:	80 1b       	sub	r24, r16
    1578:	81 17       	cp	r24, r17
    157a:	c8 f3       	brcs	.-14     	; 0x156e <_ZN5RFM699sendFrameEhPKvhbb+0x82>
    157c:	c6 01       	movw	r24, r12
    157e:	1a dd       	rcall	.-1484   	; 0xfb4 <_ZN5RFM698unselectEv>
    1580:	f8 94       	cli
    1582:	64 e0       	ldi	r22, 0x04	; 4
    1584:	c6 01       	movw	r24, r12
    1586:	89 dd       	rcall	.-1262   	; 0x109a <_ZN5RFM697setModeEh>
    1588:	4a 99       	sbic	0x09, 2	; 9
    158a:	fe cf       	rjmp	.-4      	; 0x1588 <_ZN5RFM699sendFrameEhPKvhbb+0x9c>
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	c6 01       	movw	r24, r12
    1590:	84 dd       	rcall	.-1272   	; 0x109a <_ZN5RFM697setModeEh>
    1592:	78 94       	sei
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	ff 90       	pop	r15
    159e:	ef 90       	pop	r14
    15a0:	df 90       	pop	r13
    15a2:	cf 90       	pop	r12
    15a4:	bf 90       	pop	r11
    15a6:	08 95       	ret

000015a8 <_ZN5RFM6911receiveDoneEv>:
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	ec 01       	movw	r28, r24
    15ae:	fb dc       	rcall	.-1546   	; 0xfa6 <_ZN5RFM6912noInterruptsEv>
    15b0:	80 91 67 01 	lds	r24, 0x0167
    15b4:	83 30       	cpi	r24, 0x03	; 3
    15b6:	69 f4       	brne	.+26     	; 0x15d2 <_ZN5RFM6911receiveDoneEv+0x2a>
    15b8:	80 91 63 01 	lds	r24, 0x0163
    15bc:	81 11       	cpse	r24, r1
    15be:	0e c0       	rjmp	.+28     	; 0x15dc <_ZN5RFM6911receiveDoneEv+0x34>
    15c0:	08 c0       	rjmp	.+16     	; 0x15d2 <_ZN5RFM6911receiveDoneEv+0x2a>
    15c2:	ce 01       	movw	r24, r28
    15c4:	f5 dc       	rcall	.-1558   	; 0xfb0 <_ZN5RFM6915allowInterruptsEv>
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	0d c0       	rjmp	.+26     	; 0x15e4 <_ZN5RFM6911receiveDoneEv+0x3c>
    15ca:	ce 01       	movw	r24, r28
    15cc:	e8 dd       	rcall	.-1072   	; 0x119e <_ZN5RFM6912receiveBeginEv>
    15ce:	80 e0       	ldi	r24, 0x00	; 0
    15d0:	09 c0       	rjmp	.+18     	; 0x15e4 <_ZN5RFM6911receiveDoneEv+0x3c>
    15d2:	80 91 67 01 	lds	r24, 0x0167
    15d6:	83 30       	cpi	r24, 0x03	; 3
    15d8:	c1 f7       	brne	.-16     	; 0x15ca <_ZN5RFM6911receiveDoneEv+0x22>
    15da:	f3 cf       	rjmp	.-26     	; 0x15c2 <_ZN5RFM6911receiveDoneEv+0x1a>
    15dc:	61 e0       	ldi	r22, 0x01	; 1
    15de:	ce 01       	movw	r24, r28
    15e0:	5c dd       	rcall	.-1352   	; 0x109a <_ZN5RFM697setModeEh>
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	08 95       	ret

000015ea <_ZN5RFM694sendEhPKvhb>:
  }
  return false;
}

void RFM69::send(byte toAddress, const void* buffer, byte bufferSize, bool requestACK)
{
    15ea:	4f 92       	push	r4
    15ec:	5f 92       	push	r5
    15ee:	6f 92       	push	r6
    15f0:	7f 92       	push	r7
    15f2:	9f 92       	push	r9
    15f4:	af 92       	push	r10
    15f6:	bf 92       	push	r11
    15f8:	cf 92       	push	r12
    15fa:	df 92       	push	r13
    15fc:	ef 92       	push	r14
    15fe:	ff 92       	push	r15
    1600:	0f 93       	push	r16
    1602:	1f 93       	push	r17
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	ec 01       	movw	r28, r24
    160a:	16 2f       	mov	r17, r22
    160c:	5a 01       	movw	r10, r20
    160e:	92 2e       	mov	r9, r18
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    1610:	6d e3       	ldi	r22, 0x3D	; 61
    1612:	14 dd       	rcall	.-1496   	; 0x103c <_ZN5RFM697readRegEh>
    1614:	48 2f       	mov	r20, r24
    1616:	44 60       	ori	r20, 0x04	; 4
    1618:	6d e3       	ldi	r22, 0x3D	; 61
    161a:	ce 01       	movw	r24, r28
    161c:	e4 dc       	rcall	.-1592   	; 0xfe6 <_ZN5RFM698writeRegEhh>
  long now = millis();
    161e:	5b d8       	rcall	.-3914   	; 0x6d6 <millis_get>
    1620:	2b 01       	movw	r4, r22
    1622:	3c 01       	movw	r6, r24
  while (!canSend() && millis()-now < RF69_CSMA_LIMIT_MS) receiveDone();
    1624:	02 c0       	rjmp	.+4      	; 0x162a <_ZN5RFM694sendEhPKvhb+0x40>
    1626:	ce 01       	movw	r24, r28
    1628:	bf df       	rcall	.-130    	; 0x15a8 <_ZN5RFM6911receiveDoneEv>
    162a:	ce 01       	movw	r24, r28
    162c:	9a dd       	rcall	.-1228   	; 0x1162 <_ZN5RFM697canSendEv>
    162e:	81 11       	cpse	r24, r1
    1630:	0e c0       	rjmp	.+28     	; 0x164e <_ZN5RFM694sendEhPKvhb+0x64>
    1632:	51 d8       	rcall	.-3934   	; 0x6d6 <millis_get>
    1634:	6b 01       	movw	r12, r22
    1636:	7c 01       	movw	r14, r24
    1638:	c4 18       	sub	r12, r4
    163a:	d5 08       	sbc	r13, r5
    163c:	e6 08       	sbc	r14, r6
    163e:	f7 08       	sbc	r15, r7
    1640:	88 ee       	ldi	r24, 0xE8	; 232
    1642:	c8 16       	cp	r12, r24
    1644:	83 e0       	ldi	r24, 0x03	; 3
    1646:	d8 06       	cpc	r13, r24
    1648:	e1 04       	cpc	r14, r1
    164a:	f1 04       	cpc	r15, r1
    164c:	60 f3       	brcs	.-40     	; 0x1626 <_ZN5RFM694sendEhPKvhb+0x3c>
  sendFrame(toAddress, buffer, bufferSize, requestACK, false);
    164e:	e1 2c       	mov	r14, r1
    1650:	29 2d       	mov	r18, r9
    1652:	a5 01       	movw	r20, r10
    1654:	61 2f       	mov	r22, r17
    1656:	ce 01       	movw	r24, r28
    1658:	49 df       	rcall	.-366    	; 0x14ec <_ZN5RFM699sendFrameEhPKvhbb>
}
    165a:	df 91       	pop	r29
    165c:	cf 91       	pop	r28
    165e:	1f 91       	pop	r17
    1660:	0f 91       	pop	r16
    1662:	ff 90       	pop	r15
    1664:	ef 90       	pop	r14
    1666:	df 90       	pop	r13
    1668:	cf 90       	pop	r12
    166a:	bf 90       	pop	r11
    166c:	af 90       	pop	r10
    166e:	9f 90       	pop	r9
    1670:	7f 90       	pop	r7
    1672:	6f 90       	pop	r6
    1674:	5f 90       	pop	r5
    1676:	4f 90       	pop	r4
    1678:	08 95       	ret

0000167a <tone_init>:
#include <avr/power.h>

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume counsigned long _tAC_time;ntrol.

void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
    167a:	21 9a       	sbi	0x04, 1	; 4
    167c:	08 95       	ret

0000167e <noTone>:


	void noTone() {
	//	uart0_puts("STOP");
	//	TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
		 TCCR1B  &= ~(1<<0) | ~(1<<1) | ~(1<<2) ;        // No clock source (Timer/Counter stopped).
    167e:	e1 e8       	ldi	r30, 0x81	; 129
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	80 83       	st	Z, r24
		 TCCR1A  = 0x00;       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
    1686:	10 92 80 00 	sts	0x0080, r1
		 power_timer1_disable();
    168a:	e4 e6       	ldi	r30, 0x64	; 100
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	88 60       	ori	r24, 0x08	; 8
    1692:	80 83       	st	Z, r24
		PORTB &= ~(1 << 1); // Set pin PB1 to LOW.
    1694:	29 98       	cbi	0x05, 1	; 5
    1696:	08 95       	ret

00001698 <tone>:
void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
	
}

void tone(unsigned long frequency, uint8_t volume) {
    1698:	cf 92       	push	r12
    169a:	df 92       	push	r13
    169c:	ef 92       	push	r14
    169e:	ff 92       	push	r15
    16a0:	cf 93       	push	r28
    16a2:	df 93       	push	r29
    16a4:	6b 01       	movw	r12, r22
    16a6:	7c 01       	movw	r14, r24
	 power_timer1_enable();
    16a8:	e4 e6       	ldi	r30, 0x64	; 100
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	87 7f       	andi	r24, 0xF7	; 247
    16b0:	80 83       	st	Z, r24
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
    16b2:	c1 14       	cp	r12, r1
    16b4:	d1 04       	cpc	r13, r1
    16b6:	e1 04       	cpc	r14, r1
    16b8:	f1 04       	cpc	r15, r1
    16ba:	11 f0       	breq	.+4      	; 0x16c0 <tone+0x28>
    16bc:	41 11       	cpse	r20, r1
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <tone+0x2c>
    16c0:	de df       	rcall	.-68     	; 0x167e <noTone>
    16c2:	4d c0       	rjmp	.+154    	; 0x175e <tone+0xc6>
    16c4:	d4 2f       	mov	r29, r20
    16c6:	4b 30       	cpi	r20, 0x0B	; 11
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <tone+0x34>
    16ca:	da e0       	ldi	r29, 0x0A	; 10
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	72 e1       	ldi	r23, 0x12	; 18
    16d0:	8a e7       	ldi	r24, 0x7A	; 122
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	a7 01       	movw	r20, r14
    16d6:	96 01       	movw	r18, r12
    16d8:	eb d0       	rcall	.+470    	; 0x18b0 <__udivmodsi4>
    16da:	cc 24       	eor	r12, r12
    16dc:	ca 94       	dec	r12
    16de:	dc 2c       	mov	r13, r12
    16e0:	76 01       	movw	r14, r12
    16e2:	c2 0e       	add	r12, r18
    16e4:	d3 1e       	adc	r13, r19
    16e6:	e4 1e       	adc	r14, r20
    16e8:	f5 1e       	adc	r15, r21
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    16ea:	c1 14       	cp	r12, r1
    16ec:	d1 04       	cpc	r13, r1
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	e8 06       	cpc	r14, r24
    16f2:	f1 04       	cpc	r15, r1
    16f4:	58 f0       	brcs	.+22     	; 0x170c <tone+0x74>
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
    16f6:	cd 2c       	mov	r12, r13
    16f8:	de 2c       	mov	r13, r14
    16fa:	ef 2c       	mov	r14, r15
    16fc:	ff 24       	eor	r15, r15
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	c8 1a       	sub	r12, r24
    1702:	d1 08       	sbc	r13, r1
    1704:	e1 08       	sbc	r14, r1
    1706:	f1 08       	sbc	r15, r1
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    1708:	c4 e0       	ldi	r28, 0x04	; 4
    170a:	01 c0       	rjmp	.+2      	; 0x170e <tone+0x76>
	 power_timer1_enable();
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
    170c:	c1 e0       	ldi	r28, 0x01	; 1
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
		}
	
		unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
    170e:	ed 2f       	mov	r30, r29
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	e1 50       	subi	r30, 0x01	; 1
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	20 81       	ld	r18, Z
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e0       	ldi	r20, 0x00	; 0
    171c:	50 e0       	ldi	r21, 0x00	; 0
    171e:	c7 01       	movw	r24, r14
    1720:	b6 01       	movw	r22, r12
    1722:	c6 d0       	rcall	.+396    	; 0x18b0 <__udivmodsi4>
		
		ICR1   = top;							// Set the top.
    1724:	d0 92 87 00 	sts	0x0087, r13
    1728:	c0 92 86 00 	sts	0x0086, r12
		if (TCNT1 > top) TCNT1 = top;			// Counter over the top, put within range.
    172c:	80 91 84 00 	lds	r24, 0x0084
    1730:	90 91 85 00 	lds	r25, 0x0085
    1734:	a0 e0       	ldi	r26, 0x00	; 0
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	c8 16       	cp	r12, r24
    173a:	d9 06       	cpc	r13, r25
    173c:	ea 06       	cpc	r14, r26
    173e:	fb 06       	cpc	r15, r27
    1740:	20 f4       	brcc	.+8      	; 0x174a <tone+0xb2>
    1742:	d0 92 85 00 	sts	0x0085, r13
    1746:	c0 92 84 00 	sts	0x0084, r12
			TCCR1B = _BV(WGM13)  | prescaler;   // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
    174a:	c0 61       	ori	r28, 0x10	; 16
    174c:	c0 93 81 00 	sts	0x0081, r28
			OCR1A  = duty;						// Set the duty cycle (volume).
    1750:	30 93 89 00 	sts	0x0089, r19
    1754:	20 93 88 00 	sts	0x0088, r18
			TCCR1A = _BV(COM1A1);				// Clear OC1A/OC1B on Compare Match (Set output to low level).
    1758:	80 e8       	ldi	r24, 0x80	; 128
    175a:	80 93 80 00 	sts	0x0080, r24
			

}
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	ff 90       	pop	r15
    1764:	ef 90       	pop	r14
    1766:	df 90       	pop	r13
    1768:	cf 90       	pop	r12
    176a:	08 95       	ret

0000176c <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    176c:	1f 92       	push	r1
    176e:	0f 92       	push	r0
    1770:	0f b6       	in	r0, 0x3f	; 63
    1772:	0f 92       	push	r0
    1774:	11 24       	eor	r1, r1
    1776:	2f 93       	push	r18
    1778:	3f 93       	push	r19
    177a:	4f 93       	push	r20
    177c:	5f 93       	push	r21
    177e:	8f 93       	push	r24
    1780:	9f 93       	push	r25
    1782:	ef 93       	push	r30
    1784:	ff 93       	push	r31
    1786:	40 91 c0 00 	lds	r20, 0x00C0
    178a:	50 91 c6 00 	lds	r21, 0x00C6
    178e:	48 71       	andi	r20, 0x18	; 24
    1790:	80 91 a7 01 	lds	r24, 0x01A7
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	01 96       	adiw	r24, 0x01	; 1
    1798:	8f 77       	andi	r24, 0x7F	; 127
    179a:	99 27       	eor	r25, r25
    179c:	20 91 a6 01 	lds	r18, 0x01A6
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	28 17       	cp	r18, r24
    17a4:	39 07       	cpc	r19, r25
    17a6:	39 f0       	breq	.+14     	; 0x17b6 <__vector_18+0x4a>
    17a8:	80 93 a7 01 	sts	0x01A7, r24
    17ac:	fc 01       	movw	r30, r24
    17ae:	e6 55       	subi	r30, 0x56	; 86
    17b0:	fe 4f       	sbci	r31, 0xFE	; 254
    17b2:	50 83       	st	Z, r21
    17b4:	01 c0       	rjmp	.+2      	; 0x17b8 <__vector_18+0x4c>
    17b6:	42 e0       	ldi	r20, 0x02	; 2
    17b8:	40 93 a5 01 	sts	0x01A5, r20
    17bc:	ff 91       	pop	r31
    17be:	ef 91       	pop	r30
    17c0:	9f 91       	pop	r25
    17c2:	8f 91       	pop	r24
    17c4:	5f 91       	pop	r21
    17c6:	4f 91       	pop	r20
    17c8:	3f 91       	pop	r19
    17ca:	2f 91       	pop	r18
    17cc:	0f 90       	pop	r0
    17ce:	0f be       	out	0x3f, r0	; 63
    17d0:	0f 90       	pop	r0
    17d2:	1f 90       	pop	r1
    17d4:	18 95       	reti

000017d6 <__vector_19>:
    17d6:	1f 92       	push	r1
    17d8:	0f 92       	push	r0
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	0f 92       	push	r0
    17de:	11 24       	eor	r1, r1
    17e0:	8f 93       	push	r24
    17e2:	9f 93       	push	r25
    17e4:	ef 93       	push	r30
    17e6:	ff 93       	push	r31
    17e8:	90 91 a9 01 	lds	r25, 0x01A9
    17ec:	80 91 a8 01 	lds	r24, 0x01A8
    17f0:	98 17       	cp	r25, r24
    17f2:	79 f0       	breq	.+30     	; 0x1812 <__vector_19+0x3c>
    17f4:	80 91 a8 01 	lds	r24, 0x01A8
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	8f 77       	andi	r24, 0x7F	; 127
    17fe:	99 27       	eor	r25, r25
    1800:	80 93 a8 01 	sts	0x01A8, r24
    1804:	fc 01       	movw	r30, r24
    1806:	e6 5d       	subi	r30, 0xD6	; 214
    1808:	fd 4f       	sbci	r31, 0xFD	; 253
    180a:	80 81       	ld	r24, Z
    180c:	80 93 c6 00 	sts	0x00C6, r24
    1810:	05 c0       	rjmp	.+10     	; 0x181c <__vector_19+0x46>
    1812:	e1 ec       	ldi	r30, 0xC1	; 193
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	8f 7d       	andi	r24, 0xDF	; 223
    181a:	80 83       	st	Z, r24
    181c:	ff 91       	pop	r31
    181e:	ef 91       	pop	r30
    1820:	9f 91       	pop	r25
    1822:	8f 91       	pop	r24
    1824:	0f 90       	pop	r0
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	0f 90       	pop	r0
    182a:	1f 90       	pop	r1
    182c:	18 95       	reti

0000182e <uart0_init>:
    182e:	10 92 a9 01 	sts	0x01A9, r1
    1832:	10 92 a8 01 	sts	0x01A8, r1
    1836:	10 92 a7 01 	sts	0x01A7, r1
    183a:	10 92 a6 01 	sts	0x01A6, r1
    183e:	99 23       	and	r25, r25
    1840:	24 f4       	brge	.+8      	; 0x184a <uart0_init+0x1c>
    1842:	22 e0       	ldi	r18, 0x02	; 2
    1844:	20 93 c0 00 	sts	0x00C0, r18
    1848:	9f 77       	andi	r25, 0x7F	; 127
    184a:	90 93 c5 00 	sts	0x00C5, r25
    184e:	80 93 c4 00 	sts	0x00C4, r24
    1852:	88 e9       	ldi	r24, 0x98	; 152
    1854:	80 93 c1 00 	sts	0x00C1, r24
    1858:	86 e0       	ldi	r24, 0x06	; 6
    185a:	80 93 c2 00 	sts	0x00C2, r24
    185e:	08 95       	ret

00001860 <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    1860:	60 91 a9 01 	lds	r22, 0x01A9
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	6f 5f       	subi	r22, 0xFF	; 255
    1868:	7f 4f       	sbci	r23, 0xFF	; 255
    186a:	6f 77       	andi	r22, 0x7F	; 127
    186c:	77 27       	eor	r23, r23
    186e:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
    1870:	20 91 a8 01 	lds	r18, 0x01A8
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	24 17       	cp	r18, r20
    1878:	35 07       	cpc	r19, r21
    187a:	d1 f3       	breq	.-12     	; 0x1870 <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    187c:	fb 01       	movw	r30, r22
    187e:	e6 5d       	subi	r30, 0xD6	; 214
    1880:	fd 4f       	sbci	r31, 0xFD	; 253
    1882:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    1884:	60 93 a9 01 	sts	0x01A9, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
    1888:	e1 ec       	ldi	r30, 0xC1	; 193
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	80 62       	ori	r24, 0x20	; 32
    1890:	80 83       	st	Z, r24
    1892:	08 95       	ret

00001894 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	ec 01       	movw	r28, r24
	while (*s) {
    189a:	88 81       	ld	r24, Y
    189c:	88 23       	and	r24, r24
    189e:	29 f0       	breq	.+10     	; 0x18aa <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
    18a0:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
    18a2:	de df       	rcall	.-68     	; 0x1860 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
    18a4:	89 91       	ld	r24, Y+
    18a6:	81 11       	cpse	r24, r1
    18a8:	fc cf       	rjmp	.-8      	; 0x18a2 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    18aa:	df 91       	pop	r29
    18ac:	cf 91       	pop	r28
    18ae:	08 95       	ret

000018b0 <__udivmodsi4>:
    18b0:	a1 e2       	ldi	r26, 0x21	; 33
    18b2:	1a 2e       	mov	r1, r26
    18b4:	aa 1b       	sub	r26, r26
    18b6:	bb 1b       	sub	r27, r27
    18b8:	fd 01       	movw	r30, r26
    18ba:	0d c0       	rjmp	.+26     	; 0x18d6 <__udivmodsi4_ep>

000018bc <__udivmodsi4_loop>:
    18bc:	aa 1f       	adc	r26, r26
    18be:	bb 1f       	adc	r27, r27
    18c0:	ee 1f       	adc	r30, r30
    18c2:	ff 1f       	adc	r31, r31
    18c4:	a2 17       	cp	r26, r18
    18c6:	b3 07       	cpc	r27, r19
    18c8:	e4 07       	cpc	r30, r20
    18ca:	f5 07       	cpc	r31, r21
    18cc:	20 f0       	brcs	.+8      	; 0x18d6 <__udivmodsi4_ep>
    18ce:	a2 1b       	sub	r26, r18
    18d0:	b3 0b       	sbc	r27, r19
    18d2:	e4 0b       	sbc	r30, r20
    18d4:	f5 0b       	sbc	r31, r21

000018d6 <__udivmodsi4_ep>:
    18d6:	66 1f       	adc	r22, r22
    18d8:	77 1f       	adc	r23, r23
    18da:	88 1f       	adc	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	1a 94       	dec	r1
    18e0:	69 f7       	brne	.-38     	; 0x18bc <__udivmodsi4_loop>
    18e2:	60 95       	com	r22
    18e4:	70 95       	com	r23
    18e6:	80 95       	com	r24
    18e8:	90 95       	com	r25
    18ea:	9b 01       	movw	r18, r22
    18ec:	ac 01       	movw	r20, r24
    18ee:	bd 01       	movw	r22, r26
    18f0:	cf 01       	movw	r24, r30
    18f2:	08 95       	ret

000018f4 <__tablejump2__>:
    18f4:	ee 0f       	add	r30, r30
    18f6:	ff 1f       	adc	r31, r31

000018f8 <__tablejump__>:
    18f8:	05 90       	lpm	r0, Z+
    18fa:	f4 91       	lpm	r31, Z
    18fc:	e0 2d       	mov	r30, r0
    18fe:	09 94       	ijmp

00001900 <_exit>:
    1900:	f8 94       	cli

00001902 <__stop_program>:
    1902:	ff cf       	rjmp	.-2      	; 0x1902 <__stop_program>
