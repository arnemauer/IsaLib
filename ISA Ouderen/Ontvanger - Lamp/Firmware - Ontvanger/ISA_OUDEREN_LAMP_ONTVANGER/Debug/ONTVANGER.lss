
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00001adc  00001b70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001adc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000170  0080013c  0080013c  00001bac  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  00001bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fe  00000000  00000000  00002830  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002a2e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000420  00000000  00000000  00002a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005009  00000000  00000000  00002e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001292  00000000  00000000  00007e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000027e9  00000000  00000000  00009118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bb4  00000000  00000000  0000b904  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000011c0  00000000  00000000  0000c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000030ca  00000000  00000000  0000d678  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003e8  00000000  00000000  00010742  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ec c2       	rjmp	.+1496   	; 0x5da <__ctors_end>
       2:	00 00       	nop
       4:	e3 c3       	rjmp	.+1990   	; 0x7cc <__vector_1>
       6:	00 00       	nop
       8:	0f c3       	rjmp	.+1566   	; 0x628 <__bad_interrupt>
       a:	00 00       	nop
       c:	0d c3       	rjmp	.+1562   	; 0x628 <__bad_interrupt>
       e:	00 00       	nop
      10:	0b c3       	rjmp	.+1558   	; 0x628 <__bad_interrupt>
      12:	00 00       	nop
      14:	09 c3       	rjmp	.+1554   	; 0x628 <__bad_interrupt>
      16:	00 00       	nop
      18:	07 c3       	rjmp	.+1550   	; 0x628 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b9 c7       	rjmp	.+3954   	; 0xf90 <__vector_7>
      1e:	00 00       	nop
      20:	03 c3       	rjmp	.+1542   	; 0x628 <__bad_interrupt>
      22:	00 00       	nop
      24:	01 c3       	rjmp	.+1538   	; 0x628 <__bad_interrupt>
      26:	00 00       	nop
      28:	ff c2       	rjmp	.+1534   	; 0x628 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	fd c2       	rjmp	.+1530   	; 0x628 <__bad_interrupt>
      2e:	00 00       	nop
      30:	fb c2       	rjmp	.+1526   	; 0x628 <__bad_interrupt>
      32:	00 00       	nop
      34:	f9 c2       	rjmp	.+1522   	; 0x628 <__bad_interrupt>
      36:	00 00       	nop
      38:	84 c3       	rjmp	.+1800   	; 0x742 <__vector_14>
      3a:	00 00       	nop
      3c:	f5 c2       	rjmp	.+1514   	; 0x628 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f3 c2       	rjmp	.+1510   	; 0x628 <__bad_interrupt>
      42:	00 00       	nop
      44:	f1 c2       	rjmp	.+1506   	; 0x628 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 a2 0c 	jmp	0x1944	; 0x1944 <__vector_18>
      4c:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__vector_19>
      50:	eb c2       	rjmp	.+1494   	; 0x628 <__bad_interrupt>
      52:	00 00       	nop
      54:	e9 c2       	rjmp	.+1490   	; 0x628 <__bad_interrupt>
      56:	00 00       	nop
      58:	e7 c2       	rjmp	.+1486   	; 0x628 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e5 c2       	rjmp	.+1482   	; 0x628 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e3 c2       	rjmp	.+1478   	; 0x628 <__bad_interrupt>
      62:	00 00       	nop
      64:	e1 c2       	rjmp	.+1474   	; 0x628 <__bad_interrupt>
	...

00000068 <_ZL16icon_led_numbers>:
      68:	0c 0b 0a 0f 0e 0d 07 08 09 02 01 00                 ............

00000074 <_ZL22sound_pattern_doorbell>:
      74:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      84:	b0 04 00 00 f4 01 00 00 00 00 00 00 e8 03 00 00     ................
      94:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      a4:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000000b4 <_ZL19sound_pattern_phone>:
      b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     104:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     114:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     124:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     134:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     144:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     154:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     164:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     174:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     184:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     194:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     1a4:	00 00 00 00 e8 03 00 00 e8 03 00 00 28 00 00 00     ............(...
     1b4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1c4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1d4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1e4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1f4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     204:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     214:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     224:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     234:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     244:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     254:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     264:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     274:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     284:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     294:	ee 02 00 00 28 00 00 00 00 00 00 00 e8 03 00 00     ....(...........
     2a4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     304:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     314:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     324:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     334:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     344:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     354:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     364:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     374:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     384:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     394:	00 00 00 00 e8 03 00 00 00 00 00 00 00 00 00 00     ................
	...

000003b4 <_ZL18sound_pattern_fire>:
     3b4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3c4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3d4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3e4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3f4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     404:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     414:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     424:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...

00000434 <_ZL18sound_pattern_help>:
     434:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     444:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     454:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     464:	1c 07 00 00 c8 00 00 00 a5 05 00 00 c8 00 00 00     ................
     474:	00 00 00 00 e8 03 00 00 1c 07 00 00 c8 00 00 00     ................
     484:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     494:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     4a4:	a5 05 00 00 c8 00 00 00 1c 07 00 00 c8 00 00 00     ................
     4b4:	a5 05 00 00 c8 00 00 00 00 00 00 00 e8 03 00 00     ................
	...

000004cc <_ZL13flash_pattern>:
     4cc:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4dc:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4ec:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4fc:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     50c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     51c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     52c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     53c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     54c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     55c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     56c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     57c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     58c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     59c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     5ac:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     5bc:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...

000005cc <_ZL11icon_colors>:
     5cc:	3d f5 00 00 b8 f5 ff 00 00 ff ff 00                 =...........

000005d8 <__ctors_start>:
     5d8:	3b 08       	sbc	r3, r11

000005da <__ctors_end>:
     5da:	11 24       	eor	r1, r1
     5dc:	1f be       	out	0x3f, r1	; 63
     5de:	cf ef       	ldi	r28, 0xFF	; 255
     5e0:	d8 e0       	ldi	r29, 0x08	; 8
     5e2:	de bf       	out	0x3e, r29	; 62
     5e4:	cd bf       	out	0x3d, r28	; 61

000005e6 <__do_copy_data>:
     5e6:	11 e0       	ldi	r17, 0x01	; 1
     5e8:	a0 e0       	ldi	r26, 0x00	; 0
     5ea:	b1 e0       	ldi	r27, 0x01	; 1
     5ec:	ec ed       	ldi	r30, 0xDC	; 220
     5ee:	fa e1       	ldi	r31, 0x1A	; 26
     5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <__do_copy_data+0x10>
     5f2:	05 90       	lpm	r0, Z+
     5f4:	0d 92       	st	X+, r0
     5f6:	ac 33       	cpi	r26, 0x3C	; 60
     5f8:	b1 07       	cpc	r27, r17
     5fa:	d9 f7       	brne	.-10     	; 0x5f2 <__do_copy_data+0xc>

000005fc <__do_clear_bss>:
     5fc:	22 e0       	ldi	r18, 0x02	; 2
     5fe:	ac e3       	ldi	r26, 0x3C	; 60
     600:	b1 e0       	ldi	r27, 0x01	; 1
     602:	01 c0       	rjmp	.+2      	; 0x606 <.do_clear_bss_start>

00000604 <.do_clear_bss_loop>:
     604:	1d 92       	st	X+, r1

00000606 <.do_clear_bss_start>:
     606:	ac 3a       	cpi	r26, 0xAC	; 172
     608:	b2 07       	cpc	r27, r18
     60a:	e1 f7       	brne	.-8      	; 0x604 <.do_clear_bss_loop>

0000060c <__do_global_ctors>:
     60c:	15 e0       	ldi	r17, 0x05	; 5
     60e:	ca ed       	ldi	r28, 0xDA	; 218
     610:	d5 e0       	ldi	r29, 0x05	; 5
     612:	04 c0       	rjmp	.+8      	; 0x61c <__do_global_ctors+0x10>
     614:	22 97       	sbiw	r28, 0x02	; 2
     616:	fe 01       	movw	r30, r28
     618:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <__tablejump__>
     61c:	c8 3d       	cpi	r28, 0xD8	; 216
     61e:	d1 07       	cpc	r29, r17
     620:	c9 f7       	brne	.-14     	; 0x614 <__do_global_ctors+0x8>
     622:	f7 d0       	rcall	.+494    	; 0x812 <main>
     624:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <_exit>

00000628 <__bad_interrupt>:
     628:	eb cc       	rjmp	.-1578   	; 0x0 <__vectors>

0000062a <I2C_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
     62a:	88 e4       	ldi	r24, 0x48	; 72
     62c:	80 93 b8 00 	sts	0x00B8, r24
     630:	08 95       	ret

00000632 <I2C_start>:
     632:	ec eb       	ldi	r30, 0xBC	; 188
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	10 82       	st	Z, r1
     638:	94 ea       	ldi	r25, 0xA4	; 164
     63a:	90 83       	st	Z, r25
     63c:	90 81       	ld	r25, Z
     63e:	99 23       	and	r25, r25
     640:	ec f7       	brge	.-6      	; 0x63c <I2C_start+0xa>
     642:	90 91 b9 00 	lds	r25, 0x00B9
     646:	98 7f       	andi	r25, 0xF8	; 248
     648:	98 30       	cpi	r25, 0x08	; 8
     64a:	a1 f4       	brne	.+40     	; 0x674 <I2C_start+0x42>
     64c:	80 93 bb 00 	sts	0x00BB, r24
     650:	84 e8       	ldi	r24, 0x84	; 132
     652:	80 93 bc 00 	sts	0x00BC, r24
     656:	ec eb       	ldi	r30, 0xBC	; 188
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	88 23       	and	r24, r24
     65e:	ec f7       	brge	.-6      	; 0x65a <I2C_start+0x28>
     660:	90 91 b9 00 	lds	r25, 0x00B9
     664:	98 7f       	andi	r25, 0xF8	; 248
     666:	98 31       	cpi	r25, 0x18	; 24
     668:	39 f0       	breq	.+14     	; 0x678 <I2C_start+0x46>
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	90 34       	cpi	r25, 0x40	; 64
     66e:	29 f4       	brne	.+10     	; 0x67a <I2C_start+0x48>
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	08 95       	ret
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	08 95       	ret
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	08 95       	ret

0000067c <I2C_write>:
     67c:	80 93 bb 00 	sts	0x00BB, r24
     680:	84 e8       	ldi	r24, 0x84	; 132
     682:	80 93 bc 00 	sts	0x00BC, r24
     686:	ec eb       	ldi	r30, 0xBC	; 188
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	88 23       	and	r24, r24
     68e:	ec f7       	brge	.-6      	; 0x68a <I2C_write+0xe>
     690:	90 91 b9 00 	lds	r25, 0x00B9
     694:	98 7f       	andi	r25, 0xF8	; 248
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	98 32       	cpi	r25, 0x28	; 40
     69a:	09 f4       	brne	.+2      	; 0x69e <I2C_write+0x22>
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	08 95       	ret

000006a0 <I2C_read_ack>:
     6a0:	84 ec       	ldi	r24, 0xC4	; 196
     6a2:	80 93 bc 00 	sts	0x00BC, r24
     6a6:	ec eb       	ldi	r30, 0xBC	; 188
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	88 23       	and	r24, r24
     6ae:	ec f7       	brge	.-6      	; 0x6aa <I2C_read_ack+0xa>
     6b0:	80 91 bb 00 	lds	r24, 0x00BB
     6b4:	08 95       	ret

000006b6 <I2C_stop>:

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     6b6:	84 e9       	ldi	r24, 0x94	; 148
     6b8:	80 93 bc 00 	sts	0x00BC, r24
     6bc:	08 95       	ret

000006be <log_s>:
 *
 * @param s The specified string
 */
void log_s(const char *s) {
#ifdef LOG_AVAILABLE
    uart0_puts(s);
     6be:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <uart0_puts>
     6c2:	08 95       	ret

000006c4 <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	84 bd       	out	0x24, r24	; 36
     6c8:	93 e0       	ldi	r25, 0x03	; 3
     6ca:	95 bd       	out	0x25, r25	; 37
     6cc:	80 93 6e 00 	sts	0x006E, r24
     6d0:	8a ef       	ldi	r24, 0xFA	; 250
     6d2:	87 bd       	out	0x27, r24	; 39
     6d4:	08 95       	ret

000006d6 <millis_get>:
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	8f b7       	in	r24, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	00 91 3c 01 	lds	r16, 0x013C
     6e2:	10 91 3d 01 	lds	r17, 0x013D
     6e6:	20 91 3e 01 	lds	r18, 0x013E
     6ea:	30 91 3f 01 	lds	r19, 0x013F
     6ee:	8f bf       	out	0x3f, r24	; 63
     6f0:	60 2f       	mov	r22, r16
     6f2:	71 2f       	mov	r23, r17
     6f4:	82 2f       	mov	r24, r18
     6f6:	93 2f       	mov	r25, r19
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <millis_resume>:
     6fe:	e4 e6       	ldi	r30, 0x64	; 100
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	80 81       	ld	r24, Z
     704:	8f 7d       	andi	r24, 0xDF	; 223
     706:	80 83       	st	Z, r24
     708:	ee e6       	ldi	r30, 0x6E	; 110
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	80 81       	ld	r24, Z
     70e:	82 60       	ori	r24, 0x02	; 2
     710:	80 83       	st	Z, r24
     712:	08 95       	ret

00000714 <millis_pause>:
     714:	ee e6       	ldi	r30, 0x6E	; 110
     716:	f0 e0       	ldi	r31, 0x00	; 0
     718:	80 81       	ld	r24, Z
     71a:	8d 7f       	andi	r24, 0xFD	; 253
     71c:	80 83       	st	Z, r24
     71e:	e4 e6       	ldi	r30, 0x64	; 100
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	80 81       	ld	r24, Z
     724:	80 62       	ori	r24, 0x20	; 32
     726:	80 83       	st	Z, r24
     728:	08 95       	ret

0000072a <millis_reset>:
     72a:	8f b7       	in	r24, 0x3f	; 63
     72c:	f8 94       	cli
     72e:	10 92 3c 01 	sts	0x013C, r1
     732:	10 92 3d 01 	sts	0x013D, r1
     736:	10 92 3e 01 	sts	0x013E, r1
     73a:	10 92 3f 01 	sts	0x013F, r1
     73e:	8f bf       	out	0x3f, r24	; 63
     740:	08 95       	ret

00000742 <__vector_14>:

ISR(ISR_VECT)
{
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	8f 93       	push	r24
     74e:	9f 93       	push	r25
     750:	af 93       	push	r26
     752:	bf 93       	push	r27
	++milliseconds;
     754:	80 91 3c 01 	lds	r24, 0x013C
     758:	90 91 3d 01 	lds	r25, 0x013D
     75c:	a0 91 3e 01 	lds	r26, 0x013E
     760:	b0 91 3f 01 	lds	r27, 0x013F
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	a1 1d       	adc	r26, r1
     768:	b1 1d       	adc	r27, r1
     76a:	80 93 3c 01 	sts	0x013C, r24
     76e:	90 93 3d 01 	sts	0x013D, r25
     772:	a0 93 3e 01 	sts	0x013E, r26
     776:	b0 93 3f 01 	sts	0x013F, r27
}
     77a:	bf 91       	pop	r27
     77c:	af 91       	pop	r26
     77e:	9f 91       	pop	r25
     780:	8f 91       	pop	r24
     782:	0f 90       	pop	r0
     784:	0f be       	out	0x3f, r0	; 63
     786:	0f 90       	pop	r0
     788:	1f 90       	pop	r1
     78a:	18 95       	reti

0000078c <_Z11timer2_initv>:

// Initialise library
void timer2_init()
{
	// Timer settings
	TCCR2A = _BV(WGM21); // prescaler 128
     78c:	82 e0       	ldi	r24, 0x02	; 2
     78e:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22)|_BV(CS20);
     792:	85 e0       	ldi	r24, 0x05	; 5
     794:	80 93 b1 00 	sts	0x00B1, r24
	
	OCR2A = ((F_CPU / 128) / 1000);
     798:	8d e7       	ldi	r24, 0x7D	; 125
     79a:	80 93 b3 00 	sts	0x00B3, r24
     79e:	08 95       	ret

000007a0 <_Z13timer2_resumev>:


// Turn on timer and resume interrupts
void timer2_resume()
{
	power_timer2_enable();
     7a0:	e4 e6       	ldi	r30, 0x64	; 100
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	80 81       	ld	r24, Z
     7a6:	8f 7b       	andi	r24, 0xBF	; 191
     7a8:	80 83       	st	Z, r24
	TIMSK2 |= _BV(OCIE2A);
     7aa:	e0 e7       	ldi	r30, 0x70	; 112
     7ac:	f0 e0       	ldi	r31, 0x00	; 0
     7ae:	80 81       	ld	r24, Z
     7b0:	82 60       	ori	r24, 0x02	; 2
     7b2:	80 83       	st	Z, r24
     7b4:	08 95       	ret

000007b6 <_Z12timer2_pausev>:
}

// Pause interrupts and turn off timer to save power
void timer2_pause()
{
	TIMSK2 &= ~_BV(OCIE2A);
     7b6:	e0 e7       	ldi	r30, 0x70	; 112
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	8d 7f       	andi	r24, 0xFD	; 253
     7be:	80 83       	st	Z, r24
	power_timer2_disable();
     7c0:	e4 e6       	ldi	r30, 0x64	; 100
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	80 64       	ori	r24, 0x40	; 64
     7c8:	80 83       	st	Z, r24
     7ca:	08 95       	ret

000007cc <__vector_1>:
#define NODE_ID				2
#define NETWORKID			14  //the same on all nodes that talk to each other
RFM69 radio;


	ISR(INT0_vect) {
     7cc:	1f 92       	push	r1
     7ce:	0f 92       	push	r0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
		RFM69::isr0();
     7ee:	db d4       	rcall	.+2486   	; 0x11a6 <_ZN5RFM694isr0Ev>
	}
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	bf 91       	pop	r27
     7f6:	af 91       	pop	r26
     7f8:	9f 91       	pop	r25
     7fa:	8f 91       	pop	r24
     7fc:	7f 91       	pop	r23
     7fe:	6f 91       	pop	r22
     800:	5f 91       	pop	r21
     802:	4f 91       	pop	r20
     804:	3f 91       	pop	r19
     806:	2f 91       	pop	r18
     808:	0f 90       	pop	r0
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	0f 90       	pop	r0
     80e:	1f 90       	pop	r1
     810:	18 95       	reti

00000812 <main>:


int main() {	
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	00 d0       	rcall	.+0      	; 0x818 <main+0x6>
     818:	1f 92       	push	r1
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
// disable ADC for less power 
	ADCSRA &= ~_BV(ADEN); // ADC off 
     81e:	ea e7       	ldi	r30, 0x7A	; 122
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	80 81       	ld	r24, Z
     824:	8f 77       	andi	r24, 0x7F	; 127
     826:	80 83       	st	Z, r24
	sei();
     828:	78 94       	sei
	

			/* Initialize MILLIS */
	        millis_init();
     82a:	4c df       	rcall	.-360    	; 0x6c4 <millis_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     82c:	2f ef       	ldi	r18, 0xFF	; 255
     82e:	83 ed       	ldi	r24, 0xD3	; 211
     830:	90 e3       	ldi	r25, 0x30	; 48
     832:	21 50       	subi	r18, 0x01	; 1
     834:	80 40       	sbci	r24, 0x00	; 0
     836:	90 40       	sbci	r25, 0x00	; 0
     838:	e1 f7       	brne	.-8      	; 0x832 <main+0x20>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <main+0x2a>
     83c:	00 00       	nop
			_delay_ms(1000);
			/* Initialize MILLIS */

			/* Initialize TONE */						
			tone_init();	
     83e:	0e 94 29 0c 	call	0x1852	; 0x1852 <tone_init>
			noTone();	
     842:	0e 94 2b 0c 	call	0x1856	; 0x1856 <noTone>
			/* Initialize TONE */						
						
						
			/* Initialize TIMER 2 */
			timer2_init();
     846:	a2 df       	rcall	.-188    	; 0x78c <_Z11timer2_initv>
			timer2_pause();
     848:	b6 df       	rcall	.-148    	; 0x7b6 <_Z12timer2_pausev>
			/* Initialize TIMER 2 */			
			
			
			/* Initialize UART */
			#ifdef DEBUG_SERIAL
			uart_init( ((F_CPU)/((UART_BAUD_RATE)*16l)-1)) ;
     84a:	80 e1       	ldi	r24, 0x10	; 16
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <uart0_init>
     852:	ef ef       	ldi	r30, 0xFF	; 255
     854:	f3 ed       	ldi	r31, 0xD3	; 211
     856:	20 e3       	ldi	r18, 0x30	; 48
     858:	e1 50       	subi	r30, 0x01	; 1
     85a:	f0 40       	sbci	r31, 0x00	; 0
     85c:	20 40       	sbci	r18, 0x00	; 0
     85e:	e1 f7       	brne	.-8      	; 0x858 <main+0x46>
     860:	00 c0       	rjmp	.+0      	; 0x862 <main+0x50>
     862:	00 00       	nop
			_delay_ms(1000);
			log_s("UART OK\r");
     864:	8e e0       	ldi	r24, 0x0E	; 14
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	2a df       	rcall	.-428    	; 0x6be <log_s>
     86a:	8f ef       	ldi	r24, 0xFF	; 255
     86c:	93 ed       	ldi	r25, 0xD3	; 211
     86e:	e0 e3       	ldi	r30, 0x30	; 48
     870:	81 50       	subi	r24, 0x01	; 1
     872:	90 40       	sbci	r25, 0x00	; 0
     874:	e0 40       	sbci	r30, 0x00	; 0
     876:	e1 f7       	brne	.-8      	; 0x870 <main+0x5e>
     878:	00 c0       	rjmp	.+0      	; 0x87a <main+0x68>
     87a:	00 00       	nop
			power_usart0_disable();
			#endif
			/* Initialize UART */
		
			/* Initialize I2C */
			I2C_init();	
     87c:	d6 de       	rcall	.-596    	; 0x62a <I2C_init>
			/* Initialize I2C */
			
			/* Initialize PCA9634 */
			pca9635_init();
     87e:	11 d4       	rcall	.+2082   	; 0x10a2 <pca9635_init>
     880:	13 e0       	ldi	r17, 0x03	; 3
			
			// blink 3 times fast
			for (byte i = 0; i <= 2; ++i){
			pca9635_set_all_led_pwm(255);
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	54 d4       	rcall	.+2216   	; 0x112e <pca9635_set_all_led_pwm>
     886:	ff ef       	ldi	r31, 0xFF	; 255
     888:	21 ee       	ldi	r18, 0xE1	; 225
     88a:	84 e0       	ldi	r24, 0x04	; 4
     88c:	f1 50       	subi	r31, 0x01	; 1
     88e:	20 40       	sbci	r18, 0x00	; 0
     890:	80 40       	sbci	r24, 0x00	; 0
     892:	e1 f7       	brne	.-8      	; 0x88c <main+0x7a>
     894:	00 c0       	rjmp	.+0      	; 0x896 <main+0x84>
     896:	00 00       	nop
			_delay_ms(100);
			pca9635_set_all_led_pwm(0);
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	49 d4       	rcall	.+2194   	; 0x112e <pca9635_set_all_led_pwm>
     89c:	9f ef       	ldi	r25, 0xFF	; 255
     89e:	e1 ee       	ldi	r30, 0xE1	; 225
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	91 50       	subi	r25, 0x01	; 1
     8a4:	e0 40       	sbci	r30, 0x00	; 0
     8a6:	f0 40       	sbci	r31, 0x00	; 0
     8a8:	e1 f7       	brne	.-8      	; 0x8a2 <main+0x90>
     8aa:	00 c0       	rjmp	.+0      	; 0x8ac <main+0x9a>
     8ac:	00 00       	nop
     8ae:	11 50       	subi	r17, 0x01	; 1
			
			/* Initialize PCA9634 */
			pca9635_init();
			
			// blink 3 times fast
			for (byte i = 0; i <= 2; ++i){
     8b0:	41 f7       	brne	.-48     	; 0x882 <main+0x70>
			
			/* Initialize PCA9634 */
			
		
			// node id, rfband, group id
			radio.initialize(RF69_868MHZ, NODE_ID, NETWORKID); // node id, rfband, group id
     8b2:	2e e0       	ldi	r18, 0x0E	; 14
     8b4:	42 e0       	ldi	r20, 0x02	; 2
     8b6:	66 e5       	ldi	r22, 0x56	; 86
     8b8:	80 e4       	ldi	r24, 0x40	; 64
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	dd d5       	rcall	.+3002   	; 0x1478 <_ZN5RFM6910initializeEhhh>
			
			// see http://tools.jeelabs.org/rfm12b
		//	radio.SetLowDuty(500);

	#ifdef DEBUG_SERIAL
	log_s("RF OK!");
     8be:	87 e1       	ldi	r24, 0x17	; 23
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	fd de       	rcall	.-518    	; 0x6be <log_s>
     8c4:	2f ef       	ldi	r18, 0xFF	; 255
     8c6:	83 ed       	ldi	r24, 0xD3	; 211
     8c8:	90 e3       	ldi	r25, 0x30	; 48
     8ca:	21 50       	subi	r18, 0x01	; 1
     8cc:	80 40       	sbci	r24, 0x00	; 0
     8ce:	90 40       	sbci	r25, 0x00	; 0
     8d0:	e1 f7       	brne	.-8      	; 0x8ca <main+0xb8>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <main+0xc2>
     8d4:	00 00       	nop
     8d6:	ef ef       	ldi	r30, 0xFF	; 255
     8d8:	f3 ed       	ldi	r31, 0xD3	; 211
     8da:	20 e3       	ldi	r18, 0x30	; 48
     8dc:	e1 50       	subi	r30, 0x01	; 1
     8de:	f0 40       	sbci	r31, 0x00	; 0
     8e0:	20 40       	sbci	r18, 0x00	; 0
     8e2:	e1 f7       	brne	.-8      	; 0x8dc <main+0xca>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <main+0xd4>
     8e6:	00 00       	nop
	//	radio.sendACK();
		
		
			// initialised
			
				pca9635_set_led_pwm(1, 255);
     8e8:	6f ef       	ldi	r22, 0xFF	; 255
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	0f d4       	rcall	.+2078   	; 0x110c <pca9635_set_led_pwm>
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	97 e8       	ldi	r25, 0x87	; 135
     8f2:	e3 e1       	ldi	r30, 0x13	; 19
     8f4:	81 50       	subi	r24, 0x01	; 1
     8f6:	90 40       	sbci	r25, 0x00	; 0
     8f8:	e0 40       	sbci	r30, 0x00	; 0
     8fa:	e1 f7       	brne	.-8      	; 0x8f4 <main+0xe2>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <main+0xec>
     8fe:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(8, 255);
     900:	6f ef       	ldi	r22, 0xFF	; 255
     902:	88 e0       	ldi	r24, 0x08	; 8
     904:	03 d4       	rcall	.+2054   	; 0x110c <pca9635_set_led_pwm>
     906:	ff ef       	ldi	r31, 0xFF	; 255
     908:	27 e8       	ldi	r18, 0x87	; 135
     90a:	83 e1       	ldi	r24, 0x13	; 19
     90c:	f1 50       	subi	r31, 0x01	; 1
     90e:	20 40       	sbci	r18, 0x00	; 0
     910:	80 40       	sbci	r24, 0x00	; 0
     912:	e1 f7       	brne	.-8      	; 0x90c <__stack+0xd>
     914:	00 c0       	rjmp	.+0      	; 0x916 <__stack+0x17>
     916:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(11, 255);
     918:	6f ef       	ldi	r22, 0xFF	; 255
     91a:	8b e0       	ldi	r24, 0x0B	; 11
     91c:	f7 d3       	rcall	.+2030   	; 0x110c <pca9635_set_led_pwm>
     91e:	9f ef       	ldi	r25, 0xFF	; 255
     920:	e7 e8       	ldi	r30, 0x87	; 135
     922:	f3 e1       	ldi	r31, 0x13	; 19
     924:	91 50       	subi	r25, 0x01	; 1
     926:	e0 40       	sbci	r30, 0x00	; 0
     928:	f0 40       	sbci	r31, 0x00	; 0
     92a:	e1 f7       	brne	.-8      	; 0x924 <__stack+0x25>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <__stack+0x2f>
     92e:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(14, 255);
     930:	6f ef       	ldi	r22, 0xFF	; 255
     932:	8e e0       	ldi	r24, 0x0E	; 14
     934:	eb d3       	rcall	.+2006   	; 0x110c <pca9635_set_led_pwm>
     936:	2f ef       	ldi	r18, 0xFF	; 255
     938:	8f e0       	ldi	r24, 0x0F	; 15
     93a:	97 e2       	ldi	r25, 0x27	; 39
     93c:	21 50       	subi	r18, 0x01	; 1
     93e:	80 40       	sbci	r24, 0x00	; 0
     940:	90 40       	sbci	r25, 0x00	; 0
     942:	e1 f7       	brne	.-8      	; 0x93c <__stack+0x3d>
     944:	00 c0       	rjmp	.+0      	; 0x946 <__stack+0x47>
     946:	00 00       	nop
				_delay_ms(800);
				pca9635_set_all_led_pwm(0);
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	f1 d3       	rcall	.+2018   	; 0x112e <pca9635_set_all_led_pwm>
				pca9635_set_sleep(1);
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	ff d3       	rcall	.+2046   	; 0x114e <pca9635_set_sleep>
				
			deep_sleep_ok = 1; // put device in deep sleep after initializing
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	80 93 5e 01 	sts	0x015E, r24
			
			#ifdef DEBUG_SERIAL
				log_s("initialized!");
     956:	8e e1       	ldi	r24, 0x1E	; 30
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	b1 de       	rcall	.-670    	; 0x6be <log_s>
     95c:	ef ef       	ldi	r30, 0xFF	; 255
     95e:	f3 ed       	ldi	r31, 0xD3	; 211
     960:	20 e3       	ldi	r18, 0x30	; 48
     962:	e1 50       	subi	r30, 0x01	; 1
     964:	f0 40       	sbci	r31, 0x00	; 0
     966:	20 40       	sbci	r18, 0x00	; 0
     968:	e1 f7       	brne	.-8      	; 0x962 <__stack+0x63>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <__stack+0x6d>
     96c:	00 00       	nop
				
			}
			
					
		// only react to packets with first byte 0x99
		if(radio.DATA[0] == 0x99) { // 153
     96e:	0a e6       	ldi	r16, 0x6A	; 106
     970:	11 e0       	ldi	r17, 0x01	; 1
		// process incoming data here	
			
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = radio.DATA[1]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     972:	0f 2e       	mov	r0, r31
     974:	fb e6       	ldi	r31, 0x6B	; 107
     976:	af 2e       	mov	r10, r31
     978:	f1 e0       	ldi	r31, 0x01	; 1
     97a:	bf 2e       	mov	r11, r31
     97c:	f0 2d       	mov	r31, r0
										 
							
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     97e:	41 2c       	mov	r4, r1
     980:	51 2c       	mov	r5, r1
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     982:	24 2c       	mov	r2, r4
     984:	59 82       	std	Y+1, r5	; 0x01
							millis_resume();
							
							active_alarm_time = millis_get() + alarm_duration;
							
							// wake up pca9635!
							power_twi_enable();
     986:	0f 2e       	mov	r0, r31
     988:	f4 e6       	ldi	r31, 0x64	; 100
     98a:	6f 2e       	mov	r6, r31
     98c:	71 2c       	mov	r7, r1
     98e:	f0 2d       	mov	r31, r0
				
				
				
	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
	if (radio.receiveDone()) { // a packet has been received
     990:	80 e4       	ldi	r24, 0x40	; 64
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	18 d7       	rcall	.+3632   	; 0x17c6 <_ZN5RFM6911receiveDoneEv>
     996:	88 23       	and	r24, r24
     998:	09 f4       	brne	.+2      	; 0x99c <__stack+0x9d>
     99a:	c3 c0       	rjmp	.+390    	; 0xb22 <__stack+0x223>
	//	log_s("\rRECV OK");
		  if (radio.ACKRequested()){
     99c:	80 e4       	ldi	r24, 0x40	; 64
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	f5 d3       	rcall	.+2026   	; 0x118c <_ZN5RFM6912ACKRequestedEv>
     9a2:	88 23       	and	r24, r24
     9a4:	79 f0       	breq	.+30     	; 0x9c4 <__stack+0xc5>
				//log_s(".");
				radio.sendACK();
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	66 e1       	ldi	r22, 0x16	; 22
     9aa:	71 e0       	ldi	r23, 0x01	; 1
     9ac:	80 e4       	ldi	r24, 0x40	; 64
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	2b d7       	rcall	.+3670   	; 0x1808 <_ZN5RFM697sendACKEPKvh>
				log_s("+");
     9b2:	8b e2       	ldi	r24, 0x2B	; 43
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	83 de       	rcall	.-762    	; 0x6be <log_s>
     9b8:	8f e9       	ldi	r24, 0x9F	; 159
     9ba:	9f e0       	ldi	r25, 0x0F	; 15
     9bc:	01 97       	sbiw	r24, 0x01	; 1
     9be:	f1 f7       	brne	.-4      	; 0x9bc <__stack+0xbd>
     9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <__stack+0xc3>
     9c2:	00 00       	nop
				
			}
			
					
		// only react to packets with first byte 0x99
		if(radio.DATA[0] == 0x99) { // 153
     9c4:	f8 01       	movw	r30, r16
     9c6:	80 81       	ld	r24, Z
     9c8:	89 39       	cpi	r24, 0x99	; 153
     9ca:	11 f7       	brne	.-60     	; 0x990 <__stack+0x91>
		// process incoming data here	
			
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = radio.DATA[1]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     9cc:	f5 01       	movw	r30, r10
     9ce:	30 80       	ld	r3, Z

				if(data & 0x10){
     9d0:	33 2d       	mov	r19, r3
     9d2:	30 71       	andi	r19, 0x10	; 16
     9d4:	34 fe       	sbrs	r3, 4
     9d6:	06 c0       	rjmp	.+12     	; 0x9e4 <__stack+0xe5>
					 // start alarm	 
					 active_alarm = active_alarm | data; // 00001111 
     9d8:	80 91 5d 01 	lds	r24, 0x015D
     9dc:	83 29       	or	r24, r3
     9de:	80 93 5d 01 	sts	0x015D, r24
     9e2:	07 c0       	rjmp	.+14     	; 0x9f2 <__stack+0xf3>
					 
				 }else{
					 // stop alarm
					 active_alarm =  active_alarm & (~data); // invert data, compare with active alarm array to clear the right alarm bit 		 
     9e4:	83 2d       	mov	r24, r3
     9e6:	80 95       	com	r24
     9e8:	90 91 5d 01 	lds	r25, 0x015D
     9ec:	89 23       	and	r24, r25
     9ee:	80 93 5d 01 	sts	0x015D, r24
				 }
				 
				////////////////		Fill alarm array		 ////////////////				 
				
			 // IS ER EEN ALARM ACTIEF in array active_alarm?
				 if(active_alarm & 0x0F){
     9f2:	20 91 5d 01 	lds	r18, 0x015D
     9f6:	82 2f       	mov	r24, r18
     9f8:	8f 70       	andi	r24, 0x0F	; 15
     9fa:	09 f4       	brne	.+2      	; 0x9fe <__stack+0xff>
     9fc:	89 c0       	rjmp	.+274    	; 0xb10 <__stack+0x211>
				  
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
     9fe:	80 91 59 01 	lds	r24, 0x0159
     a02:	90 91 5a 01 	lds	r25, 0x015A
     a06:	a0 91 5b 01 	lds	r26, 0x015B
     a0a:	b0 91 5c 01 	lds	r27, 0x015C
     a0e:	89 2b       	or	r24, r25
     a10:	8a 2b       	or	r24, r26
     a12:	8b 2b       	or	r24, r27
     a14:	b9 f5       	brne	.+110    	; 0xa84 <__stack+0x185>
							// Geen alarm actief
										 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
     a16:	10 92 5e 01 	sts	0x015E, r1
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     a1a:	23 fd       	sbrc	r18, 3
     a1c:	0c c0       	rjmp	.+24     	; 0xa36 <__stack+0x137>
     a1e:	22 fd       	sbrc	r18, 2
     a20:	06 c0       	rjmp	.+12     	; 0xa2e <__stack+0x12f>
     a22:	21 fd       	sbrc	r18, 1
     a24:	06 c0       	rjmp	.+12     	; 0xa32 <__stack+0x133>
     a26:	20 ff       	sbrs	r18, 0
     a28:	0b c0       	rjmp	.+22     	; 0xa40 <__stack+0x141>
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <__stack+0x139>
							// Geen alarm actief
										 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	03 c0       	rjmp	.+6      	; 0xa38 <__stack+0x139>
     a32:	82 e0       	ldi	r24, 0x02	; 2
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <__stack+0x139>
     a36:	80 e0       	ldi	r24, 0x00	; 0
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
									sound_current_alarm = i;
     a38:	80 93 58 01 	sts	0x0158, r24
									icon_current_alarm  = i;
     a3c:	80 93 4d 01 	sts	0x014D, r24
									break;
								} 
							 }

							// 2. timer 0 - millis starten
							millis_reset();
     a40:	74 de       	rcall	.-792    	; 0x72a <millis_reset>
							millis_resume();
     a42:	5d de       	rcall	.-838    	; 0x6fe <millis_resume>
							
							active_alarm_time = millis_get() + alarm_duration;
     a44:	48 de       	rcall	.-880    	; 0x6d6 <millis_get>
     a46:	c0 90 00 01 	lds	r12, 0x0100
     a4a:	d0 90 01 01 	lds	r13, 0x0101
     a4e:	e0 90 02 01 	lds	r14, 0x0102
     a52:	f0 90 03 01 	lds	r15, 0x0103
     a56:	dc 01       	movw	r26, r24
     a58:	cb 01       	movw	r24, r22
     a5a:	8c 0d       	add	r24, r12
     a5c:	9d 1d       	adc	r25, r13
     a5e:	ae 1d       	adc	r26, r14
     a60:	bf 1d       	adc	r27, r15
     a62:	80 93 59 01 	sts	0x0159, r24
     a66:	90 93 5a 01 	sts	0x015A, r25
     a6a:	a0 93 5b 01 	sts	0x015B, r26
     a6e:	b0 93 5c 01 	sts	0x015C, r27
							
							// wake up pca9635!
							power_twi_enable();
     a72:	f3 01       	movw	r30, r6
     a74:	80 81       	ld	r24, Z
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	80 83       	st	Z, r24
							I2C_init();
     a7a:	d7 dd       	rcall	.-1106   	; 0x62a <I2C_init>
							pca9635_set_sleep(0);
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	67 d3       	rcall	.+1742   	; 0x114e <pca9635_set_sleep>
				 
							// 3. timer 2 - alarm timer starten
							timer2_resume();							
     a80:	8f de       	rcall	.-738    	; 0x7a0 <_Z13timer2_resumev>
     a82:	86 cf       	rjmp	.-244    	; 0x990 <__stack+0x91>
										 
							
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     a84:	31 11       	cpse	r19, r1
     a86:	6a c0       	rjmp	.+212    	; 0xb5c <__stack+0x25d>
     a88:	0f 2e       	mov	r0, r31
     a8a:	fd e2       	ldi	r31, 0x2D	; 45
     a8c:	cf 2e       	mov	r12, r31
     a8e:	f1 e0       	ldi	r31, 0x01	; 1
     a90:	df 2e       	mov	r13, r31
     a92:	f0 2d       	mov	r31, r0
     a94:	72 01       	movw	r14, r4
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     a96:	f6 01       	movw	r30, r12
     a98:	21 91       	ld	r18, Z+
     a9a:	6f 01       	movw	r12, r30
     a9c:	23 21       	and	r18, r3
     a9e:	c1 f0       	breq	.+48     	; 0xad0 <__stack+0x1d1>
     aa0:	2a 82       	std	Y+2, r2	; 0x02
     aa2:	f9 81       	ldd	r31, Y+1	; 0x01
     aa4:	fb 83       	std	Y+3, r31	; 0x03
											for (byte j = 0; j <= 2; j++){
												pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[i].lednr[j])), 0); // leds off!
     aa6:	47 01       	movw	r8, r14
     aa8:	88 0c       	add	r8, r8
     aaa:	99 1c       	adc	r9, r9
     aac:	8e 0c       	add	r8, r14
     aae:	9f 1c       	adc	r9, r15
     ab0:	ea 81       	ldd	r30, Y+2	; 0x02
     ab2:	fb 81       	ldd	r31, Y+3	; 0x03
     ab4:	e8 0d       	add	r30, r8
     ab6:	f9 1d       	adc	r31, r9
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	84 91       	lpm	r24, Z
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	25 d3       	rcall	.+1610   	; 0x110c <pca9635_set_led_pwm>
     ac2:	8a 81       	ldd	r24, Y+2	; 0x02
     ac4:	9b 81       	ldd	r25, Y+3	; 0x03
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	9b 83       	std	Y+3, r25	; 0x03
     aca:	8a 83       	std	Y+2, r24	; 0x02
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
											for (byte j = 0; j <= 2; j++){
     acc:	03 97       	sbiw	r24, 0x03	; 3
     ace:	81 f7       	brne	.-32     	; 0xab0 <__stack+0x1b1>
     ad0:	9f ef       	ldi	r25, 0xFF	; 255
     ad2:	e9 1a       	sub	r14, r25
     ad4:	f9 0a       	sbc	r15, r25
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
     ad6:	e4 e0       	ldi	r30, 0x04	; 4
     ad8:	ee 16       	cp	r14, r30
     ada:	f1 04       	cpc	r15, r1
     adc:	e1 f6       	brne	.-72     	; 0xa96 <__stack+0x197>
     ade:	58 cf       	rjmp	.-336    	; 0x990 <__stack+0x91>
							
							
								// Only reset active alarm timer if there is a new alarm...
								// 0x10 = activate bit 0x0F are bits of the alarms
								if( (data & 0x10) && (data & 0x0F)){
										active_alarm_time = millis_get() + alarm_duration;
     ae0:	fa dd       	rcall	.-1036   	; 0x6d6 <millis_get>
     ae2:	c0 90 00 01 	lds	r12, 0x0100
     ae6:	d0 90 01 01 	lds	r13, 0x0101
     aea:	e0 90 02 01 	lds	r14, 0x0102
     aee:	f0 90 03 01 	lds	r15, 0x0103
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	8c 0d       	add	r24, r12
     af8:	9d 1d       	adc	r25, r13
     afa:	ae 1d       	adc	r26, r14
     afc:	bf 1d       	adc	r27, r15
     afe:	80 93 59 01 	sts	0x0159, r24
     b02:	90 93 5a 01 	sts	0x015A, r25
     b06:	a0 93 5b 01 	sts	0x015B, r26
     b0a:	b0 93 5c 01 	sts	0x015C, r27
     b0e:	40 cf       	rjmp	.-384    	; 0x990 <__stack+0x91>
				 
		 

				}else{ //  if(active_alarm & 0x0F){ // IS ER EEN ALARM ACTIEF in active_alarm?
						// no active alarm in array	
						active_alarm_time = 0; // set alarm time to zero, timers will be disabled in next timer 2 interrupt
     b10:	10 92 59 01 	sts	0x0159, r1
     b14:	10 92 5a 01 	sts	0x015A, r1
     b18:	10 92 5b 01 	sts	0x015B, r1
     b1c:	10 92 5c 01 	sts	0x015C, r1
     b20:	37 cf       	rjmp	.-402    	; 0x990 <__stack+0x91>
				} // if(rf12_data[0] == 0x99){
									
		} else {
		
			// switch into idle mode until the next interrupt - Choose our preferred sleep mode:
			if(deep_sleep_ok == 1){
     b22:	80 91 5e 01 	lds	r24, 0x015E
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	71 f4       	brne	.+28     	; 0xb46 <__stack+0x247>
								
				set_sleep_mode(SLEEP_MODE_STANDBY); // if active alarm, go in pwr save mode to keep timer 2 running
     b2a:	83 b7       	in	r24, 0x33	; 51
     b2c:	81 7f       	andi	r24, 0xF1	; 241
     b2e:	8c 60       	ori	r24, 0x0C	; 12
     b30:	83 bf       	out	0x33, r24	; 51
				sleep_enable();
     b32:	83 b7       	in	r24, 0x33	; 51
     b34:	81 60       	ori	r24, 0x01	; 1
     b36:	83 bf       	out	0x33, r24	; 51
				// turn off brown-out enable in software
				 sleep_bod_disable();
     b38:	85 b7       	in	r24, 0x35	; 53
     b3a:	80 66       	ori	r24, 0x60	; 96
     b3c:	85 bf       	out	0x35, r24	; 53
     b3e:	8f 7d       	andi	r24, 0xDF	; 223
     b40:	85 bf       	out	0x35, r24	; 53
			 
				// Put the device to sleep:
				sleep_cpu();
     b42:	88 95       	sleep
     b44:	07 c0       	rjmp	.+14     	; 0xb54 <__stack+0x255>
			}else{
				// disable various adc + usart0
				set_sleep_mode(SLEEP_MODE_IDLE);
     b46:	83 b7       	in	r24, 0x33	; 51
     b48:	81 7f       	andi	r24, 0xF1	; 241
     b4a:	83 bf       	out	0x33, r24	; 51
				sleep_enable();
     b4c:	83 b7       	in	r24, 0x33	; 51
     b4e:	81 60       	ori	r24, 0x01	; 1
     b50:	83 bf       	out	0x33, r24	; 51
			
				// Put the device to sleep:
				sleep_cpu();
     b52:	88 95       	sleep
			}
	
			// Clear sleep enable (SE) bit:
			sleep_disable();
     b54:	83 b7       	in	r24, 0x33	; 51
     b56:	8e 7f       	andi	r24, 0xFE	; 254
     b58:	83 bf       	out	0x33, r24	; 51
     b5a:	1a cf       	rjmp	.-460    	; 0x990 <__stack+0x91>
								}
							
							
								// Only reset active alarm timer if there is a new alarm...
								// 0x10 = activate bit 0x0F are bits of the alarms
								if( (data & 0x10) && (data & 0x0F)){
     b5c:	83 2d       	mov	r24, r3
     b5e:	8f 70       	andi	r24, 0x0F	; 15
     b60:	09 f4       	brne	.+2      	; 0xb64 <__stack+0x265>
     b62:	16 cf       	rjmp	.-468    	; 0x990 <__stack+0x91>
     b64:	bd cf       	rjmp	.-134    	; 0xae0 <__stack+0x1e1>

00000b66 <_Z9isr_soundv>:
	}
						
}


	void isr_sound(){
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
		
			// Stop note if necessary 
			if(_sound_note_time != 0){ // sound already playing?		
     b6a:	80 91 53 01 	lds	r24, 0x0153
     b6e:	90 91 54 01 	lds	r25, 0x0154
     b72:	a0 91 55 01 	lds	r26, 0x0155
     b76:	b0 91 56 01 	lds	r27, 0x0156
     b7a:	89 2b       	or	r24, r25
     b7c:	8a 2b       	or	r24, r26
     b7e:	8b 2b       	or	r24, r27
     b80:	81 f0       	breq	.+32     	; 0xba2 <_Z9isr_soundv+0x3c>
				if(millis_get() < _sound_note_time ){ // Do we need to stop the current note?
     b82:	a9 dd       	rcall	.-1198   	; 0x6d6 <millis_get>
     b84:	00 91 53 01 	lds	r16, 0x0153
     b88:	10 91 54 01 	lds	r17, 0x0154
     b8c:	20 91 55 01 	lds	r18, 0x0155
     b90:	30 91 56 01 	lds	r19, 0x0156
     b94:	60 17       	cp	r22, r16
     b96:	71 07       	cpc	r23, r17
     b98:	82 07       	cpc	r24, r18
     b9a:	93 07       	cpc	r25, r19
     b9c:	08 f4       	brcc	.+2      	; 0xba0 <_Z9isr_soundv+0x3a>
     b9e:	ef c0       	rjmp	.+478    	; 0xd7e <_Z9isr_soundv+0x218>
					return; // dont stop current note
					
				}else{
					noTone(); // stop current note
     ba0:	5a d6       	rcall	.+3252   	; 0x1856 <noTone>
				}
	
			}
			
			// play next tone
			if(sound_current_alarm == 0 ){
     ba2:	80 91 58 01 	lds	r24, 0x0158
     ba6:	81 11       	cpse	r24, r1
     ba8:	2e c0       	rjmp	.+92     	; 0xc06 <_Z9isr_soundv+0xa0>
				tone(pgm_read_word(&(sound_pattern_doorbell[sound_current_step].frequency)), sound_alarm_volume); // freq, volume
     baa:	e0 91 57 01 	lds	r30, 0x0157
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	ee 0f       	add	r30, r30
     bb6:	ff 1f       	adc	r31, r31
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	ec 58       	subi	r30, 0x8C	; 140
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	65 91       	lpm	r22, Z+
     bc2:	74 91       	lpm	r23, Z
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	41 e0       	ldi	r20, 0x01	; 1
     bca:	52 d6       	rcall	.+3236   	; 0x1870 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_doorbell[sound_current_step].time)));
     bcc:	84 dd       	rcall	.-1272   	; 0x6d6 <millis_get>
     bce:	e0 91 57 01 	lds	r30, 0x0157
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	ee 0f       	add	r30, r30
     bd6:	ff 1f       	adc	r31, r31
     bd8:	ee 0f       	add	r30, r30
     bda:	ff 1f       	adc	r31, r31
     bdc:	ee 0f       	add	r30, r30
     bde:	ff 1f       	adc	r31, r31
     be0:	e8 58       	subi	r30, 0x88	; 136
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	25 91       	lpm	r18, Z+
     be6:	34 91       	lpm	r19, Z
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	82 0f       	add	r24, r18
     bee:	93 1f       	adc	r25, r19
     bf0:	a1 1d       	adc	r26, r1
     bf2:	b1 1d       	adc	r27, r1
     bf4:	80 93 53 01 	sts	0x0153, r24
     bf8:	90 93 54 01 	sts	0x0154, r25
     bfc:	a0 93 55 01 	sts	0x0155, r26
     c00:	b0 93 56 01 	sts	0x0156, r27
     c04:	8f c0       	rjmp	.+286    	; 0xd24 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 1 ){
     c06:	81 30       	cpi	r24, 0x01	; 1
     c08:	71 f5       	brne	.+92     	; 0xc66 <_Z9isr_soundv+0x100>
				tone(pgm_read_word(&(sound_pattern_phone[sound_current_step].frequency)), sound_alarm_volume);
     c0a:	e0 91 57 01 	lds	r30, 0x0157
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	ee 0f       	add	r30, r30
     c12:	ff 1f       	adc	r31, r31
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	ee 0f       	add	r30, r30
     c1a:	ff 1f       	adc	r31, r31
     c1c:	ec 54       	subi	r30, 0x4C	; 76
     c1e:	ff 4f       	sbci	r31, 0xFF	; 255
     c20:	65 91       	lpm	r22, Z+
     c22:	74 91       	lpm	r23, Z
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	22 d6       	rcall	.+3140   	; 0x1870 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_phone[sound_current_step].time)));
     c2c:	54 dd       	rcall	.-1368   	; 0x6d6 <millis_get>
     c2e:	e0 91 57 01 	lds	r30, 0x0157
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	ee 0f       	add	r30, r30
     c36:	ff 1f       	adc	r31, r31
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	ee 0f       	add	r30, r30
     c3e:	ff 1f       	adc	r31, r31
     c40:	e8 54       	subi	r30, 0x48	; 72
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	25 91       	lpm	r18, Z+
     c46:	34 91       	lpm	r19, Z
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	82 0f       	add	r24, r18
     c4e:	93 1f       	adc	r25, r19
     c50:	a1 1d       	adc	r26, r1
     c52:	b1 1d       	adc	r27, r1
     c54:	80 93 53 01 	sts	0x0153, r24
     c58:	90 93 54 01 	sts	0x0154, r25
     c5c:	a0 93 55 01 	sts	0x0155, r26
     c60:	b0 93 56 01 	sts	0x0156, r27
     c64:	5f c0       	rjmp	.+190    	; 0xd24 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 2 ){
     c66:	82 30       	cpi	r24, 0x02	; 2
     c68:	71 f5       	brne	.+92     	; 0xcc6 <_Z9isr_soundv+0x160>
				tone(pgm_read_word(&(sound_pattern_fire[sound_current_step].frequency)), sound_alarm_volume);
     c6a:	e0 91 57 01 	lds	r30, 0x0157
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	ee 0f       	add	r30, r30
     c72:	ff 1f       	adc	r31, r31
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	ee 0f       	add	r30, r30
     c7a:	ff 1f       	adc	r31, r31
     c7c:	ec 54       	subi	r30, 0x4C	; 76
     c7e:	fc 4f       	sbci	r31, 0xFC	; 252
     c80:	65 91       	lpm	r22, Z+
     c82:	74 91       	lpm	r23, Z
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	41 e0       	ldi	r20, 0x01	; 1
     c8a:	f2 d5       	rcall	.+3044   	; 0x1870 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_fire[sound_current_step].time)));
     c8c:	24 dd       	rcall	.-1464   	; 0x6d6 <millis_get>
     c8e:	e0 91 57 01 	lds	r30, 0x0157
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	ee 0f       	add	r30, r30
     c96:	ff 1f       	adc	r31, r31
     c98:	ee 0f       	add	r30, r30
     c9a:	ff 1f       	adc	r31, r31
     c9c:	ee 0f       	add	r30, r30
     c9e:	ff 1f       	adc	r31, r31
     ca0:	e8 54       	subi	r30, 0x48	; 72
     ca2:	fc 4f       	sbci	r31, 0xFC	; 252
     ca4:	25 91       	lpm	r18, Z+
     ca6:	34 91       	lpm	r19, Z
     ca8:	dc 01       	movw	r26, r24
     caa:	cb 01       	movw	r24, r22
     cac:	82 0f       	add	r24, r18
     cae:	93 1f       	adc	r25, r19
     cb0:	a1 1d       	adc	r26, r1
     cb2:	b1 1d       	adc	r27, r1
     cb4:	80 93 53 01 	sts	0x0153, r24
     cb8:	90 93 54 01 	sts	0x0154, r25
     cbc:	a0 93 55 01 	sts	0x0155, r26
     cc0:	b0 93 56 01 	sts	0x0156, r27
     cc4:	2f c0       	rjmp	.+94     	; 0xd24 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 3 ){
     cc6:	83 30       	cpi	r24, 0x03	; 3
     cc8:	69 f5       	brne	.+90     	; 0xd24 <_Z9isr_soundv+0x1be>
				tone(pgm_read_word(&(sound_pattern_help[sound_current_step].frequency)),sound_alarm_volume);
     cca:	e0 91 57 01 	lds	r30, 0x0157
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	ee 0f       	add	r30, r30
     cd2:	ff 1f       	adc	r31, r31
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	ee 0f       	add	r30, r30
     cda:	ff 1f       	adc	r31, r31
     cdc:	ec 5c       	subi	r30, 0xCC	; 204
     cde:	fb 4f       	sbci	r31, 0xFB	; 251
     ce0:	65 91       	lpm	r22, Z+
     ce2:	74 91       	lpm	r23, Z
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	41 e0       	ldi	r20, 0x01	; 1
     cea:	c2 d5       	rcall	.+2948   	; 0x1870 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_help[sound_current_step].time)));
     cec:	f4 dc       	rcall	.-1560   	; 0x6d6 <millis_get>
     cee:	e0 91 57 01 	lds	r30, 0x0157
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	ee 0f       	add	r30, r30
     cf6:	ff 1f       	adc	r31, r31
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	ee 0f       	add	r30, r30
     cfe:	ff 1f       	adc	r31, r31
     d00:	e8 5c       	subi	r30, 0xC8	; 200
     d02:	fb 4f       	sbci	r31, 0xFB	; 251
     d04:	25 91       	lpm	r18, Z+
     d06:	34 91       	lpm	r19, Z
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	82 0f       	add	r24, r18
     d0e:	93 1f       	adc	r25, r19
     d10:	a1 1d       	adc	r26, r1
     d12:	b1 1d       	adc	r27, r1
     d14:	80 93 53 01 	sts	0x0153, r24
     d18:	90 93 54 01 	sts	0x0154, r25
     d1c:	a0 93 55 01 	sts	0x0155, r26
     d20:	b0 93 56 01 	sts	0x0156, r27
			}
			
		//_sound_note_time = millis_get() + 1000;
			
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
     d24:	50 91 57 01 	lds	r21, 0x0157
     d28:	40 91 58 01 	lds	r20, 0x0158
     d2c:	25 2f       	mov	r18, r21
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	e4 2f       	mov	r30, r20
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	ef 5c       	subi	r30, 0xCF	; 207
     d36:	fe 4f       	sbci	r31, 0xFE	; 254
     d38:	80 81       	ld	r24, Z
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	01 97       	sbiw	r24, 0x01	; 1
     d3e:	28 17       	cp	r18, r24
     d40:	39 07       	cpc	r19, r25
     d42:	d4 f0       	brlt	.+52     	; 0xd78 <_Z9isr_soundv+0x212>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     d44:	20 91 5d 01 	lds	r18, 0x015D
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     d48:	92 2f       	mov	r25, r18
     d4a:	9f 70       	andi	r25, 0x0F	; 15
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
     d4e:	4f 5f       	subi	r20, 0xFF	; 255
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     d50:	44 30       	cpi	r20, 0x04	; 4
     d52:	09 f4       	brne	.+2      	; 0xd56 <_Z9isr_soundv+0x1f0>
     d54:	43 2f       	mov	r20, r19
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     d56:	e4 2f       	mov	r30, r20
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	e3 5d       	subi	r30, 0xD3	; 211
     d5c:	fe 4f       	sbci	r31, 0xFE	; 254
     d5e:	80 81       	ld	r24, Z
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     d60:	91 11       	cpse	r25, r1
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <_Z9isr_soundv+0x204>
     d64:	40 93 58 01 	sts	0x0158, r20
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <_Z9isr_soundv+0x20c>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     d6a:	82 23       	and	r24, r18
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
     d6c:	81 f3       	breq	.-32     	; 0xd4e <_Z9isr_soundv+0x1e8>
     d6e:	40 93 58 01 	sts	0x0158, r20
						done = 1; // in case there is no active alarm anymore, just breakout while
					}

				} // while
				
				sound_current_step = 0; // reset sound_current_step to zero to start the next sound	
     d72:	10 92 57 01 	sts	0x0157, r1
     d76:	03 c0       	rjmp	.+6      	; 0xd7e <_Z9isr_soundv+0x218>
				
			}else{
				// set sound_current_step plus one
				sound_current_step++;
     d78:	5f 5f       	subi	r21, 0xFF	; 255
     d7a:	50 93 57 01 	sts	0x0157, r21
			}
	
				
		} //void isr_sound()
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	08 95       	ret

00000d84 <_Z15isr_light_flashv>:
		
	void isr_light_flash(){
     d84:	0f 93       	push	r16
     d86:	1f 93       	push	r17
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
			
		// Do we need to go to the next flash?
		if(_flash_time != 0){ // is there already a flash ?
     d8c:	80 91 4e 01 	lds	r24, 0x014E
     d90:	90 91 4f 01 	lds	r25, 0x014F
     d94:	a0 91 50 01 	lds	r26, 0x0150
     d98:	b0 91 51 01 	lds	r27, 0x0151
     d9c:	89 2b       	or	r24, r25
     d9e:	8a 2b       	or	r24, r26
     da0:	8b 2b       	or	r24, r27
     da2:	09 f4       	brne	.+2      	; 0xda6 <_Z15isr_light_flashv+0x22>
     da4:	48 c0       	rjmp	.+144    	; 0xe36 <_Z15isr_light_flashv+0xb2>
			if(millis_get() < _flash_time ){ // Do we need to stop the current note?
     da6:	97 dc       	rcall	.-1746   	; 0x6d6 <millis_get>
     da8:	00 91 4e 01 	lds	r16, 0x014E
     dac:	10 91 4f 01 	lds	r17, 0x014F
     db0:	20 91 50 01 	lds	r18, 0x0150
     db4:	30 91 51 01 	lds	r19, 0x0151
     db8:	60 17       	cp	r22, r16
     dba:	71 07       	cpc	r23, r17
     dbc:	82 07       	cpc	r24, r18
     dbe:	93 07       	cpc	r25, r19
     dc0:	08 f0       	brcs	.+2      	; 0xdc4 <_Z15isr_light_flashv+0x40>
     dc2:	39 c0       	rjmp	.+114    	; 0xe36 <_Z15isr_light_flashv+0xb2>
     dc4:	3b c0       	rjmp	.+118    	; 0xe3c <_Z15isr_light_flashv+0xb8>
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
     dc6:	80 91 52 01 	lds	r24, 0x0152
     dca:	fe 01       	movw	r30, r28
     dcc:	98 e0       	ldi	r25, 0x08	; 8
     dce:	89 9f       	mul	r24, r25
     dd0:	e0 0d       	add	r30, r0
     dd2:	f1 1d       	adc	r31, r1
     dd4:	11 24       	eor	r1, r1
     dd6:	e4 53       	subi	r30, 0x34	; 52
     dd8:	fb 4f       	sbci	r31, 0xFB	; 251
     dda:	64 91       	lpm	r22, Z
     ddc:	8c 2f       	mov	r24, r28
     dde:	8d 5f       	subi	r24, 0xFD	; 253
     de0:	95 d1       	rcall	.+810    	; 0x110c <pca9635_set_led_pwm>
     de2:	21 96       	adiw	r28, 0x01	; 1
			}						
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
     de4:	c4 30       	cpi	r28, 0x04	; 4
     de6:	d1 05       	cpc	r29, r1
     de8:	71 f7       	brne	.-36     	; 0xdc6 <_Z15isr_light_flashv+0x42>
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
		}
		
		_flash_time = millis_get() + pgm_read_word(&(flash_pattern[_flash_current_step].time));
     dea:	75 dc       	rcall	.-1814   	; 0x6d6 <millis_get>
     dec:	40 91 52 01 	lds	r20, 0x0152
     df0:	e4 2f       	mov	r30, r20
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	ee 0f       	add	r30, r30
     df6:	ff 1f       	adc	r31, r31
     df8:	ee 0f       	add	r30, r30
     dfa:	ff 1f       	adc	r31, r31
     dfc:	ee 0f       	add	r30, r30
     dfe:	ff 1f       	adc	r31, r31
     e00:	e0 53       	subi	r30, 0x30	; 48
     e02:	fb 4f       	sbci	r31, 0xFB	; 251
     e04:	25 91       	lpm	r18, Z+
     e06:	34 91       	lpm	r19, Z
     e08:	dc 01       	movw	r26, r24
     e0a:	cb 01       	movw	r24, r22
     e0c:	82 0f       	add	r24, r18
     e0e:	93 1f       	adc	r25, r19
     e10:	a1 1d       	adc	r26, r1
     e12:	b1 1d       	adc	r27, r1
     e14:	80 93 4e 01 	sts	0x014E, r24
     e18:	90 93 4f 01 	sts	0x014F, r25
     e1c:	a0 93 50 01 	sts	0x0150, r26
     e20:	b0 93 51 01 	sts	0x0151, r27
			
		// is variable _flash_current_step equal to total steps?
		if(_flash_current_step == (flash_keys -1 )) {
     e24:	4f 31       	cpi	r20, 0x1F	; 31
     e26:	19 f4       	brne	.+6      	; 0xe2e <_Z15isr_light_flashv+0xaa>
			//reset _flash_current_step to 0
			_flash_current_step = 0;				
     e28:	10 92 52 01 	sts	0x0152, r1
     e2c:	07 c0       	rjmp	.+14     	; 0xe3c <_Z15isr_light_flashv+0xb8>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
     e2e:	4f 5f       	subi	r20, 0xFF	; 255
     e30:	40 93 52 01 	sts	0x0152, r20
     e34:	03 c0       	rjmp	.+6      	; 0xe3c <_Z15isr_light_flashv+0xb8>
			}
	
				
		} //void isr_sound()
		
	void isr_light_flash(){
     e36:	c0 e0       	ldi	r28, 0x00	; 0
     e38:	d0 e0       	ldi	r29, 0x00	; 0
     e3a:	c5 cf       	rjmp	.-118    	; 0xdc6 <_Z15isr_light_flashv+0x42>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
		}
		
	} // END isr_light_flash
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	08 95       	ret

00000e46 <_Z14isr_light_iconv>:
		
		
		
		
		
	void isr_light_icon(){
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
		
		// Do we need to go to the next flash?
		if(_icon_time != 0){ // is there already a flash ?
     e4e:	80 91 48 01 	lds	r24, 0x0148
     e52:	90 91 49 01 	lds	r25, 0x0149
     e56:	a0 91 4a 01 	lds	r26, 0x014A
     e5a:	b0 91 4b 01 	lds	r27, 0x014B
     e5e:	89 2b       	or	r24, r25
     e60:	8a 2b       	or	r24, r26
     e62:	8b 2b       	or	r24, r27
     e64:	79 f0       	breq	.+30     	; 0xe84 <_Z14isr_light_iconv+0x3e>
			if(millis_get() < _icon_time ){ // Do we need to stop the current note?
     e66:	37 dc       	rcall	.-1938   	; 0x6d6 <millis_get>
     e68:	00 91 48 01 	lds	r16, 0x0148
     e6c:	10 91 49 01 	lds	r17, 0x0149
     e70:	20 91 4a 01 	lds	r18, 0x014A
     e74:	30 91 4b 01 	lds	r19, 0x014B
     e78:	60 17       	cp	r22, r16
     e7a:	71 07       	cpc	r23, r17
     e7c:	82 07       	cpc	r24, r18
     e7e:	93 07       	cpc	r25, r19
     e80:	08 f4       	brcc	.+2      	; 0xe84 <_Z14isr_light_iconv+0x3e>
     e82:	81 c0       	rjmp	.+258    	; 0xf86 <_Z14isr_light_iconv+0x140>
	// step 2 = 250 - (2 x 25)  = 200
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
     e84:	20 91 4c 01 	lds	r18, 0x014C
     e88:	22 23       	and	r18, r18
     e8a:	19 f0       	breq	.+6      	; 0xe92 <_Z14isr_light_iconv+0x4c>
     e8c:	2b 30       	cpi	r18, 0x0B	; 11
     e8e:	21 f5       	brne	.+72     	; 0xed8 <_Z14isr_light_iconv+0x92>
     e90:	12 c0       	rjmp	.+36     	; 0xeb6 <_Z14isr_light_iconv+0x70>
		intensity = 255;
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 650;
     e92:	21 dc       	rcall	.-1982   	; 0x6d6 <millis_get>
     e94:	dc 01       	movw	r26, r24
     e96:	cb 01       	movw	r24, r22
     e98:	86 57       	subi	r24, 0x76	; 118
     e9a:	9d 4f       	sbci	r25, 0xFD	; 253
     e9c:	af 4f       	sbci	r26, 0xFF	; 255
     e9e:	bf 4f       	sbci	r27, 0xFF	; 255
     ea0:	80 93 48 01 	sts	0x0148, r24
     ea4:	90 93 49 01 	sts	0x0149, r25
     ea8:	a0 93 4a 01 	sts	0x014A, r26
     eac:	b0 93 4b 01 	sts	0x014B, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     eb0:	cf ef       	ldi	r28, 0xFF	; 255
     eb2:	d0 e0       	ldi	r29, 0x00	; 0
     eb4:	25 c0       	rjmp	.+74     	; 0xf00 <_Z14isr_light_iconv+0xba>
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 650;
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
     eb6:	0f dc       	rcall	.-2018   	; 0x6d6 <millis_get>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	a1 1d       	adc	r26, r1
     ec0:	b1 1d       	adc	r27, r1
     ec2:	80 93 48 01 	sts	0x0148, r24
     ec6:	90 93 49 01 	sts	0x0149, r25
     eca:	a0 93 4a 01 	sts	0x014A, r26
     ece:	b0 93 4b 01 	sts	0x014B, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     ed2:	cf ef       	ldi	r28, 0xFF	; 255
     ed4:	d0 e0       	ldi	r29, 0x00	; 0
     ed6:	14 c0       	rjmp	.+40     	; 0xf00 <_Z14isr_light_iconv+0xba>
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
		}
			
	}else{
		intensity = (250 - (icon_current_step * 25)); // step 1 to 10, 
     ed8:	37 ee       	ldi	r19, 0xE7	; 231
     eda:	32 03       	mulsu	r19, r18
     edc:	e0 01       	movw	r28, r0
     ede:	11 24       	eor	r1, r1
     ee0:	c6 50       	subi	r28, 0x06	; 6
     ee2:	df 4f       	sbci	r29, 0xFF	; 255
		_icon_time = millis_get() + 30;
     ee4:	f8 db       	rcall	.-2064   	; 0x6d6 <millis_get>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	4e 96       	adiw	r24, 0x1e	; 30
     eec:	a1 1d       	adc	r26, r1
     eee:	b1 1d       	adc	r27, r1
     ef0:	80 93 48 01 	sts	0x0148, r24
     ef4:	90 93 49 01 	sts	0x0149, r25
     ef8:	a0 93 4a 01 	sts	0x014A, r26
     efc:	b0 93 4b 01 	sts	0x014B, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     f00:	00 e0       	ldi	r16, 0x00	; 0
     f02:	10 e0       	ldi	r17, 0x00	; 0
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     f04:	80 91 4d 01 	lds	r24, 0x014D
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	9c 01       	movw	r18, r24
     f0c:	22 0f       	add	r18, r18
     f0e:	33 1f       	adc	r19, r19
     f10:	82 0f       	add	r24, r18
     f12:	93 1f       	adc	r25, r19
     f14:	80 0f       	add	r24, r16
     f16:	91 1f       	adc	r25, r17
     f18:	fc 01       	movw	r30, r24
     f1a:	e4 53       	subi	r30, 0x34	; 52
     f1c:	fa 4f       	sbci	r31, 0xFA	; 250
     f1e:	44 91       	lpm	r20, Z
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     f20:	fc 01       	movw	r30, r24
     f22:	e8 59       	subi	r30, 0x98	; 152
     f24:	ff 4f       	sbci	r31, 0xFF	; 255
     f26:	84 91       	lpm	r24, Z
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     f28:	4c 9f       	mul	r20, r28
     f2a:	90 01       	movw	r18, r0
     f2c:	4d 9f       	mul	r20, r29
     f2e:	30 0d       	add	r19, r0
     f30:	11 24       	eor	r1, r1
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     f32:	63 2f       	mov	r22, r19
     f34:	eb d0       	rcall	.+470    	; 0x110c <pca9635_set_led_pwm>
     f36:	0f 5f       	subi	r16, 0xFF	; 255
     f38:	1f 4f       	sbci	r17, 0xFF	; 255
		_icon_time = millis_get() + 30;
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
     f3a:	03 30       	cpi	r16, 0x03	; 3
     f3c:	11 05       	cpc	r17, r1
     f3e:	11 f7       	brne	.-60     	; 0xf04 <_Z14isr_light_iconv+0xbe>
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
	}
	

	// is variable _flash_current_step equal to total steps?
	if(icon_current_step == 11) {
     f40:	80 91 4c 01 	lds	r24, 0x014C
     f44:	8b 30       	cpi	r24, 0x0B	; 11
     f46:	e1 f4       	brne	.+56     	; 0xf80 <_Z14isr_light_iconv+0x13a>
		//reset _flash_current_step to 0
		icon_current_step = 0;
     f48:	10 92 4c 01 	sts	0x014C, r1
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     f4c:	30 91 5d 01 	lds	r19, 0x015D
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     f50:	23 2f       	mov	r18, r19
     f52:	2f 70       	andi	r18, 0x0F	; 15
     f54:	80 91 4d 01 	lds	r24, 0x014D
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     f58:	40 e0       	ldi	r20, 0x00	; 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
     f5a:	8f 5f       	subi	r24, 0xFF	; 255
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     f5c:	84 30       	cpi	r24, 0x04	; 4
     f5e:	09 f4       	brne	.+2      	; 0xf62 <_Z14isr_light_iconv+0x11c>
     f60:	84 2f       	mov	r24, r20
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     f62:	e8 2f       	mov	r30, r24
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	e3 5d       	subi	r30, 0xD3	; 211
     f68:	fe 4f       	sbci	r31, 0xFE	; 254
     f6a:	90 81       	ld	r25, Z
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     f6c:	21 11       	cpse	r18, r1
     f6e:	03 c0       	rjmp	.+6      	; 0xf76 <_Z14isr_light_iconv+0x130>
     f70:	80 93 4d 01 	sts	0x014D, r24
     f74:	08 c0       	rjmp	.+16     	; 0xf86 <_Z14isr_light_iconv+0x140>
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     f76:	93 23       	and	r25, r19
		//reset _flash_current_step to 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
     f78:	81 f3       	breq	.-32     	; 0xf5a <_Z14isr_light_iconv+0x114>
     f7a:	80 93 4d 01 	sts	0x014D, r24
     f7e:	03 c0       	rjmp	.+6      	; 0xf86 <_Z14isr_light_iconv+0x140>
			} // while
			
			
		}else{
		// set _flash_current_step +1
		icon_current_step++;
     f80:	8f 5f       	subi	r24, 0xFF	; 255
     f82:	80 93 4c 01 	sts	0x014C, r24
	}
	
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	08 95       	ret

00000f90 <__vector_7>:
	} // end main

	

	
ISR (TIMER2_COMPA_vect) {
     f90:	1f 92       	push	r1
     f92:	0f 92       	push	r0
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	0f 92       	push	r0
     f98:	11 24       	eor	r1, r1
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	2f 93       	push	r18
     fa0:	3f 93       	push	r19
     fa2:	4f 93       	push	r20
     fa4:	5f 93       	push	r21
     fa6:	6f 93       	push	r22
     fa8:	7f 93       	push	r23
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
     fae:	af 93       	push	r26
     fb0:	bf 93       	push	r27
     fb2:	ef 93       	push	r30
     fb4:	ff 93       	push	r31

	// check if the alarm needs to be stopped
	if(millis_get() >= active_alarm_time || active_alarm_time == 0){
     fb6:	8f db       	rcall	.-2274   	; 0x6d6 <millis_get>
     fb8:	00 91 59 01 	lds	r16, 0x0159
     fbc:	10 91 5a 01 	lds	r17, 0x015A
     fc0:	20 91 5b 01 	lds	r18, 0x015B
     fc4:	30 91 5c 01 	lds	r19, 0x015C
     fc8:	60 17       	cp	r22, r16
     fca:	71 07       	cpc	r23, r17
     fcc:	82 07       	cpc	r24, r18
     fce:	93 07       	cpc	r25, r19
     fd0:	20 f4       	brcc	.+8      	; 0xfda <__vector_7+0x4a>
     fd2:	01 2b       	or	r16, r17
     fd4:	02 2b       	or	r16, r18
     fd6:	03 2b       	or	r16, r19
     fd8:	c1 f5       	brne	.+112    	; 0x104a <__vector_7+0xba>
		// stop alarm
			
			// reset steps of sound, flash and icon
			sound_current_step		= 0;
     fda:	10 92 57 01 	sts	0x0157, r1
			_sound_note_time		= 0;
     fde:	10 92 53 01 	sts	0x0153, r1
     fe2:	10 92 54 01 	sts	0x0154, r1
     fe6:	10 92 55 01 	sts	0x0155, r1
     fea:	10 92 56 01 	sts	0x0156, r1
										
			_flash_current_step		= 0;
     fee:	10 92 52 01 	sts	0x0152, r1
			_flash_time				= 0;
     ff2:	10 92 4e 01 	sts	0x014E, r1
     ff6:	10 92 4f 01 	sts	0x014F, r1
     ffa:	10 92 50 01 	sts	0x0150, r1
     ffe:	10 92 51 01 	sts	0x0151, r1
										
			icon_current_step		= 0;
    1002:	10 92 4c 01 	sts	0x014C, r1
			_icon_time				= 0;
    1006:	10 92 48 01 	sts	0x0148, r1
    100a:	10 92 49 01 	sts	0x0149, r1
    100e:	10 92 4a 01 	sts	0x014A, r1
    1012:	10 92 4b 01 	sts	0x014B, r1
										
			// empty alarm arrray
			active_alarm = 0x00; 
    1016:	10 92 5d 01 	sts	0x015D, r1
			active_alarm_time = 0;
    101a:	10 92 59 01 	sts	0x0159, r1
    101e:	10 92 5a 01 	sts	0x015A, r1
    1022:	10 92 5b 01 	sts	0x015B, r1
    1026:	10 92 5c 01 	sts	0x015C, r1
					
			// alle leds uit, pca in slaapstand
			pca9635_set_all_led_pwm(0); // dimm all leds to zero
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	80 d0       	rcall	.+256    	; 0x112e <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1); // put pca9635 in sleep
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	8e d0       	rcall	.+284    	; 0x114e <pca9635_set_sleep>
			power_twi_disable();
    1032:	e4 e6       	ldi	r30, 0x64	; 100
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	80 68       	ori	r24, 0x80	; 128
    103a:	80 83       	st	Z, r24
			
			// automatisch slapen in loop.

			//uart0_puts("STOPINT");
			// stop timer 0
			millis_pause();
    103c:	6b db       	rcall	.-2346   	; 0x714 <millis_pause>
			
			// stop sound
			noTone();
    103e:	0b d4       	rcall	.+2070   	; 0x1856 <noTone>
			
			// stop timer 2
			timer2_pause();
    1040:	ba db       	rcall	.-2188   	; 0x7b6 <_Z12timer2_pausev>
			
			deep_sleep_ok = 1;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	80 93 5e 01 	sts	0x015E, r24
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <__vector_7+0xc0>
					
	}else{
		// continue alarm
		isr_sound();
    104a:	8d dd       	rcall	.-1254   	; 0xb66 <_Z9isr_soundv>
	    isr_light_flash();
    104c:	9b de       	rcall	.-714    	; 0xd84 <_Z15isr_light_flashv>
		isr_light_icon();		
    104e:	fb de       	rcall	.-522    	; 0xe46 <_Z14isr_light_iconv>
	}
						
}
    1050:	ff 91       	pop	r31
    1052:	ef 91       	pop	r30
    1054:	bf 91       	pop	r27
    1056:	af 91       	pop	r26
    1058:	9f 91       	pop	r25
    105a:	8f 91       	pop	r24
    105c:	7f 91       	pop	r23
    105e:	6f 91       	pop	r22
    1060:	5f 91       	pop	r21
    1062:	4f 91       	pop	r20
    1064:	3f 91       	pop	r19
    1066:	2f 91       	pop	r18
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	0f 90       	pop	r0
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	0f 90       	pop	r0
    1072:	1f 90       	pop	r1
    1074:	18 95       	reti

00001076 <_GLOBAL__sub_I_mychannel>:
    static volatile uint8_t ACK_REQUESTED;
    static volatile uint8_t ACK_RECEIVED; /// Should be polled immediately after sending a packet with ACK request
    static volatile int RSSI; //most accurate RSSI during reception (closest to the reception)
    static volatile uint8_t _mode; //should be protected?
    
    RFM69(uint8_t slaveSelectPin=BIT_RFM_CS, uint8_t interruptPin=RF69_IRQ_PIN, bool isRFM69HW=false) {
    1076:	89 e3       	ldi	r24, 0x39	; 57
    1078:	91 e0       	ldi	r25, 0x01	; 1
    107a:	90 93 41 01 	sts	0x0141, r25
    107e:	80 93 40 01 	sts	0x0140, r24
      _slaveSelectPin = slaveSelectPin;
    1082:	82 e0       	ldi	r24, 0x02	; 2
    1084:	80 93 42 01 	sts	0x0142, r24
      _interruptPin = interruptPin;
    1088:	80 93 43 01 	sts	0x0143, r24
      _mode = RF69_MODE_STANDBY;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	80 93 69 01 	sts	0x0169, r24
      _promiscuousMode = false;
    1092:	10 92 45 01 	sts	0x0145, r1
      _powerLevel = 31;
    1096:	8f e1       	ldi	r24, 0x1F	; 31
    1098:	80 93 46 01 	sts	0x0146, r24
      _isRFM69HW = isRFM69HW;
    109c:	10 92 47 01 	sts	0x0147, r1
    10a0:	08 95       	ret

000010a2 <pca9635_init>:
	   I2C_write(value);	
  	}
			  
  	I2C_stop();
		  
}
    10a2:	80 e8       	ldi	r24, 0x80	; 128
    10a4:	c6 da       	rcall	.-2676   	; 0x632 <I2C_start>
    10a6:	80 e8       	ldi	r24, 0x80	; 128
    10a8:	e9 da       	rcall	.-2606   	; 0x67c <I2C_write>
    10aa:	80 e8       	ldi	r24, 0x80	; 128
    10ac:	e7 da       	rcall	.-2610   	; 0x67c <I2C_write>
    10ae:	82 e0       	ldi	r24, 0x02	; 2
    10b0:	e5 da       	rcall	.-2614   	; 0x67c <I2C_write>
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	e3 da       	rcall	.-2618   	; 0x67c <I2C_write>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	e1 da       	rcall	.-2622   	; 0x67c <I2C_write>
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	df da       	rcall	.-2626   	; 0x67c <I2C_write>
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	dd da       	rcall	.-2630   	; 0x67c <I2C_write>
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	db da       	rcall	.-2634   	; 0x67c <I2C_write>
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	d9 da       	rcall	.-2638   	; 0x67c <I2C_write>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	d7 da       	rcall	.-2642   	; 0x67c <I2C_write>
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	d5 da       	rcall	.-2646   	; 0x67c <I2C_write>
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	d3 da       	rcall	.-2650   	; 0x67c <I2C_write>
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	d1 da       	rcall	.-2654   	; 0x67c <I2C_write>
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	cf da       	rcall	.-2658   	; 0x67c <I2C_write>
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	cd da       	rcall	.-2662   	; 0x67c <I2C_write>
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	cb da       	rcall	.-2666   	; 0x67c <I2C_write>
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	c9 da       	rcall	.-2670   	; 0x67c <I2C_write>
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	c7 da       	rcall	.-2674   	; 0x67c <I2C_write>
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	c5 da       	rcall	.-2678   	; 0x67c <I2C_write>
    10f2:	8f ef       	ldi	r24, 0xFF	; 255
    10f4:	c3 da       	rcall	.-2682   	; 0x67c <I2C_write>
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	c1 da       	rcall	.-2686   	; 0x67c <I2C_write>
    10fa:	8a ea       	ldi	r24, 0xAA	; 170
    10fc:	bf da       	rcall	.-2690   	; 0x67c <I2C_write>
    10fe:	8a ea       	ldi	r24, 0xAA	; 170
    1100:	bd da       	rcall	.-2694   	; 0x67c <I2C_write>
    1102:	8a ea       	ldi	r24, 0xAA	; 170
    1104:	bb da       	rcall	.-2698   	; 0x67c <I2C_write>
    1106:	8a ea       	ldi	r24, 0xAA	; 170
    1108:	b9 da       	rcall	.-2702   	; 0x67c <I2C_write>
    110a:	d5 ca       	rjmp	.-2646   	; 0x6b6 <I2C_stop>

0000110c <pca9635_set_led_pwm>:
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	d8 2f       	mov	r29, r24
    1112:	c6 2f       	mov	r28, r22
    1114:	80 e8       	ldi	r24, 0x80	; 128
    1116:	8d da       	rcall	.-2790   	; 0x632 <I2C_start>
    1118:	8d 2f       	mov	r24, r29
    111a:	8e 5f       	subi	r24, 0xFE	; 254
    111c:	80 68       	ori	r24, 0x80	; 128
    111e:	ae da       	rcall	.-2724   	; 0x67c <I2C_write>
    1120:	8c 2f       	mov	r24, r28
    1122:	ac da       	rcall	.-2728   	; 0x67c <I2C_write>
    1124:	c8 da       	rcall	.-2672   	; 0x6b6 <I2C_stop>
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	08 95       	ret

0000112e <pca9635_set_all_led_pwm>:
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	d8 2f       	mov	r29, r24
    1134:	80 e8       	ldi	r24, 0x80	; 128
    1136:	7d da       	rcall	.-2822   	; 0x632 <I2C_start>
    1138:	82 e8       	ldi	r24, 0x82	; 130
    113a:	a0 da       	rcall	.-2752   	; 0x67c <I2C_write>
    113c:	c0 e1       	ldi	r28, 0x10	; 16
    113e:	8d 2f       	mov	r24, r29
    1140:	9d da       	rcall	.-2758   	; 0x67c <I2C_write>
    1142:	c1 50       	subi	r28, 0x01	; 1
    1144:	e1 f7       	brne	.-8      	; 0x113e <pca9635_set_all_led_pwm+0x10>
    1146:	b7 da       	rcall	.-2706   	; 0x6b6 <I2C_stop>
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <pca9635_set_sleep>:

/**
* Changes the oscillator mode between sleep (1) and active (0)
*/
uint8_t pca9635_set_sleep(uint8_t sleep)
{
    114e:	cf 93       	push	r28
    1150:	c8 2f       	mov	r28, r24
	I2C_start((0x40<<1)+I2C_READ);
    1152:	81 e8       	ldi	r24, 0x81	; 129
    1154:	6e da       	rcall	.-2852   	; 0x632 <I2C_start>
	I2C_write(0x80); // autoincrement, mode 0,
    1156:	80 e8       	ldi	r24, 0x80	; 128
    1158:	91 da       	rcall	.-2782   	; 0x67c <I2C_write>
	// I2C_stop(); ???nodig?
	uint8_t data = I2C_read_ack();
    115a:	a2 da       	rcall	.-2748   	; 0x6a0 <I2C_read_ack>
	
	if(sleep){		// set or unset bit 4
    115c:	cc 23       	and	r28, r28
    115e:	11 f0       	breq	.+4      	; 0x1164 <pca9635_set_sleep+0x16>
		data |= (1<<4);
    1160:	80 61       	ori	r24, 0x10	; 16
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <pca9635_set_sleep+0x18>
	}else{
		data &= ~(1<<4);
    1164:	8f 7e       	andi	r24, 0xEF	; 239
	}
	
	uint8_t ack = I2C_write(data);  
    1166:	8a da       	rcall	.-2796   	; 0x67c <I2C_write>
    1168:	c8 2f       	mov	r28, r24
	I2C_stop();
    116a:	a5 da       	rcall	.-2742   	; 0x6b6 <I2C_stop>
	return ack;
}
    116c:	8c 2f       	mov	r24, r28
    116e:	cf 91       	pop	r28
    1170:	08 95       	ret

00001172 <_ZN5RFM697spiInitEv>:
  setMode(RF69_MODE_STANDBY);
  writeReg(REG_TEMP1, RF_TEMP1_MEAS_START);
  while ((readReg(REG_TEMP1) & RF_TEMP1_MEAS_RUNNING)) ;//Serial.print('*');
  
  return ~readReg(REG_TEMP2) + COURSE_TEMP_COEF + calFactor; //'complement'corrects the slope, rising temp = rising val
}												   	  // COURSE_TEMP_COEF puts reading in the ballpark, user can add additional correction
    1172:	84 b1       	in	r24, 0x04	; 4
    1174:	8c 62       	ori	r24, 0x2C	; 44
    1176:	84 b9       	out	0x04, r24	; 4
    1178:	2a 9a       	sbi	0x05, 2	; 5
    117a:	24 98       	cbi	0x04, 4	; 4
    117c:	80 e5       	ldi	r24, 0x50	; 80
    117e:	8c bd       	out	0x2c, r24	; 44
    1180:	8d b5       	in	r24, 0x2d	; 45
    1182:	81 60       	ori	r24, 0x01	; 1
    1184:	8d bd       	out	0x2d, r24	; 45
    1186:	52 98       	cbi	0x0a, 2	; 10
    1188:	5a 9a       	sbi	0x0b, 2	; 11
    118a:	08 95       	ret

0000118c <_ZN5RFM6912ACKRequestedEv>:
    118c:	80 91 64 01 	lds	r24, 0x0164
    1190:	88 23       	and	r24, r24
    1192:	39 f0       	breq	.+14     	; 0x11a2 <_ZN5RFM6912ACKRequestedEv+0x16>
    1194:	90 91 66 01 	lds	r25, 0x0166
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	9f 3f       	cpi	r25, 0xFF	; 255
    119c:	19 f4       	brne	.+6      	; 0x11a4 <_ZN5RFM6912ACKRequestedEv+0x18>
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	08 95       	ret
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	08 95       	ret

000011a6 <_ZN5RFM694isr0Ev>:
    11a6:	80 91 5f 01 	lds	r24, 0x015F
    11aa:	90 91 60 01 	lds	r25, 0x0160
    11ae:	dc 01       	movw	r26, r24
    11b0:	ed 91       	ld	r30, X+
    11b2:	fc 91       	ld	r31, X
    11b4:	01 90       	ld	r0, Z+
    11b6:	f0 81       	ld	r31, Z
    11b8:	e0 2d       	mov	r30, r0
    11ba:	09 95       	icall
    11bc:	08 95       	ret

000011be <_ZN5RFM6915spiTransferByteEh>:
    11be:	6e bd       	out	0x2e, r22	; 46
    11c0:	0d b4       	in	r0, 0x2d	; 45
    11c2:	07 fe       	sbrs	r0, 7
    11c4:	fd cf       	rjmp	.-6      	; 0x11c0 <_ZN5RFM6915spiTransferByteEh+0x2>
    11c6:	8e b5       	in	r24, 0x2e	; 46
    11c8:	08 95       	ret

000011ca <_ZN5RFM6912noInterruptsEv>:
    11ca:	e8 98       	cbi	0x1d, 0	; 29
    11cc:	08 95       	ret

000011ce <_ZN5RFM696selectEv>:
    11ce:	fd df       	rcall	.-6      	; 0x11ca <_ZN5RFM6912noInterruptsEv>
    11d0:	2a 98       	cbi	0x05, 2	; 5
    11d2:	08 95       	ret

000011d4 <_ZN5RFM6915allowInterruptsEv>:
    11d4:	e8 9a       	sbi	0x1d, 0	; 29
    11d6:	08 95       	ret

000011d8 <_ZN5RFM698unselectEv>:
    11d8:	2a 9a       	sbi	0x05, 2	; 5
    11da:	fc cf       	rjmp	.-8      	; 0x11d4 <_ZN5RFM6915allowInterruptsEv>

000011dc <_ZN5RFM6911spiTransferEhh>:
    11dc:	0f 93       	push	r16
    11de:	1f 93       	push	r17
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	ec 01       	movw	r28, r24
    11e6:	06 2f       	mov	r16, r22
    11e8:	14 2f       	mov	r17, r20
    11ea:	f1 df       	rcall	.-30     	; 0x11ce <_ZN5RFM696selectEv>
    11ec:	60 2f       	mov	r22, r16
    11ee:	ce 01       	movw	r24, r28
    11f0:	e6 df       	rcall	.-52     	; 0x11be <_ZN5RFM6915spiTransferByteEh>
    11f2:	61 2f       	mov	r22, r17
    11f4:	ce 01       	movw	r24, r28
    11f6:	e3 df       	rcall	.-58     	; 0x11be <_ZN5RFM6915spiTransferByteEh>
    11f8:	18 2f       	mov	r17, r24
    11fa:	ce 01       	movw	r24, r28
    11fc:	ed df       	rcall	.-38     	; 0x11d8 <_ZN5RFM698unselectEv>
    11fe:	81 2f       	mov	r24, r17
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	08 95       	ret

0000120a <_ZN5RFM698writeRegEhh>:
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	ec 01       	movw	r28, r24
    1214:	06 2f       	mov	r16, r22
    1216:	14 2f       	mov	r17, r20
    1218:	da df       	rcall	.-76     	; 0x11ce <_ZN5RFM696selectEv>
    121a:	60 2f       	mov	r22, r16
    121c:	60 68       	ori	r22, 0x80	; 128
    121e:	41 2f       	mov	r20, r17
    1220:	ce 01       	movw	r24, r28
    1222:	dc df       	rcall	.-72     	; 0x11dc <_ZN5RFM6911spiTransferEhh>
    1224:	ce 01       	movw	r24, r28
    1226:	d8 df       	rcall	.-80     	; 0x11d8 <_ZN5RFM698unselectEv>
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	1f 91       	pop	r17
    122e:	0f 91       	pop	r16
    1230:	08 95       	ret

00001232 <_ZN5RFM6916setHighPowerRegsEb>:
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	ec 01       	movw	r28, r24
    1238:	61 11       	cpse	r22, r1
    123a:	0a c0       	rjmp	.+20     	; 0x1250 <_ZN5RFM6916setHighPowerRegsEb+0x1e>
    123c:	04 c0       	rjmp	.+8      	; 0x1246 <_ZN5RFM6916setHighPowerRegsEb+0x14>
    123e:	6c e5       	ldi	r22, 0x5C	; 92
    1240:	ce 01       	movw	r24, r28
    1242:	e3 df       	rcall	.-58     	; 0x120a <_ZN5RFM698writeRegEhh>
    1244:	0a c0       	rjmp	.+20     	; 0x125a <_ZN5RFM6916setHighPowerRegsEb+0x28>
    1246:	45 e5       	ldi	r20, 0x55	; 85
    1248:	6a e5       	ldi	r22, 0x5A	; 90
    124a:	df df       	rcall	.-66     	; 0x120a <_ZN5RFM698writeRegEhh>
    124c:	40 e7       	ldi	r20, 0x70	; 112
    124e:	f7 cf       	rjmp	.-18     	; 0x123e <_ZN5RFM6916setHighPowerRegsEb+0xc>
    1250:	4d e5       	ldi	r20, 0x5D	; 93
    1252:	6a e5       	ldi	r22, 0x5A	; 90
    1254:	da df       	rcall	.-76     	; 0x120a <_ZN5RFM698writeRegEhh>
    1256:	4c e7       	ldi	r20, 0x7C	; 124
    1258:	f2 cf       	rjmp	.-28     	; 0x123e <_ZN5RFM6916setHighPowerRegsEb+0xc>
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

00001260 <_ZN5RFM697readRegEh>:
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	ec 01       	movw	r28, r24
    1268:	16 2f       	mov	r17, r22
    126a:	b1 df       	rcall	.-158    	; 0x11ce <_ZN5RFM696selectEv>
    126c:	40 e0       	ldi	r20, 0x00	; 0
    126e:	61 2f       	mov	r22, r17
    1270:	ce 01       	movw	r24, r28
    1272:	b4 df       	rcall	.-152    	; 0x11dc <_ZN5RFM6911spiTransferEhh>
    1274:	18 2f       	mov	r17, r24
    1276:	ce 01       	movw	r24, r28
    1278:	af df       	rcall	.-162    	; 0x11d8 <_ZN5RFM698unselectEv>
    127a:	81 2f       	mov	r24, r17
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	08 95       	ret

00001284 <_ZN5RFM698readRSSIEb>:
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	ec 01       	movw	r28, r24
    128a:	66 23       	and	r22, r22
    128c:	41 f0       	breq	.+16     	; 0x129e <_ZN5RFM698readRSSIEb+0x1a>
    128e:	41 e0       	ldi	r20, 0x01	; 1
    1290:	63 e2       	ldi	r22, 0x23	; 35
    1292:	bb df       	rcall	.-138    	; 0x120a <_ZN5RFM698writeRegEhh>
    1294:	63 e2       	ldi	r22, 0x23	; 35
    1296:	ce 01       	movw	r24, r28
    1298:	e3 df       	rcall	.-58     	; 0x1260 <_ZN5RFM697readRegEh>
    129a:	81 ff       	sbrs	r24, 1
    129c:	fb cf       	rjmp	.-10     	; 0x1294 <_ZN5RFM698readRSSIEb+0x10>
    129e:	64 e2       	ldi	r22, 0x24	; 36
    12a0:	ce 01       	movw	r24, r28
    12a2:	de df       	rcall	.-68     	; 0x1260 <_ZN5RFM697readRegEh>
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	31 95       	neg	r19
    12aa:	21 95       	neg	r18
    12ac:	31 09       	sbc	r19, r1
    12ae:	35 95       	asr	r19
    12b0:	27 95       	ror	r18
    12b2:	82 2f       	mov	r24, r18
    12b4:	93 2f       	mov	r25, r19
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret

000012bc <_ZN5RFM697setModeEh>:
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	ec 01       	movw	r28, r24
    12c4:	16 2f       	mov	r17, r22
    12c6:	80 91 69 01 	lds	r24, 0x0169
    12ca:	86 17       	cp	r24, r22
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <_ZN5RFM697setModeEh+0x14>
    12ce:	56 c0       	rjmp	.+172    	; 0x137c <_ZN5RFM697setModeEh+0xc0>
    12d0:	62 30       	cpi	r22, 0x02	; 2
    12d2:	69 f1       	breq	.+90     	; 0x132e <_ZN5RFM697setModeEh+0x72>
    12d4:	38 f4       	brcc	.+14     	; 0x12e4 <_ZN5RFM697setModeEh+0x28>
    12d6:	66 23       	and	r22, r22
    12d8:	09 f4       	brne	.+2      	; 0x12dc <_ZN5RFM697setModeEh+0x20>
    12da:	3d c0       	rjmp	.+122    	; 0x1356 <_ZN5RFM697setModeEh+0x9a>
    12dc:	61 30       	cpi	r22, 0x01	; 1
    12de:	09 f0       	breq	.+2      	; 0x12e2 <_ZN5RFM697setModeEh+0x26>
    12e0:	4d c0       	rjmp	.+154    	; 0x137c <_ZN5RFM697setModeEh+0xc0>
    12e2:	2f c0       	rjmp	.+94     	; 0x1342 <_ZN5RFM697setModeEh+0x86>
    12e4:	63 30       	cpi	r22, 0x03	; 3
    12e6:	99 f0       	breq	.+38     	; 0x130e <_ZN5RFM697setModeEh+0x52>
    12e8:	64 30       	cpi	r22, 0x04	; 4
    12ea:	09 f0       	breq	.+2      	; 0x12ee <_ZN5RFM697setModeEh+0x32>
    12ec:	47 c0       	rjmp	.+142    	; 0x137c <_ZN5RFM697setModeEh+0xc0>
    12ee:	61 e0       	ldi	r22, 0x01	; 1
    12f0:	ce 01       	movw	r24, r28
    12f2:	b6 df       	rcall	.-148    	; 0x1260 <_ZN5RFM697readRegEh>
    12f4:	83 7e       	andi	r24, 0xE3	; 227
    12f6:	48 2f       	mov	r20, r24
    12f8:	4c 60       	ori	r20, 0x0C	; 12
    12fa:	61 e0       	ldi	r22, 0x01	; 1
    12fc:	ce 01       	movw	r24, r28
    12fe:	85 df       	rcall	.-246    	; 0x120a <_ZN5RFM698writeRegEhh>
    1300:	8f 81       	ldd	r24, Y+7	; 0x07
    1302:	88 23       	and	r24, r24
    1304:	81 f1       	breq	.+96     	; 0x1366 <_ZN5RFM697setModeEh+0xaa>
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	ce 01       	movw	r24, r28
    130a:	93 df       	rcall	.-218    	; 0x1232 <_ZN5RFM6916setHighPowerRegsEb>
    130c:	2c c0       	rjmp	.+88     	; 0x1366 <_ZN5RFM697setModeEh+0xaa>
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	ce 01       	movw	r24, r28
    1312:	a6 df       	rcall	.-180    	; 0x1260 <_ZN5RFM697readRegEh>
    1314:	83 7e       	andi	r24, 0xE3	; 227
    1316:	48 2f       	mov	r20, r24
    1318:	40 61       	ori	r20, 0x10	; 16
    131a:	61 e0       	ldi	r22, 0x01	; 1
    131c:	ce 01       	movw	r24, r28
    131e:	75 df       	rcall	.-278    	; 0x120a <_ZN5RFM698writeRegEhh>
    1320:	8f 81       	ldd	r24, Y+7	; 0x07
    1322:	88 23       	and	r24, r24
    1324:	01 f1       	breq	.+64     	; 0x1366 <_ZN5RFM697setModeEh+0xaa>
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	ce 01       	movw	r24, r28
    132a:	83 df       	rcall	.-250    	; 0x1232 <_ZN5RFM6916setHighPowerRegsEb>
    132c:	1c c0       	rjmp	.+56     	; 0x1366 <_ZN5RFM697setModeEh+0xaa>
    132e:	61 e0       	ldi	r22, 0x01	; 1
    1330:	ce 01       	movw	r24, r28
    1332:	96 df       	rcall	.-212    	; 0x1260 <_ZN5RFM697readRegEh>
    1334:	83 7e       	andi	r24, 0xE3	; 227
    1336:	48 2f       	mov	r20, r24
    1338:	48 60       	ori	r20, 0x08	; 8
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	ce 01       	movw	r24, r28
    133e:	65 df       	rcall	.-310    	; 0x120a <_ZN5RFM698writeRegEhh>
    1340:	12 c0       	rjmp	.+36     	; 0x1366 <_ZN5RFM697setModeEh+0xaa>
    1342:	61 e0       	ldi	r22, 0x01	; 1
    1344:	ce 01       	movw	r24, r28
    1346:	8c df       	rcall	.-232    	; 0x1260 <_ZN5RFM697readRegEh>
    1348:	83 7e       	andi	r24, 0xE3	; 227
    134a:	48 2f       	mov	r20, r24
    134c:	44 60       	ori	r20, 0x04	; 4
    134e:	61 e0       	ldi	r22, 0x01	; 1
    1350:	ce 01       	movw	r24, r28
    1352:	5b df       	rcall	.-330    	; 0x120a <_ZN5RFM698writeRegEhh>
    1354:	08 c0       	rjmp	.+16     	; 0x1366 <_ZN5RFM697setModeEh+0xaa>
    1356:	61 e0       	ldi	r22, 0x01	; 1
    1358:	ce 01       	movw	r24, r28
    135a:	82 df       	rcall	.-252    	; 0x1260 <_ZN5RFM697readRegEh>
    135c:	48 2f       	mov	r20, r24
    135e:	43 7e       	andi	r20, 0xE3	; 227
    1360:	61 e0       	ldi	r22, 0x01	; 1
    1362:	ce 01       	movw	r24, r28
    1364:	52 df       	rcall	.-348    	; 0x120a <_ZN5RFM698writeRegEhh>
    1366:	80 91 69 01 	lds	r24, 0x0169
    136a:	81 11       	cpse	r24, r1
    136c:	05 c0       	rjmp	.+10     	; 0x1378 <_ZN5RFM697setModeEh+0xbc>
    136e:	67 e2       	ldi	r22, 0x27	; 39
    1370:	ce 01       	movw	r24, r28
    1372:	76 df       	rcall	.-276    	; 0x1260 <_ZN5RFM697readRegEh>
    1374:	88 23       	and	r24, r24
    1376:	bc f7       	brge	.-18     	; 0x1366 <_ZN5RFM697setModeEh+0xaa>
    1378:	10 93 69 01 	sts	0x0169, r17
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	08 95       	ret

00001384 <_ZN5RFM697canSendEv>:
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	ec 01       	movw	r28, r24
    138a:	80 91 69 01 	lds	r24, 0x0169
    138e:	83 30       	cpi	r24, 0x03	; 3
    1390:	79 f4       	brne	.+30     	; 0x13b0 <_ZN5RFM697canSendEv+0x2c>
    1392:	80 91 65 01 	lds	r24, 0x0165
    1396:	81 11       	cpse	r24, r1
    1398:	0d c0       	rjmp	.+26     	; 0x13b4 <_ZN5RFM697canSendEv+0x30>
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	ce 01       	movw	r24, r28
    139e:	72 df       	rcall	.-284    	; 0x1284 <_ZN5RFM698readRSSIEb>
    13a0:	86 3a       	cpi	r24, 0xA6	; 166
    13a2:	9f 4f       	sbci	r25, 0xFF	; 255
    13a4:	4c f4       	brge	.+18     	; 0x13b8 <_ZN5RFM697canSendEv+0x34>
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	ce 01       	movw	r24, r28
    13aa:	88 df       	rcall	.-240    	; 0x12bc <_ZN5RFM697setModeEh>
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	05 c0       	rjmp	.+10     	; 0x13ba <_ZN5RFM697canSendEv+0x36>
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	03 c0       	rjmp	.+6      	; 0x13ba <_ZN5RFM697canSendEv+0x36>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <_ZN5RFM697canSendEv+0x36>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <_ZN5RFM6912receiveBeginEv>:

}

void RFM69::isr0() { selfPointer->interruptHandler(); }

void RFM69::receiveBegin() {
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	ec 01       	movw	r28, r24
  DATALEN = 0;
    13c6:	10 92 68 01 	sts	0x0168, r1
  SENDERID = 0;
    13ca:	10 92 67 01 	sts	0x0167, r1
  TARGETID = 0;
    13ce:	10 92 66 01 	sts	0x0166, r1
  PAYLOADLEN = 0;
    13d2:	10 92 65 01 	sts	0x0165, r1
  ACK_REQUESTED = 0;
    13d6:	10 92 64 01 	sts	0x0164, r1
  ACK_RECEIVED = 0;
    13da:	10 92 63 01 	sts	0x0163, r1
  RSSI = 0;
    13de:	10 92 62 01 	sts	0x0162, r1
    13e2:	10 92 61 01 	sts	0x0161, r1
  if (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY)
    13e6:	68 e2       	ldi	r22, 0x28	; 40
    13e8:	3b df       	rcall	.-394    	; 0x1260 <_ZN5RFM697readRegEh>
    13ea:	82 ff       	sbrs	r24, 2
    13ec:	08 c0       	rjmp	.+16     	; 0x13fe <_ZN5RFM6912receiveBeginEv+0x3e>
    writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFB) | RF_PACKET2_RXRESTART); // avoid RX deadlocks
    13ee:	6d e3       	ldi	r22, 0x3D	; 61
    13f0:	ce 01       	movw	r24, r28
    13f2:	36 df       	rcall	.-404    	; 0x1260 <_ZN5RFM697readRegEh>
    13f4:	48 2f       	mov	r20, r24
    13f6:	44 60       	ori	r20, 0x04	; 4
    13f8:	6d e3       	ldi	r22, 0x3D	; 61
    13fa:	ce 01       	movw	r24, r28
    13fc:	06 df       	rcall	.-500    	; 0x120a <_ZN5RFM698writeRegEhh>
	
	 writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_01); //set DIO0 to "PAYLOADREADY" in receive mode
    13fe:	40 e4       	ldi	r20, 0x40	; 64
    1400:	65 e2       	ldi	r22, 0x25	; 37
    1402:	ce 01       	movw	r24, r28
    1404:	02 df       	rcall	.-508    	; 0x120a <_ZN5RFM698writeRegEhh>

		setMode(RF69_MODE_RX);
    1406:	63 e0       	ldi	r22, 0x03	; 3
    1408:	ce 01       	movw	r24, r28
    140a:	58 df       	rcall	.-336    	; 0x12bc <_ZN5RFM697setModeEh>

}
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	08 95       	ret

00001412 <_ZN5RFM697encryptEPKc>:
}

// To enable encryption: radio.encrypt("ABCDEFGHIJKLMNOP");
// To disable encryption: radio.encrypt(null) or radio.encrypt(0)
// KEY HAS TO BE 16 bytes !!!
void RFM69::encrypt(const char* key) {
    1412:	df 92       	push	r13
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	8c 01       	movw	r16, r24
    1422:	7b 01       	movw	r14, r22
  setMode(RF69_MODE_STANDBY);
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	4a df       	rcall	.-364    	; 0x12bc <_ZN5RFM697setModeEh>
  if (key!=0)
    1428:	e1 14       	cp	r14, r1
    142a:	f1 04       	cpc	r15, r1
    142c:	81 f0       	breq	.+32     	; 0x144e <_ZN5RFM697encryptEPKc+0x3c>
  {
    select();
    142e:	c8 01       	movw	r24, r16
    1430:	ce de       	rcall	.-612    	; 0x11ce <_ZN5RFM696selectEv>
    spiTransferByte(REG_AESKEY1 | 0x80);
    1432:	6e eb       	ldi	r22, 0xBE	; 190
    1434:	c8 01       	movw	r24, r16
    1436:	c3 de       	rcall	.-634    	; 0x11be <_ZN5RFM6915spiTransferByteEh>
    1438:	e7 01       	movw	r28, r14
    for (byte i = 0; i<16; i++)
    143a:	d1 2c       	mov	r13, r1
      spiTransferByte(key[i]);
    143c:	69 91       	ld	r22, Y+
    143e:	c8 01       	movw	r24, r16
    1440:	be de       	rcall	.-644    	; 0x11be <_ZN5RFM6915spiTransferByteEh>
  setMode(RF69_MODE_STANDBY);
  if (key!=0)
  {
    select();
    spiTransferByte(REG_AESKEY1 | 0x80);
    for (byte i = 0; i<16; i++)
    1442:	d3 94       	inc	r13
    1444:	80 e1       	ldi	r24, 0x10	; 16
    1446:	d8 12       	cpse	r13, r24
    1448:	f9 cf       	rjmp	.-14     	; 0x143c <_ZN5RFM697encryptEPKc+0x2a>
      spiTransferByte(key[i]);
    unselect();
    144a:	c8 01       	movw	r24, r16
    144c:	c5 de       	rcall	.-630    	; 0x11d8 <_ZN5RFM698unselectEv>
  }
  writeReg(REG_PACKETCONFIG2, (readReg(REG_PACKETCONFIG2) & 0xFE) | (key ? 1 : 0));
    144e:	6d e3       	ldi	r22, 0x3D	; 61
    1450:	c8 01       	movw	r24, r16
    1452:	06 df       	rcall	.-500    	; 0x1260 <_ZN5RFM697readRegEh>
    1454:	8e 7f       	andi	r24, 0xFE	; 254
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	ef 28       	or	r14, r15
    145a:	09 f4       	brne	.+2      	; 0x145e <_ZN5RFM697encryptEPKc+0x4c>
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	48 2f       	mov	r20, r24
    1460:	49 2b       	or	r20, r25
    1462:	6d e3       	ldi	r22, 0x3D	; 61
    1464:	c8 01       	movw	r24, r16
    1466:	d1 de       	rcall	.-606    	; 0x120a <_ZN5RFM698writeRegEhh>
}
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	ff 90       	pop	r15
    1472:	ef 90       	pop	r14
    1474:	df 90       	pop	r13
    1476:	08 95       	ret

00001478 <_ZN5RFM6910initializeEhhh>:

*/


bool RFM69::initialize(uint8_t freqBand, uint8_t nodeID, uint8_t networkID)
{
    1478:	ef 92       	push	r14
    147a:	ff 92       	push	r15
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	aa 97       	sbiw	r28, 0x2a	; 42
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	8c 01       	movw	r16, r24
    1496:	f4 2e       	mov	r15, r20
    //* 0x39 */ { REG_NODEADRS, nodeID }, //turned off because we're not using address filtering
    /* 0x3C */ { REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTART_FIFONOTEMPTY | RF_FIFOTHRESH_VALUE }, //TX on FIFO not empty
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
    1498:	fe 01       	movw	r30, r28
    149a:	31 96       	adiw	r30, 0x01	; 1
    149c:	8a e2       	ldi	r24, 0x2A	; 42
    149e:	df 01       	movw	r26, r30
    14a0:	1d 92       	st	X+, r1
    14a2:	8a 95       	dec	r24
    14a4:	e9 f7       	brne	.-6      	; 0x14a0 <_ZN5RFM6910initializeEhhh+0x28>
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	84 e0       	ldi	r24, 0x04	; 4
    14ac:	8a 83       	std	Y+2, r24	; 0x02
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	9b 83       	std	Y+3, r25	; 0x03
    14b2:	33 e0       	ldi	r19, 0x03	; 3
    14b4:	3d 83       	std	Y+5, r19	; 0x05
    14b6:	9e 83       	std	Y+6, r25	; 0x06
    14b8:	8f 83       	std	Y+7, r24	; 0x07
    14ba:	8a e8       	ldi	r24, 0x8A	; 138
    14bc:	88 87       	std	Y+8, r24	; 0x08
    14be:	85 e0       	ldi	r24, 0x05	; 5
    14c0:	89 87       	std	Y+9, r24	; 0x09
    14c2:	8a 87       	std	Y+10, r24	; 0x0a
    14c4:	86 e0       	ldi	r24, 0x06	; 6
    14c6:	8b 87       	std	Y+11, r24	; 0x0b
    14c8:	83 ec       	ldi	r24, 0xC3	; 195
    14ca:	8c 87       	std	Y+12, r24	; 0x0c
    14cc:	87 e0       	ldi	r24, 0x07	; 7
    14ce:	8d 87       	std	Y+13, r24	; 0x0d
    14d0:	88 e0       	ldi	r24, 0x08	; 8
    14d2:	8f 87       	std	Y+15, r24	; 0x0f
    14d4:	89 e0       	ldi	r24, 0x09	; 9
    14d6:	89 8b       	std	Y+17, r24	; 0x11
    14d8:	89 e1       	ldi	r24, 0x19	; 25
    14da:	8b 8b       	std	Y+19, r24	; 0x13
    14dc:	92 e4       	ldi	r25, 0x42	; 66
    14de:	9c 8b       	std	Y+20, r25	; 0x14
    14e0:	85 e2       	ldi	r24, 0x25	; 37
    14e2:	8d 8b       	std	Y+21, r24	; 0x15
    14e4:	80 e4       	ldi	r24, 0x40	; 64
    14e6:	8e 8b       	std	Y+22, r24	; 0x16
    14e8:	89 e2       	ldi	r24, 0x29	; 41
    14ea:	8f 8b       	std	Y+23, r24	; 0x17
    14ec:	8c ed       	ldi	r24, 0xDC	; 220
    14ee:	88 8f       	std	Y+24, r24	; 0x18
    14f0:	8e e2       	ldi	r24, 0x2E	; 46
    14f2:	89 8f       	std	Y+25, r24	; 0x19
    14f4:	88 e8       	ldi	r24, 0x88	; 136
    14f6:	8a 8f       	std	Y+26, r24	; 0x1a
    14f8:	8f e2       	ldi	r24, 0x2F	; 47
    14fa:	8b 8f       	std	Y+27, r24	; 0x1b
    14fc:	8d e2       	ldi	r24, 0x2D	; 45
    14fe:	8c 8f       	std	Y+28, r24	; 0x1c
    1500:	80 e3       	ldi	r24, 0x30	; 48
    1502:	8d 8f       	std	Y+29, r24	; 0x1d
    1504:	37 e3       	ldi	r19, 0x37	; 55
    1506:	3f 8f       	std	Y+31, r19	; 0x1f
    1508:	30 e9       	ldi	r19, 0x90	; 144
    150a:	38 a3       	std	Y+32, r19	; 0x20
    150c:	38 e3       	ldi	r19, 0x38	; 56
    150e:	39 a3       	std	Y+33, r19	; 0x21
    1510:	9a a3       	std	Y+34, r25	; 0x22
    1512:	9c e3       	ldi	r25, 0x3C	; 60
    1514:	9b a3       	std	Y+35, r25	; 0x23
    1516:	9f e8       	ldi	r25, 0x8F	; 143
    1518:	9c a3       	std	Y+36, r25	; 0x24
    151a:	9d e3       	ldi	r25, 0x3D	; 61
    151c:	9d a3       	std	Y+37, r25	; 0x25
    151e:	92 e1       	ldi	r25, 0x12	; 18
    1520:	9e a3       	std	Y+38, r25	; 0x26
    1522:	9f e6       	ldi	r25, 0x6F	; 111
    1524:	9f a3       	std	Y+39, r25	; 0x27
    1526:	88 a7       	std	Y+40, r24	; 0x28
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	89 a7       	std	Y+41, r24	; 0x29
    152c:	6f 31       	cpi	r22, 0x1F	; 31
    152e:	09 f4       	brne	.+2      	; 0x1532 <_ZN5RFM6910initializeEhhh+0xba>
    1530:	53 c0       	rjmp	.+166    	; 0x15d8 <_ZN5RFM6910initializeEhhh+0x160>
    1532:	6b 32       	cpi	r22, 0x2B	; 43
    1534:	09 f4       	brne	.+2      	; 0x1538 <_ZN5RFM6910initializeEhhh+0xc0>
    1536:	4c c0       	rjmp	.+152    	; 0x15d0 <_ZN5RFM6910initializeEhhh+0x158>
    1538:	66 35       	cpi	r22, 0x56	; 86
    153a:	09 f0       	breq	.+2      	; 0x153e <_ZN5RFM6910initializeEhhh+0xc6>
    153c:	45 c0       	rjmp	.+138    	; 0x15c8 <_ZN5RFM6910initializeEhhh+0x150>
    153e:	50 c0       	rjmp	.+160    	; 0x15e0 <_ZN5RFM6910initializeEhhh+0x168>
    1540:	88 8b       	std	Y+16, r24	; 0x10
    1542:	2e 8f       	std	Y+30, r18	; 0x1e

	spiInit();	
    1544:	c8 01       	movw	r24, r16
    1546:	15 de       	rcall	.-982    	; 0x1172 <_ZN5RFM697spiInitEv>
  
  do writeReg(REG_SYNCVALUE1, 0xAA); while (readReg(REG_SYNCVALUE1) != 0xAA);
    1548:	4a ea       	ldi	r20, 0xAA	; 170
    154a:	6f e2       	ldi	r22, 0x2F	; 47
    154c:	c8 01       	movw	r24, r16
    154e:	5d de       	rcall	.-838    	; 0x120a <_ZN5RFM698writeRegEhh>
    1550:	6f e2       	ldi	r22, 0x2F	; 47
    1552:	c8 01       	movw	r24, r16
    1554:	85 de       	rcall	.-758    	; 0x1260 <_ZN5RFM697readRegEh>
    1556:	8a 3a       	cpi	r24, 0xAA	; 170
    1558:	b9 f7       	brne	.-18     	; 0x1548 <_ZN5RFM6910initializeEhhh+0xd0>
  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55);
    155a:	45 e5       	ldi	r20, 0x55	; 85
    155c:	6f e2       	ldi	r22, 0x2F	; 47
    155e:	c8 01       	movw	r24, r16
    1560:	54 de       	rcall	.-856    	; 0x120a <_ZN5RFM698writeRegEhh>
    1562:	6f e2       	ldi	r22, 0x2F	; 47
    1564:	c8 01       	movw	r24, r16
    1566:	7c de       	rcall	.-776    	; 0x1260 <_ZN5RFM697readRegEh>
    1568:	85 35       	cpi	r24, 0x55	; 85
    156a:	b9 f7       	brne	.-18     	; 0x155a <_ZN5RFM6910initializeEhhh+0xe2>
  
  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    156c:	69 81       	ldd	r22, Y+1	; 0x01
    156e:	6f 3f       	cpi	r22, 0xFF	; 255
    1570:	f1 f0       	breq	.+60     	; 0x15ae <_ZN5RFM6910initializeEhhh+0x136>
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	e1 2c       	mov	r14, r1
    writeReg(CONFIG[i][0], CONFIG[i][1]);
    1578:	fc 01       	movw	r30, r24
    157a:	ee 0f       	add	r30, r30
    157c:	ff 1f       	adc	r31, r31
    157e:	21 e0       	ldi	r18, 0x01	; 1
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	2c 0f       	add	r18, r28
    1584:	3d 1f       	adc	r19, r29
    1586:	e2 0f       	add	r30, r18
    1588:	f3 1f       	adc	r31, r19
    158a:	41 81       	ldd	r20, Z+1	; 0x01
    158c:	c8 01       	movw	r24, r16
    158e:	3d de       	rcall	.-902    	; 0x120a <_ZN5RFM698writeRegEhh>
  
  do writeReg(REG_SYNCVALUE1, 0xAA); while (readReg(REG_SYNCVALUE1) != 0xAA);
  
	do writeReg(REG_SYNCVALUE1, 0x55); while (readReg(REG_SYNCVALUE1) != 0x55);
  
  for (uint8_t i = 0; CONFIG[i][0] != 255; i++)
    1590:	e3 94       	inc	r14
    1592:	8e 2d       	mov	r24, r14
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	fc 01       	movw	r30, r24
    1598:	ee 0f       	add	r30, r30
    159a:	ff 1f       	adc	r31, r31
    159c:	a1 e0       	ldi	r26, 0x01	; 1
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	ac 0f       	add	r26, r28
    15a2:	bd 1f       	adc	r27, r29
    15a4:	ea 0f       	add	r30, r26
    15a6:	fb 1f       	adc	r31, r27
    15a8:	60 81       	ld	r22, Z
    15aa:	6f 3f       	cpi	r22, 0xFF	; 255
    15ac:	29 f7       	brne	.-54     	; 0x1578 <_ZN5RFM6910initializeEhhh+0x100>
    writeReg(CONFIG[i][0], CONFIG[i][1]);

  // Encryption is persistent between resets and can trip you up during debugging.
  // Disable it during initialization so we always start from a known state.
  encrypt(0);
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	c8 01       	movw	r24, r16
    15b4:	2e df       	rcall	.-420    	; 0x1412 <_ZN5RFM697encryptEPKc>

  setMode(RF69_MODE_STANDBY); // zinloos omdat default al in standby?
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	c8 01       	movw	r24, r16
    15ba:	80 de       	rcall	.-768    	; 0x12bc <_ZN5RFM697setModeEh>
  
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady
    15bc:	67 e2       	ldi	r22, 0x27	; 39
    15be:	c8 01       	movw	r24, r16
    15c0:	4f de       	rcall	.-866    	; 0x1260 <_ZN5RFM697readRegEh>
    15c2:	88 23       	and	r24, r24
    15c4:	dc f7       	brge	.-10     	; 0x15bc <_ZN5RFM6910initializeEhhh+0x144>
    15c6:	10 c0       	rjmp	.+32     	; 0x15e8 <_ZN5RFM6910initializeEhhh+0x170>
    //* 0x39 */ { REG_NODEADRS, nodeID }, //turned off because we're not using address filtering
    /* 0x3C */ { REG_FIFOTHRESH, RF_FIFOTHRESH_TXSTART_FIFONOTEMPTY | RF_FIFOTHRESH_VALUE }, //TX on FIFO not empty
    /* 0x3d */ { REG_PACKETCONFIG2, RF_PACKET2_RXRESTARTDELAY_2BITS | RF_PACKET2_AUTORXRESTART_ON | RF_PACKET2_AES_OFF }, //RXRESTARTDELAY must match transmitter PA ramp-down time (bitrate dependent)
    /* 0x6F */ { REG_TESTDAGC, RF_DAGC_IMPROVED_LOWBETA0 }, // run DAGC continuously in RX mode, recommended default for AfcLowBetaOn=0
    {255, 0}
  };
    15c8:	84 ee       	ldi	r24, 0xE4	; 228
    15ca:	8e 87       	std	Y+14, r24	; 0x0e
    15cc:	80 ec       	ldi	r24, 0xC0	; 192
    15ce:	b8 cf       	rjmp	.-144    	; 0x1540 <_ZN5RFM6910initializeEhhh+0xc8>
    15d0:	8c e6       	ldi	r24, 0x6C	; 108
    15d2:	8e 87       	std	Y+14, r24	; 0x0e
    15d4:	80 e4       	ldi	r24, 0x40	; 64
    15d6:	b4 cf       	rjmp	.-152    	; 0x1540 <_ZN5RFM6910initializeEhhh+0xc8>
    15d8:	8e e4       	ldi	r24, 0x4E	; 78
    15da:	8e 87       	std	Y+14, r24	; 0x0e
    15dc:	80 ec       	ldi	r24, 0xC0	; 192
    15de:	b0 cf       	rjmp	.-160    	; 0x1540 <_ZN5RFM6910initializeEhhh+0xc8>
    15e0:	89 ed       	ldi	r24, 0xD9	; 217
    15e2:	8e 87       	std	Y+14, r24	; 0x0e
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	ac cf       	rjmp	.-168    	; 0x1540 <_ZN5RFM6910initializeEhhh+0xc8>

  setMode(RF69_MODE_STANDBY); // zinloos omdat default al in standby?
  
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady

  			 EICRA &= ~(1<<ISC01) | (1<<ISC00);	// Trigger INT0 on low level
    15e8:	e9 e6       	ldi	r30, 0x69	; 105
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8d 7f       	andi	r24, 0xFD	; 253
    15f0:	80 83       	st	Z, r24
			 EIMSK |= (1 << INT0); // enable int0 interrupt //bitSet(EIMSK, INT0);
    15f2:	e8 9a       	sbi	0x1d, 0	; 29
			    
  selfPointer = this;
    15f4:	10 93 60 01 	sts	0x0160, r17
    15f8:	00 93 5f 01 	sts	0x015F, r16
  _address = nodeID;
    15fc:	f8 01       	movw	r30, r16
    15fe:	f4 82       	std	Z+4, r15	; 0x04
  return true;
}
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	aa 96       	adiw	r28, 0x2a	; 42
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	08 95       	ret

0000161c <_ZN5RFM6916interruptHandlerEv>:
	//while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
	setMode(RF69_MODE_STANDBY);
  
}

void RFM69::interruptHandler() {
    161c:	ff 92       	push	r15
    161e:	0f 93       	push	r16
    1620:	1f 93       	push	r17
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    1626:	ec 01       	movw	r28, r24
  if (_mode == RF69_MODE_RX && (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PAYLOADREADY))
    1628:	80 91 69 01 	lds	r24, 0x0169
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	09 f0       	breq	.+2      	; 0x1632 <_ZN5RFM6916interruptHandlerEv+0x16>
    1630:	42 c0       	rjmp	.+132    	; 0x16b6 <_ZN5RFM6916interruptHandlerEv+0x9a>
    1632:	68 e2       	ldi	r22, 0x28	; 40
    1634:	ce 01       	movw	r24, r28
    1636:	14 de       	rcall	.-984    	; 0x1260 <_ZN5RFM697readRegEh>
    1638:	82 ff       	sbrs	r24, 2
    163a:	3d c0       	rjmp	.+122    	; 0x16b6 <_ZN5RFM6916interruptHandlerEv+0x9a>

  {
    setMode(RF69_MODE_STANDBY);
    163c:	61 e0       	ldi	r22, 0x01	; 1
    163e:	ce 01       	movw	r24, r28
    1640:	3d de       	rcall	.-902    	; 0x12bc <_ZN5RFM697setModeEh>
    select();
    1642:	ce 01       	movw	r24, r28
    1644:	c4 dd       	rcall	.-1144   	; 0x11ce <_ZN5RFM696selectEv>
    spiTransferByte(REG_FIFO & 0x7f);
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	ce 01       	movw	r24, r28
    164a:	b9 dd       	rcall	.-1166   	; 0x11be <_ZN5RFM6915spiTransferByteEh>
    PAYLOADLEN = spiTransferByte(0);
    164c:	60 e0       	ldi	r22, 0x00	; 0
    164e:	ce 01       	movw	r24, r28
    1650:	b6 dd       	rcall	.-1172   	; 0x11be <_ZN5RFM6915spiTransferByteEh>
    1652:	80 93 65 01 	sts	0x0165, r24
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    1656:	80 91 65 01 	lds	r24, 0x0165
    165a:	83 34       	cpi	r24, 0x43	; 67
    165c:	18 f4       	brcc	.+6      	; 0x1664 <_ZN5RFM6916interruptHandlerEv+0x48>
    165e:	80 91 65 01 	lds	r24, 0x0165
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <_ZN5RFM6916interruptHandlerEv+0x4a>
    1664:	82 e4       	ldi	r24, 0x42	; 66
    1666:	80 93 65 01 	sts	0x0165, r24
    TARGETID = spiTransferByte(0);
    166a:	60 e0       	ldi	r22, 0x00	; 0
    166c:	ce 01       	movw	r24, r28
    166e:	a7 dd       	rcall	.-1202   	; 0x11be <_ZN5RFM6915spiTransferByteEh>
    1670:	80 93 66 01 	sts	0x0166, r24
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR)) //match this node's address, or broadcast address or anything in promiscuous mode
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	81 11       	cpse	r24, r1
    1678:	2b c0       	rjmp	.+86     	; 0x16d0 <_ZN5RFM6916interruptHandlerEv+0xb4>
    167a:	80 91 66 01 	lds	r24, 0x0166
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	98 17       	cp	r25, r24
    1682:	31 f1       	breq	.+76     	; 0x16d0 <_ZN5RFM6916interruptHandlerEv+0xb4>
    1684:	80 91 66 01 	lds	r24, 0x0166
    1688:	8f 3f       	cpi	r24, 0xFF	; 255
    168a:	e9 f4       	brne	.+58     	; 0x16c6 <_ZN5RFM6916interruptHandlerEv+0xaa>
    168c:	21 c0       	rjmp	.+66     	; 0x16d0 <_ZN5RFM6916interruptHandlerEv+0xb4>
    byte CTLbyte = spiTransferByte(0);
    
    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag
    
    for (byte i= 0; i < DATALEN; i++)
    168e:	f1 2c       	mov	r15, r1
    {
      DATA[i] = spiTransferByte(0);
    1690:	0f 2d       	mov	r16, r15
    1692:	10 e0       	ldi	r17, 0x00	; 0
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	ce 01       	movw	r24, r28
    1698:	92 dd       	rcall	.-1244   	; 0x11be <_ZN5RFM6915spiTransferByteEh>
    169a:	f8 01       	movw	r30, r16
    169c:	e6 59       	subi	r30, 0x96	; 150
    169e:	fe 4f       	sbci	r31, 0xFE	; 254
    16a0:	80 83       	st	Z, r24
    byte CTLbyte = spiTransferByte(0);
    
    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag
    
    for (byte i= 0; i < DATALEN; i++)
    16a2:	f3 94       	inc	r15
    16a4:	80 91 68 01 	lds	r24, 0x0168
    16a8:	f8 16       	cp	r15, r24
    16aa:	90 f3       	brcs	.-28     	; 0x1690 <_ZN5RFM6916interruptHandlerEv+0x74>
    {
      DATA[i] = spiTransferByte(0);
    }
    unselect();
    16ac:	ce 01       	movw	r24, r28
    16ae:	94 dd       	rcall	.-1240   	; 0x11d8 <_ZN5RFM698unselectEv>
	setMode(RF69_MODE_RX);
    16b0:	63 e0       	ldi	r22, 0x03	; 3
    16b2:	ce 01       	movw	r24, r28
    16b4:	03 de       	rcall	.-1018   	; 0x12bc <_ZN5RFM697setModeEh>
		
  }
  RSSI = readRSSI();
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	ce 01       	movw	r24, r28
    16ba:	e4 dd       	rcall	.-1080   	; 0x1284 <_ZN5RFM698readRSSIEb>
    16bc:	90 93 62 01 	sts	0x0162, r25
    16c0:	80 93 61 01 	sts	0x0161, r24
    16c4:	1e c0       	rjmp	.+60     	; 0x1702 <_ZN5RFM6916interruptHandlerEv+0xe6>
    PAYLOADLEN = spiTransferByte(0);
    PAYLOADLEN = PAYLOADLEN > 66 ? 66 : PAYLOADLEN; //precaution
    TARGETID = spiTransferByte(0);
    if(!(_promiscuousMode || TARGETID==_address || TARGETID==RF69_BROADCAST_ADDR)) //match this node's address, or broadcast address or anything in promiscuous mode
    {
      PAYLOADLEN = 0;
    16c6:	10 92 65 01 	sts	0x0165, r1
      unselect();
    16ca:	ce 01       	movw	r24, r28
    16cc:	85 dd       	rcall	.-1270   	; 0x11d8 <_ZN5RFM698unselectEv>
      //digitalWrite(4, 0);
      return;
    16ce:	19 c0       	rjmp	.+50     	; 0x1702 <_ZN5RFM6916interruptHandlerEv+0xe6>
    }
    DATALEN = PAYLOADLEN - 3;
    16d0:	80 91 65 01 	lds	r24, 0x0165
    16d4:	83 50       	subi	r24, 0x03	; 3
    16d6:	80 93 68 01 	sts	0x0168, r24
    SENDERID = spiTransferByte(0);
    16da:	60 e0       	ldi	r22, 0x00	; 0
    16dc:	ce 01       	movw	r24, r28
    16de:	6f dd       	rcall	.-1314   	; 0x11be <_ZN5RFM6915spiTransferByteEh>
    16e0:	80 93 67 01 	sts	0x0167, r24
    byte CTLbyte = spiTransferByte(0);
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	ce 01       	movw	r24, r28
    16e8:	6a dd       	rcall	.-1324   	; 0x11be <_ZN5RFM6915spiTransferByteEh>
    
    ACK_RECEIVED = CTLbyte & 0x80; //extract ACK-requested flag
    16ea:	98 2f       	mov	r25, r24
    16ec:	90 78       	andi	r25, 0x80	; 128
    16ee:	90 93 63 01 	sts	0x0163, r25
    ACK_REQUESTED = CTLbyte & 0x40; //extract ACK-received flag
    16f2:	80 74       	andi	r24, 0x40	; 64
    16f4:	80 93 64 01 	sts	0x0164, r24
    
    for (byte i= 0; i < DATALEN; i++)
    16f8:	80 91 68 01 	lds	r24, 0x0168
    16fc:	81 11       	cpse	r24, r1
    16fe:	c7 cf       	rjmp	.-114    	; 0x168e <_ZN5RFM6916interruptHandlerEv+0x72>
    1700:	d5 cf       	rjmp	.-86     	; 0x16ac <_ZN5RFM6916interruptHandlerEv+0x90>
	setMode(RF69_MODE_RX);
		
  }
  RSSI = readRSSI();

}
    1702:	df 91       	pop	r29
    1704:	cf 91       	pop	r28
    1706:	1f 91       	pop	r17
    1708:	0f 91       	pop	r16
    170a:	ff 90       	pop	r15
    170c:	08 95       	ret

0000170e <_ZN5RFM699sendFrameEhPKvhbb>:
  while (!canSend()) receiveDone();
  sendFrame(sender, buffer, bufferSize, false, true);
}

void RFM69::sendFrame(byte toAddress, const void* buffer, byte bufferSize, bool requestACK, bool sendACK)
{
    170e:	bf 92       	push	r11
    1710:	cf 92       	push	r12
    1712:	df 92       	push	r13
    1714:	ef 92       	push	r14
    1716:	ff 92       	push	r15
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	6c 01       	movw	r12, r24
    1722:	c6 2f       	mov	r28, r22
    1724:	f4 2e       	mov	r15, r20
    1726:	b5 2e       	mov	r11, r21
    1728:	12 2f       	mov	r17, r18
  setMode(RF69_MODE_STANDBY); //turn off receiver to prevent reception while filling fifo
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	c7 dd       	rcall	.-1138   	; 0x12bc <_ZN5RFM697setModeEh>
	while ((readReg(REG_IRQFLAGS1) & RF_IRQFLAGS1_MODEREADY) == 0x00); // Wait for ModeReady
    172e:	67 e2       	ldi	r22, 0x27	; 39
    1730:	c6 01       	movw	r24, r12
    1732:	96 dd       	rcall	.-1236   	; 0x1260 <_ZN5RFM697readRegEh>
    1734:	88 23       	and	r24, r24
    1736:	dc f7       	brge	.-10     	; 0x172e <_ZN5RFM699sendFrameEhPKvhbb+0x20>
  writeReg(REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_00); // DIO0 is "Packet Sent"
    1738:	40 e0       	ldi	r20, 0x00	; 0
    173a:	65 e2       	ldi	r22, 0x25	; 37
    173c:	c6 01       	movw	r24, r12
    173e:	65 dd       	rcall	.-1334   	; 0x120a <_ZN5RFM698writeRegEhh>
    1740:	1e 33       	cpi	r17, 0x3E	; 62
    1742:	08 f0       	brcs	.+2      	; 0x1746 <_ZN5RFM699sendFrameEhPKvhbb+0x38>
    1744:	1d e3       	ldi	r17, 0x3D	; 61
  if (bufferSize > MAX_DATA_LEN) bufferSize = MAX_DATA_LEN;

	//write to FIFO
	select();
    1746:	c6 01       	movw	r24, r12
    1748:	42 dd       	rcall	.-1404   	; 0x11ce <_ZN5RFM696selectEv>
	spiTransferByte(REG_FIFO | 0x80);
    174a:	60 e8       	ldi	r22, 0x80	; 128
    174c:	c6 01       	movw	r24, r12
    174e:	37 dd       	rcall	.-1426   	; 0x11be <_ZN5RFM6915spiTransferByteEh>
	spiTransferByte(bufferSize + 3);
    1750:	61 2f       	mov	r22, r17
    1752:	6d 5f       	subi	r22, 0xFD	; 253
    1754:	c6 01       	movw	r24, r12
    1756:	33 dd       	rcall	.-1434   	; 0x11be <_ZN5RFM6915spiTransferByteEh>
	spiTransferByte(toAddress);
    1758:	6c 2f       	mov	r22, r28
    175a:	c6 01       	movw	r24, r12
    175c:	30 dd       	rcall	.-1440   	; 0x11be <_ZN5RFM6915spiTransferByteEh>
    spiTransferByte(_address);
    175e:	f6 01       	movw	r30, r12
    1760:	64 81       	ldd	r22, Z+4	; 0x04
    1762:	c6 01       	movw	r24, r12
    1764:	2c dd       	rcall	.-1448   	; 0x11be <_ZN5RFM6915spiTransferByteEh>
  
  
  //control byte
  if (sendACK)
    1766:	ee 20       	and	r14, r14
    1768:	31 f0       	breq	.+12     	; 0x1776 <_ZN5RFM699sendFrameEhPKvhbb+0x68>
    spiTransferByte(0x80);
    176a:	60 e8       	ldi	r22, 0x80	; 128
    176c:	c6 01       	movw	r24, r12
    176e:	27 dd       	rcall	.-1458   	; 0x11be <_ZN5RFM6915spiTransferByteEh>
  else if (requestACK)
    spiTransferByte(0x40);
  else spiTransferByte(0x00);
  
	for (byte i = 0; i < bufferSize; i++)
    1770:	11 11       	cpse	r17, r1
    1772:	0b c0       	rjmp	.+22     	; 0x178a <_ZN5RFM699sendFrameEhPKvhbb+0x7c>
    1774:	14 c0       	rjmp	.+40     	; 0x179e <_ZN5RFM699sendFrameEhPKvhbb+0x90>
  
  
  //control byte
  if (sendACK)
    spiTransferByte(0x80);
  else if (requestACK)
    1776:	00 23       	and	r16, r16
    1778:	21 f0       	breq	.+8      	; 0x1782 <_ZN5RFM699sendFrameEhPKvhbb+0x74>
    spiTransferByte(0x40);
    177a:	60 e4       	ldi	r22, 0x40	; 64
    177c:	c6 01       	movw	r24, r12
    177e:	1f dd       	rcall	.-1474   	; 0x11be <_ZN5RFM6915spiTransferByteEh>
    1780:	f7 cf       	rjmp	.-18     	; 0x1770 <_ZN5RFM699sendFrameEhPKvhbb+0x62>
  else spiTransferByte(0x00);
    1782:	60 e0       	ldi	r22, 0x00	; 0
    1784:	c6 01       	movw	r24, r12
    1786:	1b dd       	rcall	.-1482   	; 0x11be <_ZN5RFM6915spiTransferByteEh>
    1788:	f3 cf       	rjmp	.-26     	; 0x1770 <_ZN5RFM699sendFrameEhPKvhbb+0x62>
    178a:	0f 2d       	mov	r16, r15
  
	for (byte i = 0; i < bufferSize; i++)
    178c:	cf 2d       	mov	r28, r15
    178e:	db 2d       	mov	r29, r11
    spiTransferByte(((byte*)buffer)[i]);
    1790:	69 91       	ld	r22, Y+
    1792:	c6 01       	movw	r24, r12
    1794:	14 dd       	rcall	.-1496   	; 0x11be <_ZN5RFM6915spiTransferByteEh>
    spiTransferByte(0x80);
  else if (requestACK)
    spiTransferByte(0x40);
  else spiTransferByte(0x00);
  
	for (byte i = 0; i < bufferSize; i++)
    1796:	8c 2f       	mov	r24, r28
    1798:	80 1b       	sub	r24, r16
    179a:	81 17       	cp	r24, r17
    179c:	c8 f3       	brcs	.-14     	; 0x1790 <_ZN5RFM699sendFrameEhPKvhbb+0x82>
    spiTransferByte(((byte*)buffer)[i]);
	unselect();
    179e:	c6 01       	movw	r24, r12
    17a0:	1b dd       	rcall	.-1482   	; 0x11d8 <_ZN5RFM698unselectEv>

	/* no need to wait for transmit mode to be ready since its handled by the radio */
	setMode(RF69_MODE_TX);
    17a2:	64 e0       	ldi	r22, 0x04	; 4
    17a4:	c6 01       	movw	r24, r12
    17a6:	8a dd       	rcall	.-1260   	; 0x12bc <_ZN5RFM697setModeEh>
	while ((PIND &  (1 << 2))); //wait for DIO0 to turn HIGH signalling transmission finish
    17a8:	4a 99       	sbic	0x09, 2	; 9
    17aa:	fe cf       	rjmp	.-4      	; 0x17a8 <_ZN5RFM699sendFrameEhPKvhbb+0x9a>
  
	//while (readReg(REG_IRQFLAGS2) & RF_IRQFLAGS2_PACKETSENT == 0x00); // Wait for ModeReady
	setMode(RF69_MODE_STANDBY);
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	c6 01       	movw	r24, r12
    17b0:	85 dd       	rcall	.-1270   	; 0x12bc <_ZN5RFM697setModeEh>
  
}
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	df 90       	pop	r13
    17c0:	cf 90       	pop	r12
    17c2:	bf 90       	pop	r11
    17c4:	08 95       	ret

000017c6 <_ZN5RFM6911receiveDoneEv>:

		setMode(RF69_MODE_RX);

}

bool RFM69::receiveDone() {
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	ec 01       	movw	r28, r24
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
    17cc:	fe dc       	rcall	.-1540   	; 0x11ca <_ZN5RFM6912noInterruptsEv>
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
    17ce:	80 91 69 01 	lds	r24, 0x0169
    17d2:	83 30       	cpi	r24, 0x03	; 3
    17d4:	69 f4       	brne	.+26     	; 0x17f0 <_ZN5RFM6911receiveDoneEv+0x2a>
    17d6:	80 91 65 01 	lds	r24, 0x0165
    17da:	81 11       	cpse	r24, r1
    17dc:	0e c0       	rjmp	.+28     	; 0x17fa <_ZN5RFM6911receiveDoneEv+0x34>
    17de:	08 c0       	rjmp	.+16     	; 0x17f0 <_ZN5RFM6911receiveDoneEv+0x2a>
    setMode(RF69_MODE_STANDBY); //enables interrupts
    return true;
  }
  else if (_mode == RF69_MODE_RX)  //already in RX no payload yet
  {
    allowInterrupts(); //explicitly re-enable interrupts
    17e0:	ce 01       	movw	r24, r28
    17e2:	f8 dc       	rcall	.-1552   	; 0x11d4 <_ZN5RFM6915allowInterruptsEv>
    return false;
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	0d c0       	rjmp	.+26     	; 0x1802 <_ZN5RFM6911receiveDoneEv+0x3c>
  }
  receiveBegin();
    17e8:	ce 01       	movw	r24, r28
    17ea:	ea dd       	rcall	.-1068   	; 0x13c0 <_ZN5RFM6912receiveBeginEv>
  return false;
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	09 c0       	rjmp	.+18     	; 0x1802 <_ZN5RFM6911receiveDoneEv+0x3c>
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
    return true;
  }
  else if (_mode == RF69_MODE_RX)  //already in RX no payload yet
    17f0:	80 91 69 01 	lds	r24, 0x0169
    17f4:	83 30       	cpi	r24, 0x03	; 3
    17f6:	c1 f7       	brne	.-16     	; 0x17e8 <_ZN5RFM6911receiveDoneEv+0x22>
    17f8:	f3 cf       	rjmp	.-26     	; 0x17e0 <_ZN5RFM6911receiveDoneEv+0x1a>
// ATOMIC_BLOCK(ATOMIC_FORCEON)
// {
  noInterrupts(); //re-enabled in unselect() via setMode() or via receiveBegin()
  if (_mode == RF69_MODE_RX && PAYLOADLEN>0)
  {
    setMode(RF69_MODE_STANDBY); //enables interrupts
    17fa:	61 e0       	ldi	r22, 0x01	; 1
    17fc:	ce 01       	movw	r24, r28
    17fe:	5e dd       	rcall	.-1348   	; 0x12bc <_ZN5RFM697setModeEh>
    return true;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    return false;
  }
  receiveBegin();
  return false;
//}
}
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	08 95       	ret

00001808 <_ZN5RFM697sendACKEPKvh>:
bool RFM69::ACKRequested() {
	return ACK_REQUESTED && (TARGETID != RF69_BROADCAST_ADDR);
}

/// Should be called immediately after reception in case sender wants ACK
void RFM69::sendACK(const void* buffer, byte bufferSize) {
    1808:	cf 92       	push	r12
    180a:	df 92       	push	r13
    180c:	ef 92       	push	r14
    180e:	ff 92       	push	r15
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	cf 93       	push	r28
    1816:	df 93       	push	r29
    1818:	ec 01       	movw	r28, r24
    181a:	6b 01       	movw	r12, r22
    181c:	f4 2e       	mov	r15, r20
  byte sender = SENDERID;
    181e:	10 91 67 01 	lds	r17, 0x0167
  while (!canSend()) receiveDone();
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <_ZN5RFM697sendACKEPKvh+0x20>
    1824:	ce 01       	movw	r24, r28
    1826:	cf df       	rcall	.-98     	; 0x17c6 <_ZN5RFM6911receiveDoneEv>
    1828:	ce 01       	movw	r24, r28
    182a:	ac dd       	rcall	.-1192   	; 0x1384 <_ZN5RFM697canSendEv>
    182c:	88 23       	and	r24, r24
    182e:	d1 f3       	breq	.-12     	; 0x1824 <_ZN5RFM697sendACKEPKvh+0x1c>
  sendFrame(sender, buffer, bufferSize, false, true);
    1830:	ee 24       	eor	r14, r14
    1832:	e3 94       	inc	r14
    1834:	00 e0       	ldi	r16, 0x00	; 0
    1836:	2f 2d       	mov	r18, r15
    1838:	a6 01       	movw	r20, r12
    183a:	61 2f       	mov	r22, r17
    183c:	ce 01       	movw	r24, r28
    183e:	67 df       	rcall	.-306    	; 0x170e <_ZN5RFM699sendFrameEhPKvhbb>
}
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	1f 91       	pop	r17
    1846:	0f 91       	pop	r16
    1848:	ff 90       	pop	r15
    184a:	ef 90       	pop	r14
    184c:	df 90       	pop	r13
    184e:	cf 90       	pop	r12
    1850:	08 95       	ret

00001852 <tone_init>:
#include <avr/power.h>

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume counsigned long _tAC_time;ntrol.

void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
    1852:	21 9a       	sbi	0x04, 1	; 4
    1854:	08 95       	ret

00001856 <noTone>:


	void noTone() {
	//	uart0_puts("STOP");
	//	TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
		 TCCR1B  &= ~(1<<0) | ~(1<<1) | ~(1<<2) ;        // No clock source (Timer/Counter stopped).
    1856:	e1 e8       	ldi	r30, 0x81	; 129
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	80 83       	st	Z, r24
		 TCCR1A  = 0x00;       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
    185e:	10 92 80 00 	sts	0x0080, r1
		 power_timer1_disable();
    1862:	e4 e6       	ldi	r30, 0x64	; 100
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	88 60       	ori	r24, 0x08	; 8
    186a:	80 83       	st	Z, r24
		PORTB &= ~(1 << 1); // Set pin PB1 to LOW.
    186c:	29 98       	cbi	0x05, 1	; 5
    186e:	08 95       	ret

00001870 <tone>:
void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
	
}

void tone(unsigned long frequency, uint8_t volume) {
    1870:	cf 92       	push	r12
    1872:	df 92       	push	r13
    1874:	ef 92       	push	r14
    1876:	ff 92       	push	r15
    1878:	cf 93       	push	r28
    187a:	df 93       	push	r29
    187c:	6b 01       	movw	r12, r22
    187e:	7c 01       	movw	r14, r24
	 power_timer1_enable();
    1880:	e4 e6       	ldi	r30, 0x64	; 100
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	87 7f       	andi	r24, 0xF7	; 247
    1888:	80 83       	st	Z, r24
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
    188a:	c1 14       	cp	r12, r1
    188c:	d1 04       	cpc	r13, r1
    188e:	e1 04       	cpc	r14, r1
    1890:	f1 04       	cpc	r15, r1
    1892:	11 f0       	breq	.+4      	; 0x1898 <tone+0x28>
    1894:	41 11       	cpse	r20, r1
    1896:	02 c0       	rjmp	.+4      	; 0x189c <tone+0x2c>
    1898:	de df       	rcall	.-68     	; 0x1856 <noTone>
    189a:	4d c0       	rjmp	.+154    	; 0x1936 <tone+0xc6>
    189c:	d4 2f       	mov	r29, r20
    189e:	4b 30       	cpi	r20, 0x0B	; 11
    18a0:	08 f0       	brcs	.+2      	; 0x18a4 <tone+0x34>
    18a2:	da e0       	ldi	r29, 0x0A	; 10
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
    18a4:	60 e0       	ldi	r22, 0x00	; 0
    18a6:	72 e1       	ldi	r23, 0x12	; 18
    18a8:	8a e7       	ldi	r24, 0x7A	; 122
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a7 01       	movw	r20, r14
    18ae:	96 01       	movw	r18, r12
    18b0:	eb d0       	rcall	.+470    	; 0x1a88 <__udivmodsi4>
    18b2:	cc 24       	eor	r12, r12
    18b4:	ca 94       	dec	r12
    18b6:	dc 2c       	mov	r13, r12
    18b8:	76 01       	movw	r14, r12
    18ba:	c2 0e       	add	r12, r18
    18bc:	d3 1e       	adc	r13, r19
    18be:	e4 1e       	adc	r14, r20
    18c0:	f5 1e       	adc	r15, r21
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    18c2:	c1 14       	cp	r12, r1
    18c4:	d1 04       	cpc	r13, r1
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	e8 06       	cpc	r14, r24
    18ca:	f1 04       	cpc	r15, r1
    18cc:	58 f0       	brcs	.+22     	; 0x18e4 <tone+0x74>
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
    18ce:	cd 2c       	mov	r12, r13
    18d0:	de 2c       	mov	r13, r14
    18d2:	ef 2c       	mov	r14, r15
    18d4:	ff 24       	eor	r15, r15
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	c8 1a       	sub	r12, r24
    18da:	d1 08       	sbc	r13, r1
    18dc:	e1 08       	sbc	r14, r1
    18de:	f1 08       	sbc	r15, r1
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    18e0:	c4 e0       	ldi	r28, 0x04	; 4
    18e2:	01 c0       	rjmp	.+2      	; 0x18e6 <tone+0x76>
	 power_timer1_enable();
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
    18e4:	c1 e0       	ldi	r28, 0x01	; 1
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
		}
	
		unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
    18e6:	ed 2f       	mov	r30, r29
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	ed 5f       	subi	r30, 0xFD	; 253
    18ec:	fe 4f       	sbci	r31, 0xFE	; 254
    18ee:	20 81       	ld	r18, Z
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	c7 01       	movw	r24, r14
    18f8:	b6 01       	movw	r22, r12
    18fa:	c6 d0       	rcall	.+396    	; 0x1a88 <__udivmodsi4>
		
		ICR1   = top;							// Set the top.
    18fc:	d0 92 87 00 	sts	0x0087, r13
    1900:	c0 92 86 00 	sts	0x0086, r12
		if (TCNT1 > top) TCNT1 = top;			// Counter over the top, put within range.
    1904:	80 91 84 00 	lds	r24, 0x0084
    1908:	90 91 85 00 	lds	r25, 0x0085
    190c:	a0 e0       	ldi	r26, 0x00	; 0
    190e:	b0 e0       	ldi	r27, 0x00	; 0
    1910:	c8 16       	cp	r12, r24
    1912:	d9 06       	cpc	r13, r25
    1914:	ea 06       	cpc	r14, r26
    1916:	fb 06       	cpc	r15, r27
    1918:	20 f4       	brcc	.+8      	; 0x1922 <tone+0xb2>
    191a:	d0 92 85 00 	sts	0x0085, r13
    191e:	c0 92 84 00 	sts	0x0084, r12
			TCCR1B = _BV(WGM13)  | prescaler;   // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
    1922:	c0 61       	ori	r28, 0x10	; 16
    1924:	c0 93 81 00 	sts	0x0081, r28
			OCR1A  = duty;						// Set the duty cycle (volume).
    1928:	30 93 89 00 	sts	0x0089, r19
    192c:	20 93 88 00 	sts	0x0088, r18
			TCCR1A = _BV(COM1A1);				// Clear OC1A/OC1B on Compare Match (Set output to low level).
    1930:	80 e8       	ldi	r24, 0x80	; 128
    1932:	80 93 80 00 	sts	0x0080, r24
			

}
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	08 95       	ret

00001944 <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    1944:	1f 92       	push	r1
    1946:	0f 92       	push	r0
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	0f 92       	push	r0
    194c:	11 24       	eor	r1, r1
    194e:	2f 93       	push	r18
    1950:	3f 93       	push	r19
    1952:	4f 93       	push	r20
    1954:	5f 93       	push	r21
    1956:	8f 93       	push	r24
    1958:	9f 93       	push	r25
    195a:	ef 93       	push	r30
    195c:	ff 93       	push	r31
    195e:	40 91 c0 00 	lds	r20, 0x00C0
    1962:	50 91 c6 00 	lds	r21, 0x00C6
    1966:	48 71       	andi	r20, 0x18	; 24
    1968:	80 91 a9 01 	lds	r24, 0x01A9
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	01 96       	adiw	r24, 0x01	; 1
    1970:	8f 77       	andi	r24, 0x7F	; 127
    1972:	99 27       	eor	r25, r25
    1974:	20 91 a8 01 	lds	r18, 0x01A8
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	28 17       	cp	r18, r24
    197c:	39 07       	cpc	r19, r25
    197e:	39 f0       	breq	.+14     	; 0x198e <__vector_18+0x4a>
    1980:	80 93 a9 01 	sts	0x01A9, r24
    1984:	fc 01       	movw	r30, r24
    1986:	e4 55       	subi	r30, 0x54	; 84
    1988:	fe 4f       	sbci	r31, 0xFE	; 254
    198a:	50 83       	st	Z, r21
    198c:	01 c0       	rjmp	.+2      	; 0x1990 <__vector_18+0x4c>
    198e:	42 e0       	ldi	r20, 0x02	; 2
    1990:	40 93 a7 01 	sts	0x01A7, r20
    1994:	ff 91       	pop	r31
    1996:	ef 91       	pop	r30
    1998:	9f 91       	pop	r25
    199a:	8f 91       	pop	r24
    199c:	5f 91       	pop	r21
    199e:	4f 91       	pop	r20
    19a0:	3f 91       	pop	r19
    19a2:	2f 91       	pop	r18
    19a4:	0f 90       	pop	r0
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	0f 90       	pop	r0
    19aa:	1f 90       	pop	r1
    19ac:	18 95       	reti

000019ae <__vector_19>:
    19ae:	1f 92       	push	r1
    19b0:	0f 92       	push	r0
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	0f 92       	push	r0
    19b6:	11 24       	eor	r1, r1
    19b8:	8f 93       	push	r24
    19ba:	9f 93       	push	r25
    19bc:	ef 93       	push	r30
    19be:	ff 93       	push	r31
    19c0:	90 91 ab 01 	lds	r25, 0x01AB
    19c4:	80 91 aa 01 	lds	r24, 0x01AA
    19c8:	98 17       	cp	r25, r24
    19ca:	79 f0       	breq	.+30     	; 0x19ea <__vector_19+0x3c>
    19cc:	80 91 aa 01 	lds	r24, 0x01AA
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	8f 77       	andi	r24, 0x7F	; 127
    19d6:	99 27       	eor	r25, r25
    19d8:	80 93 aa 01 	sts	0x01AA, r24
    19dc:	fc 01       	movw	r30, r24
    19de:	e4 5d       	subi	r30, 0xD4	; 212
    19e0:	fd 4f       	sbci	r31, 0xFD	; 253
    19e2:	80 81       	ld	r24, Z
    19e4:	80 93 c6 00 	sts	0x00C6, r24
    19e8:	05 c0       	rjmp	.+10     	; 0x19f4 <__vector_19+0x46>
    19ea:	e1 ec       	ldi	r30, 0xC1	; 193
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	8f 7d       	andi	r24, 0xDF	; 223
    19f2:	80 83       	st	Z, r24
    19f4:	ff 91       	pop	r31
    19f6:	ef 91       	pop	r30
    19f8:	9f 91       	pop	r25
    19fa:	8f 91       	pop	r24
    19fc:	0f 90       	pop	r0
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	0f 90       	pop	r0
    1a02:	1f 90       	pop	r1
    1a04:	18 95       	reti

00001a06 <uart0_init>:
    1a06:	10 92 ab 01 	sts	0x01AB, r1
    1a0a:	10 92 aa 01 	sts	0x01AA, r1
    1a0e:	10 92 a9 01 	sts	0x01A9, r1
    1a12:	10 92 a8 01 	sts	0x01A8, r1
    1a16:	99 23       	and	r25, r25
    1a18:	24 f4       	brge	.+8      	; 0x1a22 <uart0_init+0x1c>
    1a1a:	22 e0       	ldi	r18, 0x02	; 2
    1a1c:	20 93 c0 00 	sts	0x00C0, r18
    1a20:	9f 77       	andi	r25, 0x7F	; 127
    1a22:	90 93 c5 00 	sts	0x00C5, r25
    1a26:	80 93 c4 00 	sts	0x00C4, r24
    1a2a:	88 e9       	ldi	r24, 0x98	; 152
    1a2c:	80 93 c1 00 	sts	0x00C1, r24
    1a30:	86 e0       	ldi	r24, 0x06	; 6
    1a32:	80 93 c2 00 	sts	0x00C2, r24
    1a36:	08 95       	ret

00001a38 <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    1a38:	60 91 ab 01 	lds	r22, 0x01AB
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	6f 5f       	subi	r22, 0xFF	; 255
    1a40:	7f 4f       	sbci	r23, 0xFF	; 255
    1a42:	6f 77       	andi	r22, 0x7F	; 127
    1a44:	77 27       	eor	r23, r23
    1a46:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
    1a48:	20 91 aa 01 	lds	r18, 0x01AA
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	24 17       	cp	r18, r20
    1a50:	35 07       	cpc	r19, r21
    1a52:	d1 f3       	breq	.-12     	; 0x1a48 <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    1a54:	fb 01       	movw	r30, r22
    1a56:	e4 5d       	subi	r30, 0xD4	; 212
    1a58:	fd 4f       	sbci	r31, 0xFD	; 253
    1a5a:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    1a5c:	60 93 ab 01 	sts	0x01AB, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
    1a60:	e1 ec       	ldi	r30, 0xC1	; 193
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	80 62       	ori	r24, 0x20	; 32
    1a68:	80 83       	st	Z, r24
    1a6a:	08 95       	ret

00001a6c <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	ec 01       	movw	r28, r24
	while (*s) {
    1a72:	88 81       	ld	r24, Y
    1a74:	88 23       	and	r24, r24
    1a76:	29 f0       	breq	.+10     	; 0x1a82 <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
    1a78:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
    1a7a:	de df       	rcall	.-68     	; 0x1a38 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
    1a7c:	89 91       	ld	r24, Y+
    1a7e:	81 11       	cpse	r24, r1
    1a80:	fc cf       	rjmp	.-8      	; 0x1a7a <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    1a82:	df 91       	pop	r29
    1a84:	cf 91       	pop	r28
    1a86:	08 95       	ret

00001a88 <__udivmodsi4>:
    1a88:	a1 e2       	ldi	r26, 0x21	; 33
    1a8a:	1a 2e       	mov	r1, r26
    1a8c:	aa 1b       	sub	r26, r26
    1a8e:	bb 1b       	sub	r27, r27
    1a90:	fd 01       	movw	r30, r26
    1a92:	0d c0       	rjmp	.+26     	; 0x1aae <__udivmodsi4_ep>

00001a94 <__udivmodsi4_loop>:
    1a94:	aa 1f       	adc	r26, r26
    1a96:	bb 1f       	adc	r27, r27
    1a98:	ee 1f       	adc	r30, r30
    1a9a:	ff 1f       	adc	r31, r31
    1a9c:	a2 17       	cp	r26, r18
    1a9e:	b3 07       	cpc	r27, r19
    1aa0:	e4 07       	cpc	r30, r20
    1aa2:	f5 07       	cpc	r31, r21
    1aa4:	20 f0       	brcs	.+8      	; 0x1aae <__udivmodsi4_ep>
    1aa6:	a2 1b       	sub	r26, r18
    1aa8:	b3 0b       	sbc	r27, r19
    1aaa:	e4 0b       	sbc	r30, r20
    1aac:	f5 0b       	sbc	r31, r21

00001aae <__udivmodsi4_ep>:
    1aae:	66 1f       	adc	r22, r22
    1ab0:	77 1f       	adc	r23, r23
    1ab2:	88 1f       	adc	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	1a 94       	dec	r1
    1ab8:	69 f7       	brne	.-38     	; 0x1a94 <__udivmodsi4_loop>
    1aba:	60 95       	com	r22
    1abc:	70 95       	com	r23
    1abe:	80 95       	com	r24
    1ac0:	90 95       	com	r25
    1ac2:	9b 01       	movw	r18, r22
    1ac4:	ac 01       	movw	r20, r24
    1ac6:	bd 01       	movw	r22, r26
    1ac8:	cf 01       	movw	r24, r30
    1aca:	08 95       	ret

00001acc <__tablejump2__>:
    1acc:	ee 0f       	add	r30, r30
    1ace:	ff 1f       	adc	r31, r31

00001ad0 <__tablejump__>:
    1ad0:	05 90       	lpm	r0, Z+
    1ad2:	f4 91       	lpm	r31, Z
    1ad4:	e0 2d       	mov	r30, r0
    1ad6:	09 94       	ijmp

00001ad8 <_exit>:
    1ad8:	f8 94       	cli

00001ada <__stop_program>:
    1ada:	ff cf       	rjmp	.-2      	; 0x1ada <__stop_program>
