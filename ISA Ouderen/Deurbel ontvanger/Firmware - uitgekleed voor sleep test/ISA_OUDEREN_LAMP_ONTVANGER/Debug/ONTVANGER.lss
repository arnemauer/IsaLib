
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00000d88  00000e1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000016d  0080011a  0080011a  00000e36  2**0
                  ALLOC
  3 .stab         00000e4c  00000000  00000000  00000e38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001fdf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000380  00000000  00000000  0000200e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003695  00000000  00000000  0000238e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011da  00000000  00000000  00005a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000258f  00000000  00000000  00006bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008e4  00000000  00000000  0000918c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e45  00000000  00000000  00009a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000245c  00000000  00000000  0000a8b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000360  00000000  00000000  0000cd11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	68 c4       	rjmp	.+2256   	; 0x8d6 <__vector_1>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	69 c0       	rjmp	.+210    	; 0x10c <__vector_14>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	a9 c5       	rjmp	.+2898   	; 0xb9c <__vector_18>
  4a:	00 00       	nop
  4c:	dc c5       	rjmp	.+3000   	; 0xc06 <__vector_19>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 31       	cpi	r26, 0x1A	; 26
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e1       	ldi	r26, 0x1A	; 26
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 38       	cpi	r26, 0x87	; 135
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	5d d0       	rcall	.+186    	; 0x156 <main>
  9c:	73 c6       	rjmp	.+3302   	; 0xd84 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <log_s>:
  a0:	11 c6       	rjmp	.+3106   	; 0xcc4 <uart0_puts>
  a2:	08 95       	ret

000000a4 <millis_init>:
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	84 bd       	out	0x24, r24	; 36
  a8:	93 e0       	ldi	r25, 0x03	; 3
  aa:	95 bd       	out	0x25, r25	; 37
  ac:	80 93 6e 00 	sts	0x006E, r24
  b0:	8a ef       	ldi	r24, 0xFA	; 250
  b2:	87 bd       	out	0x27, r24	; 39
  b4:	08 95       	ret

000000b6 <millis_get>:
  b6:	0f 93       	push	r16
  b8:	1f 93       	push	r17
  ba:	8f b7       	in	r24, 0x3f	; 63
  bc:	f8 94       	cli
  be:	00 91 1a 01 	lds	r16, 0x011A
  c2:	10 91 1b 01 	lds	r17, 0x011B
  c6:	20 91 1c 01 	lds	r18, 0x011C
  ca:	30 91 1d 01 	lds	r19, 0x011D
  ce:	8f bf       	out	0x3f, r24	; 63
  d0:	60 2f       	mov	r22, r16
  d2:	71 2f       	mov	r23, r17
  d4:	82 2f       	mov	r24, r18
  d6:	93 2f       	mov	r25, r19
  d8:	1f 91       	pop	r17
  da:	0f 91       	pop	r16
  dc:	08 95       	ret

000000de <millis_resume>:
  de:	e4 e6       	ldi	r30, 0x64	; 100
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	8f 7d       	andi	r24, 0xDF	; 223
  e6:	80 83       	st	Z, r24
  e8:	ee e6       	ldi	r30, 0x6E	; 110
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <millis_reset>:
  f4:	8f b7       	in	r24, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	10 92 1a 01 	sts	0x011A, r1
  fc:	10 92 1b 01 	sts	0x011B, r1
 100:	10 92 1c 01 	sts	0x011C, r1
 104:	10 92 1d 01 	sts	0x011D, r1
 108:	8f bf       	out	0x3f, r24	; 63
 10a:	08 95       	ret

0000010c <__vector_14>:
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	80 91 1a 01 	lds	r24, 0x011A
 122:	90 91 1b 01 	lds	r25, 0x011B
 126:	a0 91 1c 01 	lds	r26, 0x011C
 12a:	b0 91 1d 01 	lds	r27, 0x011D
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	a1 1d       	adc	r26, r1
 132:	b1 1d       	adc	r27, r1
 134:	80 93 1a 01 	sts	0x011A, r24
 138:	90 93 1b 01 	sts	0x011B, r25
 13c:	a0 93 1c 01 	sts	0x011C, r26
 140:	b0 93 1d 01 	sts	0x011D, r27
 144:	bf 91       	pop	r27
 146:	af 91       	pop	r26
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <main>:
 156:	20 9a       	sbi	0x04, 0	; 4
 158:	28 9a       	sbi	0x05, 0	; 5
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	89 e6       	ldi	r24, 0x69	; 105
 15e:	98 e1       	ldi	r25, 0x18	; 24
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0xa>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x14>
 16a:	00 00       	nop
 16c:	28 98       	cbi	0x05, 0	; 5
 16e:	ea e7       	ldi	r30, 0x7A	; 122
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	8f 77       	andi	r24, 0x7F	; 127
 176:	80 83       	st	Z, r24
 178:	78 94       	sei
 17a:	94 df       	rcall	.-216    	; 0xa4 <millis_init>
 17c:	ef ef       	ldi	r30, 0xFF	; 255
 17e:	fb e7       	ldi	r31, 0x7B	; 123
 180:	22 e9       	ldi	r18, 0x92	; 146
 182:	e1 50       	subi	r30, 0x01	; 1
 184:	f0 40       	sbci	r31, 0x00	; 0
 186:	20 40       	sbci	r18, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x2c>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x36>
 18c:	00 00       	nop
 18e:	80 e1       	ldi	r24, 0x10	; 16
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	65 d5       	rcall	.+2762   	; 0xc5e <uart0_init>
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	93 ed       	ldi	r25, 0xD3	; 211
 198:	e0 e3       	ldi	r30, 0x30	; 48
 19a:	81 50       	subi	r24, 0x01	; 1
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e0 40       	sbci	r30, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x44>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x4e>
 1a4:	00 00       	nop
 1a6:	ff ef       	ldi	r31, 0xFF	; 255
 1a8:	23 ed       	ldi	r18, 0xD3	; 211
 1aa:	80 e3       	ldi	r24, 0x30	; 48
 1ac:	f1 50       	subi	r31, 0x01	; 1
 1ae:	20 40       	sbci	r18, 0x00	; 0
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x56>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x60>
 1b6:	00 00       	nop
 1b8:	4e e0       	ldi	r20, 0x0E	; 14
 1ba:	62 e0       	ldi	r22, 0x02	; 2
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	06 d3       	rcall	.+1548   	; 0x7cc <_Z15rf12_initializehhh>
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 25 01 	sts	0x0125, r24
 1c6:	84 e0       	ldi	r24, 0x04	; 4
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	6a df       	rcall	.-300    	; 0xa0 <log_s>
 1cc:	9f ef       	ldi	r25, 0xFF	; 255
 1ce:	e3 ed       	ldi	r30, 0xD3	; 211
 1d0:	f0 e3       	ldi	r31, 0x30	; 48
 1d2:	91 50       	subi	r25, 0x01	; 1
 1d4:	e0 40       	sbci	r30, 0x00	; 0
 1d6:	f0 40       	sbci	r31, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <main+0x7c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <main+0x86>
 1dc:	00 00       	nop
 1de:	cd e2       	ldi	r28, 0x2D	; 45
 1e0:	d1 e0       	ldi	r29, 0x01	; 1
 1e2:	0f 2e       	mov	r0, r31
 1e4:	ff e2       	ldi	r31, 0x2F	; 47
 1e6:	6f 2e       	mov	r6, r31
 1e8:	f1 e0       	ldi	r31, 0x01	; 1
 1ea:	7f 2e       	mov	r7, r31
 1ec:	f0 2d       	mov	r31, r0
 1ee:	0f 2e       	mov	r0, r31
 1f0:	f4 e6       	ldi	r31, 0x64	; 100
 1f2:	cf 2e       	mov	r12, r31
 1f4:	d1 2c       	mov	r13, r1
 1f6:	f0 2d       	mov	r31, r0
 1f8:	0f 2e       	mov	r0, r31
 1fa:	f0 e7       	ldi	r31, 0x70	; 112
 1fc:	ef 2e       	mov	r14, r31
 1fe:	f1 2c       	mov	r15, r1
 200:	f0 2d       	mov	r31, r0
 202:	bb 24       	eor	r11, r11
 204:	b3 94       	inc	r11
 206:	68 94       	set
 208:	88 24       	eor	r8, r8
 20a:	81 f8       	bld	r8, 1
 20c:	0f 2e       	mov	r0, r31
 20e:	f3 e0       	ldi	r31, 0x03	; 3
 210:	9f 2e       	mov	r9, r31
 212:	f0 2d       	mov	r31, r0
 214:	68 94       	set
 216:	aa 24       	eor	r10, r10
 218:	a7 f8       	bld	r10, 7
 21a:	ff d0       	rcall	.+510    	; 0x41a <_Z13rf12_recvDonev>
 21c:	88 23       	and	r24, r24
 21e:	09 f4       	brne	.+2      	; 0x222 <main+0xcc>
 220:	a8 c0       	rjmp	.+336    	; 0x372 <main+0x21c>
 222:	80 91 73 01 	lds	r24, 0x0173
 226:	90 91 74 01 	lds	r25, 0x0174
 22a:	89 2b       	or	r24, r25
 22c:	09 f4       	brne	.+2      	; 0x230 <main+0xda>
 22e:	a7 c0       	rjmp	.+334    	; 0x37e <main+0x228>
 230:	a0 c0       	rjmp	.+320    	; 0x372 <main+0x21c>
 232:	88 81       	ld	r24, Y
 234:	88 23       	and	r24, r24
 236:	0c f0       	brlt	.+2      	; 0x23a <main+0xe4>
 238:	a6 c0       	rjmp	.+332    	; 0x386 <main+0x230>
 23a:	09 c0       	rjmp	.+18     	; 0x24e <main+0xf8>
 23c:	88 81       	ld	r24, Y
 23e:	8f 71       	andi	r24, 0x1F	; 31
 240:	80 6c       	ori	r24, 0xC0	; 192
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	3e d2       	rcall	.+1148   	; 0x6c6 <_Z14rf12_sendStarthPKvh>
 24a:	8b 2d       	mov	r24, r11
 24c:	4a d2       	rcall	.+1172   	; 0x6e2 <_Z13rf12_sendWaith>
 24e:	81 e1       	ldi	r24, 0x11	; 17
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	38 d5       	rcall	.+2672   	; 0xcc4 <uart0_puts>
 254:	8f e3       	ldi	r24, 0x3F	; 63
 256:	9c e9       	ldi	r25, 0x9C	; 156
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <main+0x102>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x108>
 25e:	00 00       	nop
 260:	f3 01       	movw	r30, r6
 262:	10 81       	ld	r17, Z
 264:	81 2f       	mov	r24, r17
 266:	14 d5       	rcall	.+2600   	; 0xc90 <uart0_putc>
 268:	8f e3       	ldi	r24, 0x3F	; 63
 26a:	9c e9       	ldi	r25, 0x9C	; 156
 26c:	01 97       	sbiw	r24, 0x01	; 1
 26e:	f1 f7       	brne	.-4      	; 0x26c <main+0x116>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x11c>
 272:	00 00       	nop
 274:	01 2f       	mov	r16, r17
 276:	00 71       	andi	r16, 0x10	; 16
 278:	14 ff       	sbrs	r17, 4
 27a:	06 c0       	rjmp	.+12     	; 0x288 <main+0x132>
 27c:	80 91 24 01 	lds	r24, 0x0124
 280:	81 2b       	or	r24, r17
 282:	80 93 24 01 	sts	0x0124, r24
 286:	07 c0       	rjmp	.+14     	; 0x296 <main+0x140>
 288:	81 2f       	mov	r24, r17
 28a:	80 95       	com	r24
 28c:	90 91 24 01 	lds	r25, 0x0124
 290:	89 23       	and	r24, r25
 292:	80 93 24 01 	sts	0x0124, r24
 296:	80 91 24 01 	lds	r24, 0x0124
 29a:	98 2f       	mov	r25, r24
 29c:	9f 70       	andi	r25, 0x0F	; 15
 29e:	09 f4       	brne	.+2      	; 0x2a2 <main+0x14c>
 2a0:	4e c0       	rjmp	.+156    	; 0x33e <main+0x1e8>
 2a2:	40 91 20 01 	lds	r20, 0x0120
 2a6:	50 91 21 01 	lds	r21, 0x0121
 2aa:	60 91 22 01 	lds	r22, 0x0122
 2ae:	70 91 23 01 	lds	r23, 0x0123
 2b2:	45 2b       	or	r20, r21
 2b4:	46 2b       	or	r20, r22
 2b6:	47 2b       	or	r20, r23
 2b8:	19 f5       	brne	.+70     	; 0x300 <main+0x1aa>
 2ba:	10 92 25 01 	sts	0x0125, r1
 2be:	83 fd       	sbrc	r24, 3
 2c0:	0c c0       	rjmp	.+24     	; 0x2da <main+0x184>
 2c2:	82 fd       	sbrc	r24, 2
 2c4:	06 c0       	rjmp	.+12     	; 0x2d2 <main+0x17c>
 2c6:	81 fd       	sbrc	r24, 1
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <main+0x180>
 2ca:	80 ff       	sbrs	r24, 0
 2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <main+0x18e>
 2ce:	89 2d       	mov	r24, r9
 2d0:	05 c0       	rjmp	.+10     	; 0x2dc <main+0x186>
 2d2:	8b 2d       	mov	r24, r11
 2d4:	03 c0       	rjmp	.+6      	; 0x2dc <main+0x186>
 2d6:	88 2d       	mov	r24, r8
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <main+0x186>
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	80 93 1f 01 	sts	0x011F, r24
 2e0:	80 93 1e 01 	sts	0x011E, r24
 2e4:	07 df       	rcall	.-498    	; 0xf4 <millis_reset>
 2e6:	fb de       	rcall	.-522    	; 0xde <millis_resume>
 2e8:	f6 01       	movw	r30, r12
 2ea:	80 81       	ld	r24, Z
 2ec:	8f 7b       	andi	r24, 0xBF	; 191
 2ee:	80 83       	st	Z, r24
 2f0:	f7 01       	movw	r30, r14
 2f2:	80 81       	ld	r24, Z
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	80 83       	st	Z, r24
 2f8:	00 23       	and	r16, r16
 2fa:	09 f4       	brne	.+2      	; 0x2fe <main+0x1a8>
 2fc:	8e cf       	rjmp	.-228    	; 0x21a <main+0xc4>
 2fe:	03 c0       	rjmp	.+6      	; 0x306 <main+0x1b0>
 300:	00 23       	and	r16, r16
 302:	09 f4       	brne	.+2      	; 0x306 <main+0x1b0>
 304:	8a cf       	rjmp	.-236    	; 0x21a <main+0xc4>
 306:	81 2f       	mov	r24, r17
 308:	8f 70       	andi	r24, 0x0F	; 15
 30a:	09 f4       	brne	.+2      	; 0x30e <main+0x1b8>
 30c:	86 cf       	rjmp	.-244    	; 0x21a <main+0xc4>
 30e:	d3 de       	rcall	.-602    	; 0xb6 <millis_get>
 310:	00 91 00 01 	lds	r16, 0x0100
 314:	10 91 01 01 	lds	r17, 0x0101
 318:	20 91 02 01 	lds	r18, 0x0102
 31c:	30 91 03 01 	lds	r19, 0x0103
 320:	dc 01       	movw	r26, r24
 322:	cb 01       	movw	r24, r22
 324:	80 0f       	add	r24, r16
 326:	91 1f       	adc	r25, r17
 328:	a2 1f       	adc	r26, r18
 32a:	b3 1f       	adc	r27, r19
 32c:	80 93 20 01 	sts	0x0120, r24
 330:	90 93 21 01 	sts	0x0121, r25
 334:	a0 93 22 01 	sts	0x0122, r26
 338:	b0 93 23 01 	sts	0x0123, r27
 33c:	6e cf       	rjmp	.-292    	; 0x21a <main+0xc4>
 33e:	10 92 20 01 	sts	0x0120, r1
 342:	10 92 21 01 	sts	0x0121, r1
 346:	10 92 22 01 	sts	0x0122, r1
 34a:	10 92 23 01 	sts	0x0123, r1
 34e:	65 cf       	rjmp	.-310    	; 0x21a <main+0xc4>
 350:	83 b7       	in	r24, 0x33	; 51
 352:	81 7f       	andi	r24, 0xF1	; 241
 354:	84 60       	ori	r24, 0x04	; 4
 356:	83 bf       	out	0x33, r24	; 51
 358:	03 c0       	rjmp	.+6      	; 0x360 <main+0x20a>
 35a:	83 b7       	in	r24, 0x33	; 51
 35c:	81 7f       	andi	r24, 0xF1	; 241
 35e:	83 bf       	out	0x33, r24	; 51
 360:	83 b7       	in	r24, 0x33	; 51
 362:	81 60       	ori	r24, 0x01	; 1
 364:	83 bf       	out	0x33, r24	; 51
 366:	88 95       	sleep
 368:	83 b7       	in	r24, 0x33	; 51
 36a:	8e 7f       	andi	r24, 0xFE	; 254
 36c:	83 bf       	out	0x33, r24	; 51
 36e:	28 98       	cbi	0x05, 0	; 5
 370:	54 cf       	rjmp	.-344    	; 0x21a <main+0xc4>
 372:	28 9a       	sbi	0x05, 0	; 5
 374:	80 91 25 01 	lds	r24, 0x0125
 378:	81 30       	cpi	r24, 0x01	; 1
 37a:	79 f7       	brne	.-34     	; 0x35a <main+0x204>
 37c:	e9 cf       	rjmp	.-46     	; 0x350 <main+0x1fa>
 37e:	88 81       	ld	r24, Y
 380:	85 fd       	sbrc	r24, 5
 382:	57 cf       	rjmp	.-338    	; 0x232 <main+0xdc>
 384:	64 cf       	rjmp	.-312    	; 0x24e <main+0xf8>
 386:	88 81       	ld	r24, Y
 388:	86 ff       	sbrs	r24, 6
 38a:	58 cf       	rjmp	.-336    	; 0x23c <main+0xe6>
 38c:	8a 2d       	mov	r24, r10
 38e:	59 cf       	rjmp	.-334    	; 0x242 <main+0xec>

00000390 <_ZL15blockInterruptsv>:
 390:	e8 98       	cbi	0x1d, 0	; 29
 392:	08 95       	ret

00000394 <_ZL15allowInterruptsv>:
 394:	e8 9a       	sbi	0x1d, 0	; 29
 396:	08 95       	ret

00000398 <_ZL9rf12_byteh>:
 398:	8e bd       	out	0x2e, r24	; 46
 39a:	0d b4       	in	r0, 0x2d	; 45
 39c:	07 fe       	sbrs	r0, 7
 39e:	fd cf       	rjmp	.-6      	; 0x39a <_ZL9rf12_byteh+0x2>
 3a0:	8e b5       	in	r24, 0x2e	; 46
 3a2:	08 95       	ret

000003a4 <_ZL9rf12_xferj>:
 3a4:	1f 93       	push	r17
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	18 2f       	mov	r17, r24
 3ac:	c9 2f       	mov	r28, r25
 3ae:	f0 df       	rcall	.-32     	; 0x390 <_ZL15blockInterruptsv>
 3b0:	2a 98       	cbi	0x05, 2	; 5
 3b2:	8c 2f       	mov	r24, r28
 3b4:	f1 df       	rcall	.-30     	; 0x398 <_ZL9rf12_byteh>
 3b6:	d8 2f       	mov	r29, r24
	rf12_idle();
	else {
		rfmstate &= ~B11111000; // make sure everything is switched off (except bod, wkup, clk)
		rf12_xfer(rfmstate);
	}
	rxstate = TXIDLE;
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	c8 2f       	mov	r28, r24
 3bc:	81 2f       	mov	r24, r17
 3be:	ec df       	rcall	.-40     	; 0x398 <_ZL9rf12_byteh>
 3c0:	c8 2b       	or	r28, r24
 3c2:	2a 9a       	sbi	0x05, 2	; 5
 3c4:	e7 df       	rcall	.-50     	; 0x394 <_ZL15allowInterruptsv>
 3c6:	8c 2f       	mov	r24, r28
 3c8:	9d 2f       	mov	r25, r29
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	1f 91       	pop	r17
 3d0:	08 95       	ret

000003d2 <_ZL9rf12_idlev>:
 3d2:	80 91 7a 01 	lds	r24, 0x017A
 3d6:	90 91 7b 01 	lds	r25, 0x017B
 3da:	8f 70       	andi	r24, 0x0F	; 15
 3dc:	90 93 7b 01 	sts	0x017B, r25
 3e0:	80 93 7a 01 	sts	0x017A, r24
 3e4:	80 91 7a 01 	lds	r24, 0x017A
 3e8:	90 91 7b 01 	lds	r25, 0x017B
 3ec:	88 60       	ori	r24, 0x08	; 8
 3ee:	90 93 7b 01 	sts	0x017B, r25
 3f2:	80 93 7a 01 	sts	0x017A, r24
 3f6:	80 91 7a 01 	lds	r24, 0x017A
 3fa:	90 91 7b 01 	lds	r25, 0x017B
 3fe:	d2 cf       	rjmp	.-92     	; 0x3a4 <_ZL9rf12_xferj>

00000400 <_Z12rf12_spiInitv>:
 400:	84 b1       	in	r24, 0x04	; 4
 402:	8c 62       	ori	r24, 0x2C	; 44
 404:	84 b9       	out	0x04, r24	; 4
 406:	2a 9a       	sbi	0x05, 2	; 5
 408:	24 98       	cbi	0x04, 4	; 4
 40a:	80 e5       	ldi	r24, 0x50	; 80
 40c:	8c bd       	out	0x2c, r24	; 44
 40e:	8d b5       	in	r24, 0x2d	; 45
 410:	81 60       	ori	r24, 0x01	; 1
 412:	8d bd       	out	0x2d, r24	; 45
 414:	52 98       	cbi	0x0a, 2	; 10
 416:	5a 9a       	sbi	0x0b, 2	; 11
 418:	08 95       	ret

0000041a <_Z13rf12_recvDonev>:
 41a:	80 91 7c 01 	lds	r24, 0x017C
 41e:	87 30       	cpi	r24, 0x07	; 7
 420:	09 f0       	breq	.+2      	; 0x424 <_Z13rf12_recvDonev+0xa>
 422:	51 c0       	rjmp	.+162    	; 0x4c6 <_Z13rf12_recvDonev+0xac>
 424:	80 91 7f 01 	lds	r24, 0x017F
 428:	88 23       	and	r24, r24
 42a:	a1 f0       	breq	.+40     	; 0x454 <_Z13rf12_recvDonev+0x3a>
 42c:	90 91 7d 01 	lds	r25, 0x017D
 430:	98 17       	cp	r25, r24
 432:	28 f4       	brcc	.+10     	; 0x43e <_Z13rf12_recvDonev+0x24>
 434:	80 91 7d 01 	lds	r24, 0x017D
 438:	87 34       	cpi	r24, 0x47	; 71
 43a:	08 f4       	brcc	.+2      	; 0x43e <_Z13rf12_recvDonev+0x24>
 43c:	44 c0       	rjmp	.+136    	; 0x4c6 <_Z13rf12_recvDonev+0xac>
 43e:	84 e0       	ldi	r24, 0x04	; 4
 440:	80 93 7c 01 	sts	0x017C, r24
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	90 93 74 01 	sts	0x0174, r25
 44c:	80 93 73 01 	sts	0x0173, r24
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	08 95       	ret
 454:	20 91 7d 01 	lds	r18, 0x017D
 458:	80 91 2e 01 	lds	r24, 0x012E
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	05 96       	adiw	r24, 0x05	; 5
 462:	28 17       	cp	r18, r24
 464:	39 07       	cpc	r19, r25
 466:	24 f4       	brge	.+8      	; 0x470 <_Z13rf12_recvDonev+0x56>
 468:	80 91 7d 01 	lds	r24, 0x017D
 46c:	87 34       	cpi	r24, 0x47	; 71
 46e:	58 f1       	brcs	.+86     	; 0x4c6 <_Z13rf12_recvDonev+0xac>
 470:	84 e0       	ldi	r24, 0x04	; 4
 472:	80 93 7c 01 	sts	0x017C, r24
 476:	80 91 2e 01 	lds	r24, 0x012E
 47a:	83 34       	cpi	r24, 0x43	; 67
 47c:	30 f0       	brcs	.+12     	; 0x48a <_Z13rf12_recvDonev+0x70>
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	90 93 74 01 	sts	0x0174, r25
 486:	80 93 73 01 	sts	0x0173, r24
 48a:	80 91 2d 01 	lds	r24, 0x012D
 48e:	86 ff       	sbrs	r24, 6
 490:	0b c0       	rjmp	.+22     	; 0x4a8 <_Z13rf12_recvDonev+0x8e>
 492:	80 91 80 01 	lds	r24, 0x0180
 496:	98 2f       	mov	r25, r24
 498:	9f 71       	andi	r25, 0x1F	; 31
 49a:	9f 31       	cpi	r25, 0x1F	; 31
 49c:	29 f0       	breq	.+10     	; 0x4a8 <_Z13rf12_recvDonev+0x8e>
 49e:	90 91 2d 01 	lds	r25, 0x012D
 4a2:	89 27       	eor	r24, r25
 4a4:	8f 71       	andi	r24, 0x1F	; 31
 4a6:	79 f4       	brne	.+30     	; 0x4c6 <_Z13rf12_recvDonev+0xac>
 4a8:	80 91 73 01 	lds	r24, 0x0173
 4ac:	90 91 74 01 	lds	r25, 0x0174
 4b0:	89 2b       	or	r24, r25
 4b2:	09 f0       	breq	.+2      	; 0x4b6 <_Z13rf12_recvDonev+0x9c>
 4b4:	55 c0       	rjmp	.+170    	; 0x560 <_Z13rf12_recvDonev+0x146>
 4b6:	e0 91 26 01 	lds	r30, 0x0126
 4ba:	f0 91 27 01 	lds	r31, 0x0127
 4be:	30 97       	sbiw	r30, 0x00	; 0
 4c0:	09 f0       	breq	.+2      	; 0x4c4 <_Z13rf12_recvDonev+0xaa>
 4c2:	4a c0       	rjmp	.+148    	; 0x558 <_Z13rf12_recvDonev+0x13e>
 4c4:	4d c0       	rjmp	.+154    	; 0x560 <_Z13rf12_recvDonev+0x146>
 4c6:	80 91 7c 01 	lds	r24, 0x017C
 4ca:	84 30       	cpi	r24, 0x04	; 4
 4cc:	09 f0       	breq	.+2      	; 0x4d0 <_Z13rf12_recvDonev+0xb6>
 4ce:	42 c0       	rjmp	.+132    	; 0x554 <_Z13rf12_recvDonev+0x13a>
 4d0:	10 92 2e 01 	sts	0x012E, r1
 4d4:	10 92 7d 01 	sts	0x017D, r1
 4d8:	8f ef       	ldi	r24, 0xFF	; 255
 4da:	9f ef       	ldi	r25, 0xFF	; 255
 4dc:	90 93 74 01 	sts	0x0174, r25
 4e0:	80 93 73 01 	sts	0x0173, r24
 4e4:	20 91 7e 01 	lds	r18, 0x017E
 4e8:	22 23       	and	r18, r18
 4ea:	d9 f0       	breq	.+54     	; 0x522 <_Z13rf12_recvDonev+0x108>
 4ec:	82 27       	eor	r24, r18
 4ee:	28 2f       	mov	r18, r24
 4f0:	22 95       	swap	r18
 4f2:	28 27       	eor	r18, r24
 4f4:	02 2e       	mov	r0, r18
 4f6:	26 95       	lsr	r18
 4f8:	26 95       	lsr	r18
 4fa:	20 25       	eor	r18, r0
 4fc:	02 2e       	mov	r0, r18
 4fe:	26 95       	lsr	r18
 500:	20 25       	eor	r18, r0
 502:	27 70       	andi	r18, 0x07	; 7
 504:	08 2e       	mov	r0, r24
 506:	89 2f       	mov	r24, r25
 508:	26 95       	lsr	r18
 50a:	07 94       	ror	r0
 50c:	27 95       	ror	r18
 50e:	90 2d       	mov	r25, r0
 510:	82 27       	eor	r24, r18
 512:	06 94       	lsr	r0
 514:	27 95       	ror	r18
 516:	90 25       	eor	r25, r0
 518:	82 27       	eor	r24, r18
 51a:	90 93 74 01 	sts	0x0174, r25
 51e:	80 93 73 01 	sts	0x0173, r24
 522:	87 e0       	ldi	r24, 0x07	; 7
 524:	80 93 7c 01 	sts	0x017C, r24
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	80 93 76 01 	sts	0x0176, r24
 52e:	83 ea       	ldi	r24, 0xA3	; 163
 530:	94 e9       	ldi	r25, 0x94	; 148
 532:	38 df       	rcall	.-400    	; 0x3a4 <_ZL9rf12_xferj>
 534:	80 91 7a 01 	lds	r24, 0x017A
 538:	90 91 7b 01 	lds	r25, 0x017B
 53c:	88 6d       	ori	r24, 0xD8	; 216
 53e:	90 93 7b 01 	sts	0x017B, r25
 542:	80 93 7a 01 	sts	0x017A, r24
 546:	80 91 7a 01 	lds	r24, 0x017A
 54a:	90 91 7b 01 	lds	r25, 0x017B
 54e:	2a df       	rcall	.-428    	; 0x3a4 <_ZL9rf12_xferj>
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	08 95       	ret
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	08 95       	ret
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	09 95       	icall
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	08 95       	ret
 560:	8f ef       	ldi	r24, 0xFF	; 255
 562:	9f ef       	ldi	r25, 0xFF	; 255
 564:	dc 01       	movw	r26, r24
 566:	80 93 28 01 	sts	0x0128, r24
 56a:	90 93 29 01 	sts	0x0129, r25
 56e:	a0 93 2a 01 	sts	0x012A, r26
 572:	b0 93 2b 01 	sts	0x012B, r27
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	08 95       	ret

0000057a <_Z15rf12_setBitrateh>:
 57a:	cf 92       	push	r12
 57c:	df 92       	push	r13
 57e:	ef 92       	push	r14
 580:	ff 92       	push	r15
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	c8 2f       	mov	r28, r24
 58a:	08 2f       	mov	r16, r24
 58c:	10 e0       	ldi	r17, 0x00	; 0
 58e:	c8 01       	movw	r24, r16
 590:	96 6c       	ori	r25, 0xC6	; 198
 592:	08 df       	rcall	.-496    	; 0x3a4 <_ZL9rf12_xferj>
 594:	cf 77       	andi	r28, 0x7F	; 127
 596:	2c 2f       	mov	r18, r28
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	2f 5f       	subi	r18, 0xFF	; 255
 59c:	3f 4f       	sbci	r19, 0xFF	; 255
 59e:	44 27       	eor	r20, r20
 5a0:	37 fd       	sbrc	r19, 7
 5a2:	40 95       	com	r20
 5a4:	54 2f       	mov	r21, r20
 5a6:	6b ef       	ldi	r22, 0xFB	; 251
 5a8:	72 e4       	ldi	r23, 0x42	; 66
 5aa:	85 e0       	ldi	r24, 0x05	; 5
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	ab d3       	rcall	.+1878   	; 0xd06 <__udivmodsi4>
 5b0:	69 01       	movw	r12, r18
 5b2:	7a 01       	movw	r14, r20
 5b4:	c8 01       	movw	r24, r16
 5b6:	88 0f       	add	r24, r24
 5b8:	89 2f       	mov	r24, r25
 5ba:	88 1f       	adc	r24, r24
 5bc:	99 0b       	sbc	r25, r25
 5be:	8c 01       	movw	r16, r24
 5c0:	00 0f       	add	r16, r16
 5c2:	11 1f       	adc	r17, r17
 5c4:	00 0f       	add	r16, r16
 5c6:	11 1f       	adc	r17, r17
 5c8:	00 0f       	add	r16, r16
 5ca:	11 1f       	adc	r17, r17
 5cc:	08 1b       	sub	r16, r24
 5ce:	19 0b       	sbc	r17, r25
 5d0:	0f 5f       	subi	r16, 0xFF	; 255
 5d2:	1f 4f       	sbci	r17, 0xFF	; 255
 5d4:	98 01       	movw	r18, r16
 5d6:	44 27       	eor	r20, r20
 5d8:	37 fd       	sbrc	r19, 7
 5da:	40 95       	com	r20
 5dc:	54 2f       	mov	r21, r20
 5de:	c7 01       	movw	r24, r14
 5e0:	b6 01       	movw	r22, r12
 5e2:	91 d3       	rcall	.+1826   	; 0xd06 <__udivmodsi4>
 5e4:	da 01       	movw	r26, r20
 5e6:	c9 01       	movw	r24, r18
 5e8:	68 94       	set
 5ea:	12 f8       	bld	r1, 2
 5ec:	b6 95       	lsr	r27
 5ee:	a7 95       	ror	r26
 5f0:	97 95       	ror	r25
 5f2:	87 95       	ror	r24
 5f4:	16 94       	lsr	r1
 5f6:	d1 f7       	brne	.-12     	; 0x5ec <_Z15rf12_setBitrateh+0x72>
 5f8:	bc 01       	movw	r22, r24
 5fa:	cd 01       	movw	r24, r26
 5fc:	6d 57       	subi	r22, 0x7D	; 125
 5fe:	7c 4f       	sbci	r23, 0xFC	; 252
 600:	8f 4f       	sbci	r24, 0xFF	; 255
 602:	9f 4f       	sbci	r25, 0xFF	; 255
 604:	24 e8       	ldi	r18, 0x84	; 132
 606:	33 e0       	ldi	r19, 0x03	; 3
 608:	40 e0       	ldi	r20, 0x00	; 0
 60a:	50 e0       	ldi	r21, 0x00	; 0
 60c:	7c d3       	rcall	.+1784   	; 0xd06 <__udivmodsi4>
 60e:	20 93 75 01 	sts	0x0175, r18
 612:	cf 91       	pop	r28
 614:	1f 91       	pop	r17
 616:	0f 91       	pop	r16
 618:	ff 90       	pop	r15
 61a:	ef 90       	pop	r14
 61c:	df 90       	pop	r13
 61e:	cf 90       	pop	r12
 620:	08 95       	ret

00000622 <_Z19rf12_setFixedLengthh>:
 622:	81 11       	cpse	r24, r1
 624:	03 c0       	rjmp	.+6      	; 0x62c <_Z19rf12_setFixedLengthh+0xa>
 626:	10 92 7f 01 	sts	0x017F, r1
 62a:	08 95       	ret
 62c:	8f 5f       	subi	r24, 0xFF	; 255
 62e:	80 93 7f 01 	sts	0x017F, r24
 632:	08 95       	ret

00000634 <_Z14rf12_sendStarth>:
 634:	86 fd       	sbrc	r24, 6
 636:	05 c0       	rjmp	.+10     	; 0x642 <_Z14rf12_sendStarth+0xe>
 638:	80 7e       	andi	r24, 0xE0	; 224
 63a:	90 91 80 01 	lds	r25, 0x0180
 63e:	9f 71       	andi	r25, 0x1F	; 31
 640:	89 0f       	add	r24, r25
 642:	80 93 2d 01 	sts	0x012D, r24
 646:	e0 91 26 01 	lds	r30, 0x0126
 64a:	f0 91 27 01 	lds	r31, 0x0127
 64e:	30 97       	sbiw	r30, 0x00	; 0
 650:	11 f0       	breq	.+4      	; 0x656 <_Z14rf12_sendStarth+0x22>
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	09 95       	icall
 656:	8f ef       	ldi	r24, 0xFF	; 255
 658:	9f ef       	ldi	r25, 0xFF	; 255
 65a:	90 93 74 01 	sts	0x0174, r25
 65e:	80 93 73 01 	sts	0x0173, r24
 662:	80 91 73 01 	lds	r24, 0x0173
 666:	90 91 74 01 	lds	r25, 0x0174
 66a:	20 91 7e 01 	lds	r18, 0x017E
 66e:	82 27       	eor	r24, r18
 670:	28 2f       	mov	r18, r24
 672:	22 95       	swap	r18
 674:	28 27       	eor	r18, r24
 676:	02 2e       	mov	r0, r18
 678:	26 95       	lsr	r18
 67a:	26 95       	lsr	r18
 67c:	20 25       	eor	r18, r0
 67e:	02 2e       	mov	r0, r18
 680:	26 95       	lsr	r18
 682:	20 25       	eor	r18, r0
 684:	27 70       	andi	r18, 0x07	; 7
 686:	08 2e       	mov	r0, r24
 688:	89 2f       	mov	r24, r25
 68a:	26 95       	lsr	r18
 68c:	07 94       	ror	r0
 68e:	27 95       	ror	r18
 690:	90 2d       	mov	r25, r0
 692:	82 27       	eor	r24, r18
 694:	06 94       	lsr	r0
 696:	27 95       	ror	r18
 698:	90 25       	eor	r25, r0
 69a:	82 27       	eor	r24, r18
 69c:	90 93 74 01 	sts	0x0174, r25
 6a0:	80 93 73 01 	sts	0x0173, r24
 6a4:	88 e0       	ldi	r24, 0x08	; 8
 6a6:	80 93 7c 01 	sts	0x017C, r24
 6aa:	80 91 7a 01 	lds	r24, 0x017A
 6ae:	90 91 7b 01 	lds	r25, 0x017B
 6b2:	88 63       	ori	r24, 0x38	; 56
 6b4:	90 93 7b 01 	sts	0x017B, r25
 6b8:	80 93 7a 01 	sts	0x017A, r24
 6bc:	80 91 7a 01 	lds	r24, 0x017A
 6c0:	90 91 7b 01 	lds	r25, 0x017B
 6c4:	6f ce       	rjmp	.-802    	; 0x3a4 <_ZL9rf12_xferj>

000006c6 <_Z14rf12_sendStarthPKvh>:
 6c6:	cf 93       	push	r28
 6c8:	c8 2f       	mov	r28, r24
 6ca:	40 93 2e 01 	sts	0x012E, r20
 6ce:	2f e2       	ldi	r18, 0x2F	; 47
 6d0:	31 e0       	ldi	r19, 0x01	; 1
 6d2:	50 e0       	ldi	r21, 0x00	; 0
 6d4:	82 2f       	mov	r24, r18
 6d6:	93 2f       	mov	r25, r19
 6d8:	4c d3       	rcall	.+1688   	; 0xd72 <memcpy>
 6da:	8c 2f       	mov	r24, r28
 6dc:	ab df       	rcall	.-170    	; 0x634 <_Z14rf12_sendStarth>
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret

000006e2 <_Z13rf12_sendWaith>:
 6e2:	44 e0       	ldi	r20, 0x04	; 4
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	5c e0       	ldi	r21, 0x0C	; 12
 6e8:	16 c0       	rjmp	.+44     	; 0x716 <_Z13rf12_sendWaith+0x34>
 6ea:	88 23       	and	r24, r24
 6ec:	a1 f0       	breq	.+40     	; 0x716 <_Z13rf12_sendWaith+0x34>
 6ee:	93 b7       	in	r25, 0x33	; 51
 6f0:	91 7f       	andi	r25, 0xF1	; 241
 6f2:	83 30       	cpi	r24, 0x03	; 3
 6f4:	21 f0       	breq	.+8      	; 0x6fe <_Z13rf12_sendWaith+0x1c>
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	21 f4       	brne	.+8      	; 0x702 <_Z13rf12_sendWaith+0x20>
 6fa:	25 2f       	mov	r18, r21
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <_Z13rf12_sendWaith+0x22>
 6fe:	24 2f       	mov	r18, r20
 700:	01 c0       	rjmp	.+2      	; 0x704 <_Z13rf12_sendWaith+0x22>
 702:	23 2f       	mov	r18, r19
 704:	92 2b       	or	r25, r18
 706:	93 bf       	out	0x33, r25	; 51
 708:	93 b7       	in	r25, 0x33	; 51
 70a:	91 60       	ori	r25, 0x01	; 1
 70c:	93 bf       	out	0x33, r25	; 51
 70e:	88 95       	sleep
 710:	93 b7       	in	r25, 0x33	; 51
 712:	9e 7f       	andi	r25, 0xFE	; 254
 714:	93 bf       	out	0x33, r25	; 51
 716:	90 91 7c 01 	lds	r25, 0x017C
 71a:	94 30       	cpi	r25, 0x04	; 4
 71c:	31 f7       	brne	.-52     	; 0x6ea <_Z13rf12_sendWaith+0x8>
 71e:	08 95       	ret

00000720 <_Z21rf12_interruptcontrolv>:
 720:	e8 9a       	sbi	0x1d, 0	; 29
 722:	08 95       	ret

00000724 <_Z12rf12_restorehhh>:
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
 728:	d6 2f       	mov	r29, r22
 72a:	c4 2f       	mov	r28, r20
 72c:	80 93 80 01 	sts	0x0180, r24
 730:	40 93 7e 01 	sts	0x017E, r20
 734:	60 93 81 01 	sts	0x0181, r22
 738:	f3 df       	rcall	.-26     	; 0x720 <_Z21rf12_interruptcontrolv>
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	72 df       	rcall	.-284    	; 0x622 <_Z19rf12_setFixedLengthh>
 73e:	28 de       	rcall	.-944    	; 0x390 <_ZL15blockInterruptsv>
 740:	25 e0       	ldi	r18, 0x05	; 5
 742:	32 e8       	ldi	r19, 0x82	; 130
 744:	30 93 7b 01 	sts	0x017B, r19
 748:	20 93 7a 01 	sts	0x017A, r18
 74c:	80 91 7a 01 	lds	r24, 0x017A
 750:	90 91 7b 01 	lds	r25, 0x017B
 754:	27 de       	rcall	.-946    	; 0x3a4 <_ZL9rf12_xferj>
 756:	20 e1       	ldi	r18, 0x10	; 16
 758:	d2 9f       	mul	r29, r18
 75a:	c0 01       	movw	r24, r0
 75c:	11 24       	eor	r1, r1
 75e:	87 6c       	ori	r24, 0xC7	; 199
 760:	90 68       	ori	r25, 0x80	; 128
 762:	20 de       	rcall	.-960    	; 0x3a4 <_ZL9rf12_xferj>
 764:	80 e4       	ldi	r24, 0x40	; 64
 766:	96 ea       	ldi	r25, 0xA6	; 166
 768:	1d de       	rcall	.-966    	; 0x3a4 <_ZL9rf12_xferj>
 76a:	86 e0       	ldi	r24, 0x06	; 6
 76c:	06 df       	rcall	.-500    	; 0x57a <_Z15rf12_setBitrateh>
 76e:	82 ea       	ldi	r24, 0xA2	; 162
 770:	94 e9       	ldi	r25, 0x94	; 148
 772:	18 de       	rcall	.-976    	; 0x3a4 <_ZL9rf12_xferj>
 774:	8c ea       	ldi	r24, 0xAC	; 172
 776:	92 ec       	ldi	r25, 0xC2	; 194
 778:	15 de       	rcall	.-982    	; 0x3a4 <_ZL9rf12_xferj>
 77a:	cc 23       	and	r28, r28
 77c:	41 f0       	breq	.+16     	; 0x78e <_Z12rf12_restorehhh+0x6a>
 77e:	83 e8       	ldi	r24, 0x83	; 131
 780:	9a ec       	ldi	r25, 0xCA	; 202
 782:	10 de       	rcall	.-992    	; 0x3a4 <_ZL9rf12_xferj>
 784:	8c 2f       	mov	r24, r28
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	9e 6c       	ori	r25, 0xCE	; 206
 78a:	0c de       	rcall	.-1000   	; 0x3a4 <_ZL9rf12_xferj>
 78c:	06 c0       	rjmp	.+12     	; 0x79a <_Z12rf12_restorehhh+0x76>
 78e:	8b e8       	ldi	r24, 0x8B	; 139
 790:	9a ec       	ldi	r25, 0xCA	; 202
 792:	08 de       	rcall	.-1008   	; 0x3a4 <_ZL9rf12_xferj>
 794:	8d e2       	ldi	r24, 0x2D	; 45
 796:	9e ec       	ldi	r25, 0xCE	; 206
 798:	05 de       	rcall	.-1014   	; 0x3a4 <_ZL9rf12_xferj>
 79a:	83 e8       	ldi	r24, 0x83	; 131
 79c:	94 ec       	ldi	r25, 0xC4	; 196
 79e:	02 de       	rcall	.-1020   	; 0x3a4 <_ZL9rf12_xferj>
 7a0:	80 e5       	ldi	r24, 0x50	; 80
 7a2:	98 e9       	ldi	r25, 0x98	; 152
 7a4:	ff dd       	rcall	.-1026   	; 0x3a4 <_ZL9rf12_xferj>
 7a6:	87 e7       	ldi	r24, 0x77	; 119
 7a8:	9c ec       	ldi	r25, 0xCC	; 204
 7aa:	fc dd       	rcall	.-1032   	; 0x3a4 <_ZL9rf12_xferj>
 7ac:	80 e0       	ldi	r24, 0x00	; 0
 7ae:	90 ee       	ldi	r25, 0xE0	; 224
 7b0:	f9 dd       	rcall	.-1038   	; 0x3a4 <_ZL9rf12_xferj>
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	98 ec       	ldi	r25, 0xC8	; 200
 7b6:	f6 dd       	rcall	.-1044   	; 0x3a4 <_ZL9rf12_xferj>
 7b8:	89 e4       	ldi	r24, 0x49	; 73
 7ba:	90 ec       	ldi	r25, 0xC0	; 192
 7bc:	f3 dd       	rcall	.-1050   	; 0x3a4 <_ZL9rf12_xferj>
 7be:	84 e0       	ldi	r24, 0x04	; 4
 7c0:	80 93 7c 01 	sts	0x017C, r24
 7c4:	e7 dd       	rcall	.-1074   	; 0x394 <_ZL15allowInterruptsv>
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	08 95       	ret

000007cc <_Z15rf12_initializehhh>:
 7cc:	1f 93       	push	r17
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
 7d2:	c8 2f       	mov	r28, r24
 7d4:	d6 2f       	mov	r29, r22
 7d6:	14 2f       	mov	r17, r20
 7d8:	80 93 80 01 	sts	0x0180, r24
 7dc:	40 93 7e 01 	sts	0x017E, r20
 7e0:	60 93 81 01 	sts	0x0181, r22
 7e4:	0d de       	rcall	.-998    	; 0x400 <_Z12rf12_spiInitv>
 7e6:	9c df       	rcall	.-200    	; 0x720 <_Z21rf12_interruptcontrolv>
 7e8:	82 e8       	ldi	r24, 0x82	; 130
 7ea:	9a ec       	ldi	r25, 0xCA	; 202
 7ec:	db dd       	rcall	.-1098   	; 0x3a4 <_ZL9rf12_xferj>
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	9e ef       	ldi	r25, 0xFE	; 254
 7f2:	d8 dd       	rcall	.-1104   	; 0x3a4 <_ZL9rf12_xferj>
 7f4:	85 e0       	ldi	r24, 0x05	; 5
 7f6:	80 93 7c 01 	sts	0x017C, r24
 7fa:	83 b7       	in	r24, 0x33	; 51
 7fc:	81 7f       	andi	r24, 0xF1	; 241
 7fe:	83 bf       	out	0x33, r24	; 51
 800:	80 91 7c 01 	lds	r24, 0x017C
 804:	85 30       	cpi	r24, 0x05	; 5
 806:	59 f4       	brne	.+22     	; 0x81e <_Z15rf12_initializehhh+0x52>
 808:	93 b7       	in	r25, 0x33	; 51
 80a:	91 60       	ori	r25, 0x01	; 1
 80c:	93 bf       	out	0x33, r25	; 51
 80e:	88 95       	sleep
 810:	93 b7       	in	r25, 0x33	; 51
 812:	9e 7f       	andi	r25, 0xFE	; 254
 814:	93 bf       	out	0x33, r25	; 51
 816:	90 91 7c 01 	lds	r25, 0x017C
 81a:	95 30       	cpi	r25, 0x05	; 5
 81c:	a9 f3       	breq	.-22     	; 0x808 <_Z15rf12_initializehhh+0x3c>
 81e:	41 2f       	mov	r20, r17
 820:	6d 2f       	mov	r22, r29
 822:	8c 2f       	mov	r24, r28
 824:	7f df       	rcall	.-258    	; 0x724 <_Z12rf12_restorehhh>
 826:	80 91 80 01 	lds	r24, 0x0180
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	1f 91       	pop	r17
 830:	08 95       	ret

00000832 <_Z16rf12_setWatchdogm>:
/// interrupt in the RFM12 module. Use rf12_wakeup() to check if the wakeup-interrupt
/// fired. This allows very deep sleep states (timer off) while still being able to wakeup
/// because of the external interrupt. The RFM12b wakeup-timer only needs about 1.5µA.
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
 832:	cf 92       	push	r12
 834:	df 92       	push	r13
 836:	ef 92       	push	r14
 838:	ff 92       	push	r15
 83a:	cf 93       	push	r28
 83c:	6b 01       	movw	r12, r22
 83e:	7c 01       	movw	r14, r24
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
 840:	8f ef       	ldi	r24, 0xFF	; 255
 842:	c8 16       	cp	r12, r24
 844:	d1 04       	cpc	r13, r1
 846:	e1 04       	cpc	r14, r1
 848:	f1 04       	cpc	r15, r1
 84a:	79 f0       	breq	.+30     	; 0x86a <_Z16rf12_setWatchdogm+0x38>
 84c:	70 f0       	brcs	.+28     	; 0x86a <_Z16rf12_setWatchdogm+0x38>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
 84e:	c0 e0       	ldi	r28, 0x00	; 0
	while (m > 255) {
		r  += 1;
 850:	cf 5f       	subi	r28, 0xFF	; 255
		m >>= 1;
 852:	f6 94       	lsr	r15
 854:	e7 94       	ror	r14
 856:	d7 94       	ror	r13
 858:	c7 94       	ror	r12
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
 85a:	8f ef       	ldi	r24, 0xFF	; 255
 85c:	c8 16       	cp	r12, r24
 85e:	d1 04       	cpc	r13, r1
 860:	e1 04       	cpc	r14, r1
 862:	f1 04       	cpc	r15, r1
 864:	09 f0       	breq	.+2      	; 0x868 <_Z16rf12_setWatchdogm+0x36>
 866:	a0 f7       	brcc	.-24     	; 0x850 <_Z16rf12_setWatchdogm+0x1e>
 868:	01 c0       	rjmp	.+2      	; 0x86c <_Z16rf12_setWatchdogm+0x3a>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
 86a:	c0 e0       	ldi	r28, 0x00	; 0
		m >>= 1;
	}
	
	// Disable old wakeup-timer if enabled
//	if (bitRead(rfmstate,1)) {
	if ((rfmstate>>1)&0x01){
 86c:	80 91 7a 01 	lds	r24, 0x017A
 870:	90 91 7b 01 	lds	r25, 0x017B
 874:	81 ff       	sbrs	r24, 1
 876:	0e c0       	rjmp	.+28     	; 0x894 <_Z16rf12_setWatchdogm+0x62>
		//bitClear(rfmstate,1);
		rfmstate &= ~(1 << 1);
 878:	80 91 7a 01 	lds	r24, 0x017A
 87c:	90 91 7b 01 	lds	r25, 0x017B
 880:	8d 7f       	andi	r24, 0xFD	; 253
 882:	90 93 7b 01 	sts	0x017B, r25
 886:	80 93 7a 01 	sts	0x017A, r24
		rf12_xfer(rfmstate);
 88a:	80 91 7a 01 	lds	r24, 0x017A
 88e:	90 91 7b 01 	lds	r25, 0x017B
 892:	88 dd       	rcall	.-1264   	; 0x3a4 <_ZL9rf12_xferj>
	}
	
	// enable wakeup call if we have to
	if (m>0) {
 894:	c1 14       	cp	r12, r1
 896:	d1 04       	cpc	r13, r1
 898:	e1 04       	cpc	r14, r1
 89a:	f1 04       	cpc	r15, r1
 89c:	b1 f0       	breq	.+44     	; 0x8ca <_Z16rf12_setWatchdogm+0x98>
		// write time to wakeup-register
		rf12_xfer(RF_WAKEUP_TIMER | (r<<8) | m);
 89e:	3c 2f       	mov	r19, r28
 8a0:	20 e0       	ldi	r18, 0x00	; 0
 8a2:	d7 01       	movw	r26, r14
 8a4:	c6 01       	movw	r24, r12
 8a6:	90 6e       	ori	r25, 0xE0	; 224
 8a8:	82 2b       	or	r24, r18
 8aa:	93 2b       	or	r25, r19
 8ac:	7b dd       	rcall	.-1290   	; 0x3a4 <_ZL9rf12_xferj>
		// enable wakeup
		//bitSet(rfmstate,1);
		rfmstate |= (1 << 1);
 8ae:	80 91 7a 01 	lds	r24, 0x017A
 8b2:	90 91 7b 01 	lds	r25, 0x017B
 8b6:	82 60       	ori	r24, 0x02	; 2
 8b8:	90 93 7b 01 	sts	0x017B, r25
 8bc:	80 93 7a 01 	sts	0x017A, r24
		rf12_xfer(rfmstate);
 8c0:	80 91 7a 01 	lds	r24, 0x017A
 8c4:	90 91 7b 01 	lds	r25, 0x017B
 8c8:	6d dd       	rcall	.-1318   	; 0x3a4 <_ZL9rf12_xferj>
	}
}
 8ca:	cf 91       	pop	r28
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	df 90       	pop	r13
 8d2:	cf 90       	pop	r12
 8d4:	08 95       	ret

000008d6 <__vector_1>:
	while (!bitRead(PINB, RFM_IRQ - 8))
	rf12_interrupt();
}
#else
*/
ISR(INT0_vect) {
 8d6:	1f 92       	push	r1
 8d8:	0f 92       	push	r0
 8da:	0f b6       	in	r0, 0x3f	; 63
 8dc:	0f 92       	push	r0
 8de:	11 24       	eor	r1, r1
 8e0:	1f 93       	push	r17
 8e2:	2f 93       	push	r18
 8e4:	3f 93       	push	r19
 8e6:	4f 93       	push	r20
 8e8:	5f 93       	push	r21
 8ea:	6f 93       	push	r22
 8ec:	7f 93       	push	r23
 8ee:	8f 93       	push	r24
 8f0:	9f 93       	push	r25
 8f2:	af 93       	push	r26
 8f4:	bf 93       	push	r27
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	ef 93       	push	r30
 8fc:	ff 93       	push	r31
/// Requests RFM12 state from RF module and reads back a waiting data byte if there is
/// any.
/// One of two commands accessing SPI, so interrupts disabled in here
/// @param *data Pointer to  byte where to write the received data to (if any)
static uint16_t rf12_xferState (uint8_t *data) {
	blockInterrupts();
 8fe:	48 dd       	rcall	.-1392   	; 0x390 <_ZL15blockInterruptsv>

	// writing can take place at full speed, even 8 MHz works
	//bitClear(SS_PORT, cs_pin);
	PORT_RFM_CS &= ~(1<<BIT_RFM_CS); //clear CS
 900:	2a 98       	cbi	0x05, 2	; 5
	uint16_t res = rf12_byte(0x00) << 8;
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	49 dd       	rcall	.-1390   	; 0x398 <_ZL9rf12_byteh>
 906:	d8 2f       	mov	r29, r24
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	c8 2f       	mov	r28, r24
	res |= rf12_byte(0x00);
 90c:	45 dd       	rcall	.-1398   	; 0x398 <_ZL9rf12_byteh>
 90e:	c8 2b       	or	r28, r24
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
 910:	dd 23       	and	r29, r29
 912:	2c f4       	brge	.+10     	; 0x91e <__stack+0x1f>
 914:	80 91 7c 01 	lds	r24, 0x017C
 918:	87 30       	cpi	r24, 0x07	; 7
 91a:	09 f4       	brne	.+2      	; 0x91e <__stack+0x1f>
 91c:	0f c1       	rjmp	.+542    	; 0xb3c <__stack+0x23d>
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
		#endif
	}
	
	//bitSet(SS_PORT, cs_pin);
	PORT_RFM_CS |= (1 << BIT_RFM_CS); //  bitSet(SS_PORT, cs_pin);
 91e:	2a 9a       	sbi	0x05, 2	; 5

	allowInterrupts();
 920:	39 dd       	rcall	.-1422   	; 0x394 <_ZL15allowInterruptsv>
/// @details
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uint8_t in;
	state = rf12_xferState(&in);
 922:	d0 93 79 01 	sts	0x0179, r29
 926:	c0 93 78 01 	sts	0x0178, r28

	// data received or byte needed for sending
	if (state & RF_FIFO_BIT) {
 92a:	20 91 78 01 	lds	r18, 0x0178
 92e:	30 91 79 01 	lds	r19, 0x0179
 932:	33 23       	and	r19, r19
 934:	0c f0       	brlt	.+2      	; 0x938 <__stack+0x39>
 936:	e1 c0       	rjmp	.+450    	; 0xafa <__stack+0x1fb>
		
		if (rxstate == TXRECV) {  // we are receiving
 938:	80 91 7c 01 	lds	r24, 0x017C
 93c:	87 30       	cpi	r24, 0x07	; 7
 93e:	09 f0       	breq	.+2      	; 0x942 <__stack+0x43>
 940:	78 c0       	rjmp	.+240    	; 0xa32 <__stack+0x133>

			if (rxfill == 0 && group != 0)
 942:	80 91 7d 01 	lds	r24, 0x017D
 946:	81 11       	cpse	r24, r1
 948:	04 c0       	rjmp	.+8      	; 0x952 <__stack+0x53>
 94a:	80 91 7e 01 	lds	r24, 0x017E
 94e:	81 11       	cpse	r24, r1
 950:	ff c0       	rjmp	.+510    	; 0xb50 <__stack+0x251>
			rf12_buf[rxfill++] = group;

			rf12_buf[rxfill++] = in;
 952:	80 91 7d 01 	lds	r24, 0x017D
 956:	e8 2f       	mov	r30, r24
 958:	f0 e0       	ldi	r31, 0x00	; 0
 95a:	e4 5d       	subi	r30, 0xD4	; 212
 95c:	fe 4f       	sbci	r31, 0xFE	; 254
 95e:	10 83       	st	Z, r17
 960:	8f 5f       	subi	r24, 0xFF	; 255
 962:	80 93 7d 01 	sts	0x017D, r24
			rf12_crc = _crc16_update(rf12_crc, in);
 966:	20 91 73 01 	lds	r18, 0x0173
 96a:	30 91 74 01 	lds	r19, 0x0174
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
 96e:	21 27       	eor	r18, r17
 970:	12 2f       	mov	r17, r18
 972:	12 95       	swap	r17
 974:	12 27       	eor	r17, r18
 976:	01 2e       	mov	r0, r17
 978:	16 95       	lsr	r17
 97a:	16 95       	lsr	r17
 97c:	10 25       	eor	r17, r0
 97e:	01 2e       	mov	r0, r17
 980:	16 95       	lsr	r17
 982:	10 25       	eor	r17, r0
 984:	17 70       	andi	r17, 0x07	; 7
 986:	02 2e       	mov	r0, r18
 988:	23 2f       	mov	r18, r19
 98a:	16 95       	lsr	r17
 98c:	07 94       	ror	r0
 98e:	17 95       	ror	r17
 990:	30 2d       	mov	r19, r0
 992:	21 27       	eor	r18, r17
 994:	06 94       	lsr	r0
 996:	17 95       	ror	r17
 998:	30 25       	eor	r19, r0
 99a:	21 27       	eor	r18, r17
 99c:	30 93 74 01 	sts	0x0174, r19
 9a0:	20 93 73 01 	sts	0x0173, r18

			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
 9a4:	e0 91 76 01 	lds	r30, 0x0176
 9a8:	e3 30       	cpi	r30, 0x03	; 3
 9aa:	18 f5       	brcc	.+70     	; 0x9f2 <__stack+0xf3>
 9ac:	80 91 7d 01 	lds	r24, 0x017D
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	02 97       	sbiw	r24, 0x02	; 2
 9b4:	60 91 75 01 	lds	r22, 0x0175
 9b8:	70 e0       	ldi	r23, 0x00	; 0
 9ba:	92 d1       	rcall	.+804    	; 0xce0 <__divmodhi4>
 9bc:	89 2b       	or	r24, r25
 9be:	09 f4       	brne	.+2      	; 0x9c2 <__stack+0xc3>
 9c0:	d2 c0       	rjmp	.+420    	; 0xb66 <__stack+0x267>
 9c2:	17 c0       	rjmp	.+46     	; 0x9f2 <__stack+0xf3>
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
 9c6:	ea 5e       	subi	r30, 0xEA	; 234
 9c8:	fe 4f       	sbci	r31, 0xFE	; 254
				: (drssi_dec_tree[drssi] >> 4);
 9ca:	80 81       	ld	r24, Z
 9cc:	8f 70       	andi	r24, 0x0F	; 15
 9ce:	06 c0       	rjmp	.+12     	; 0x9dc <__stack+0xdd>
 9d0:	f0 e0       	ldi	r31, 0x00	; 0
 9d2:	ea 5e       	subi	r30, 0xEA	; 234
 9d4:	fe 4f       	sbci	r31, 0xFE	; 254
 9d6:	80 81       	ld	r24, Z
 9d8:	82 95       	swap	r24
 9da:	8f 70       	andi	r24, 0x0F	; 15
 9dc:	80 93 76 01 	sts	0x0176, r24
				if ( drssi < 3 ) {     // not yet final destination, set new threshold
 9e0:	83 30       	cpi	r24, 0x03	; 3
 9e2:	38 f4       	brcc	.+14     	; 0x9f2 <__stack+0xf3>
					rf12_xfer(RF_RECV_CONTROL | drssi*2+1);
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	88 0f       	add	r24, r24
 9e8:	99 1f       	adc	r25, r25
 9ea:	01 96       	adiw	r24, 0x01	; 1
 9ec:	80 6a       	ori	r24, 0xA0	; 160
 9ee:	94 69       	ori	r25, 0x94	; 148
 9f0:	d9 dc       	rcall	.-1614   	; 0x3a4 <_ZL9rf12_xferj>
				}
			}

			// check if we got all the bytes (or maximum packet length was reached)
			if (fixedLength) {
 9f2:	80 91 7f 01 	lds	r24, 0x017F
 9f6:	88 23       	and	r24, r24
 9f8:	59 f0       	breq	.+22     	; 0xa10 <__stack+0x111>
				if (rxfill >= fixedLength || rxfill >= RF_MAX) {
 9fa:	90 91 7d 01 	lds	r25, 0x017D
 9fe:	98 17       	cp	r25, r24
 a00:	28 f4       	brcc	.+10     	; 0xa0c <__stack+0x10d>
 a02:	80 91 7d 01 	lds	r24, 0x017D
 a06:	87 34       	cpi	r24, 0x47	; 71
 a08:	08 f4       	brcc	.+2      	; 0xa0c <__stack+0x10d>
 a0a:	77 c0       	rjmp	.+238    	; 0xafa <__stack+0x1fb>
					rf12_idle();
 a0c:	e2 dc       	rcall	.-1596   	; 0x3d2 <_ZL9rf12_idlev>
 a0e:	75 c0       	rjmp	.+234    	; 0xafa <__stack+0x1fb>
				}
				} else if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX) {
 a10:	20 91 7d 01 	lds	r18, 0x017D
 a14:	80 91 2e 01 	lds	r24, 0x012E
 a18:	30 e0       	ldi	r19, 0x00	; 0
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	05 96       	adiw	r24, 0x05	; 5
 a1e:	28 17       	cp	r18, r24
 a20:	39 07       	cpc	r19, r25
 a22:	2c f4       	brge	.+10     	; 0xa2e <__stack+0x12f>
 a24:	80 91 7d 01 	lds	r24, 0x017D
 a28:	87 34       	cpi	r24, 0x47	; 71
 a2a:	08 f4       	brcc	.+2      	; 0xa2e <__stack+0x12f>
 a2c:	66 c0       	rjmp	.+204    	; 0xafa <__stack+0x1fb>
				rf12_idle();
 a2e:	d1 dc       	rcall	.-1630   	; 0x3d2 <_ZL9rf12_idlev>
 a30:	64 c0       	rjmp	.+200    	; 0xafa <__stack+0x1fb>
			}
			} else {                  // we are sending
			uint8_t out;

			if (rxstate < 0) {
 a32:	80 91 7c 01 	lds	r24, 0x017C
 a36:	88 23       	and	r24, r24
 a38:	0c f0       	brlt	.+2      	; 0xa3c <__stack+0x13d>
 a3a:	2f c0       	rjmp	.+94     	; 0xa9a <__stack+0x19b>
				uint8_t pos = 3 + rf12_len + rxstate++;
 a3c:	e0 91 2e 01 	lds	r30, 0x012E
 a40:	80 91 7c 01 	lds	r24, 0x017C
 a44:	98 2f       	mov	r25, r24
 a46:	9f 5f       	subi	r25, 0xFF	; 255
 a48:	90 93 7c 01 	sts	0x017C, r25
 a4c:	ed 5f       	subi	r30, 0xFD	; 253
 a4e:	8e 0f       	add	r24, r30
				out = rf12_buf[pos];
 a50:	e8 2f       	mov	r30, r24
 a52:	f0 e0       	ldi	r31, 0x00	; 0
 a54:	e4 5d       	subi	r30, 0xD4	; 212
 a56:	fe 4f       	sbci	r31, 0xFE	; 254
 a58:	80 81       	ld	r24, Z
				rf12_crc = _crc16_update(rf12_crc, out);
 a5a:	20 91 73 01 	lds	r18, 0x0173
 a5e:	30 91 74 01 	lds	r19, 0x0174
 a62:	28 27       	eor	r18, r24
 a64:	92 2f       	mov	r25, r18
 a66:	92 95       	swap	r25
 a68:	92 27       	eor	r25, r18
 a6a:	09 2e       	mov	r0, r25
 a6c:	96 95       	lsr	r25
 a6e:	96 95       	lsr	r25
 a70:	90 25       	eor	r25, r0
 a72:	09 2e       	mov	r0, r25
 a74:	96 95       	lsr	r25
 a76:	90 25       	eor	r25, r0
 a78:	97 70       	andi	r25, 0x07	; 7
 a7a:	02 2e       	mov	r0, r18
 a7c:	23 2f       	mov	r18, r19
 a7e:	96 95       	lsr	r25
 a80:	07 94       	ror	r0
 a82:	97 95       	ror	r25
 a84:	30 2d       	mov	r19, r0
 a86:	29 27       	eor	r18, r25
 a88:	06 94       	lsr	r0
 a8a:	97 95       	ror	r25
 a8c:	30 25       	eor	r19, r0
 a8e:	29 27       	eor	r18, r25
 a90:	30 93 74 01 	sts	0x0174, r19
 a94:	20 93 73 01 	sts	0x0173, r18
 a98:	2d c0       	rjmp	.+90     	; 0xaf4 <__stack+0x1f5>
			} else
			switch (rxstate++) {
 a9a:	80 91 7c 01 	lds	r24, 0x017C
 a9e:	98 2f       	mov	r25, r24
 aa0:	9f 5f       	subi	r25, 0xFF	; 255
 aa2:	90 93 7c 01 	sts	0x017C, r25
 aa6:	83 30       	cpi	r24, 0x03	; 3
 aa8:	09 f1       	breq	.+66     	; 0xaec <__stack+0x1ed>
 aaa:	2c f4       	brge	.+10     	; 0xab6 <__stack+0x1b7>
 aac:	88 23       	and	r24, r24
 aae:	99 f0       	breq	.+38     	; 0xad6 <__stack+0x1d7>
 ab0:	81 30       	cpi	r24, 0x01	; 1
 ab2:	f9 f4       	brne	.+62     	; 0xaf2 <__stack+0x1f3>
 ab4:	15 c0       	rjmp	.+42     	; 0xae0 <__stack+0x1e1>
 ab6:	8b 30       	cpi	r24, 0x0B	; 11
 ab8:	19 f0       	breq	.+6      	; 0xac0 <__stack+0x1c1>
 aba:	8c 30       	cpi	r24, 0x0C	; 12
 abc:	d1 f4       	brne	.+52     	; 0xaf2 <__stack+0x1f3>
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <__stack+0x1c5>
				case TXSYN1: out = 0x2D; break;
 ac0:	8d e2       	ldi	r24, 0x2D	; 45
 ac2:	18 c0       	rjmp	.+48     	; 0xaf4 <__stack+0x1f5>
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
 ac4:	80 91 7e 01 	lds	r24, 0x017E
 ac8:	20 91 2e 01 	lds	r18, 0x012E
 acc:	9e ef       	ldi	r25, 0xFE	; 254
 ace:	92 1b       	sub	r25, r18
 ad0:	90 93 7c 01 	sts	0x017C, r25
 ad4:	0f c0       	rjmp	.+30     	; 0xaf4 <__stack+0x1f5>
				case TXCRC1: out = rf12_crc; break;
 ad6:	80 91 73 01 	lds	r24, 0x0173
 ada:	90 91 74 01 	lds	r25, 0x0174
 ade:	0a c0       	rjmp	.+20     	; 0xaf4 <__stack+0x1f5>
				case TXCRC2: out = rf12_crc >> 8; break;
 ae0:	80 91 73 01 	lds	r24, 0x0173
 ae4:	90 91 74 01 	lds	r25, 0x0174
 ae8:	89 2f       	mov	r24, r25
 aea:	04 c0       	rjmp	.+8      	; 0xaf4 <__stack+0x1f5>
				case TXDONE: rf12_idle(); // fall through
 aec:	72 dc       	rcall	.-1820   	; 0x3d2 <_ZL9rf12_idlev>
				default:     out = 0xAA;
 aee:	8a ea       	ldi	r24, 0xAA	; 170
 af0:	01 c0       	rjmp	.+2      	; 0xaf4 <__stack+0x1f5>
 af2:	8a ea       	ldi	r24, 0xAA	; 170
			}

			rf12_xfer(RF_TXREG_WRITE | out);
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	98 6b       	ori	r25, 0xB8	; 184
 af8:	55 dc       	rcall	.-1878   	; 0x3a4 <_ZL9rf12_xferj>
		}
	}
	
	// power-on reset
	if (state & RF_POR_BIT) {
 afa:	80 91 78 01 	lds	r24, 0x0178
 afe:	90 91 79 01 	lds	r25, 0x0179
 b02:	96 ff       	sbrs	r25, 6
 b04:	03 c0       	rjmp	.+6      	; 0xb0c <__stack+0x20d>
		rxstate = POR_RECEIVED;
 b06:	86 e0       	ldi	r24, 0x06	; 6
 b08:	80 93 7c 01 	sts	0x017C, r24
	}

	// got wakeup call
	if (state & RF_WDG_BIT) {
 b0c:	80 91 78 01 	lds	r24, 0x0178
 b10:	90 91 79 01 	lds	r25, 0x0179
 b14:	94 ff       	sbrs	r25, 4
 b16:	07 c0       	rjmp	.+14     	; 0xb26 <__stack+0x227>
		rf12_setWatchdog(0);
 b18:	60 e0       	ldi	r22, 0x00	; 0
 b1a:	70 e0       	ldi	r23, 0x00	; 0
 b1c:	cb 01       	movw	r24, r22
 b1e:	89 de       	rcall	.-750    	; 0x832 <_Z16rf12_setWatchdogm>
		rf12_gotwakeup = 1;
 b20:	81 e0       	ldi	r24, 0x01	; 1
 b22:	80 93 77 01 	sts	0x0177, r24
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
 b26:	80 91 78 01 	lds	r24, 0x0178
 b2a:	90 91 79 01 	lds	r25, 0x0179
 b2e:	95 ff       	sbrs	r25, 5
 b30:	21 c0       	rjmp	.+66     	; 0xb74 <__stack+0x275>
		rf12_idle();
 b32:	4f dc       	rcall	.-1890   	; 0x3d2 <_ZL9rf12_idlev>
		rxstate = TXIDLE;
 b34:	84 e0       	ldi	r24, 0x04	; 4
 b36:	80 93 7c 01 	sts	0x017C, r24
 b3a:	1c c0       	rjmp	.+56     	; 0xb74 <__stack+0x275>
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
		// slow down to under 2.5 MHz
		#if F_CPU > 10000000
		//bitSet(SPCR, SPR0);
		SPCR |= (1 << SPR0); //  bitSet(SPCR, SPR0);
 b3c:	8c b5       	in	r24, 0x2c	; 44
 b3e:	81 60       	ori	r24, 0x01	; 1
 b40:	8c bd       	out	0x2c, r24	; 44
		#endif
		*data = rf12_byte(0x00);
 b42:	80 e0       	ldi	r24, 0x00	; 0
 b44:	29 dc       	rcall	.-1966   	; 0x398 <_ZL9rf12_byteh>
 b46:	18 2f       	mov	r17, r24
		#if F_CPU > 10000000
		//bitClear(SPCR, SPR0);
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
 b48:	8c b5       	in	r24, 0x2c	; 44
 b4a:	8e 7f       	andi	r24, 0xFE	; 254
 b4c:	8c bd       	out	0x2c, r24	; 44
 b4e:	e7 ce       	rjmp	.-562    	; 0x91e <__stack+0x1f>
	if (state & RF_FIFO_BIT) {
		
		if (rxstate == TXRECV) {  // we are receiving

			if (rxfill == 0 && group != 0)
			rf12_buf[rxfill++] = group;
 b50:	90 91 7d 01 	lds	r25, 0x017D
 b54:	e9 2f       	mov	r30, r25
 b56:	f0 e0       	ldi	r31, 0x00	; 0
 b58:	e4 5d       	subi	r30, 0xD4	; 212
 b5a:	fe 4f       	sbci	r31, 0xFE	; 254
 b5c:	80 83       	st	Z, r24
 b5e:	9f 5f       	subi	r25, 0xFF	; 255
 b60:	90 93 7d 01 	sts	0x017D, r25
 b64:	f6 ce       	rjmp	.-532    	; 0x952 <__stack+0x53>
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
 b66:	80 91 78 01 	lds	r24, 0x0178
 b6a:	90 91 79 01 	lds	r25, 0x0179
 b6e:	90 fd       	sbrc	r25, 0
 b70:	29 cf       	rjmp	.-430    	; 0x9c4 <__stack+0xc5>
 b72:	2e cf       	rjmp	.-420    	; 0x9d0 <__stack+0xd1>
		rf12_interrupt();
		//}
		
	//PORTB &= ~_BV(0); // pb0 uit
	
}
 b74:	ff 91       	pop	r31
 b76:	ef 91       	pop	r30
 b78:	df 91       	pop	r29
 b7a:	cf 91       	pop	r28
 b7c:	bf 91       	pop	r27
 b7e:	af 91       	pop	r26
 b80:	9f 91       	pop	r25
 b82:	8f 91       	pop	r24
 b84:	7f 91       	pop	r23
 b86:	6f 91       	pop	r22
 b88:	5f 91       	pop	r21
 b8a:	4f 91       	pop	r20
 b8c:	3f 91       	pop	r19
 b8e:	2f 91       	pop	r18
 b90:	1f 91       	pop	r17
 b92:	0f 90       	pop	r0
 b94:	0f be       	out	0x3f, r0	; 63
 b96:	0f 90       	pop	r0
 b98:	1f 90       	pop	r1
 b9a:	18 95       	reti

00000b9c <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
 b9c:	1f 92       	push	r1
 b9e:	0f 92       	push	r0
 ba0:	0f b6       	in	r0, 0x3f	; 63
 ba2:	0f 92       	push	r0
 ba4:	11 24       	eor	r1, r1
 ba6:	2f 93       	push	r18
 ba8:	3f 93       	push	r19
 baa:	4f 93       	push	r20
 bac:	5f 93       	push	r21
 bae:	8f 93       	push	r24
 bb0:	9f 93       	push	r25
 bb2:	ef 93       	push	r30
 bb4:	ff 93       	push	r31
 bb6:	40 91 c0 00 	lds	r20, 0x00C0
 bba:	50 91 c6 00 	lds	r21, 0x00C6
 bbe:	48 71       	andi	r20, 0x18	; 24
 bc0:	80 91 84 01 	lds	r24, 0x0184
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	01 96       	adiw	r24, 0x01	; 1
 bc8:	8f 77       	andi	r24, 0x7F	; 127
 bca:	99 27       	eor	r25, r25
 bcc:	20 91 83 01 	lds	r18, 0x0183
 bd0:	30 e0       	ldi	r19, 0x00	; 0
 bd2:	28 17       	cp	r18, r24
 bd4:	39 07       	cpc	r19, r25
 bd6:	39 f0       	breq	.+14     	; 0xbe6 <__vector_18+0x4a>
 bd8:	80 93 84 01 	sts	0x0184, r24
 bdc:	fc 01       	movw	r30, r24
 bde:	e9 57       	subi	r30, 0x79	; 121
 be0:	fe 4f       	sbci	r31, 0xFE	; 254
 be2:	50 83       	st	Z, r21
 be4:	01 c0       	rjmp	.+2      	; 0xbe8 <__vector_18+0x4c>
 be6:	42 e0       	ldi	r20, 0x02	; 2
 be8:	40 93 82 01 	sts	0x0182, r20
 bec:	ff 91       	pop	r31
 bee:	ef 91       	pop	r30
 bf0:	9f 91       	pop	r25
 bf2:	8f 91       	pop	r24
 bf4:	5f 91       	pop	r21
 bf6:	4f 91       	pop	r20
 bf8:	3f 91       	pop	r19
 bfa:	2f 91       	pop	r18
 bfc:	0f 90       	pop	r0
 bfe:	0f be       	out	0x3f, r0	; 63
 c00:	0f 90       	pop	r0
 c02:	1f 90       	pop	r1
 c04:	18 95       	reti

00000c06 <__vector_19>:
 c06:	1f 92       	push	r1
 c08:	0f 92       	push	r0
 c0a:	0f b6       	in	r0, 0x3f	; 63
 c0c:	0f 92       	push	r0
 c0e:	11 24       	eor	r1, r1
 c10:	8f 93       	push	r24
 c12:	9f 93       	push	r25
 c14:	ef 93       	push	r30
 c16:	ff 93       	push	r31
 c18:	90 91 86 01 	lds	r25, 0x0186
 c1c:	80 91 85 01 	lds	r24, 0x0185
 c20:	98 17       	cp	r25, r24
 c22:	79 f0       	breq	.+30     	; 0xc42 <__vector_19+0x3c>
 c24:	80 91 85 01 	lds	r24, 0x0185
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	01 96       	adiw	r24, 0x01	; 1
 c2c:	8f 77       	andi	r24, 0x7F	; 127
 c2e:	99 27       	eor	r25, r25
 c30:	80 93 85 01 	sts	0x0185, r24
 c34:	fc 01       	movw	r30, r24
 c36:	e9 5f       	subi	r30, 0xF9	; 249
 c38:	fd 4f       	sbci	r31, 0xFD	; 253
 c3a:	80 81       	ld	r24, Z
 c3c:	80 93 c6 00 	sts	0x00C6, r24
 c40:	05 c0       	rjmp	.+10     	; 0xc4c <__vector_19+0x46>
 c42:	e1 ec       	ldi	r30, 0xC1	; 193
 c44:	f0 e0       	ldi	r31, 0x00	; 0
 c46:	80 81       	ld	r24, Z
 c48:	8f 7d       	andi	r24, 0xDF	; 223
 c4a:	80 83       	st	Z, r24
 c4c:	ff 91       	pop	r31
 c4e:	ef 91       	pop	r30
 c50:	9f 91       	pop	r25
 c52:	8f 91       	pop	r24
 c54:	0f 90       	pop	r0
 c56:	0f be       	out	0x3f, r0	; 63
 c58:	0f 90       	pop	r0
 c5a:	1f 90       	pop	r1
 c5c:	18 95       	reti

00000c5e <uart0_init>:
 c5e:	10 92 86 01 	sts	0x0186, r1
 c62:	10 92 85 01 	sts	0x0185, r1
 c66:	10 92 84 01 	sts	0x0184, r1
 c6a:	10 92 83 01 	sts	0x0183, r1
 c6e:	99 23       	and	r25, r25
 c70:	24 f4       	brge	.+8      	; 0xc7a <uart0_init+0x1c>
 c72:	22 e0       	ldi	r18, 0x02	; 2
 c74:	20 93 c0 00 	sts	0x00C0, r18
 c78:	9f 77       	andi	r25, 0x7F	; 127
 c7a:	90 93 c5 00 	sts	0x00C5, r25
 c7e:	80 93 c4 00 	sts	0x00C4, r24
 c82:	88 e9       	ldi	r24, 0x98	; 152
 c84:	80 93 c1 00 	sts	0x00C1, r24
 c88:	86 e0       	ldi	r24, 0x06	; 6
 c8a:	80 93 c2 00 	sts	0x00C2, r24
 c8e:	08 95       	ret

00000c90 <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
 c90:	60 91 86 01 	lds	r22, 0x0186
 c94:	70 e0       	ldi	r23, 0x00	; 0
 c96:	6f 5f       	subi	r22, 0xFF	; 255
 c98:	7f 4f       	sbci	r23, 0xFF	; 255
 c9a:	6f 77       	andi	r22, 0x7F	; 127
 c9c:	77 27       	eor	r23, r23
 c9e:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
 ca0:	20 91 85 01 	lds	r18, 0x0185
 ca4:	30 e0       	ldi	r19, 0x00	; 0
 ca6:	24 17       	cp	r18, r20
 ca8:	35 07       	cpc	r19, r21
 caa:	d1 f3       	breq	.-12     	; 0xca0 <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
 cac:	fb 01       	movw	r30, r22
 cae:	e9 5f       	subi	r30, 0xF9	; 249
 cb0:	fd 4f       	sbci	r31, 0xFD	; 253
 cb2:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
 cb4:	60 93 86 01 	sts	0x0186, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
 cb8:	e1 ec       	ldi	r30, 0xC1	; 193
 cba:	f0 e0       	ldi	r31, 0x00	; 0
 cbc:	80 81       	ld	r24, Z
 cbe:	80 62       	ori	r24, 0x20	; 32
 cc0:	80 83       	st	Z, r24
 cc2:	08 95       	ret

00000cc4 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
 cc4:	cf 93       	push	r28
 cc6:	df 93       	push	r29
 cc8:	ec 01       	movw	r28, r24
	while (*s) {
 cca:	88 81       	ld	r24, Y
 ccc:	88 23       	and	r24, r24
 cce:	29 f0       	breq	.+10     	; 0xcda <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
 cd0:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
 cd2:	de df       	rcall	.-68     	; 0xc90 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
 cd4:	89 91       	ld	r24, Y+
 cd6:	81 11       	cpse	r24, r1
 cd8:	fc cf       	rjmp	.-8      	; 0xcd2 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
 cda:	df 91       	pop	r29
 cdc:	cf 91       	pop	r28
 cde:	08 95       	ret

00000ce0 <__divmodhi4>:
 ce0:	97 fb       	bst	r25, 7
 ce2:	07 2e       	mov	r0, r23
 ce4:	16 f4       	brtc	.+4      	; 0xcea <__divmodhi4+0xa>
 ce6:	00 94       	com	r0
 ce8:	06 d0       	rcall	.+12     	; 0xcf6 <__divmodhi4_neg1>
 cea:	77 fd       	sbrc	r23, 7
 cec:	08 d0       	rcall	.+16     	; 0xcfe <__divmodhi4_neg2>
 cee:	2d d0       	rcall	.+90     	; 0xd4a <__udivmodhi4>
 cf0:	07 fc       	sbrc	r0, 7
 cf2:	05 d0       	rcall	.+10     	; 0xcfe <__divmodhi4_neg2>
 cf4:	3e f4       	brtc	.+14     	; 0xd04 <__divmodhi4_exit>

00000cf6 <__divmodhi4_neg1>:
 cf6:	90 95       	com	r25
 cf8:	81 95       	neg	r24
 cfa:	9f 4f       	sbci	r25, 0xFF	; 255
 cfc:	08 95       	ret

00000cfe <__divmodhi4_neg2>:
 cfe:	70 95       	com	r23
 d00:	61 95       	neg	r22
 d02:	7f 4f       	sbci	r23, 0xFF	; 255

00000d04 <__divmodhi4_exit>:
 d04:	08 95       	ret

00000d06 <__udivmodsi4>:
 d06:	a1 e2       	ldi	r26, 0x21	; 33
 d08:	1a 2e       	mov	r1, r26
 d0a:	aa 1b       	sub	r26, r26
 d0c:	bb 1b       	sub	r27, r27
 d0e:	fd 01       	movw	r30, r26
 d10:	0d c0       	rjmp	.+26     	; 0xd2c <__udivmodsi4_ep>

00000d12 <__udivmodsi4_loop>:
 d12:	aa 1f       	adc	r26, r26
 d14:	bb 1f       	adc	r27, r27
 d16:	ee 1f       	adc	r30, r30
 d18:	ff 1f       	adc	r31, r31
 d1a:	a2 17       	cp	r26, r18
 d1c:	b3 07       	cpc	r27, r19
 d1e:	e4 07       	cpc	r30, r20
 d20:	f5 07       	cpc	r31, r21
 d22:	20 f0       	brcs	.+8      	; 0xd2c <__udivmodsi4_ep>
 d24:	a2 1b       	sub	r26, r18
 d26:	b3 0b       	sbc	r27, r19
 d28:	e4 0b       	sbc	r30, r20
 d2a:	f5 0b       	sbc	r31, r21

00000d2c <__udivmodsi4_ep>:
 d2c:	66 1f       	adc	r22, r22
 d2e:	77 1f       	adc	r23, r23
 d30:	88 1f       	adc	r24, r24
 d32:	99 1f       	adc	r25, r25
 d34:	1a 94       	dec	r1
 d36:	69 f7       	brne	.-38     	; 0xd12 <__udivmodsi4_loop>
 d38:	60 95       	com	r22
 d3a:	70 95       	com	r23
 d3c:	80 95       	com	r24
 d3e:	90 95       	com	r25
 d40:	9b 01       	movw	r18, r22
 d42:	ac 01       	movw	r20, r24
 d44:	bd 01       	movw	r22, r26
 d46:	cf 01       	movw	r24, r30
 d48:	08 95       	ret

00000d4a <__udivmodhi4>:
 d4a:	aa 1b       	sub	r26, r26
 d4c:	bb 1b       	sub	r27, r27
 d4e:	51 e1       	ldi	r21, 0x11	; 17
 d50:	07 c0       	rjmp	.+14     	; 0xd60 <__udivmodhi4_ep>

00000d52 <__udivmodhi4_loop>:
 d52:	aa 1f       	adc	r26, r26
 d54:	bb 1f       	adc	r27, r27
 d56:	a6 17       	cp	r26, r22
 d58:	b7 07       	cpc	r27, r23
 d5a:	10 f0       	brcs	.+4      	; 0xd60 <__udivmodhi4_ep>
 d5c:	a6 1b       	sub	r26, r22
 d5e:	b7 0b       	sbc	r27, r23

00000d60 <__udivmodhi4_ep>:
 d60:	88 1f       	adc	r24, r24
 d62:	99 1f       	adc	r25, r25
 d64:	5a 95       	dec	r21
 d66:	a9 f7       	brne	.-22     	; 0xd52 <__udivmodhi4_loop>
 d68:	80 95       	com	r24
 d6a:	90 95       	com	r25
 d6c:	bc 01       	movw	r22, r24
 d6e:	cd 01       	movw	r24, r26
 d70:	08 95       	ret

00000d72 <memcpy>:
 d72:	fb 01       	movw	r30, r22
 d74:	dc 01       	movw	r26, r24
 d76:	02 c0       	rjmp	.+4      	; 0xd7c <memcpy+0xa>
 d78:	01 90       	ld	r0, Z+
 d7a:	0d 92       	st	X+, r0
 d7c:	41 50       	subi	r20, 0x01	; 1
 d7e:	50 40       	sbci	r21, 0x00	; 0
 d80:	d8 f7       	brcc	.-10     	; 0xd78 <memcpy+0x6>
 d82:	08 95       	ret

00000d84 <_exit>:
 d84:	f8 94       	cli

00000d86 <__stop_program>:
 d86:	ff cf       	rjmp	.-2      	; 0xd86 <__stop_program>
