
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00001a2c  00001ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017b  0080012c  0080012c  00001aec  2**0
                  ALLOC
  3 .stab         00000e4c  00000000  00000000  00001aec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  00002938  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002c93  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003a0  00000000  00000000  00002cc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003d10  00000000  00000000  00003062  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000127f  00000000  00000000  00006d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000028c2  00000000  00000000  00007ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009bc  00000000  00000000  0000a8b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000eaa  00000000  00000000  0000b270  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000296c  00000000  00000000  0000c11a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000398  00000000  00000000  0000ea86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c3 c2       	rjmp	.+1414   	; 0x588 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__vector_1>
       8:	db c2       	rjmp	.+1462   	; 0x5c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d9 c2       	rjmp	.+1458   	; 0x5c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	d7 c2       	rjmp	.+1454   	; 0x5c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	d5 c2       	rjmp	.+1450   	; 0x5c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	d3 c2       	rjmp	.+1446   	; 0x5c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c7       	rjmp	.+3630   	; 0xe4c <__vector_7>
      1e:	00 00       	nop
      20:	cf c2       	rjmp	.+1438   	; 0x5c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	cd c2       	rjmp	.+1434   	; 0x5c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	cb c2       	rjmp	.+1430   	; 0x5c0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c9 c2       	rjmp	.+1426   	; 0x5c0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c7 c2       	rjmp	.+1422   	; 0x5c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c2       	rjmp	.+1418   	; 0x5c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	50 c3       	rjmp	.+1696   	; 0x6da <__vector_14>
      3a:	00 00       	nop
      3c:	c1 c2       	rjmp	.+1410   	; 0x5c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bf c2       	rjmp	.+1406   	; 0x5c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	bd c2       	rjmp	.+1402   	; 0x5c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <__vector_18>
      4c:	0c 94 55 0c 	jmp	0x18aa	; 0x18aa <__vector_19>
      50:	b7 c2       	rjmp	.+1390   	; 0x5c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	b5 c2       	rjmp	.+1386   	; 0x5c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	b3 c2       	rjmp	.+1382   	; 0x5c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b1 c2       	rjmp	.+1378   	; 0x5c0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	af c2       	rjmp	.+1374   	; 0x5c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	ad c2       	rjmp	.+1370   	; 0x5c0 <__bad_interrupt>
	...

00000068 <_ZL16icon_led_numbers>:
      68:	0c 0b 0a 0f 0e 0d 07 08 09 02 01 00                 ............

00000074 <_ZL22sound_pattern_doorbell>:
      74:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      84:	b0 04 00 00 f4 01 00 00 00 00 00 00 e8 03 00 00     ................
      94:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      a4:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000000b4 <_ZL19sound_pattern_phone>:
      b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     104:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     114:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     124:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     134:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     144:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     154:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     164:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     174:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     184:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     194:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     1a4:	00 00 00 00 e8 03 00 00 e8 03 00 00 28 00 00 00     ............(...
     1b4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1c4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1d4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1e4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1f4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     204:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     214:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     224:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     234:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     244:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     254:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     264:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     274:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     284:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     294:	ee 02 00 00 28 00 00 00 00 00 00 00 e8 03 00 00     ....(...........
     2a4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     304:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     314:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     324:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     334:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     344:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     354:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     364:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     374:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     384:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     394:	00 00 00 00 e8 03 00 00 00 00 00 00 00 00 00 00     ................
	...

000003b4 <_ZL18sound_pattern_fire>:
     3b4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3c4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3d4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3e4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3f4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     404:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     414:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     424:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...

00000434 <_ZL18sound_pattern_help>:
     434:	bf 04 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     444:	1c 07 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     454:	bf 04 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     464:	1c 07 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     474:	00 00 00 00 e8 03 00 00                             ........

0000047c <_ZL13flash_pattern>:
     47c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     48c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     49c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4ac:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4bc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4cc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4dc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4ec:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4fc:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     50c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     51c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     52c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     53c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     54c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     55c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     56c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...

0000057c <_ZL11icon_colors>:
     57c:	3d f5 00 00 b8 f5 ff 00 00 ff ff 00                 =...........

00000588 <__ctors_end>:
     588:	11 24       	eor	r1, r1
     58a:	1f be       	out	0x3f, r1	; 63
     58c:	cf ef       	ldi	r28, 0xFF	; 255
     58e:	d8 e0       	ldi	r29, 0x08	; 8
     590:	de bf       	out	0x3e, r29	; 62
     592:	cd bf       	out	0x3d, r28	; 61

00000594 <__do_copy_data>:
     594:	11 e0       	ldi	r17, 0x01	; 1
     596:	a0 e0       	ldi	r26, 0x00	; 0
     598:	b1 e0       	ldi	r27, 0x01	; 1
     59a:	ec e2       	ldi	r30, 0x2C	; 44
     59c:	fa e1       	ldi	r31, 0x1A	; 26
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__do_copy_data+0x10>
     5a0:	05 90       	lpm	r0, Z+
     5a2:	0d 92       	st	X+, r0
     5a4:	ac 32       	cpi	r26, 0x2C	; 44
     5a6:	b1 07       	cpc	r27, r17
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <__do_copy_data+0xc>

000005aa <__do_clear_bss>:
     5aa:	22 e0       	ldi	r18, 0x02	; 2
     5ac:	ac e2       	ldi	r26, 0x2C	; 44
     5ae:	b1 e0       	ldi	r27, 0x01	; 1
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <.do_clear_bss_start>

000005b2 <.do_clear_bss_loop>:
     5b2:	1d 92       	st	X+, r1

000005b4 <.do_clear_bss_start>:
     5b4:	a7 3a       	cpi	r26, 0xA7	; 167
     5b6:	b2 07       	cpc	r27, r18
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <.do_clear_bss_loop>
     5ba:	b4 d0       	rcall	.+360    	; 0x724 <main>
     5bc:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <_exit>

000005c0 <__bad_interrupt>:
     5c0:	1f cd       	rjmp	.-1474   	; 0x0 <__vectors>

000005c2 <I2C_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
     5c2:	88 e4       	ldi	r24, 0x48	; 72
     5c4:	80 93 b8 00 	sts	0x00B8, r24
     5c8:	08 95       	ret

000005ca <I2C_start>:
     5ca:	ec eb       	ldi	r30, 0xBC	; 188
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	10 82       	st	Z, r1
     5d0:	94 ea       	ldi	r25, 0xA4	; 164
     5d2:	90 83       	st	Z, r25
     5d4:	90 81       	ld	r25, Z
     5d6:	99 23       	and	r25, r25
     5d8:	ec f7       	brge	.-6      	; 0x5d4 <I2C_start+0xa>
     5da:	90 91 b9 00 	lds	r25, 0x00B9
     5de:	98 7f       	andi	r25, 0xF8	; 248
     5e0:	98 30       	cpi	r25, 0x08	; 8
     5e2:	a1 f4       	brne	.+40     	; 0x60c <I2C_start+0x42>
     5e4:	80 93 bb 00 	sts	0x00BB, r24
     5e8:	84 e8       	ldi	r24, 0x84	; 132
     5ea:	80 93 bc 00 	sts	0x00BC, r24
     5ee:	ec eb       	ldi	r30, 0xBC	; 188
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	88 23       	and	r24, r24
     5f6:	ec f7       	brge	.-6      	; 0x5f2 <I2C_start+0x28>
     5f8:	90 91 b9 00 	lds	r25, 0x00B9
     5fc:	98 7f       	andi	r25, 0xF8	; 248
     5fe:	98 31       	cpi	r25, 0x18	; 24
     600:	39 f0       	breq	.+14     	; 0x610 <I2C_start+0x46>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 34       	cpi	r25, 0x40	; 64
     606:	29 f4       	brne	.+10     	; 0x612 <I2C_start+0x48>
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	08 95       	ret
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	08 95       	ret
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	08 95       	ret

00000614 <I2C_write>:
     614:	80 93 bb 00 	sts	0x00BB, r24
     618:	84 e8       	ldi	r24, 0x84	; 132
     61a:	80 93 bc 00 	sts	0x00BC, r24
     61e:	ec eb       	ldi	r30, 0xBC	; 188
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	88 23       	and	r24, r24
     626:	ec f7       	brge	.-6      	; 0x622 <I2C_write+0xe>
     628:	90 91 b9 00 	lds	r25, 0x00B9
     62c:	98 7f       	andi	r25, 0xF8	; 248
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	98 32       	cpi	r25, 0x28	; 40
     632:	09 f4       	brne	.+2      	; 0x636 <I2C_write+0x22>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	08 95       	ret

00000638 <I2C_read_ack>:
     638:	84 ec       	ldi	r24, 0xC4	; 196
     63a:	80 93 bc 00 	sts	0x00BC, r24
     63e:	ec eb       	ldi	r30, 0xBC	; 188
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	88 23       	and	r24, r24
     646:	ec f7       	brge	.-6      	; 0x642 <I2C_read_ack+0xa>
     648:	80 91 bb 00 	lds	r24, 0x00BB
     64c:	08 95       	ret

0000064e <I2C_stop>:

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     64e:	84 e9       	ldi	r24, 0x94	; 148
     650:	80 93 bc 00 	sts	0x00BC, r24
     654:	08 95       	ret

00000656 <log_s>:
 *
 * @param s The specified string
 */
void log_s(const char *s) {
#ifdef LOG_AVAILABLE
    uart0_puts(s);
     656:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <uart0_puts>
     65a:	08 95       	ret

0000065c <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	84 bd       	out	0x24, r24	; 36
     660:	93 e0       	ldi	r25, 0x03	; 3
     662:	95 bd       	out	0x25, r25	; 37
     664:	80 93 6e 00 	sts	0x006E, r24
     668:	8a ef       	ldi	r24, 0xFA	; 250
     66a:	87 bd       	out	0x27, r24	; 39
     66c:	08 95       	ret

0000066e <millis_get>:
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	8f b7       	in	r24, 0x3f	; 63
     674:	f8 94       	cli
     676:	00 91 2c 01 	lds	r16, 0x012C
     67a:	10 91 2d 01 	lds	r17, 0x012D
     67e:	20 91 2e 01 	lds	r18, 0x012E
     682:	30 91 2f 01 	lds	r19, 0x012F
     686:	8f bf       	out	0x3f, r24	; 63
     688:	60 2f       	mov	r22, r16
     68a:	71 2f       	mov	r23, r17
     68c:	82 2f       	mov	r24, r18
     68e:	93 2f       	mov	r25, r19
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	08 95       	ret

00000696 <millis_resume>:
     696:	e4 e6       	ldi	r30, 0x64	; 100
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	8f 7d       	andi	r24, 0xDF	; 223
     69e:	80 83       	st	Z, r24
     6a0:	ee e6       	ldi	r30, 0x6E	; 110
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	82 60       	ori	r24, 0x02	; 2
     6a8:	80 83       	st	Z, r24
     6aa:	08 95       	ret

000006ac <millis_pause>:
     6ac:	ee e6       	ldi	r30, 0x6E	; 110
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 81       	ld	r24, Z
     6b2:	8d 7f       	andi	r24, 0xFD	; 253
     6b4:	80 83       	st	Z, r24
     6b6:	e4 e6       	ldi	r30, 0x64	; 100
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	80 81       	ld	r24, Z
     6bc:	80 62       	ori	r24, 0x20	; 32
     6be:	80 83       	st	Z, r24
     6c0:	08 95       	ret

000006c2 <millis_reset>:
     6c2:	8f b7       	in	r24, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	10 92 2c 01 	sts	0x012C, r1
     6ca:	10 92 2d 01 	sts	0x012D, r1
     6ce:	10 92 2e 01 	sts	0x012E, r1
     6d2:	10 92 2f 01 	sts	0x012F, r1
     6d6:	8f bf       	out	0x3f, r24	; 63
     6d8:	08 95       	ret

000006da <__vector_14>:

ISR(ISR_VECT)
{
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	8f 93       	push	r24
     6e6:	9f 93       	push	r25
     6e8:	af 93       	push	r26
     6ea:	bf 93       	push	r27
	++milliseconds;
     6ec:	80 91 2c 01 	lds	r24, 0x012C
     6f0:	90 91 2d 01 	lds	r25, 0x012D
     6f4:	a0 91 2e 01 	lds	r26, 0x012E
     6f8:	b0 91 2f 01 	lds	r27, 0x012F
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	a1 1d       	adc	r26, r1
     700:	b1 1d       	adc	r27, r1
     702:	80 93 2c 01 	sts	0x012C, r24
     706:	90 93 2d 01 	sts	0x012D, r25
     70a:	a0 93 2e 01 	sts	0x012E, r26
     70e:	b0 93 2f 01 	sts	0x012F, r27
}
     712:	bf 91       	pop	r27
     714:	af 91       	pop	r26
     716:	9f 91       	pop	r25
     718:	8f 91       	pop	r24
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <main>:



			 
	
int main() {	
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	00 d0       	rcall	.+0      	; 0x72a <main+0x6>
     72a:	00 d0       	rcall	.+0      	; 0x72c <main+0x8>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62

DDRB |= _BV(0); // pb0 output
     730:	20 9a       	sbi	0x04, 0	; 4
PORTB |= _BV(0); // pb0 aan
     732:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     734:	2f ef       	ldi	r18, 0xFF	; 255
     736:	89 e6       	ldi	r24, 0x69	; 105
     738:	98 e1       	ldi	r25, 0x18	; 24
     73a:	21 50       	subi	r18, 0x01	; 1
     73c:	80 40       	sbci	r24, 0x00	; 0
     73e:	90 40       	sbci	r25, 0x00	; 0
     740:	e1 f7       	brne	.-8      	; 0x73a <main+0x16>
     742:	00 c0       	rjmp	.+0      	; 0x744 <main+0x20>
     744:	00 00       	nop
_delay_ms(500);
 PORTB &= ~_BV(0); // pb0 uit
     746:	28 98       	cbi	0x05, 0	; 5



// disable ADC for less power 
	ADCSRA &= ~_BV(ADEN); // ADC off 
     748:	ea e7       	ldi	r30, 0x7A	; 122
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	8f 77       	andi	r24, 0x7F	; 127
     750:	80 83       	st	Z, r24
	sei();
     752:	78 94       	sei
			/* Initialize MILLIS */
	        millis_init();
     754:	83 df       	rcall	.-250    	; 0x65c <millis_init>
     756:	ef ef       	ldi	r30, 0xFF	; 255
     758:	fb e7       	ldi	r31, 0x7B	; 123
     75a:	22 e9       	ldi	r18, 0x92	; 146
     75c:	e1 50       	subi	r30, 0x01	; 1
     75e:	f0 40       	sbci	r31, 0x00	; 0
     760:	20 40       	sbci	r18, 0x00	; 0
     762:	e1 f7       	brne	.-8      	; 0x75c <main+0x38>
     764:	00 c0       	rjmp	.+0      	; 0x766 <main+0x42>
     766:	00 00       	nop
			_delay_ms(3000);
			/* Initialize MILLIS */

			/* Initialize TONE */						
			tone_init();		
     768:	fc d7       	rcall	.+4088   	; 0x1762 <tone_init>
			/* Initialize TONE */						
						
			/* Initialize TIMER 2 */
			// Timer settings
			TCCR2A = _BV(WGM21); // prescaler 128
     76a:	82 e0       	ldi	r24, 0x02	; 2
     76c:	80 93 b0 00 	sts	0x00B0, r24
			TCCR2B = _BV(CS22)|_BV(CS20);
     770:	85 e0       	ldi	r24, 0x05	; 5
     772:	80 93 b1 00 	sts	0x00B1, r24
							 	
			// TIMSK2 = _BV(OCIE2A); // DO NOT ENABLE TIMER2 BY DEFAULT!
			OCR2A = ((F_CPU / 128) / 1000);
     776:	8d e7       	ldi	r24, 0x7D	; 125
     778:	80 93 b3 00 	sts	0x00B3, r24
			power_timer2_disable(); // power timer2 down!
     77c:	e4 e6       	ldi	r30, 0x64	; 100
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	80 81       	ld	r24, Z
     782:	80 64       	ori	r24, 0x40	; 64
     784:	80 83       	st	Z, r24
			/* Initialize TIMER 2 */			
			

			/* Initialize UART */
			uart_init( ((F_CPU)/((UART_BAUD_RATE)*16l)-1)) ;
     786:	80 e1       	ldi	r24, 0x10	; 16
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 81 0c 	call	0x1902	; 0x1902 <uart0_init>
     78e:	8f ef       	ldi	r24, 0xFF	; 255
     790:	93 ed       	ldi	r25, 0xD3	; 211
     792:	e0 e3       	ldi	r30, 0x30	; 48
     794:	81 50       	subi	r24, 0x01	; 1
     796:	90 40       	sbci	r25, 0x00	; 0
     798:	e0 40       	sbci	r30, 0x00	; 0
     79a:	e1 f7       	brne	.-8      	; 0x794 <main+0x70>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <main+0x7a>
     79e:	00 00       	nop
			//uart0_puts("kak");
			_delay_ms(1000);
			/* Initialize UART */
		
			/* Initialize I2C */
			I2C_init();	
     7a0:	10 df       	rcall	.-480    	; 0x5c2 <I2C_init>
			/* Initialize I2C */
			
			/* Initialize PCA9634 */
			pca9635_init();
     7a2:	cc d3       	rcall	.+1944   	; 0xf3c <pca9635_init>
			pca9635_set_all_led_pwm(255);
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	10 d4       	rcall	.+2080   	; 0xfc8 <pca9635_set_all_led_pwm>
     7a8:	ff ef       	ldi	r31, 0xFF	; 255
     7aa:	23 ed       	ldi	r18, 0xD3	; 211
     7ac:	80 e3       	ldi	r24, 0x30	; 48
     7ae:	f1 50       	subi	r31, 0x01	; 1
     7b0:	20 40       	sbci	r18, 0x00	; 0
     7b2:	80 40       	sbci	r24, 0x00	; 0
     7b4:	e1 f7       	brne	.-8      	; 0x7ae <main+0x8a>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <main+0x94>
     7b8:	00 00       	nop
			_delay_ms(1000);
			pca9635_set_all_led_pwm(0);
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	05 d4       	rcall	.+2058   	; 0xfc8 <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1);
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	13 d4       	rcall	.+2086   	; 0xfe8 <pca9635_set_sleep>
     7c2:	9f ef       	ldi	r25, 0xFF	; 255
     7c4:	e3 ed       	ldi	r30, 0xD3	; 211
     7c6:	f0 e3       	ldi	r31, 0x30	; 48
     7c8:	91 50       	subi	r25, 0x01	; 1
     7ca:	e0 40       	sbci	r30, 0x00	; 0
     7cc:	f0 40       	sbci	r31, 0x00	; 0
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <main+0xa4>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <main+0xae>
     7d2:	00 00       	nop
		//	log_s("PCA ok");
			_delay_ms(1000);
			
			
  // node id, rfband, group id
			rf12_initialize(2, RF12_868MHZ, 14);
     7d4:	4e e0       	ldi	r20, 0x0E	; 14
     7d6:	62 e0       	ldi	r22, 0x02	; 2
     7d8:	82 e0       	ldi	r24, 0x02	; 2
     7da:	90 d7       	rcall	.+3872   	; 0x16fc <_Z15rf12_initializehhh>
    // see http://tools.jeelabs.org/rfm12b
  //  rf12_control(0xC040); // set low-battery level to 2.2V i.s.o. 3.1V


			deep_sleep_ok = 1; // put device in deep sleep after initializing
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	80 93 46 01 	sts	0x0146, r24

log_s("initialized!");
     7e2:	8e e0       	ldi	r24, 0x0E	; 14
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	37 df       	rcall	.-402    	; 0x656 <log_s>
     7e8:	2f ef       	ldi	r18, 0xFF	; 255
     7ea:	83 ed       	ldi	r24, 0xD3	; 211
     7ec:	90 e3       	ldi	r25, 0x30	; 48
     7ee:	21 50       	subi	r18, 0x01	; 1
     7f0:	80 40       	sbci	r24, 0x00	; 0
     7f2:	90 40       	sbci	r25, 0x00	; 0
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <main+0xca>
     7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <main+0xd4>
     7f8:	00 00       	nop
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
						
			if (RF12_WANTS_ACK) {
     7fa:	0f 2e       	mov	r0, r31
     7fc:	fe e4       	ldi	r31, 0x4E	; 78
     7fe:	ef 2e       	mov	r14, r31
     800:	f1 e0       	ldi	r31, 0x01	; 1
     802:	ff 2e       	mov	r15, r31
     804:	f0 2d       	mov	r31, r0
		//		}
				
				
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[0]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     806:	0f 2e       	mov	r0, r31
     808:	f0 e5       	ldi	r31, 0x50	; 80
     80a:	af 2e       	mov	r10, r31
     80c:	f1 e0       	ldi	r31, 0x01	; 1
     80e:	bf 2e       	mov	r11, r31
     810:	f0 2d       	mov	r31, r0
							pca9635_set_sleep(0);
						//	pca9635_set_led_mode(2);
							
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     812:	61 2c       	mov	r6, r1
     814:	71 2c       	mov	r7, r1
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     816:	69 82       	std	Y+1, r6	; 0x01
     818:	7a 82       	std	Y+2, r7	; 0x02
							// 2. timer 0 - millis starten
							millis_reset();
							millis_resume();
				 
							// 3. timer 2 - alarm timer starten
							power_timer2_enable();
     81a:	0f 2e       	mov	r0, r31
     81c:	f4 e6       	ldi	r31, 0x64	; 100
     81e:	4f 2e       	mov	r4, r31
     820:	51 2c       	mov	r5, r1
     822:	f0 2d       	mov	r31, r0
							// Geen alarm actief

							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     824:	22 24       	eor	r2, r2
     826:	23 94       	inc	r2

	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
     828:	90 d5       	rcall	.+2848   	; 0x134a <_Z13rf12_recvDonev>
     82a:	88 23       	and	r24, r24
     82c:	09 f4       	brne	.+2      	; 0x830 <main+0x10c>
     82e:	d7 c0       	rjmp	.+430    	; 0x9de <__stack+0xdf>
     830:	80 91 94 01 	lds	r24, 0x0194
     834:	90 91 95 01 	lds	r25, 0x0195
     838:	89 2b       	or	r24, r25
     83a:	09 f4       	brne	.+2      	; 0x83e <main+0x11a>
     83c:	d5 c0       	rjmp	.+426    	; 0x9e8 <__stack+0xe9>
     83e:	cf c0       	rjmp	.+414    	; 0x9de <__stack+0xdf>
		// process incoming data here
						
			if (RF12_WANTS_ACK) {
     840:	f7 01       	movw	r30, r14
     842:	80 81       	ld	r24, Z
     844:	88 23       	and	r24, r24
     846:	0c f0       	brlt	.+2      	; 0x84a <main+0x126>
     848:	d4 c0       	rjmp	.+424    	; 0x9f2 <__stack+0xf3>
     84a:	09 c0       	rjmp	.+18     	; 0x85e <main+0x13a>
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     84c:	f7 01       	movw	r30, r14
     84e:	80 81       	ld	r24, Z
     850:	8f 71       	andi	r24, 0x1F	; 31
     852:	80 6c       	ori	r24, 0xC0	; 192
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	b3 01       	movw	r22, r6
     858:	ce d6       	rcall	.+3484   	; 0x15f6 <_Z14rf12_sendStarthPKvh>
				rf12_sendWait(1); // don't power down too soon
     85a:	82 2d       	mov	r24, r2
     85c:	da d6       	rcall	.+3508   	; 0x1612 <_Z13rf12_sendWaith>
			//	uart0_puts("ACK-OK");
				//_delay_ms(10);
			}
			
			
		uart0_puts("DATA");
     85e:	8b e1       	ldi	r24, 0x1B	; 27
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	0e 94 b4 0c 	call	0x1968	; 0x1968 <uart0_puts>
     866:	8f e3       	ldi	r24, 0x3F	; 63
     868:	9c e9       	ldi	r25, 0x9C	; 156
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <main+0x146>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <main+0x14c>
     870:	00 00       	nop
		//		}
				
				
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[0]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     872:	f5 01       	movw	r30, r10
     874:	30 80       	ld	r3, Z
				uart0_putc(data);
     876:	83 2d       	mov	r24, r3
     878:	0e 94 9a 0c 	call	0x1934	; 0x1934 <uart0_putc>
     87c:	8f e3       	ldi	r24, 0x3F	; 63
     87e:	9c e9       	ldi	r25, 0x9C	; 156
     880:	01 97       	sbiw	r24, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <main+0x15c>
     884:	00 c0       	rjmp	.+0      	; 0x886 <main+0x162>
     886:	00 00       	nop
				_delay_ms(10);
				 if(data & 0x10){
     888:	13 2d       	mov	r17, r3
     88a:	10 71       	andi	r17, 0x10	; 16
     88c:	34 fe       	sbrs	r3, 4
     88e:	06 c0       	rjmp	.+12     	; 0x89c <main+0x178>
					 // start alarm	 
					// uart0_puts("START");
					 active_alarm = active_alarm | data; // 00001111 
     890:	80 91 45 01 	lds	r24, 0x0145
     894:	83 29       	or	r24, r3
     896:	80 93 45 01 	sts	0x0145, r24
     89a:	07 c0       	rjmp	.+14     	; 0x8aa <main+0x186>
				 }else{
					 // stop alarm
					//  uart0_puts("STOP");
					 active_alarm =  active_alarm & (~data); /* invert data, compare with active alarm array to clear the right alarm bit */		 
     89c:	83 2d       	mov	r24, r3
     89e:	80 95       	com	r24
     8a0:	90 91 45 01 	lds	r25, 0x0145
     8a4:	89 23       	and	r24, r25
     8a6:	80 93 45 01 	sts	0x0145, r24
				 }
				 
				////////////////		Fill alarm array		 ////////////////				 
				
			 // IS ER EEN ALARM ACTIEF in array active_alarm?
				 if(active_alarm & 0x0F){
     8aa:	20 91 45 01 	lds	r18, 0x0145
     8ae:	82 2f       	mov	r24, r18
     8b0:	8f 70       	andi	r24, 0x0F	; 15
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <main+0x192>
     8b4:	7b c0       	rjmp	.+246    	; 0x9ac <__stack+0xad>
			  	
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
     8b6:	80 91 41 01 	lds	r24, 0x0141
     8ba:	90 91 42 01 	lds	r25, 0x0142
     8be:	a0 91 43 01 	lds	r26, 0x0143
     8c2:	b0 91 44 01 	lds	r27, 0x0144
     8c6:	89 2b       	or	r24, r25
     8c8:	8a 2b       	or	r24, r26
     8ca:	8b 2b       	or	r24, r27
     8cc:	31 f5       	brne	.+76     	; 0x91a <__stack+0x1b>
							// Geen alarm actief

							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
     8ce:	10 92 46 01 	sts	0x0146, r1
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     8d2:	23 fd       	sbrc	r18, 3
     8d4:	0c c0       	rjmp	.+24     	; 0x8ee <main+0x1ca>
     8d6:	22 fd       	sbrc	r18, 2
     8d8:	06 c0       	rjmp	.+12     	; 0x8e6 <main+0x1c2>
     8da:	21 fd       	sbrc	r18, 1
     8dc:	06 c0       	rjmp	.+12     	; 0x8ea <main+0x1c6>
     8de:	20 ff       	sbrs	r18, 0
     8e0:	0b c0       	rjmp	.+22     	; 0x8f8 <main+0x1d4>
     8e2:	83 e0       	ldi	r24, 0x03	; 3
     8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <main+0x1cc>
							// Geen alarm actief

							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     8e6:	82 2d       	mov	r24, r2
     8e8:	03 c0       	rjmp	.+6      	; 0x8f0 <main+0x1cc>
     8ea:	82 e0       	ldi	r24, 0x02	; 2
     8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <main+0x1cc>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
									sound_current_alarm = i;
     8f0:	80 93 40 01 	sts	0x0140, r24
									icon_current_alarm  = i;
     8f4:	80 93 35 01 	sts	0x0135, r24
									break;
								} 
							 }

							// 2. timer 0 - millis starten
							millis_reset();
     8f8:	e4 de       	rcall	.-568    	; 0x6c2 <millis_reset>
							millis_resume();
     8fa:	cd de       	rcall	.-614    	; 0x696 <millis_resume>
				 
							// 3. timer 2 - alarm timer starten
							power_timer2_enable();
     8fc:	f2 01       	movw	r30, r4
     8fe:	80 81       	ld	r24, Z
     900:	8f 7b       	andi	r24, 0xBF	; 191
     902:	80 83       	st	Z, r24
							TIMSK2 |= _BV(OCIE2A);
     904:	e0 e7       	ldi	r30, 0x70	; 112
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	80 81       	ld	r24, Z
     90a:	82 60       	ori	r24, 0x02	; 2
     90c:	80 83       	st	Z, r24
			 
							// wake up pca9635!
							pca9635_set_sleep(0);
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	6b d3       	rcall	.+1750   	; 0xfe8 <pca9635_set_sleep>
						 } //  if(active_alarm_time == 0) {
				 

				 		// Only reset active alarm timer if there is a new alarm...
						// 0x10 = activate bit 0x0F are bits of the alarms
						if( (data & 0x10) && (data & 0x0F)){
     912:	11 23       	and	r17, r17
     914:	09 f4       	brne	.+2      	; 0x918 <__stack+0x19>
     916:	88 cf       	rjmp	.-240    	; 0x828 <main+0x104>
     918:	2d c0       	rjmp	.+90     	; 0x974 <__stack+0x75>
							pca9635_set_sleep(0);
						//	pca9635_set_led_mode(2);
							
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     91a:	11 11       	cpse	r17, r1
     91c:	2b c0       	rjmp	.+86     	; 0x974 <__stack+0x75>
     91e:	0f 2e       	mov	r0, r31
     920:	f0 e2       	ldi	r31, 0x20	; 32
     922:	cf 2e       	mov	r12, r31
     924:	f1 e0       	ldi	r31, 0x01	; 1
     926:	df 2e       	mov	r13, r31
     928:	f0 2d       	mov	r31, r0
     92a:	83 01       	movw	r16, r6
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     92c:	f6 01       	movw	r30, r12
     92e:	21 91       	ld	r18, Z+
     930:	6f 01       	movw	r12, r30
     932:	23 21       	and	r18, r3
     934:	c9 f0       	breq	.+50     	; 0x968 <__stack+0x69>
     936:	f9 81       	ldd	r31, Y+1	; 0x01
     938:	fb 83       	std	Y+3, r31	; 0x03
     93a:	2a 81       	ldd	r18, Y+2	; 0x02
     93c:	2c 83       	std	Y+4, r18	; 0x04
											for (byte j = 0; j <= 2; j++){
												pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[i].lednr[j])), 0); // leds off!
     93e:	48 01       	movw	r8, r16
     940:	88 0c       	add	r8, r8
     942:	99 1c       	adc	r9, r9
     944:	80 0e       	add	r8, r16
     946:	91 1e       	adc	r9, r17
     948:	eb 81       	ldd	r30, Y+3	; 0x03
     94a:	fc 81       	ldd	r31, Y+4	; 0x04
     94c:	e8 0d       	add	r30, r8
     94e:	f9 1d       	adc	r31, r9
     950:	e8 59       	subi	r30, 0x98	; 152
     952:	ff 4f       	sbci	r31, 0xFF	; 255
     954:	84 91       	lpm	r24, Z
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	26 d3       	rcall	.+1612   	; 0xfa6 <pca9635_set_led_pwm>
     95a:	8b 81       	ldd	r24, Y+3	; 0x03
     95c:	9c 81       	ldd	r25, Y+4	; 0x04
     95e:	01 96       	adiw	r24, 0x01	; 1
     960:	9c 83       	std	Y+4, r25	; 0x04
     962:	8b 83       	std	Y+3, r24	; 0x03
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
											for (byte j = 0; j <= 2; j++){
     964:	03 97       	sbiw	r24, 0x03	; 3
     966:	81 f7       	brne	.-32     	; 0x948 <__stack+0x49>
     968:	0f 5f       	subi	r16, 0xFF	; 255
     96a:	1f 4f       	sbci	r17, 0xFF	; 255
							
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
     96c:	04 30       	cpi	r16, 0x04	; 4
     96e:	11 05       	cpc	r17, r1
     970:	e9 f6       	brne	.-70     	; 0x92c <__stack+0x2d>
     972:	5a cf       	rjmp	.-332    	; 0x828 <main+0x104>
						 } //  if(active_alarm_time == 0) {
				 

				 		// Only reset active alarm timer if there is a new alarm...
						// 0x10 = activate bit 0x0F are bits of the alarms
						if( (data & 0x10) && (data & 0x0F)){
     974:	83 2d       	mov	r24, r3
     976:	8f 70       	andi	r24, 0x0F	; 15
     978:	09 f4       	brne	.+2      	; 0x97c <__stack+0x7d>
     97a:	56 cf       	rjmp	.-340    	; 0x828 <main+0x104>
				 			active_alarm_time = millis_get() + alarm_duration; 		 
     97c:	78 de       	rcall	.-784    	; 0x66e <millis_get>
     97e:	00 91 00 01 	lds	r16, 0x0100
     982:	10 91 01 01 	lds	r17, 0x0101
     986:	20 91 02 01 	lds	r18, 0x0102
     98a:	30 91 03 01 	lds	r19, 0x0103
     98e:	dc 01       	movw	r26, r24
     990:	cb 01       	movw	r24, r22
     992:	80 0f       	add	r24, r16
     994:	91 1f       	adc	r25, r17
     996:	a2 1f       	adc	r26, r18
     998:	b3 1f       	adc	r27, r19
     99a:	80 93 41 01 	sts	0x0141, r24
     99e:	90 93 42 01 	sts	0x0142, r25
     9a2:	a0 93 43 01 	sts	0x0143, r26
     9a6:	b0 93 44 01 	sts	0x0144, r27
     9aa:	3e cf       	rjmp	.-388    	; 0x828 <main+0x104>
						 }

				}else{ //  if(active_alarm & 0x0F){ // IS ER EEN ALARM ACTIEF in active_alarm?
						// no active alarm in array
												
						active_alarm_time = 0; // set alarm time to zero, timers will be disabled in next timer 2 interrupt
     9ac:	10 92 41 01 	sts	0x0141, r1
     9b0:	10 92 42 01 	sts	0x0142, r1
     9b4:	10 92 43 01 	sts	0x0143, r1
     9b8:	10 92 44 01 	sts	0x0144, r1
     9bc:	35 cf       	rjmp	.-406    	; 0x828 <main+0x104>
	} else {
		
		// switch into idle mode until the next interrupt - Choose our preferred sleep mode:
		if(deep_sleep_ok == 1){
		//	set_sleep_mode(SLEEP_MODE_STANDBY); // if active alarm, go in pwr save mode to keep timer 2 running
			set_sleep_mode(SLEEP_MODE_PWR_DOWN); // if active alarm, go in pwr save mode to keep timer 2 running
     9be:	83 b7       	in	r24, 0x33	; 51
     9c0:	81 7f       	andi	r24, 0xF1	; 241
     9c2:	84 60       	ori	r24, 0x04	; 4
     9c4:	83 bf       	out	0x33, r24	; 51
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <__stack+0xcf>
		}else{
			set_sleep_mode(SLEEP_MODE_IDLE);
     9c8:	83 b7       	in	r24, 0x33	; 51
     9ca:	81 7f       	andi	r24, 0xF1	; 241
     9cc:	83 bf       	out	0x33, r24	; 51
		}
  //   _delay_ms(15);
	
    // Set sleep enable (SE) bit:
    sleep_enable();
     9ce:	83 b7       	in	r24, 0x33	; 51
     9d0:	81 60       	ori	r24, 0x01	; 1
     9d2:	83 bf       	out	0x33, r24	; 51
    
    // Put the device to sleep:
    sleep_cpu();
     9d4:	88 95       	sleep
	
	// Clear sleep enable (SE) bit:
	sleep_disable();
     9d6:	83 b7       	in	r24, 0x33	; 51
     9d8:	8e 7f       	andi	r24, 0xFE	; 254
     9da:	83 bf       	out	0x33, r24	; 51
     9dc:	25 cf       	rjmp	.-438    	; 0x828 <main+0x104>
					 
									
	} else {
		
		// switch into idle mode until the next interrupt - Choose our preferred sleep mode:
		if(deep_sleep_ok == 1){
     9de:	80 91 46 01 	lds	r24, 0x0146
     9e2:	81 30       	cpi	r24, 0x01	; 1
     9e4:	89 f7       	brne	.-30     	; 0x9c8 <__stack+0xc9>
     9e6:	eb cf       	rjmp	.-42     	; 0x9be <__stack+0xbf>
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
						
			if (RF12_WANTS_ACK) {
     9e8:	f7 01       	movw	r30, r14
     9ea:	80 81       	ld	r24, Z
     9ec:	85 fd       	sbrc	r24, 5
     9ee:	28 cf       	rjmp	.-432    	; 0x840 <main+0x11c>
     9f0:	36 cf       	rjmp	.-404    	; 0x85e <main+0x13a>
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     9f2:	f7 01       	movw	r30, r14
     9f4:	80 81       	ld	r24, Z
     9f6:	86 ff       	sbrs	r24, 6
     9f8:	29 cf       	rjmp	.-430    	; 0x84c <main+0x128>
     9fa:	80 e8       	ldi	r24, 0x80	; 128
     9fc:	2b cf       	rjmp	.-426    	; 0x854 <main+0x130>

000009fe <_Z9isr_soundv>:
	}
						
}


	void isr_sound(){
     9fe:	ef 92       	push	r14
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
		//	uart0_putc(sound_current_step);
		//	uart0_putc(millis_get());
		//	uart0_putc(_sound_note_time);
			// Stop note if necessary 
			if(_sound_note_time != 0){ // sound already playing?		
     a04:	80 91 3b 01 	lds	r24, 0x013B
     a08:	90 91 3c 01 	lds	r25, 0x013C
     a0c:	a0 91 3d 01 	lds	r26, 0x013D
     a10:	b0 91 3e 01 	lds	r27, 0x013E
     a14:	89 2b       	or	r24, r25
     a16:	8a 2b       	or	r24, r26
     a18:	8b 2b       	or	r24, r27
     a1a:	81 f0       	breq	.+32     	; 0xa3c <_Z9isr_soundv+0x3e>
				//	uart0_puts("GS");
				if(millis_get() < _sound_note_time ){ // Do we need to stop the current note?
     a1c:	28 de       	rcall	.-944    	; 0x66e <millis_get>
     a1e:	00 91 3b 01 	lds	r16, 0x013B
     a22:	10 91 3c 01 	lds	r17, 0x013C
     a26:	20 91 3d 01 	lds	r18, 0x013D
     a2a:	30 91 3e 01 	lds	r19, 0x013E
     a2e:	60 17       	cp	r22, r16
     a30:	71 07       	cpc	r23, r17
     a32:	82 07       	cpc	r24, r18
     a34:	93 07       	cpc	r25, r19
     a36:	08 f4       	brcc	.+2      	; 0xa3a <_Z9isr_soundv+0x3c>
     a38:	ff c0       	rjmp	.+510    	; 0xc38 <_Z9isr_soundv+0x23a>
					//uart0_puts("DS");
					return; // dont stop current note
					
				}else{
					noTone(); // stop current note
     a3a:	95 d6       	rcall	.+3370   	; 0x1766 <noTone>
			
			// play next tone
		//	uart0_puts("PN");
		//	tone(unsigned long frequency, uint8_t volume);
		//uart0_putc(sound_current_alarm);
			if(sound_current_alarm == 0 ){
     a3c:	80 91 40 01 	lds	r24, 0x0140
     a40:	81 11       	cpse	r24, r1
     a42:	32 c0       	rjmp	.+100    	; 0xaa8 <_Z9isr_soundv+0xaa>
				tone(pgm_read_word(&(sound_pattern_doorbell[sound_current_step].frequency)), 10); // freq, volume
     a44:	e0 91 3f 01 	lds	r30, 0x013F
     a48:	f0 e0       	ldi	r31, 0x00	; 0
     a4a:	ee 0f       	add	r30, r30
     a4c:	ff 1f       	adc	r31, r31
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	ee 0f       	add	r30, r30
     a54:	ff 1f       	adc	r31, r31
     a56:	ec 58       	subi	r30, 0x8C	; 140
     a58:	ff 4f       	sbci	r31, 0xFF	; 255
     a5a:	65 91       	lpm	r22, Z+
     a5c:	74 91       	lpm	r23, Z
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	e1 2c       	mov	r14, r1
     a64:	00 e0       	ldi	r16, 0x00	; 0
     a66:	10 e0       	ldi	r17, 0x00	; 0
     a68:	98 01       	movw	r18, r16
     a6a:	4a e0       	ldi	r20, 0x0A	; 10
     a6c:	84 d6       	rcall	.+3336   	; 0x1776 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_doorbell[sound_current_step].time)));
     a6e:	ff dd       	rcall	.-1026   	; 0x66e <millis_get>
     a70:	e0 91 3f 01 	lds	r30, 0x013F
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	ee 0f       	add	r30, r30
     a7c:	ff 1f       	adc	r31, r31
     a7e:	ee 0f       	add	r30, r30
     a80:	ff 1f       	adc	r31, r31
     a82:	e8 58       	subi	r30, 0x88	; 136
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	25 91       	lpm	r18, Z+
     a88:	34 91       	lpm	r19, Z
     a8a:	dc 01       	movw	r26, r24
     a8c:	cb 01       	movw	r24, r22
     a8e:	82 0f       	add	r24, r18
     a90:	93 1f       	adc	r25, r19
     a92:	a1 1d       	adc	r26, r1
     a94:	b1 1d       	adc	r27, r1
     a96:	80 93 3b 01 	sts	0x013B, r24
     a9a:	90 93 3c 01 	sts	0x013C, r25
     a9e:	a0 93 3d 01 	sts	0x013D, r26
     aa2:	b0 93 3e 01 	sts	0x013E, r27
     aa6:	9b c0       	rjmp	.+310    	; 0xbde <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 1 ){
     aa8:	81 30       	cpi	r24, 0x01	; 1
     aaa:	91 f5       	brne	.+100    	; 0xb10 <_Z9isr_soundv+0x112>
				tone(pgm_read_word(&(sound_pattern_phone[sound_current_step].frequency)), 10);
     aac:	e0 91 3f 01 	lds	r30, 0x013F
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	ee 0f       	add	r30, r30
     ab4:	ff 1f       	adc	r31, r31
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	ee 0f       	add	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	ec 54       	subi	r30, 0x4C	; 76
     ac0:	ff 4f       	sbci	r31, 0xFF	; 255
     ac2:	65 91       	lpm	r22, Z+
     ac4:	74 91       	lpm	r23, Z
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	e1 2c       	mov	r14, r1
     acc:	00 e0       	ldi	r16, 0x00	; 0
     ace:	10 e0       	ldi	r17, 0x00	; 0
     ad0:	98 01       	movw	r18, r16
     ad2:	4a e0       	ldi	r20, 0x0A	; 10
     ad4:	50 d6       	rcall	.+3232   	; 0x1776 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_phone[sound_current_step].time)));
     ad6:	cb dd       	rcall	.-1130   	; 0x66e <millis_get>
     ad8:	e0 91 3f 01 	lds	r30, 0x013F
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	ee 0f       	add	r30, r30
     ae4:	ff 1f       	adc	r31, r31
     ae6:	ee 0f       	add	r30, r30
     ae8:	ff 1f       	adc	r31, r31
     aea:	e8 54       	subi	r30, 0x48	; 72
     aec:	ff 4f       	sbci	r31, 0xFF	; 255
     aee:	25 91       	lpm	r18, Z+
     af0:	34 91       	lpm	r19, Z
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	82 0f       	add	r24, r18
     af8:	93 1f       	adc	r25, r19
     afa:	a1 1d       	adc	r26, r1
     afc:	b1 1d       	adc	r27, r1
     afe:	80 93 3b 01 	sts	0x013B, r24
     b02:	90 93 3c 01 	sts	0x013C, r25
     b06:	a0 93 3d 01 	sts	0x013D, r26
     b0a:	b0 93 3e 01 	sts	0x013E, r27
     b0e:	67 c0       	rjmp	.+206    	; 0xbde <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 2 ){
     b10:	82 30       	cpi	r24, 0x02	; 2
     b12:	91 f5       	brne	.+100    	; 0xb78 <_Z9isr_soundv+0x17a>
				tone(pgm_read_word(&(sound_pattern_fire[sound_current_step].frequency)), 10);
     b14:	e0 91 3f 01 	lds	r30, 0x013F
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	ee 0f       	add	r30, r30
     b1c:	ff 1f       	adc	r31, r31
     b1e:	ee 0f       	add	r30, r30
     b20:	ff 1f       	adc	r31, r31
     b22:	ee 0f       	add	r30, r30
     b24:	ff 1f       	adc	r31, r31
     b26:	ec 54       	subi	r30, 0x4C	; 76
     b28:	fc 4f       	sbci	r31, 0xFC	; 252
     b2a:	65 91       	lpm	r22, Z+
     b2c:	74 91       	lpm	r23, Z
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	e1 2c       	mov	r14, r1
     b34:	00 e0       	ldi	r16, 0x00	; 0
     b36:	10 e0       	ldi	r17, 0x00	; 0
     b38:	98 01       	movw	r18, r16
     b3a:	4a e0       	ldi	r20, 0x0A	; 10
     b3c:	1c d6       	rcall	.+3128   	; 0x1776 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_fire[sound_current_step].time)));
     b3e:	97 dd       	rcall	.-1234   	; 0x66e <millis_get>
     b40:	e0 91 3f 01 	lds	r30, 0x013F
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	ee 0f       	add	r30, r30
     b48:	ff 1f       	adc	r31, r31
     b4a:	ee 0f       	add	r30, r30
     b4c:	ff 1f       	adc	r31, r31
     b4e:	ee 0f       	add	r30, r30
     b50:	ff 1f       	adc	r31, r31
     b52:	e8 54       	subi	r30, 0x48	; 72
     b54:	fc 4f       	sbci	r31, 0xFC	; 252
     b56:	25 91       	lpm	r18, Z+
     b58:	34 91       	lpm	r19, Z
     b5a:	dc 01       	movw	r26, r24
     b5c:	cb 01       	movw	r24, r22
     b5e:	82 0f       	add	r24, r18
     b60:	93 1f       	adc	r25, r19
     b62:	a1 1d       	adc	r26, r1
     b64:	b1 1d       	adc	r27, r1
     b66:	80 93 3b 01 	sts	0x013B, r24
     b6a:	90 93 3c 01 	sts	0x013C, r25
     b6e:	a0 93 3d 01 	sts	0x013D, r26
     b72:	b0 93 3e 01 	sts	0x013E, r27
     b76:	33 c0       	rjmp	.+102    	; 0xbde <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 3 ){
     b78:	83 30       	cpi	r24, 0x03	; 3
     b7a:	89 f5       	brne	.+98     	; 0xbde <_Z9isr_soundv+0x1e0>
				tone(pgm_read_word(&(sound_pattern_help[sound_current_step].frequency)),10);
     b7c:	e0 91 3f 01 	lds	r30, 0x013F
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	ee 0f       	add	r30, r30
     b84:	ff 1f       	adc	r31, r31
     b86:	ee 0f       	add	r30, r30
     b88:	ff 1f       	adc	r31, r31
     b8a:	ee 0f       	add	r30, r30
     b8c:	ff 1f       	adc	r31, r31
     b8e:	ec 5c       	subi	r30, 0xCC	; 204
     b90:	fb 4f       	sbci	r31, 0xFB	; 251
     b92:	65 91       	lpm	r22, Z+
     b94:	74 91       	lpm	r23, Z
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	e1 2c       	mov	r14, r1
     b9c:	00 e0       	ldi	r16, 0x00	; 0
     b9e:	10 e0       	ldi	r17, 0x00	; 0
     ba0:	98 01       	movw	r18, r16
     ba2:	4a e0       	ldi	r20, 0x0A	; 10
     ba4:	e8 d5       	rcall	.+3024   	; 0x1776 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_help[sound_current_step].time)));
     ba6:	63 dd       	rcall	.-1338   	; 0x66e <millis_get>
     ba8:	e0 91 3f 01 	lds	r30, 0x013F
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	ee 0f       	add	r30, r30
     bb4:	ff 1f       	adc	r31, r31
     bb6:	ee 0f       	add	r30, r30
     bb8:	ff 1f       	adc	r31, r31
     bba:	e8 5c       	subi	r30, 0xC8	; 200
     bbc:	fb 4f       	sbci	r31, 0xFB	; 251
     bbe:	25 91       	lpm	r18, Z+
     bc0:	34 91       	lpm	r19, Z
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	82 0f       	add	r24, r18
     bc8:	93 1f       	adc	r25, r19
     bca:	a1 1d       	adc	r26, r1
     bcc:	b1 1d       	adc	r27, r1
     bce:	80 93 3b 01 	sts	0x013B, r24
     bd2:	90 93 3c 01 	sts	0x013C, r25
     bd6:	a0 93 3d 01 	sts	0x013D, r26
     bda:	b0 93 3e 01 	sts	0x013E, r27
			}
			
		//_sound_note_time = millis_get() + 1000;
			
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
     bde:	50 91 3f 01 	lds	r21, 0x013F
     be2:	40 91 40 01 	lds	r20, 0x0140
     be6:	25 2f       	mov	r18, r21
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	e4 2f       	mov	r30, r20
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	ec 5d       	subi	r30, 0xDC	; 220
     bf0:	fe 4f       	sbci	r31, 0xFE	; 254
     bf2:	80 81       	ld	r24, Z
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	01 97       	sbiw	r24, 0x01	; 1
     bf8:	28 17       	cp	r18, r24
     bfa:	39 07       	cpc	r19, r25
     bfc:	d4 f0       	brlt	.+52     	; 0xc32 <_Z9isr_soundv+0x234>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     bfe:	20 91 45 01 	lds	r18, 0x0145
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     c02:	92 2f       	mov	r25, r18
     c04:	9f 70       	andi	r25, 0x0F	; 15
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
     c08:	4f 5f       	subi	r20, 0xFF	; 255
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     c0a:	44 30       	cpi	r20, 0x04	; 4
     c0c:	09 f4       	brne	.+2      	; 0xc10 <_Z9isr_soundv+0x212>
     c0e:	43 2f       	mov	r20, r19
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c10:	e4 2f       	mov	r30, r20
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	e0 5e       	subi	r30, 0xE0	; 224
     c16:	fe 4f       	sbci	r31, 0xFE	; 254
     c18:	80 81       	ld	r24, Z
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     c1a:	91 11       	cpse	r25, r1
     c1c:	03 c0       	rjmp	.+6      	; 0xc24 <_Z9isr_soundv+0x226>
     c1e:	40 93 40 01 	sts	0x0140, r20
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <_Z9isr_soundv+0x22e>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c24:	82 23       	and	r24, r18
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
     c26:	81 f3       	breq	.-32     	; 0xc08 <_Z9isr_soundv+0x20a>
     c28:	40 93 40 01 	sts	0x0140, r20
						done = 1; // in case there is no active alarm anymore, just breakout while
					}

				} // while
				
				sound_current_step = 0; // reset sound_current_step to zero to start the next sound	
     c2c:	10 92 3f 01 	sts	0x013F, r1
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <_Z9isr_soundv+0x23a>
				
			}else{
				// set sound_current_step plus one
				sound_current_step++;
     c32:	5f 5f       	subi	r21, 0xFF	; 255
     c34:	50 93 3f 01 	sts	0x013F, r21
			}
	
				
		} //void isr_sound()
     c38:	1f 91       	pop	r17
     c3a:	0f 91       	pop	r16
     c3c:	ef 90       	pop	r14
     c3e:	08 95       	ret

00000c40 <_Z15isr_light_flashv>:
		
	void isr_light_flash(){
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
			
		// Do we need to go to the next flash?
		if(_flash_time != 0){ // is there already a flash ?
     c48:	80 91 36 01 	lds	r24, 0x0136
     c4c:	90 91 37 01 	lds	r25, 0x0137
     c50:	a0 91 38 01 	lds	r26, 0x0138
     c54:	b0 91 39 01 	lds	r27, 0x0139
     c58:	89 2b       	or	r24, r25
     c5a:	8a 2b       	or	r24, r26
     c5c:	8b 2b       	or	r24, r27
     c5e:	09 f4       	brne	.+2      	; 0xc62 <_Z15isr_light_flashv+0x22>
     c60:	48 c0       	rjmp	.+144    	; 0xcf2 <_Z15isr_light_flashv+0xb2>
			if(millis_get() < _flash_time ){ // Do we need to stop the current note?
     c62:	05 dd       	rcall	.-1526   	; 0x66e <millis_get>
     c64:	00 91 36 01 	lds	r16, 0x0136
     c68:	10 91 37 01 	lds	r17, 0x0137
     c6c:	20 91 38 01 	lds	r18, 0x0138
     c70:	30 91 39 01 	lds	r19, 0x0139
     c74:	60 17       	cp	r22, r16
     c76:	71 07       	cpc	r23, r17
     c78:	82 07       	cpc	r24, r18
     c7a:	93 07       	cpc	r25, r19
     c7c:	08 f0       	brcs	.+2      	; 0xc80 <_Z15isr_light_flashv+0x40>
     c7e:	39 c0       	rjmp	.+114    	; 0xcf2 <_Z15isr_light_flashv+0xb2>
     c80:	3b c0       	rjmp	.+118    	; 0xcf8 <_Z15isr_light_flashv+0xb8>
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
     c82:	80 91 3a 01 	lds	r24, 0x013A
     c86:	fe 01       	movw	r30, r28
     c88:	98 e0       	ldi	r25, 0x08	; 8
     c8a:	89 9f       	mul	r24, r25
     c8c:	e0 0d       	add	r30, r0
     c8e:	f1 1d       	adc	r31, r1
     c90:	11 24       	eor	r1, r1
     c92:	e4 58       	subi	r30, 0x84	; 132
     c94:	fb 4f       	sbci	r31, 0xFB	; 251
     c96:	64 91       	lpm	r22, Z
     c98:	8c 2f       	mov	r24, r28
     c9a:	8d 5f       	subi	r24, 0xFD	; 253
     c9c:	84 d1       	rcall	.+776    	; 0xfa6 <pca9635_set_led_pwm>
     c9e:	21 96       	adiw	r28, 0x01	; 1
			}						
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
     ca0:	c4 30       	cpi	r28, 0x04	; 4
     ca2:	d1 05       	cpc	r29, r1
     ca4:	71 f7       	brne	.-36     	; 0xc82 <_Z15isr_light_flashv+0x42>
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
		}
		//pca9635_set_led_pwm_flash(3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[0])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[1])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[2])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[3])) );
		
		_flash_time = millis_get() + pgm_read_word(&(flash_pattern[_flash_current_step].time));
     ca6:	e3 dc       	rcall	.-1594   	; 0x66e <millis_get>
     ca8:	40 91 3a 01 	lds	r20, 0x013A
     cac:	e4 2f       	mov	r30, r20
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	ee 0f       	add	r30, r30
     cb2:	ff 1f       	adc	r31, r31
     cb4:	ee 0f       	add	r30, r30
     cb6:	ff 1f       	adc	r31, r31
     cb8:	ee 0f       	add	r30, r30
     cba:	ff 1f       	adc	r31, r31
     cbc:	e0 58       	subi	r30, 0x80	; 128
     cbe:	fb 4f       	sbci	r31, 0xFB	; 251
     cc0:	25 91       	lpm	r18, Z+
     cc2:	34 91       	lpm	r19, Z
     cc4:	dc 01       	movw	r26, r24
     cc6:	cb 01       	movw	r24, r22
     cc8:	82 0f       	add	r24, r18
     cca:	93 1f       	adc	r25, r19
     ccc:	a1 1d       	adc	r26, r1
     cce:	b1 1d       	adc	r27, r1
     cd0:	80 93 36 01 	sts	0x0136, r24
     cd4:	90 93 37 01 	sts	0x0137, r25
     cd8:	a0 93 38 01 	sts	0x0138, r26
     cdc:	b0 93 39 01 	sts	0x0139, r27
			
		// is variable _flash_current_step equal to total steps?
		if(_flash_current_step == (flash_keys -1 )) {
     ce0:	4f 31       	cpi	r20, 0x1F	; 31
     ce2:	19 f4       	brne	.+6      	; 0xcea <_Z15isr_light_flashv+0xaa>
			//reset _flash_current_step to 0
			_flash_current_step = 0;				
     ce4:	10 92 3a 01 	sts	0x013A, r1
     ce8:	07 c0       	rjmp	.+14     	; 0xcf8 <_Z15isr_light_flashv+0xb8>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
     cea:	4f 5f       	subi	r20, 0xFF	; 255
     cec:	40 93 3a 01 	sts	0x013A, r20
     cf0:	03 c0       	rjmp	.+6      	; 0xcf8 <_Z15isr_light_flashv+0xb8>
			}
	
				
		} //void isr_sound()
		
	void isr_light_flash(){
     cf2:	c0 e0       	ldi	r28, 0x00	; 0
     cf4:	d0 e0       	ldi	r29, 0x00	; 0
     cf6:	c5 cf       	rjmp	.-118    	; 0xc82 <_Z15isr_light_flashv+0x42>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
		}
		
	} // END isr_light_flash
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	1f 91       	pop	r17
     cfe:	0f 91       	pop	r16
     d00:	08 95       	ret

00000d02 <_Z14isr_light_iconv>:
		
		
		
		
		
	void isr_light_icon(){
     d02:	0f 93       	push	r16
     d04:	1f 93       	push	r17
     d06:	cf 93       	push	r28
     d08:	df 93       	push	r29
		
		// Do we need to go to the next flash?
		if(_icon_time != 0){ // is there already a flash ?
     d0a:	80 91 30 01 	lds	r24, 0x0130
     d0e:	90 91 31 01 	lds	r25, 0x0131
     d12:	a0 91 32 01 	lds	r26, 0x0132
     d16:	b0 91 33 01 	lds	r27, 0x0133
     d1a:	89 2b       	or	r24, r25
     d1c:	8a 2b       	or	r24, r26
     d1e:	8b 2b       	or	r24, r27
     d20:	79 f0       	breq	.+30     	; 0xd40 <_Z14isr_light_iconv+0x3e>
			if(millis_get() < _icon_time ){ // Do we need to stop the current note?
     d22:	a5 dc       	rcall	.-1718   	; 0x66e <millis_get>
     d24:	00 91 30 01 	lds	r16, 0x0130
     d28:	10 91 31 01 	lds	r17, 0x0131
     d2c:	20 91 32 01 	lds	r18, 0x0132
     d30:	30 91 33 01 	lds	r19, 0x0133
     d34:	60 17       	cp	r22, r16
     d36:	71 07       	cpc	r23, r17
     d38:	82 07       	cpc	r24, r18
     d3a:	93 07       	cpc	r25, r19
     d3c:	08 f4       	brcc	.+2      	; 0xd40 <_Z14isr_light_iconv+0x3e>
     d3e:	81 c0       	rjmp	.+258    	; 0xe42 <_Z14isr_light_iconv+0x140>
	// step 2 = 250 - (2 x 25)  = 200
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
     d40:	20 91 34 01 	lds	r18, 0x0134
     d44:	22 23       	and	r18, r18
     d46:	19 f0       	breq	.+6      	; 0xd4e <_Z14isr_light_iconv+0x4c>
     d48:	2b 30       	cpi	r18, 0x0B	; 11
     d4a:	21 f5       	brne	.+72     	; 0xd94 <_Z14isr_light_iconv+0x92>
     d4c:	12 c0       	rjmp	.+36     	; 0xd72 <_Z14isr_light_iconv+0x70>
		intensity = 255;
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 1000;
     d4e:	8f dc       	rcall	.-1762   	; 0x66e <millis_get>
     d50:	dc 01       	movw	r26, r24
     d52:	cb 01       	movw	r24, r22
     d54:	88 51       	subi	r24, 0x18	; 24
     d56:	9c 4f       	sbci	r25, 0xFC	; 252
     d58:	af 4f       	sbci	r26, 0xFF	; 255
     d5a:	bf 4f       	sbci	r27, 0xFF	; 255
     d5c:	80 93 30 01 	sts	0x0130, r24
     d60:	90 93 31 01 	sts	0x0131, r25
     d64:	a0 93 32 01 	sts	0x0132, r26
     d68:	b0 93 33 01 	sts	0x0133, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     d6c:	cf ef       	ldi	r28, 0xFF	; 255
     d6e:	d0 e0       	ldi	r29, 0x00	; 0
     d70:	25 c0       	rjmp	.+74     	; 0xdbc <_Z14isr_light_iconv+0xba>
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 1000;
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
     d72:	7d dc       	rcall	.-1798   	; 0x66e <millis_get>
     d74:	dc 01       	movw	r26, r24
     d76:	cb 01       	movw	r24, r22
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	a1 1d       	adc	r26, r1
     d7c:	b1 1d       	adc	r27, r1
     d7e:	80 93 30 01 	sts	0x0130, r24
     d82:	90 93 31 01 	sts	0x0131, r25
     d86:	a0 93 32 01 	sts	0x0132, r26
     d8a:	b0 93 33 01 	sts	0x0133, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     d8e:	cf ef       	ldi	r28, 0xFF	; 255
     d90:	d0 e0       	ldi	r29, 0x00	; 0
     d92:	14 c0       	rjmp	.+40     	; 0xdbc <_Z14isr_light_iconv+0xba>
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
		}
			
	}else{
		intensity = (250 - (icon_current_step * 25)); // step 1 to 10, 
     d94:	37 ee       	ldi	r19, 0xE7	; 231
     d96:	32 03       	mulsu	r19, r18
     d98:	e0 01       	movw	r28, r0
     d9a:	11 24       	eor	r1, r1
     d9c:	c6 50       	subi	r28, 0x06	; 6
     d9e:	df 4f       	sbci	r29, 0xFF	; 255
		_icon_time = millis_get() + 30;
     da0:	66 dc       	rcall	.-1844   	; 0x66e <millis_get>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	4e 96       	adiw	r24, 0x1e	; 30
     da8:	a1 1d       	adc	r26, r1
     daa:	b1 1d       	adc	r27, r1
     dac:	80 93 30 01 	sts	0x0130, r24
     db0:	90 93 31 01 	sts	0x0131, r25
     db4:	a0 93 32 01 	sts	0x0132, r26
     db8:	b0 93 33 01 	sts	0x0133, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     dbc:	00 e0       	ldi	r16, 0x00	; 0
     dbe:	10 e0       	ldi	r17, 0x00	; 0
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     dc0:	80 91 35 01 	lds	r24, 0x0135
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	9c 01       	movw	r18, r24
     dc8:	22 0f       	add	r18, r18
     dca:	33 1f       	adc	r19, r19
     dcc:	82 0f       	add	r24, r18
     dce:	93 1f       	adc	r25, r19
     dd0:	80 0f       	add	r24, r16
     dd2:	91 1f       	adc	r25, r17
     dd4:	fc 01       	movw	r30, r24
     dd6:	e4 58       	subi	r30, 0x84	; 132
     dd8:	fa 4f       	sbci	r31, 0xFA	; 250
     dda:	44 91       	lpm	r20, Z
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     ddc:	fc 01       	movw	r30, r24
     dde:	e8 59       	subi	r30, 0x98	; 152
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	84 91       	lpm	r24, Z
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     de4:	4c 9f       	mul	r20, r28
     de6:	90 01       	movw	r18, r0
     de8:	4d 9f       	mul	r20, r29
     dea:	30 0d       	add	r19, r0
     dec:	11 24       	eor	r1, r1
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     dee:	63 2f       	mov	r22, r19
     df0:	da d0       	rcall	.+436    	; 0xfa6 <pca9635_set_led_pwm>
     df2:	0f 5f       	subi	r16, 0xFF	; 255
     df4:	1f 4f       	sbci	r17, 0xFF	; 255
		_icon_time = millis_get() + 30;
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
     df6:	03 30       	cpi	r16, 0x03	; 3
     df8:	11 05       	cpc	r17, r1
     dfa:	11 f7       	brne	.-60     	; 0xdc0 <_Z14isr_light_iconv+0xbe>
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
	}
	

	// is variable _flash_current_step equal to total steps?
	if(icon_current_step == 11) {
     dfc:	80 91 34 01 	lds	r24, 0x0134
     e00:	8b 30       	cpi	r24, 0x0B	; 11
     e02:	e1 f4       	brne	.+56     	; 0xe3c <_Z14isr_light_iconv+0x13a>
		//reset _flash_current_step to 0
		icon_current_step = 0;
     e04:	10 92 34 01 	sts	0x0134, r1
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e08:	30 91 45 01 	lds	r19, 0x0145
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     e0c:	23 2f       	mov	r18, r19
     e0e:	2f 70       	andi	r18, 0x0F	; 15
     e10:	80 91 35 01 	lds	r24, 0x0135
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     e14:	40 e0       	ldi	r20, 0x00	; 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
     e16:	8f 5f       	subi	r24, 0xFF	; 255
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     e18:	84 30       	cpi	r24, 0x04	; 4
     e1a:	09 f4       	brne	.+2      	; 0xe1e <_Z14isr_light_iconv+0x11c>
     e1c:	84 2f       	mov	r24, r20
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e1e:	e8 2f       	mov	r30, r24
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	e0 5e       	subi	r30, 0xE0	; 224
     e24:	fe 4f       	sbci	r31, 0xFE	; 254
     e26:	90 81       	ld	r25, Z
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     e28:	21 11       	cpse	r18, r1
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <_Z14isr_light_iconv+0x130>
     e2c:	80 93 35 01 	sts	0x0135, r24
     e30:	08 c0       	rjmp	.+16     	; 0xe42 <_Z14isr_light_iconv+0x140>
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e32:	93 23       	and	r25, r19
		//reset _flash_current_step to 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
     e34:	81 f3       	breq	.-32     	; 0xe16 <_Z14isr_light_iconv+0x114>
     e36:	80 93 35 01 	sts	0x0135, r24
     e3a:	03 c0       	rjmp	.+6      	; 0xe42 <_Z14isr_light_iconv+0x140>
			} // while
			
			
		}else{
		// set _flash_current_step +1
		icon_current_step++;
     e3c:	8f 5f       	subi	r24, 0xFF	; 255
     e3e:	80 93 34 01 	sts	0x0134, r24
	}
	
} // END isr_light_icon
     e42:	df 91       	pop	r29
     e44:	cf 91       	pop	r28
     e46:	1f 91       	pop	r17
     e48:	0f 91       	pop	r16
     e4a:	08 95       	ret

00000e4c <__vector_7>:

	
	
	
	
ISR (TIMER2_COMPA_vect) {
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	0f 92       	push	r0
     e54:	11 24       	eor	r1, r1
     e56:	0f 93       	push	r16
     e58:	1f 93       	push	r17
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
//uart0_puts("I");

	// check if the alarm needs to be stopped
	if(millis_get() >= active_alarm_time || active_alarm_time == 0){
     e72:	fd db       	rcall	.-2054   	; 0x66e <millis_get>
     e74:	00 91 41 01 	lds	r16, 0x0141
     e78:	10 91 42 01 	lds	r17, 0x0142
     e7c:	20 91 43 01 	lds	r18, 0x0143
     e80:	30 91 44 01 	lds	r19, 0x0144
     e84:	60 17       	cp	r22, r16
     e86:	71 07       	cpc	r23, r17
     e88:	82 07       	cpc	r24, r18
     e8a:	93 07       	cpc	r25, r19
     e8c:	28 f4       	brcc	.+10     	; 0xe98 <__vector_7+0x4c>
     e8e:	01 2b       	or	r16, r17
     e90:	02 2b       	or	r16, r18
     e92:	03 2b       	or	r16, r19
     e94:	09 f0       	breq	.+2      	; 0xe98 <__vector_7+0x4c>
     e96:	3c c0       	rjmp	.+120    	; 0xf10 <__vector_7+0xc4>
		// stop alarm
			
			//uart0_puts("STOPINT");			
			// stop timer 0
			millis_pause();
     e98:	09 dc       	rcall	.-2030   	; 0x6ac <millis_pause>
			
			// stop sound
			noTone();
     e9a:	65 d4       	rcall	.+2250   	; 0x1766 <noTone>
			
			// stop timer 2
			TIMSK2 &= ~_BV(OCIE2A);
     e9c:	e0 e7       	ldi	r30, 0x70	; 112
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8d 7f       	andi	r24, 0xFD	; 253
     ea4:	80 83       	st	Z, r24
			power_timer2_disable();
     ea6:	e4 e6       	ldi	r30, 0x64	; 100
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	80 64       	ori	r24, 0x40	; 64
     eae:	80 83       	st	Z, r24
			
			// reset steps of sound, flash and icon
			sound_current_step		= 0;
     eb0:	10 92 3f 01 	sts	0x013F, r1
			_sound_note_time		= 0;
     eb4:	10 92 3b 01 	sts	0x013B, r1
     eb8:	10 92 3c 01 	sts	0x013C, r1
     ebc:	10 92 3d 01 	sts	0x013D, r1
     ec0:	10 92 3e 01 	sts	0x013E, r1
										
			_flash_current_step		= 0;
     ec4:	10 92 3a 01 	sts	0x013A, r1
			_flash_time				= 0;
     ec8:	10 92 36 01 	sts	0x0136, r1
     ecc:	10 92 37 01 	sts	0x0137, r1
     ed0:	10 92 38 01 	sts	0x0138, r1
     ed4:	10 92 39 01 	sts	0x0139, r1
										
			icon_current_step		= 0;
     ed8:	10 92 34 01 	sts	0x0134, r1
			_icon_time				= 0;
     edc:	10 92 30 01 	sts	0x0130, r1
     ee0:	10 92 31 01 	sts	0x0131, r1
     ee4:	10 92 32 01 	sts	0x0132, r1
     ee8:	10 92 33 01 	sts	0x0133, r1
										
			// empty alarm arrray
			active_alarm = 0x00; 
     eec:	10 92 45 01 	sts	0x0145, r1
			active_alarm_time = 0;
     ef0:	10 92 41 01 	sts	0x0141, r1
     ef4:	10 92 42 01 	sts	0x0142, r1
     ef8:	10 92 43 01 	sts	0x0143, r1
     efc:	10 92 44 01 	sts	0x0144, r1
					
			// alle leds uit, pca in slaapstand
			pca9635_set_all_led_pwm(0); // dimm all leds to zero
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	62 d0       	rcall	.+196    	; 0xfc8 <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1); // put pca9635 in sleep
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	70 d0       	rcall	.+224    	; 0xfe8 <pca9635_set_sleep>
			// automatisch slapen in loop.

			deep_sleep_ok = 1;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	80 93 46 01 	sts	0x0146, r24
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <__vector_7+0xca>
					
	}else{
		// continue alarm
		isr_sound();
     f10:	76 dd       	rcall	.-1300   	; 0x9fe <_Z9isr_soundv>
	    isr_light_flash();
     f12:	96 de       	rcall	.-724    	; 0xc40 <_Z15isr_light_flashv>
		isr_light_icon();		
     f14:	f6 de       	rcall	.-532    	; 0xd02 <_Z14isr_light_iconv>
	}
						
}
     f16:	ff 91       	pop	r31
     f18:	ef 91       	pop	r30
     f1a:	bf 91       	pop	r27
     f1c:	af 91       	pop	r26
     f1e:	9f 91       	pop	r25
     f20:	8f 91       	pop	r24
     f22:	7f 91       	pop	r23
     f24:	6f 91       	pop	r22
     f26:	5f 91       	pop	r21
     f28:	4f 91       	pop	r20
     f2a:	3f 91       	pop	r19
     f2c:	2f 91       	pop	r18
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	0f 90       	pop	r0
     f38:	1f 90       	pop	r1
     f3a:	18 95       	reti

00000f3c <pca9635_init>:
	   I2C_write(value);	
  	}
			  
  	I2C_stop();
		  
}
     f3c:	80 e8       	ldi	r24, 0x80	; 128
     f3e:	45 db       	rcall	.-2422   	; 0x5ca <I2C_start>
     f40:	80 e8       	ldi	r24, 0x80	; 128
     f42:	68 db       	rcall	.-2352   	; 0x614 <I2C_write>
     f44:	80 e8       	ldi	r24, 0x80	; 128
     f46:	66 db       	rcall	.-2356   	; 0x614 <I2C_write>
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	64 db       	rcall	.-2360   	; 0x614 <I2C_write>
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	62 db       	rcall	.-2364   	; 0x614 <I2C_write>
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	60 db       	rcall	.-2368   	; 0x614 <I2C_write>
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	5e db       	rcall	.-2372   	; 0x614 <I2C_write>
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	5c db       	rcall	.-2376   	; 0x614 <I2C_write>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	5a db       	rcall	.-2380   	; 0x614 <I2C_write>
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	58 db       	rcall	.-2384   	; 0x614 <I2C_write>
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	56 db       	rcall	.-2388   	; 0x614 <I2C_write>
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	54 db       	rcall	.-2392   	; 0x614 <I2C_write>
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	52 db       	rcall	.-2396   	; 0x614 <I2C_write>
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	50 db       	rcall	.-2400   	; 0x614 <I2C_write>
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	4e db       	rcall	.-2404   	; 0x614 <I2C_write>
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	4c db       	rcall	.-2408   	; 0x614 <I2C_write>
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	4a db       	rcall	.-2412   	; 0x614 <I2C_write>
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	48 db       	rcall	.-2416   	; 0x614 <I2C_write>
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	46 db       	rcall	.-2420   	; 0x614 <I2C_write>
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	44 db       	rcall	.-2424   	; 0x614 <I2C_write>
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	42 db       	rcall	.-2428   	; 0x614 <I2C_write>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	40 db       	rcall	.-2432   	; 0x614 <I2C_write>
     f94:	8a ea       	ldi	r24, 0xAA	; 170
     f96:	3e db       	rcall	.-2436   	; 0x614 <I2C_write>
     f98:	8a ea       	ldi	r24, 0xAA	; 170
     f9a:	3c db       	rcall	.-2440   	; 0x614 <I2C_write>
     f9c:	8a ea       	ldi	r24, 0xAA	; 170
     f9e:	3a db       	rcall	.-2444   	; 0x614 <I2C_write>
     fa0:	8a ea       	ldi	r24, 0xAA	; 170
     fa2:	38 db       	rcall	.-2448   	; 0x614 <I2C_write>
     fa4:	54 cb       	rjmp	.-2392   	; 0x64e <I2C_stop>

00000fa6 <pca9635_set_led_pwm>:
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	d8 2f       	mov	r29, r24
     fac:	c6 2f       	mov	r28, r22
     fae:	80 e8       	ldi	r24, 0x80	; 128
     fb0:	0c db       	rcall	.-2536   	; 0x5ca <I2C_start>
     fb2:	8d 2f       	mov	r24, r29
     fb4:	8e 5f       	subi	r24, 0xFE	; 254
     fb6:	80 68       	ori	r24, 0x80	; 128
     fb8:	2d db       	rcall	.-2470   	; 0x614 <I2C_write>
     fba:	8c 2f       	mov	r24, r28
     fbc:	2b db       	rcall	.-2474   	; 0x614 <I2C_write>
     fbe:	47 db       	rcall	.-2418   	; 0x64e <I2C_stop>
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	08 95       	ret

00000fc8 <pca9635_set_all_led_pwm>:
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	d8 2f       	mov	r29, r24
     fce:	80 e8       	ldi	r24, 0x80	; 128
     fd0:	fc da       	rcall	.-2568   	; 0x5ca <I2C_start>
     fd2:	82 e8       	ldi	r24, 0x82	; 130
     fd4:	1f db       	rcall	.-2498   	; 0x614 <I2C_write>
     fd6:	c0 e1       	ldi	r28, 0x10	; 16
     fd8:	8d 2f       	mov	r24, r29
     fda:	1c db       	rcall	.-2504   	; 0x614 <I2C_write>
     fdc:	c1 50       	subi	r28, 0x01	; 1
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <pca9635_set_all_led_pwm+0x10>
     fe0:	36 db       	rcall	.-2452   	; 0x64e <I2C_stop>
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	08 95       	ret

00000fe8 <pca9635_set_sleep>:

/**
* Changes the oscillator mode between sleep (1) and active (0)
*/
uint8_t pca9635_set_sleep(uint8_t sleep)
{
     fe8:	cf 93       	push	r28
     fea:	c8 2f       	mov	r28, r24
	I2C_start((0x40<<1)+I2C_READ);
     fec:	81 e8       	ldi	r24, 0x81	; 129
     fee:	ed da       	rcall	.-2598   	; 0x5ca <I2C_start>
	I2C_write(0x80); // autoincrement, mode 0,
     ff0:	80 e8       	ldi	r24, 0x80	; 128
     ff2:	10 db       	rcall	.-2528   	; 0x614 <I2C_write>
	// I2C_stop(); ???nodig?
	uint8_t data = I2C_read_ack();
     ff4:	21 db       	rcall	.-2494   	; 0x638 <I2C_read_ack>
	
	if(sleep){		// set or unset bit 4
     ff6:	cc 23       	and	r28, r28
     ff8:	11 f0       	breq	.+4      	; 0xffe <pca9635_set_sleep+0x16>
		data |= (1<<4);
     ffa:	80 61       	ori	r24, 0x10	; 16
     ffc:	01 c0       	rjmp	.+2      	; 0x1000 <pca9635_set_sleep+0x18>
	}else{
		data &= ~(1<<4);
     ffe:	8f 7e       	andi	r24, 0xEF	; 239
	}
	
	uint8_t ack = I2C_write(data);  
    1000:	09 db       	rcall	.-2542   	; 0x614 <I2C_write>
    1002:	c8 2f       	mov	r28, r24
	I2C_stop();
    1004:	24 db       	rcall	.-2488   	; 0x64e <I2C_stop>
	return ack;
}
    1006:	8c 2f       	mov	r24, r28
    1008:	cf 91       	pop	r28
    100a:	08 95       	ret

0000100c <_ZL15blockInterruptsv>:

/// @deprecated Use the 3-arg version, followed by a call to rf12_sendWait.
void rf12_sendStart (uint8_t hdr, const void* ptr, uint8_t len, uint8_t sync) {
	rf12_sendStart(hdr, ptr, len);
	rf12_sendWait(sync);
}
    100c:	e8 98       	cbi	0x1d, 0	; 29
    100e:	08 95       	ret

00001010 <_ZL15allowInterruptsv>:
    1010:	e8 9a       	sbi	0x1d, 0	; 29
    1012:	08 95       	ret

00001014 <_ZL9rf12_byteh>:
    1014:	8e bd       	out	0x2e, r24	; 46
    1016:	0d b4       	in	r0, 0x2d	; 45
    1018:	07 fe       	sbrs	r0, 7
    101a:	fd cf       	rjmp	.-6      	; 0x1016 <_ZL9rf12_byteh+0x2>
    101c:	8e b5       	in	r24, 0x2e	; 46
    101e:	08 95       	ret

00001020 <_ZL9rf12_xferj>:
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	18 2f       	mov	r17, r24
    1028:	c9 2f       	mov	r28, r25
    102a:	f0 df       	rcall	.-32     	; 0x100c <_ZL15blockInterruptsv>
    102c:	2a 98       	cbi	0x05, 2	; 5
    102e:	8c 2f       	mov	r24, r28
    1030:	f1 df       	rcall	.-30     	; 0x1014 <_ZL9rf12_byteh>
    1032:	d8 2f       	mov	r29, r24
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	c8 2f       	mov	r28, r24
    1038:	81 2f       	mov	r24, r17
    103a:	ec df       	rcall	.-40     	; 0x1014 <_ZL9rf12_byteh>
    103c:	c8 2b       	or	r28, r24
    103e:	2a 9a       	sbi	0x05, 2	; 5
    1040:	e7 df       	rcall	.-50     	; 0x1010 <_ZL15allowInterruptsv>
    1042:	8c 2f       	mov	r24, r28
    1044:	9d 2f       	mov	r25, r29
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	08 95       	ret

0000104e <_ZL9rf12_idlev>:
    104e:	80 91 9a 01 	lds	r24, 0x019A
    1052:	90 91 9b 01 	lds	r25, 0x019B
    1056:	8f 70       	andi	r24, 0x0F	; 15
    1058:	90 93 9b 01 	sts	0x019B, r25
    105c:	80 93 9a 01 	sts	0x019A, r24
    1060:	80 91 9a 01 	lds	r24, 0x019A
    1064:	90 91 9b 01 	lds	r25, 0x019B
    1068:	88 60       	ori	r24, 0x08	; 8
    106a:	90 93 9b 01 	sts	0x019B, r25
    106e:	80 93 9a 01 	sts	0x019A, r24
    1072:	80 91 9a 01 	lds	r24, 0x019A
    1076:	90 91 9b 01 	lds	r25, 0x019B
    107a:	d2 cf       	rjmp	.-92     	; 0x1020 <_ZL9rf12_xferj>

0000107c <_Z12rf12_spiInitv>:
    107c:	84 b1       	in	r24, 0x04	; 4
    107e:	8c 62       	ori	r24, 0x2C	; 44
    1080:	84 b9       	out	0x04, r24	; 4
    1082:	2a 9a       	sbi	0x05, 2	; 5
    1084:	24 98       	cbi	0x04, 4	; 4
    1086:	80 e5       	ldi	r24, 0x50	; 80
    1088:	8c bd       	out	0x2c, r24	; 44
    108a:	8d b5       	in	r24, 0x2d	; 45
    108c:	81 60       	ori	r24, 0x01	; 1
    108e:	8d bd       	out	0x2d, r24	; 45
    1090:	52 98       	cbi	0x0a, 2	; 10
    1092:	5a 9a       	sbi	0x0b, 2	; 11
    1094:	08 95       	ret

00001096 <__vector_1>:
    1096:	1f 92       	push	r1
    1098:	0f 92       	push	r0
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	0f 92       	push	r0
    109e:	11 24       	eor	r1, r1
    10a0:	1f 93       	push	r17
    10a2:	2f 93       	push	r18
    10a4:	3f 93       	push	r19
    10a6:	4f 93       	push	r20
    10a8:	5f 93       	push	r21
    10aa:	6f 93       	push	r22
    10ac:	7f 93       	push	r23
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
    10b2:	af 93       	push	r26
    10b4:	bf 93       	push	r27
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
    10be:	95 b1       	in	r25, 0x05	; 5
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	89 27       	eor	r24, r25
    10c4:	85 b9       	out	0x05, r24	; 5
    10c6:	a2 df       	rcall	.-188    	; 0x100c <_ZL15blockInterruptsv>
    10c8:	2a 98       	cbi	0x05, 2	; 5
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	a3 df       	rcall	.-186    	; 0x1014 <_ZL9rf12_byteh>
    10ce:	d8 2f       	mov	r29, r24
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	c8 2f       	mov	r28, r24
    10d4:	9f df       	rcall	.-194    	; 0x1014 <_ZL9rf12_byteh>
    10d6:	c8 2b       	or	r28, r24
    10d8:	dd 23       	and	r29, r29
    10da:	2c f4       	brge	.+10     	; 0x10e6 <__vector_1+0x50>
    10dc:	80 91 9c 01 	lds	r24, 0x019C
    10e0:	87 30       	cpi	r24, 0x07	; 7
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <__vector_1+0x50>
    10e4:	02 c1       	rjmp	.+516    	; 0x12ea <__vector_1+0x254>
    10e6:	2a 9a       	sbi	0x05, 2	; 5
    10e8:	93 df       	rcall	.-218    	; 0x1010 <_ZL15allowInterruptsv>
    10ea:	d0 93 99 01 	sts	0x0199, r29
    10ee:	c0 93 98 01 	sts	0x0198, r28
    10f2:	20 91 98 01 	lds	r18, 0x0198
    10f6:	30 91 99 01 	lds	r19, 0x0199
    10fa:	33 23       	and	r19, r19
    10fc:	0c f0       	brlt	.+2      	; 0x1100 <__vector_1+0x6a>
    10fe:	e1 c0       	rjmp	.+450    	; 0x12c2 <__vector_1+0x22c>
    1100:	80 91 9c 01 	lds	r24, 0x019C
    1104:	87 30       	cpi	r24, 0x07	; 7
    1106:	09 f0       	breq	.+2      	; 0x110a <__vector_1+0x74>
    1108:	78 c0       	rjmp	.+240    	; 0x11fa <__vector_1+0x164>
    110a:	80 91 9d 01 	lds	r24, 0x019D
    110e:	81 11       	cpse	r24, r1
    1110:	04 c0       	rjmp	.+8      	; 0x111a <__vector_1+0x84>
    1112:	80 91 9e 01 	lds	r24, 0x019E
    1116:	81 11       	cpse	r24, r1
    1118:	f2 c0       	rjmp	.+484    	; 0x12fe <__vector_1+0x268>
    111a:	80 91 9d 01 	lds	r24, 0x019D
    111e:	e8 2f       	mov	r30, r24
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	e3 5b       	subi	r30, 0xB3	; 179
    1124:	fe 4f       	sbci	r31, 0xFE	; 254
    1126:	10 83       	st	Z, r17
    1128:	8f 5f       	subi	r24, 0xFF	; 255
    112a:	80 93 9d 01 	sts	0x019D, r24
    112e:	20 91 94 01 	lds	r18, 0x0194
    1132:	30 91 95 01 	lds	r19, 0x0195
    1136:	21 27       	eor	r18, r17
    1138:	12 2f       	mov	r17, r18
    113a:	12 95       	swap	r17
    113c:	12 27       	eor	r17, r18
    113e:	01 2e       	mov	r0, r17
    1140:	16 95       	lsr	r17
    1142:	16 95       	lsr	r17
    1144:	10 25       	eor	r17, r0
    1146:	01 2e       	mov	r0, r17
    1148:	16 95       	lsr	r17
    114a:	10 25       	eor	r17, r0
    114c:	17 70       	andi	r17, 0x07	; 7
    114e:	02 2e       	mov	r0, r18
    1150:	23 2f       	mov	r18, r19
    1152:	16 95       	lsr	r17
    1154:	07 94       	ror	r0
    1156:	17 95       	ror	r17
    1158:	30 2d       	mov	r19, r0
    115a:	21 27       	eor	r18, r17
    115c:	06 94       	lsr	r0
    115e:	17 95       	ror	r17
    1160:	30 25       	eor	r19, r0
    1162:	21 27       	eor	r18, r17
    1164:	30 93 95 01 	sts	0x0195, r19
    1168:	20 93 94 01 	sts	0x0194, r18
    116c:	e0 91 97 01 	lds	r30, 0x0197
    1170:	e3 30       	cpi	r30, 0x03	; 3
    1172:	18 f5       	brcc	.+70     	; 0x11ba <__vector_1+0x124>
    1174:	80 91 9d 01 	lds	r24, 0x019D
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 97       	sbiw	r24, 0x02	; 2
    117c:	60 91 96 01 	lds	r22, 0x0196
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	00 d4       	rcall	.+2048   	; 0x1984 <__divmodhi4>
    1184:	89 2b       	or	r24, r25
    1186:	09 f4       	brne	.+2      	; 0x118a <__vector_1+0xf4>
    1188:	c5 c0       	rjmp	.+394    	; 0x1314 <__vector_1+0x27e>
    118a:	17 c0       	rjmp	.+46     	; 0x11ba <__vector_1+0x124>
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	e8 5d       	subi	r30, 0xD8	; 216
    1190:	fe 4f       	sbci	r31, 0xFE	; 254
    1192:	80 81       	ld	r24, Z
    1194:	8f 70       	andi	r24, 0x0F	; 15
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <__vector_1+0x10e>
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	e8 5d       	subi	r30, 0xD8	; 216
    119c:	fe 4f       	sbci	r31, 0xFE	; 254
    119e:	80 81       	ld	r24, Z
    11a0:	82 95       	swap	r24
    11a2:	8f 70       	andi	r24, 0x0F	; 15
    11a4:	80 93 97 01 	sts	0x0197, r24
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	38 f4       	brcc	.+14     	; 0x11ba <__vector_1+0x124>
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	80 6a       	ori	r24, 0xA0	; 160
    11b6:	94 69       	ori	r25, 0x94	; 148
    11b8:	33 df       	rcall	.-410    	; 0x1020 <_ZL9rf12_xferj>
    11ba:	80 91 9f 01 	lds	r24, 0x019F
    11be:	88 23       	and	r24, r24
    11c0:	59 f0       	breq	.+22     	; 0x11d8 <__vector_1+0x142>
    11c2:	90 91 9d 01 	lds	r25, 0x019D
    11c6:	98 17       	cp	r25, r24
    11c8:	28 f4       	brcc	.+10     	; 0x11d4 <__vector_1+0x13e>
    11ca:	80 91 9d 01 	lds	r24, 0x019D
    11ce:	87 34       	cpi	r24, 0x47	; 71
    11d0:	08 f4       	brcc	.+2      	; 0x11d4 <__vector_1+0x13e>
    11d2:	77 c0       	rjmp	.+238    	; 0x12c2 <__vector_1+0x22c>
    11d4:	3c df       	rcall	.-392    	; 0x104e <_ZL9rf12_idlev>
    11d6:	75 c0       	rjmp	.+234    	; 0x12c2 <__vector_1+0x22c>
    11d8:	20 91 9d 01 	lds	r18, 0x019D
    11dc:	80 91 4f 01 	lds	r24, 0x014F
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	05 96       	adiw	r24, 0x05	; 5
    11e6:	28 17       	cp	r18, r24
    11e8:	39 07       	cpc	r19, r25
    11ea:	2c f4       	brge	.+10     	; 0x11f6 <__vector_1+0x160>
    11ec:	80 91 9d 01 	lds	r24, 0x019D
    11f0:	87 34       	cpi	r24, 0x47	; 71
    11f2:	08 f4       	brcc	.+2      	; 0x11f6 <__vector_1+0x160>
    11f4:	66 c0       	rjmp	.+204    	; 0x12c2 <__vector_1+0x22c>
    11f6:	2b df       	rcall	.-426    	; 0x104e <_ZL9rf12_idlev>
    11f8:	64 c0       	rjmp	.+200    	; 0x12c2 <__vector_1+0x22c>
    11fa:	80 91 9c 01 	lds	r24, 0x019C
    11fe:	88 23       	and	r24, r24
    1200:	0c f0       	brlt	.+2      	; 0x1204 <__vector_1+0x16e>
    1202:	2f c0       	rjmp	.+94     	; 0x1262 <__vector_1+0x1cc>
    1204:	e0 91 4f 01 	lds	r30, 0x014F
    1208:	80 91 9c 01 	lds	r24, 0x019C
    120c:	98 2f       	mov	r25, r24
    120e:	9f 5f       	subi	r25, 0xFF	; 255
    1210:	90 93 9c 01 	sts	0x019C, r25
    1214:	ed 5f       	subi	r30, 0xFD	; 253
    1216:	8e 0f       	add	r24, r30
    1218:	e8 2f       	mov	r30, r24
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	e3 5b       	subi	r30, 0xB3	; 179
    121e:	fe 4f       	sbci	r31, 0xFE	; 254
    1220:	80 81       	ld	r24, Z
    1222:	20 91 94 01 	lds	r18, 0x0194
    1226:	30 91 95 01 	lds	r19, 0x0195
    122a:	28 27       	eor	r18, r24
    122c:	92 2f       	mov	r25, r18
    122e:	92 95       	swap	r25
    1230:	92 27       	eor	r25, r18
    1232:	09 2e       	mov	r0, r25
    1234:	96 95       	lsr	r25
    1236:	96 95       	lsr	r25
    1238:	90 25       	eor	r25, r0
    123a:	09 2e       	mov	r0, r25
    123c:	96 95       	lsr	r25
    123e:	90 25       	eor	r25, r0
    1240:	97 70       	andi	r25, 0x07	; 7
    1242:	02 2e       	mov	r0, r18
    1244:	23 2f       	mov	r18, r19
    1246:	96 95       	lsr	r25
    1248:	07 94       	ror	r0
    124a:	97 95       	ror	r25
    124c:	30 2d       	mov	r19, r0
    124e:	29 27       	eor	r18, r25
    1250:	06 94       	lsr	r0
    1252:	97 95       	ror	r25
    1254:	30 25       	eor	r19, r0
    1256:	29 27       	eor	r18, r25
    1258:	30 93 95 01 	sts	0x0195, r19
    125c:	20 93 94 01 	sts	0x0194, r18
    1260:	2d c0       	rjmp	.+90     	; 0x12bc <__vector_1+0x226>
    1262:	80 91 9c 01 	lds	r24, 0x019C
    1266:	98 2f       	mov	r25, r24
    1268:	9f 5f       	subi	r25, 0xFF	; 255
    126a:	90 93 9c 01 	sts	0x019C, r25
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	09 f1       	breq	.+66     	; 0x12b4 <__vector_1+0x21e>
    1272:	2c f4       	brge	.+10     	; 0x127e <__vector_1+0x1e8>
    1274:	88 23       	and	r24, r24
    1276:	99 f0       	breq	.+38     	; 0x129e <__vector_1+0x208>
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	f9 f4       	brne	.+62     	; 0x12ba <__vector_1+0x224>
    127c:	15 c0       	rjmp	.+42     	; 0x12a8 <__vector_1+0x212>
    127e:	8b 30       	cpi	r24, 0x0B	; 11
    1280:	19 f0       	breq	.+6      	; 0x1288 <__vector_1+0x1f2>
    1282:	8c 30       	cpi	r24, 0x0C	; 12
    1284:	d1 f4       	brne	.+52     	; 0x12ba <__vector_1+0x224>
    1286:	02 c0       	rjmp	.+4      	; 0x128c <__vector_1+0x1f6>
    1288:	8d e2       	ldi	r24, 0x2D	; 45
    128a:	18 c0       	rjmp	.+48     	; 0x12bc <__vector_1+0x226>
    128c:	80 91 9e 01 	lds	r24, 0x019E
    1290:	20 91 4f 01 	lds	r18, 0x014F
    1294:	9e ef       	ldi	r25, 0xFE	; 254
    1296:	92 1b       	sub	r25, r18
    1298:	90 93 9c 01 	sts	0x019C, r25
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <__vector_1+0x226>
    129e:	80 91 94 01 	lds	r24, 0x0194
    12a2:	90 91 95 01 	lds	r25, 0x0195
    12a6:	0a c0       	rjmp	.+20     	; 0x12bc <__vector_1+0x226>
    12a8:	80 91 94 01 	lds	r24, 0x0194
    12ac:	90 91 95 01 	lds	r25, 0x0195
    12b0:	89 2f       	mov	r24, r25
    12b2:	04 c0       	rjmp	.+8      	; 0x12bc <__vector_1+0x226>
    12b4:	cc de       	rcall	.-616    	; 0x104e <_ZL9rf12_idlev>
    12b6:	8a ea       	ldi	r24, 0xAA	; 170
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <__vector_1+0x226>
    12ba:	8a ea       	ldi	r24, 0xAA	; 170
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	98 6b       	ori	r25, 0xB8	; 184
    12c0:	af de       	rcall	.-674    	; 0x1020 <_ZL9rf12_xferj>
    12c2:	80 91 98 01 	lds	r24, 0x0198
    12c6:	90 91 99 01 	lds	r25, 0x0199
    12ca:	96 ff       	sbrs	r25, 6
    12cc:	03 c0       	rjmp	.+6      	; 0x12d4 <__vector_1+0x23e>
    12ce:	86 e0       	ldi	r24, 0x06	; 6
    12d0:	80 93 9c 01 	sts	0x019C, r24
    12d4:	80 91 98 01 	lds	r24, 0x0198
    12d8:	90 91 99 01 	lds	r25, 0x0199
    12dc:	95 ff       	sbrs	r25, 5
    12de:	21 c0       	rjmp	.+66     	; 0x1322 <__vector_1+0x28c>
    12e0:	b6 de       	rcall	.-660    	; 0x104e <_ZL9rf12_idlev>
    12e2:	84 e0       	ldi	r24, 0x04	; 4
    12e4:	80 93 9c 01 	sts	0x019C, r24
    12e8:	1c c0       	rjmp	.+56     	; 0x1322 <__vector_1+0x28c>
    12ea:	8c b5       	in	r24, 0x2c	; 44
    12ec:	81 60       	ori	r24, 0x01	; 1
    12ee:	8c bd       	out	0x2c, r24	; 44
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 de       	rcall	.-736    	; 0x1014 <_ZL9rf12_byteh>
    12f4:	18 2f       	mov	r17, r24
    12f6:	8c b5       	in	r24, 0x2c	; 44
    12f8:	8e 7f       	andi	r24, 0xFE	; 254
    12fa:	8c bd       	out	0x2c, r24	; 44
    12fc:	f4 ce       	rjmp	.-536    	; 0x10e6 <__vector_1+0x50>
    12fe:	90 91 9d 01 	lds	r25, 0x019D
    1302:	e9 2f       	mov	r30, r25
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	e3 5b       	subi	r30, 0xB3	; 179
    1308:	fe 4f       	sbci	r31, 0xFE	; 254
    130a:	80 83       	st	Z, r24
    130c:	9f 5f       	subi	r25, 0xFF	; 255
    130e:	90 93 9d 01 	sts	0x019D, r25
    1312:	03 cf       	rjmp	.-506    	; 0x111a <__vector_1+0x84>
    1314:	80 91 98 01 	lds	r24, 0x0198
    1318:	90 91 99 01 	lds	r25, 0x0199
    131c:	90 fd       	sbrc	r25, 0
    131e:	36 cf       	rjmp	.-404    	; 0x118c <__vector_1+0xf6>
    1320:	3b cf       	rjmp	.-394    	; 0x1198 <__vector_1+0x102>
    1322:	ff 91       	pop	r31
    1324:	ef 91       	pop	r30
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	bf 91       	pop	r27
    132c:	af 91       	pop	r26
    132e:	9f 91       	pop	r25
    1330:	8f 91       	pop	r24
    1332:	7f 91       	pop	r23
    1334:	6f 91       	pop	r22
    1336:	5f 91       	pop	r21
    1338:	4f 91       	pop	r20
    133a:	3f 91       	pop	r19
    133c:	2f 91       	pop	r18
    133e:	1f 91       	pop	r17
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	0f 90       	pop	r0
    1346:	1f 90       	pop	r1
    1348:	18 95       	reti

0000134a <_Z13rf12_recvDonev>:
    134a:	80 91 9c 01 	lds	r24, 0x019C
    134e:	87 30       	cpi	r24, 0x07	; 7
    1350:	09 f0       	breq	.+2      	; 0x1354 <_Z13rf12_recvDonev+0xa>
    1352:	51 c0       	rjmp	.+162    	; 0x13f6 <_Z13rf12_recvDonev+0xac>
    1354:	80 91 9f 01 	lds	r24, 0x019F
    1358:	88 23       	and	r24, r24
    135a:	a1 f0       	breq	.+40     	; 0x1384 <_Z13rf12_recvDonev+0x3a>
    135c:	90 91 9d 01 	lds	r25, 0x019D
    1360:	98 17       	cp	r25, r24
    1362:	28 f4       	brcc	.+10     	; 0x136e <_Z13rf12_recvDonev+0x24>
    1364:	80 91 9d 01 	lds	r24, 0x019D
    1368:	87 34       	cpi	r24, 0x47	; 71
    136a:	08 f4       	brcc	.+2      	; 0x136e <_Z13rf12_recvDonev+0x24>
    136c:	44 c0       	rjmp	.+136    	; 0x13f6 <_Z13rf12_recvDonev+0xac>
    136e:	84 e0       	ldi	r24, 0x04	; 4
    1370:	80 93 9c 01 	sts	0x019C, r24
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	90 93 95 01 	sts	0x0195, r25
    137c:	80 93 94 01 	sts	0x0194, r24
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	08 95       	ret
    1384:	20 91 9d 01 	lds	r18, 0x019D
    1388:	80 91 4f 01 	lds	r24, 0x014F
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	05 96       	adiw	r24, 0x05	; 5
    1392:	28 17       	cp	r18, r24
    1394:	39 07       	cpc	r19, r25
    1396:	24 f4       	brge	.+8      	; 0x13a0 <_Z13rf12_recvDonev+0x56>
    1398:	80 91 9d 01 	lds	r24, 0x019D
    139c:	87 34       	cpi	r24, 0x47	; 71
    139e:	58 f1       	brcs	.+86     	; 0x13f6 <_Z13rf12_recvDonev+0xac>
    13a0:	84 e0       	ldi	r24, 0x04	; 4
    13a2:	80 93 9c 01 	sts	0x019C, r24
    13a6:	80 91 4f 01 	lds	r24, 0x014F
    13aa:	83 34       	cpi	r24, 0x43	; 67
    13ac:	30 f0       	brcs	.+12     	; 0x13ba <_Z13rf12_recvDonev+0x70>
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	90 93 95 01 	sts	0x0195, r25
    13b6:	80 93 94 01 	sts	0x0194, r24
    13ba:	80 91 4e 01 	lds	r24, 0x014E
    13be:	86 ff       	sbrs	r24, 6
    13c0:	0b c0       	rjmp	.+22     	; 0x13d8 <_Z13rf12_recvDonev+0x8e>
    13c2:	80 91 a0 01 	lds	r24, 0x01A0
    13c6:	98 2f       	mov	r25, r24
    13c8:	9f 71       	andi	r25, 0x1F	; 31
    13ca:	9f 31       	cpi	r25, 0x1F	; 31
    13cc:	29 f0       	breq	.+10     	; 0x13d8 <_Z13rf12_recvDonev+0x8e>
    13ce:	90 91 4e 01 	lds	r25, 0x014E
    13d2:	89 27       	eor	r24, r25
    13d4:	8f 71       	andi	r24, 0x1F	; 31
    13d6:	79 f4       	brne	.+30     	; 0x13f6 <_Z13rf12_recvDonev+0xac>
    13d8:	80 91 94 01 	lds	r24, 0x0194
    13dc:	90 91 95 01 	lds	r25, 0x0195
    13e0:	89 2b       	or	r24, r25
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <_Z13rf12_recvDonev+0x9c>
    13e4:	55 c0       	rjmp	.+170    	; 0x1490 <_Z13rf12_recvDonev+0x146>
    13e6:	e0 91 47 01 	lds	r30, 0x0147
    13ea:	f0 91 48 01 	lds	r31, 0x0148
    13ee:	30 97       	sbiw	r30, 0x00	; 0
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <_Z13rf12_recvDonev+0xaa>
    13f2:	4a c0       	rjmp	.+148    	; 0x1488 <_Z13rf12_recvDonev+0x13e>
    13f4:	4d c0       	rjmp	.+154    	; 0x1490 <_Z13rf12_recvDonev+0x146>
    13f6:	80 91 9c 01 	lds	r24, 0x019C
    13fa:	84 30       	cpi	r24, 0x04	; 4
    13fc:	09 f0       	breq	.+2      	; 0x1400 <_Z13rf12_recvDonev+0xb6>
    13fe:	42 c0       	rjmp	.+132    	; 0x1484 <_Z13rf12_recvDonev+0x13a>
    1400:	10 92 4f 01 	sts	0x014F, r1
    1404:	10 92 9d 01 	sts	0x019D, r1
    1408:	8f ef       	ldi	r24, 0xFF	; 255
    140a:	9f ef       	ldi	r25, 0xFF	; 255
    140c:	90 93 95 01 	sts	0x0195, r25
    1410:	80 93 94 01 	sts	0x0194, r24
    1414:	20 91 9e 01 	lds	r18, 0x019E
    1418:	22 23       	and	r18, r18
    141a:	d9 f0       	breq	.+54     	; 0x1452 <_Z13rf12_recvDonev+0x108>
    141c:	82 27       	eor	r24, r18
    141e:	28 2f       	mov	r18, r24
    1420:	22 95       	swap	r18
    1422:	28 27       	eor	r18, r24
    1424:	02 2e       	mov	r0, r18
    1426:	26 95       	lsr	r18
    1428:	26 95       	lsr	r18
    142a:	20 25       	eor	r18, r0
    142c:	02 2e       	mov	r0, r18
    142e:	26 95       	lsr	r18
    1430:	20 25       	eor	r18, r0
    1432:	27 70       	andi	r18, 0x07	; 7
    1434:	08 2e       	mov	r0, r24
    1436:	89 2f       	mov	r24, r25
    1438:	26 95       	lsr	r18
    143a:	07 94       	ror	r0
    143c:	27 95       	ror	r18
    143e:	90 2d       	mov	r25, r0
    1440:	82 27       	eor	r24, r18
    1442:	06 94       	lsr	r0
    1444:	27 95       	ror	r18
    1446:	90 25       	eor	r25, r0
    1448:	82 27       	eor	r24, r18
    144a:	90 93 95 01 	sts	0x0195, r25
    144e:	80 93 94 01 	sts	0x0194, r24
    1452:	87 e0       	ldi	r24, 0x07	; 7
    1454:	80 93 9c 01 	sts	0x019C, r24
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	80 93 97 01 	sts	0x0197, r24
    145e:	83 ea       	ldi	r24, 0xA3	; 163
    1460:	94 e9       	ldi	r25, 0x94	; 148
    1462:	de dd       	rcall	.-1092   	; 0x1020 <_ZL9rf12_xferj>
    1464:	80 91 9a 01 	lds	r24, 0x019A
    1468:	90 91 9b 01 	lds	r25, 0x019B
    146c:	88 6d       	ori	r24, 0xD8	; 216
    146e:	90 93 9b 01 	sts	0x019B, r25
    1472:	80 93 9a 01 	sts	0x019A, r24
    1476:	80 91 9a 01 	lds	r24, 0x019A
    147a:	90 91 9b 01 	lds	r25, 0x019B
    147e:	d0 dd       	rcall	.-1120   	; 0x1020 <_ZL9rf12_xferj>
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	08 95       	ret
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	08 95       	ret
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	09 95       	icall
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	08 95       	ret
    1490:	8f ef       	ldi	r24, 0xFF	; 255
    1492:	9f ef       	ldi	r25, 0xFF	; 255
    1494:	dc 01       	movw	r26, r24
    1496:	80 93 49 01 	sts	0x0149, r24
    149a:	90 93 4a 01 	sts	0x014A, r25
    149e:	a0 93 4b 01 	sts	0x014B, r26
    14a2:	b0 93 4c 01 	sts	0x014C, r27
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	08 95       	ret

000014aa <_Z15rf12_setBitrateh>:
    14aa:	cf 92       	push	r12
    14ac:	df 92       	push	r13
    14ae:	ef 92       	push	r14
    14b0:	ff 92       	push	r15
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	c8 2f       	mov	r28, r24
    14ba:	08 2f       	mov	r16, r24
    14bc:	10 e0       	ldi	r17, 0x00	; 0
    14be:	c8 01       	movw	r24, r16
    14c0:	96 6c       	ori	r25, 0xC6	; 198
    14c2:	ae dd       	rcall	.-1188   	; 0x1020 <_ZL9rf12_xferj>
    14c4:	cf 77       	andi	r28, 0x7F	; 127
    14c6:	2c 2f       	mov	r18, r28
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	2f 5f       	subi	r18, 0xFF	; 255
    14cc:	3f 4f       	sbci	r19, 0xFF	; 255
    14ce:	44 27       	eor	r20, r20
    14d0:	37 fd       	sbrc	r19, 7
    14d2:	40 95       	com	r20
    14d4:	54 2f       	mov	r21, r20
    14d6:	6b ef       	ldi	r22, 0xFB	; 251
    14d8:	72 e4       	ldi	r23, 0x42	; 66
    14da:	85 e0       	ldi	r24, 0x05	; 5
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	65 d2       	rcall	.+1226   	; 0x19aa <__udivmodsi4>
    14e0:	69 01       	movw	r12, r18
    14e2:	7a 01       	movw	r14, r20
    14e4:	c8 01       	movw	r24, r16
    14e6:	88 0f       	add	r24, r24
    14e8:	89 2f       	mov	r24, r25
    14ea:	88 1f       	adc	r24, r24
    14ec:	99 0b       	sbc	r25, r25
    14ee:	8c 01       	movw	r16, r24
    14f0:	00 0f       	add	r16, r16
    14f2:	11 1f       	adc	r17, r17
    14f4:	00 0f       	add	r16, r16
    14f6:	11 1f       	adc	r17, r17
    14f8:	00 0f       	add	r16, r16
    14fa:	11 1f       	adc	r17, r17
    14fc:	08 1b       	sub	r16, r24
    14fe:	19 0b       	sbc	r17, r25
    1500:	0f 5f       	subi	r16, 0xFF	; 255
    1502:	1f 4f       	sbci	r17, 0xFF	; 255
    1504:	98 01       	movw	r18, r16
    1506:	44 27       	eor	r20, r20
    1508:	37 fd       	sbrc	r19, 7
    150a:	40 95       	com	r20
    150c:	54 2f       	mov	r21, r20
    150e:	c7 01       	movw	r24, r14
    1510:	b6 01       	movw	r22, r12
    1512:	4b d2       	rcall	.+1174   	; 0x19aa <__udivmodsi4>
    1514:	da 01       	movw	r26, r20
    1516:	c9 01       	movw	r24, r18
    1518:	68 94       	set
    151a:	12 f8       	bld	r1, 2
    151c:	b6 95       	lsr	r27
    151e:	a7 95       	ror	r26
    1520:	97 95       	ror	r25
    1522:	87 95       	ror	r24
    1524:	16 94       	lsr	r1
    1526:	d1 f7       	brne	.-12     	; 0x151c <_Z15rf12_setBitrateh+0x72>
    1528:	bc 01       	movw	r22, r24
    152a:	cd 01       	movw	r24, r26
    152c:	6d 57       	subi	r22, 0x7D	; 125
    152e:	7c 4f       	sbci	r23, 0xFC	; 252
    1530:	8f 4f       	sbci	r24, 0xFF	; 255
    1532:	9f 4f       	sbci	r25, 0xFF	; 255
    1534:	24 e8       	ldi	r18, 0x84	; 132
    1536:	33 e0       	ldi	r19, 0x03	; 3
    1538:	40 e0       	ldi	r20, 0x00	; 0
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	36 d2       	rcall	.+1132   	; 0x19aa <__udivmodsi4>
    153e:	20 93 96 01 	sts	0x0196, r18
    1542:	cf 91       	pop	r28
    1544:	1f 91       	pop	r17
    1546:	0f 91       	pop	r16
    1548:	ff 90       	pop	r15
    154a:	ef 90       	pop	r14
    154c:	df 90       	pop	r13
    154e:	cf 90       	pop	r12
    1550:	08 95       	ret

00001552 <_Z19rf12_setFixedLengthh>:
    1552:	81 11       	cpse	r24, r1
    1554:	03 c0       	rjmp	.+6      	; 0x155c <_Z19rf12_setFixedLengthh+0xa>
    1556:	10 92 9f 01 	sts	0x019F, r1
    155a:	08 95       	ret
    155c:	8f 5f       	subi	r24, 0xFF	; 255
    155e:	80 93 9f 01 	sts	0x019F, r24
    1562:	08 95       	ret

00001564 <_Z14rf12_sendStarth>:
    1564:	86 fd       	sbrc	r24, 6
    1566:	05 c0       	rjmp	.+10     	; 0x1572 <_Z14rf12_sendStarth+0xe>
    1568:	80 7e       	andi	r24, 0xE0	; 224
    156a:	90 91 a0 01 	lds	r25, 0x01A0
    156e:	9f 71       	andi	r25, 0x1F	; 31
    1570:	89 0f       	add	r24, r25
    1572:	80 93 4e 01 	sts	0x014E, r24
    1576:	e0 91 47 01 	lds	r30, 0x0147
    157a:	f0 91 48 01 	lds	r31, 0x0148
    157e:	30 97       	sbiw	r30, 0x00	; 0
    1580:	11 f0       	breq	.+4      	; 0x1586 <_Z14rf12_sendStarth+0x22>
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	09 95       	icall
    1586:	8f ef       	ldi	r24, 0xFF	; 255
    1588:	9f ef       	ldi	r25, 0xFF	; 255
    158a:	90 93 95 01 	sts	0x0195, r25
    158e:	80 93 94 01 	sts	0x0194, r24
    1592:	80 91 94 01 	lds	r24, 0x0194
    1596:	90 91 95 01 	lds	r25, 0x0195
    159a:	20 91 9e 01 	lds	r18, 0x019E
    159e:	82 27       	eor	r24, r18
    15a0:	28 2f       	mov	r18, r24
    15a2:	22 95       	swap	r18
    15a4:	28 27       	eor	r18, r24
    15a6:	02 2e       	mov	r0, r18
    15a8:	26 95       	lsr	r18
    15aa:	26 95       	lsr	r18
    15ac:	20 25       	eor	r18, r0
    15ae:	02 2e       	mov	r0, r18
    15b0:	26 95       	lsr	r18
    15b2:	20 25       	eor	r18, r0
    15b4:	27 70       	andi	r18, 0x07	; 7
    15b6:	08 2e       	mov	r0, r24
    15b8:	89 2f       	mov	r24, r25
    15ba:	26 95       	lsr	r18
    15bc:	07 94       	ror	r0
    15be:	27 95       	ror	r18
    15c0:	90 2d       	mov	r25, r0
    15c2:	82 27       	eor	r24, r18
    15c4:	06 94       	lsr	r0
    15c6:	27 95       	ror	r18
    15c8:	90 25       	eor	r25, r0
    15ca:	82 27       	eor	r24, r18
    15cc:	90 93 95 01 	sts	0x0195, r25
    15d0:	80 93 94 01 	sts	0x0194, r24
    15d4:	88 e0       	ldi	r24, 0x08	; 8
    15d6:	80 93 9c 01 	sts	0x019C, r24
    15da:	80 91 9a 01 	lds	r24, 0x019A
    15de:	90 91 9b 01 	lds	r25, 0x019B
    15e2:	88 63       	ori	r24, 0x38	; 56
    15e4:	90 93 9b 01 	sts	0x019B, r25
    15e8:	80 93 9a 01 	sts	0x019A, r24
    15ec:	80 91 9a 01 	lds	r24, 0x019A
    15f0:	90 91 9b 01 	lds	r25, 0x019B
    15f4:	15 cd       	rjmp	.-1494   	; 0x1020 <_ZL9rf12_xferj>

000015f6 <_Z14rf12_sendStarthPKvh>:
    15f6:	cf 93       	push	r28
    15f8:	c8 2f       	mov	r28, r24
    15fa:	40 93 4f 01 	sts	0x014F, r20
    15fe:	20 e5       	ldi	r18, 0x50	; 80
    1600:	31 e0       	ldi	r19, 0x01	; 1
    1602:	50 e0       	ldi	r21, 0x00	; 0
    1604:	82 2f       	mov	r24, r18
    1606:	93 2f       	mov	r25, r19
    1608:	06 d2       	rcall	.+1036   	; 0x1a16 <memcpy>
    160a:	8c 2f       	mov	r24, r28
    160c:	ab df       	rcall	.-170    	; 0x1564 <_Z14rf12_sendStarth>
    160e:	cf 91       	pop	r28
    1610:	08 95       	ret

00001612 <_Z13rf12_sendWaith>:
    1612:	44 e0       	ldi	r20, 0x04	; 4
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	5c e0       	ldi	r21, 0x0C	; 12
    1618:	16 c0       	rjmp	.+44     	; 0x1646 <_Z13rf12_sendWaith+0x34>
    161a:	88 23       	and	r24, r24
    161c:	a1 f0       	breq	.+40     	; 0x1646 <_Z13rf12_sendWaith+0x34>
    161e:	93 b7       	in	r25, 0x33	; 51
    1620:	91 7f       	andi	r25, 0xF1	; 241
    1622:	83 30       	cpi	r24, 0x03	; 3
    1624:	21 f0       	breq	.+8      	; 0x162e <_Z13rf12_sendWaith+0x1c>
    1626:	82 30       	cpi	r24, 0x02	; 2
    1628:	21 f4       	brne	.+8      	; 0x1632 <_Z13rf12_sendWaith+0x20>
    162a:	25 2f       	mov	r18, r21
    162c:	03 c0       	rjmp	.+6      	; 0x1634 <_Z13rf12_sendWaith+0x22>
    162e:	24 2f       	mov	r18, r20
    1630:	01 c0       	rjmp	.+2      	; 0x1634 <_Z13rf12_sendWaith+0x22>
    1632:	23 2f       	mov	r18, r19
    1634:	92 2b       	or	r25, r18
    1636:	93 bf       	out	0x33, r25	; 51
    1638:	93 b7       	in	r25, 0x33	; 51
    163a:	91 60       	ori	r25, 0x01	; 1
    163c:	93 bf       	out	0x33, r25	; 51
    163e:	88 95       	sleep
    1640:	93 b7       	in	r25, 0x33	; 51
    1642:	9e 7f       	andi	r25, 0xFE	; 254
    1644:	93 bf       	out	0x33, r25	; 51
    1646:	90 91 9c 01 	lds	r25, 0x019C
    164a:	94 30       	cpi	r25, 0x04	; 4
    164c:	31 f7       	brne	.-52     	; 0x161a <_Z13rf12_sendWaith+0x8>
    164e:	08 95       	ret

00001650 <_Z21rf12_interruptcontrolv>:
/// @details
/// Attach interrupts for nodeid != 0
/// Detach interrupt for nodeid == 0
void rf12_interruptcontrol () {
	//#if PINCHG_IRQ
	EIMSK |= (1<<INT0);					// Enable INT0
    1650:	e8 9a       	sbi	0x1d, 0	; 29
    1652:	08 95       	ret

00001654 <_Z12rf12_restorehhh>:
/// @param g Net groups are used to separate nodes: only nodes in the same net
///          group can communicate with each other. Valid values are 1 to 212.
///          This parameter is optional, it defaults to 212 (0xD4) when omitted.
///          This is the only allowed value for RFM12 modules, only RFM12B
///          modules support other group values.
void rf12_restore (uint8_t id, uint8_t b, uint8_t g) {
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	d6 2f       	mov	r29, r22
    165a:	c4 2f       	mov	r28, r20
	nodeid = id;
    165c:	80 93 a0 01 	sts	0x01A0, r24
	group = g;
    1660:	40 93 9e 01 	sts	0x019E, r20
	band = b;
    1664:	60 93 a1 01 	sts	0x01A1, r22
	
	//interrupts may be attached or detached for OOK
	rf12_interruptcontrol();
    1668:	f3 df       	rcall	.-26     	; 0x1650 <_Z21rf12_interruptcontrolv>
	//undo settings for foreign-FSK use
	rf12_setFixedLength(0);
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	72 df       	rcall	.-284    	; 0x1552 <_Z19rf12_setFixedLengthh>
	blockInterrupts();
    166e:	ce dc       	rcall	.-1636   	; 0x100c <_ZL15blockInterruptsv>
	rfmstate = 0x8205;              // RF_SLEEP_MODE
    1670:	25 e0       	ldi	r18, 0x05	; 5
    1672:	32 e8       	ldi	r19, 0x82	; 130
    1674:	30 93 9b 01 	sts	0x019B, r19
    1678:	20 93 9a 01 	sts	0x019A, r18
	rf12_xfer(rfmstate);            // DC (disable clk pin), enable lbd
    167c:	80 91 9a 01 	lds	r24, 0x019A
    1680:	90 91 9b 01 	lds	r25, 0x019B
    1684:	cd dc       	rcall	.-1638   	; 0x1020 <_ZL9rf12_xferj>
	
	rf12_xfer(0x80C7 | (band << 4));// EL (ena TX), EF (ena RX FIFO), 12.0pF
    1686:	20 e1       	ldi	r18, 0x10	; 16
    1688:	d2 9f       	mul	r29, r18
    168a:	c0 01       	movw	r24, r0
    168c:	11 24       	eor	r1, r1
    168e:	87 6c       	ori	r24, 0xC7	; 199
    1690:	90 68       	ori	r25, 0x80	; 128
    1692:	c6 dc       	rcall	.-1652   	; 0x1020 <_ZL9rf12_xferj>
	rf12_xfer(0xA640);              // 868MHz
    1694:	80 e4       	ldi	r24, 0x40	; 64
    1696:	96 ea       	ldi	r25, 0xA6	; 166
    1698:	c3 dc       	rcall	.-1658   	; 0x1020 <_ZL9rf12_xferj>
	rf12_setBitrate(0x06);          // approx 49.2 Kbps, i.e. 10000/29/(1+6) Kbps
    169a:	86 e0       	ldi	r24, 0x06	; 6
    169c:	06 df       	rcall	.-500    	; 0x14aa <_Z15rf12_setBitrateh>
	rf12_xfer(0x94A2);              // VDI,FAST,134kHz,0dBm,-91dBm
    169e:	82 ea       	ldi	r24, 0xA2	; 162
    16a0:	94 e9       	ldi	r25, 0x94	; 148
    16a2:	be dc       	rcall	.-1668   	; 0x1020 <_ZL9rf12_xferj>
	rf12_xfer(0xC2AC);              // AL,!ml,DIG,DQD4
    16a4:	8c ea       	ldi	r24, 0xAC	; 172
    16a6:	92 ec       	ldi	r25, 0xC2	; 194
    16a8:	bb dc       	rcall	.-1674   	; 0x1020 <_ZL9rf12_xferj>
	if (group != 0) {
    16aa:	cc 23       	and	r28, r28
    16ac:	41 f0       	breq	.+16     	; 0x16be <_Z12rf12_restorehhh+0x6a>
		rf12_xfer(0xCA83);          // FIFO8,2-SYNC,!ff,DR
    16ae:	83 e8       	ldi	r24, 0x83	; 131
    16b0:	9a ec       	ldi	r25, 0xCA	; 202
    16b2:	b6 dc       	rcall	.-1684   	; 0x1020 <_ZL9rf12_xferj>
		rf12_xfer(0xCE00 | group);  // SYNC=2DXX;
    16b4:	8c 2f       	mov	r24, r28
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9e 6c       	ori	r25, 0xCE	; 206
    16ba:	b2 dc       	rcall	.-1692   	; 0x1020 <_ZL9rf12_xferj>
    16bc:	06 c0       	rjmp	.+12     	; 0x16ca <_Z12rf12_restorehhh+0x76>
		} else {
		rf12_xfer(0xCA8B);          // FIFO8,1-SYNC,!ff,DR
    16be:	8b e8       	ldi	r24, 0x8B	; 139
    16c0:	9a ec       	ldi	r25, 0xCA	; 202
    16c2:	ae dc       	rcall	.-1700   	; 0x1020 <_ZL9rf12_xferj>
		rf12_xfer(0xCE2D);          // SYNC=2D;
    16c4:	8d e2       	ldi	r24, 0x2D	; 45
    16c6:	9e ec       	ldi	r25, 0xCE	; 206
    16c8:	ab dc       	rcall	.-1706   	; 0x1020 <_ZL9rf12_xferj>
	}
	rf12_xfer(0xC483);              // AFC@VDI,NO RSTRIC,!st,!fi,OE,EN
    16ca:	83 e8       	ldi	r24, 0x83	; 131
    16cc:	94 ec       	ldi	r25, 0xC4	; 196
    16ce:	a8 dc       	rcall	.-1712   	; 0x1020 <_ZL9rf12_xferj>
	rf12_xfer(0x9850);              // !mp,90kHz,MAX OUT
    16d0:	80 e5       	ldi	r24, 0x50	; 80
    16d2:	98 e9       	ldi	r25, 0x98	; 152
    16d4:	a5 dc       	rcall	.-1718   	; 0x1020 <_ZL9rf12_xferj>
	rf12_xfer(0xCC77);              // OB1,OB0, LPX,!ddy,DDIT,BW0
    16d6:	87 e7       	ldi	r24, 0x77	; 119
    16d8:	9c ec       	ldi	r25, 0xCC	; 204
    16da:	a2 dc       	rcall	.-1724   	; 0x1020 <_ZL9rf12_xferj>
	rf12_xfer(0xE000);              // NOT USE
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 ee       	ldi	r25, 0xE0	; 224
    16e0:	9f dc       	rcall	.-1730   	; 0x1020 <_ZL9rf12_xferj>
	rf12_xfer(0xC800);              // NOT USE
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	98 ec       	ldi	r25, 0xC8	; 200
    16e6:	9c dc       	rcall	.-1736   	; 0x1020 <_ZL9rf12_xferj>
	rf12_xfer(0xC049);              // 1.66MHz,3.1V
    16e8:	89 e4       	ldi	r24, 0x49	; 73
    16ea:	90 ec       	ldi	r25, 0xC0	; 192
    16ec:	99 dc       	rcall	.-1742   	; 0x1020 <_ZL9rf12_xferj>

	rxstate = TXIDLE;
    16ee:	84 e0       	ldi	r24, 0x04	; 4
    16f0:	80 93 9c 01 	sts	0x019C, r24
	
	allowInterrupts();
    16f4:	8d dc       	rcall	.-1766   	; 0x1010 <_ZL15allowInterruptsv>
}
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	08 95       	ret

000016fc <_Z15rf12_initializehhh>:
/// settings, nor does it change the EEPROM settings. To use the netId and
/// netGroup settings saved in EEPROM use rf12_config() instead of
/// rf12_initialize. The choice whether to use rf12_initialize() or
/// rf12_config() at the top of every sketch is one of personal preference.
/// To set EEPROM settings for use with rf12_config() use the RF12demo sketch.
uint8_t rf12_initialize (uint8_t id, uint8_t b, uint8_t g) {
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	c8 2f       	mov	r28, r24
    1704:	d6 2f       	mov	r29, r22
    1706:	14 2f       	mov	r17, r20
	nodeid = id;
    1708:	80 93 a0 01 	sts	0x01A0, r24
	group = g;
    170c:	40 93 9e 01 	sts	0x019E, r20
	band = b;
    1710:	60 93 a1 01 	sts	0x01A1, r22
	
	rf12_spiInit();
    1714:	b3 dc       	rcall	.-1690   	; 0x107c <_Z12rf12_spiInitv>
	
	rf12_interruptcontrol();
    1716:	9c df       	rcall	.-200    	; 0x1650 <_Z21rf12_interruptcontrolv>
	// reset RFM12b module
	rf12_xfer(0xCA82); // enable software reset
    1718:	82 e8       	ldi	r24, 0x82	; 130
    171a:	9a ec       	ldi	r25, 0xCA	; 202
    171c:	81 dc       	rcall	.-1790   	; 0x1020 <_ZL9rf12_xferj>
	rf12_xfer(0xFE00); // do software reset
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	9e ef       	ldi	r25, 0xFE	; 254
    1722:	7e dc       	rcall	.-1796   	; 0x1020 <_ZL9rf12_xferj>
	rxstate = UNINITIALIZED;
    1724:	85 e0       	ldi	r24, 0x05	; 5
    1726:	80 93 9c 01 	sts	0x019C, r24

	// wait until RFM12B is out of power-up reset, this could takes several *seconds*
	// normally about 50ms
	set_sleep_mode(SLEEP_MODE_IDLE);
    172a:	83 b7       	in	r24, 0x33	; 51
    172c:	81 7f       	andi	r24, 0xF1	; 241
    172e:	83 bf       	out	0x33, r24	; 51
	 
	while (rxstate==UNINITIALIZED) {
    1730:	80 91 9c 01 	lds	r24, 0x019C
    1734:	85 30       	cpi	r24, 0x05	; 5
    1736:	59 f4       	brne	.+22     	; 0x174e <_Z15rf12_initializehhh+0x52>
		
	#if PINCHG_IRQ
		while (digitalRead(RFM_IRQ)==LOW)
		rf12_interrupt();
	#else
		sleep_mode();
    1738:	93 b7       	in	r25, 0x33	; 51
    173a:	91 60       	ori	r25, 0x01	; 1
    173c:	93 bf       	out	0x33, r25	; 51
    173e:	88 95       	sleep
    1740:	93 b7       	in	r25, 0x33	; 51
    1742:	9e 7f       	andi	r25, 0xFE	; 254
    1744:	93 bf       	out	0x33, r25	; 51

	// wait until RFM12B is out of power-up reset, this could takes several *seconds*
	// normally about 50ms
	set_sleep_mode(SLEEP_MODE_IDLE);
	 
	while (rxstate==UNINITIALIZED) {
    1746:	90 91 9c 01 	lds	r25, 0x019C
    174a:	95 30       	cpi	r25, 0x05	; 5
    174c:	a9 f3       	breq	.-22     	; 0x1738 <_Z15rf12_initializehhh+0x3c>
		sleep_mode();
	#endif
	}
	
	
	rf12_restore(id, b, g);
    174e:	41 2f       	mov	r20, r17
    1750:	6d 2f       	mov	r22, r29
    1752:	8c 2f       	mov	r24, r28
    1754:	7f df       	rcall	.-258    	; 0x1654 <_Z12rf12_restorehhh>
	return nodeid;
}
    1756:	80 91 a0 01 	lds	r24, 0x01A0
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	08 95       	ret

00001762 <tone_init>:
#include <avr/io.h>

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume counsigned long _tAC_time;ntrol.

void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
    1762:	21 9a       	sbi	0x04, 1	; 4
    1764:	08 95       	ret

00001766 <noTone>:


	void noTone() {
	//	uart0_puts("STOP");
	//	TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
		 TCCR1B  &= ~(1<<0) | ~(1<<1) | ~(1<<2) ;        // No clock source (Timer/Counter stopped).
    1766:	e1 e8       	ldi	r30, 0x81	; 129
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	80 83       	st	Z, r24
		 TCCR1A  = 0x00;       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
    176e:	10 92 80 00 	sts	0x0080, r1
		PORTB &= ~(1 << 1); // Set pin PB1 to LOW.
    1772:	29 98       	cbi	0x05, 1	; 5
    1774:	08 95       	ret

00001776 <tone>:
void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
	
}

void tone(unsigned long frequency, uint8_t volume) {
    1776:	cf 92       	push	r12
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	6b 01       	movw	r12, r22
    1784:	7c 01       	movw	r14, r24
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
    1786:	61 15       	cp	r22, r1
    1788:	71 05       	cpc	r23, r1
    178a:	81 05       	cpc	r24, r1
    178c:	91 05       	cpc	r25, r1
    178e:	11 f0       	breq	.+4      	; 0x1794 <tone+0x1e>
    1790:	41 11       	cpse	r20, r1
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <tone+0x22>
    1794:	e8 df       	rcall	.-48     	; 0x1766 <noTone>
    1796:	4d c0       	rjmp	.+154    	; 0x1832 <tone+0xbc>
    1798:	d4 2f       	mov	r29, r20
    179a:	4b 30       	cpi	r20, 0x0B	; 11
    179c:	08 f0       	brcs	.+2      	; 0x17a0 <tone+0x2a>
    179e:	da e0       	ldi	r29, 0x0A	; 10
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	72 e1       	ldi	r23, 0x12	; 18
    17a4:	8a e7       	ldi	r24, 0x7A	; 122
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a7 01       	movw	r20, r14
    17aa:	96 01       	movw	r18, r12
    17ac:	fe d0       	rcall	.+508    	; 0x19aa <__udivmodsi4>
    17ae:	cc 24       	eor	r12, r12
    17b0:	ca 94       	dec	r12
    17b2:	dc 2c       	mov	r13, r12
    17b4:	76 01       	movw	r14, r12
    17b6:	c2 0e       	add	r12, r18
    17b8:	d3 1e       	adc	r13, r19
    17ba:	e4 1e       	adc	r14, r20
    17bc:	f5 1e       	adc	r15, r21
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    17be:	c1 14       	cp	r12, r1
    17c0:	d1 04       	cpc	r13, r1
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	e8 06       	cpc	r14, r24
    17c6:	f1 04       	cpc	r15, r1
    17c8:	58 f0       	brcs	.+22     	; 0x17e0 <tone+0x6a>
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
    17ca:	cd 2c       	mov	r12, r13
    17cc:	de 2c       	mov	r13, r14
    17ce:	ef 2c       	mov	r14, r15
    17d0:	ff 24       	eor	r15, r15
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	c8 1a       	sub	r12, r24
    17d6:	d1 08       	sbc	r13, r1
    17d8:	e1 08       	sbc	r14, r1
    17da:	f1 08       	sbc	r15, r1
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    17dc:	c4 e0       	ldi	r28, 0x04	; 4
    17de:	01 c0       	rjmp	.+2      	; 0x17e2 <tone+0x6c>
void tone(unsigned long frequency, uint8_t volume) {
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
    17e0:	c1 e0       	ldi	r28, 0x01	; 1
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
		}
	
		unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
    17e2:	ed 2f       	mov	r30, r29
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	ed 5f       	subi	r30, 0xFD	; 253
    17e8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ea:	20 81       	ld	r18, Z
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	50 e0       	ldi	r21, 0x00	; 0
    17f2:	c7 01       	movw	r24, r14
    17f4:	b6 01       	movw	r22, r12
    17f6:	d9 d0       	rcall	.+434    	; 0x19aa <__udivmodsi4>
		
		ICR1   = top;							// Set the top.
    17f8:	d0 92 87 00 	sts	0x0087, r13
    17fc:	c0 92 86 00 	sts	0x0086, r12
		if (TCNT1 > top) TCNT1 = top;			// Counter over the top, put within range.
    1800:	80 91 84 00 	lds	r24, 0x0084
    1804:	90 91 85 00 	lds	r25, 0x0085
    1808:	a0 e0       	ldi	r26, 0x00	; 0
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	c8 16       	cp	r12, r24
    180e:	d9 06       	cpc	r13, r25
    1810:	ea 06       	cpc	r14, r26
    1812:	fb 06       	cpc	r15, r27
    1814:	20 f4       	brcc	.+8      	; 0x181e <tone+0xa8>
    1816:	d0 92 85 00 	sts	0x0085, r13
    181a:	c0 92 84 00 	sts	0x0084, r12
			TCCR1B = _BV(WGM13)  | prescaler;   // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
    181e:	c0 61       	ori	r28, 0x10	; 16
    1820:	c0 93 81 00 	sts	0x0081, r28
			OCR1A  = duty;						// Set the duty cycle (volume).
    1824:	30 93 89 00 	sts	0x0089, r19
    1828:	20 93 88 00 	sts	0x0088, r18
			TCCR1A = _BV(COM1A1);				// Clear OC1A/OC1B on Compare Match (Set output to low level).
    182c:	80 e8       	ldi	r24, 0x80	; 128
    182e:	80 93 80 00 	sts	0x0080, r24

}
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	ff 90       	pop	r15
    1838:	ef 90       	pop	r14
    183a:	df 90       	pop	r13
    183c:	cf 90       	pop	r12
    183e:	08 95       	ret

00001840 <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    1840:	1f 92       	push	r1
    1842:	0f 92       	push	r0
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	0f 92       	push	r0
    1848:	11 24       	eor	r1, r1
    184a:	2f 93       	push	r18
    184c:	3f 93       	push	r19
    184e:	4f 93       	push	r20
    1850:	5f 93       	push	r21
    1852:	8f 93       	push	r24
    1854:	9f 93       	push	r25
    1856:	ef 93       	push	r30
    1858:	ff 93       	push	r31
    185a:	40 91 c0 00 	lds	r20, 0x00C0
    185e:	50 91 c6 00 	lds	r21, 0x00C6
    1862:	48 71       	andi	r20, 0x18	; 24
    1864:	80 91 a4 01 	lds	r24, 0x01A4
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	01 96       	adiw	r24, 0x01	; 1
    186c:	8f 77       	andi	r24, 0x7F	; 127
    186e:	99 27       	eor	r25, r25
    1870:	20 91 a3 01 	lds	r18, 0x01A3
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	28 17       	cp	r18, r24
    1878:	39 07       	cpc	r19, r25
    187a:	39 f0       	breq	.+14     	; 0x188a <__vector_18+0x4a>
    187c:	80 93 a4 01 	sts	0x01A4, r24
    1880:	fc 01       	movw	r30, r24
    1882:	e9 55       	subi	r30, 0x59	; 89
    1884:	fe 4f       	sbci	r31, 0xFE	; 254
    1886:	50 83       	st	Z, r21
    1888:	01 c0       	rjmp	.+2      	; 0x188c <__vector_18+0x4c>
    188a:	42 e0       	ldi	r20, 0x02	; 2
    188c:	40 93 a2 01 	sts	0x01A2, r20
    1890:	ff 91       	pop	r31
    1892:	ef 91       	pop	r30
    1894:	9f 91       	pop	r25
    1896:	8f 91       	pop	r24
    1898:	5f 91       	pop	r21
    189a:	4f 91       	pop	r20
    189c:	3f 91       	pop	r19
    189e:	2f 91       	pop	r18
    18a0:	0f 90       	pop	r0
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	0f 90       	pop	r0
    18a6:	1f 90       	pop	r1
    18a8:	18 95       	reti

000018aa <__vector_19>:
    18aa:	1f 92       	push	r1
    18ac:	0f 92       	push	r0
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	0f 92       	push	r0
    18b2:	11 24       	eor	r1, r1
    18b4:	8f 93       	push	r24
    18b6:	9f 93       	push	r25
    18b8:	ef 93       	push	r30
    18ba:	ff 93       	push	r31
    18bc:	90 91 a6 01 	lds	r25, 0x01A6
    18c0:	80 91 a5 01 	lds	r24, 0x01A5
    18c4:	98 17       	cp	r25, r24
    18c6:	79 f0       	breq	.+30     	; 0x18e6 <__vector_19+0x3c>
    18c8:	80 91 a5 01 	lds	r24, 0x01A5
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	01 96       	adiw	r24, 0x01	; 1
    18d0:	8f 77       	andi	r24, 0x7F	; 127
    18d2:	99 27       	eor	r25, r25
    18d4:	80 93 a5 01 	sts	0x01A5, r24
    18d8:	fc 01       	movw	r30, r24
    18da:	e9 5d       	subi	r30, 0xD9	; 217
    18dc:	fd 4f       	sbci	r31, 0xFD	; 253
    18de:	80 81       	ld	r24, Z
    18e0:	80 93 c6 00 	sts	0x00C6, r24
    18e4:	05 c0       	rjmp	.+10     	; 0x18f0 <__vector_19+0x46>
    18e6:	e1 ec       	ldi	r30, 0xC1	; 193
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	8f 7d       	andi	r24, 0xDF	; 223
    18ee:	80 83       	st	Z, r24
    18f0:	ff 91       	pop	r31
    18f2:	ef 91       	pop	r30
    18f4:	9f 91       	pop	r25
    18f6:	8f 91       	pop	r24
    18f8:	0f 90       	pop	r0
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	0f 90       	pop	r0
    18fe:	1f 90       	pop	r1
    1900:	18 95       	reti

00001902 <uart0_init>:
    1902:	10 92 a6 01 	sts	0x01A6, r1
    1906:	10 92 a5 01 	sts	0x01A5, r1
    190a:	10 92 a4 01 	sts	0x01A4, r1
    190e:	10 92 a3 01 	sts	0x01A3, r1
    1912:	99 23       	and	r25, r25
    1914:	24 f4       	brge	.+8      	; 0x191e <uart0_init+0x1c>
    1916:	22 e0       	ldi	r18, 0x02	; 2
    1918:	20 93 c0 00 	sts	0x00C0, r18
    191c:	9f 77       	andi	r25, 0x7F	; 127
    191e:	90 93 c5 00 	sts	0x00C5, r25
    1922:	80 93 c4 00 	sts	0x00C4, r24
    1926:	88 e9       	ldi	r24, 0x98	; 152
    1928:	80 93 c1 00 	sts	0x00C1, r24
    192c:	86 e0       	ldi	r24, 0x06	; 6
    192e:	80 93 c2 00 	sts	0x00C2, r24
    1932:	08 95       	ret

00001934 <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    1934:	60 91 a6 01 	lds	r22, 0x01A6
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	6f 5f       	subi	r22, 0xFF	; 255
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	6f 77       	andi	r22, 0x7F	; 127
    1940:	77 27       	eor	r23, r23
    1942:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
    1944:	20 91 a5 01 	lds	r18, 0x01A5
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	24 17       	cp	r18, r20
    194c:	35 07       	cpc	r19, r21
    194e:	d1 f3       	breq	.-12     	; 0x1944 <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    1950:	fb 01       	movw	r30, r22
    1952:	e9 5d       	subi	r30, 0xD9	; 217
    1954:	fd 4f       	sbci	r31, 0xFD	; 253
    1956:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    1958:	60 93 a6 01 	sts	0x01A6, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
    195c:	e1 ec       	ldi	r30, 0xC1	; 193
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	80 62       	ori	r24, 0x20	; 32
    1964:	80 83       	st	Z, r24
    1966:	08 95       	ret

00001968 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
    1968:	cf 93       	push	r28
    196a:	df 93       	push	r29
    196c:	ec 01       	movw	r28, r24
	while (*s) {
    196e:	88 81       	ld	r24, Y
    1970:	88 23       	and	r24, r24
    1972:	29 f0       	breq	.+10     	; 0x197e <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
    1974:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
    1976:	de df       	rcall	.-68     	; 0x1934 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
    1978:	89 91       	ld	r24, Y+
    197a:	81 11       	cpse	r24, r1
    197c:	fc cf       	rjmp	.-8      	; 0x1976 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <__divmodhi4>:
    1984:	97 fb       	bst	r25, 7
    1986:	07 2e       	mov	r0, r23
    1988:	16 f4       	brtc	.+4      	; 0x198e <__divmodhi4+0xa>
    198a:	00 94       	com	r0
    198c:	06 d0       	rcall	.+12     	; 0x199a <__divmodhi4_neg1>
    198e:	77 fd       	sbrc	r23, 7
    1990:	08 d0       	rcall	.+16     	; 0x19a2 <__divmodhi4_neg2>
    1992:	2d d0       	rcall	.+90     	; 0x19ee <__udivmodhi4>
    1994:	07 fc       	sbrc	r0, 7
    1996:	05 d0       	rcall	.+10     	; 0x19a2 <__divmodhi4_neg2>
    1998:	3e f4       	brtc	.+14     	; 0x19a8 <__divmodhi4_exit>

0000199a <__divmodhi4_neg1>:
    199a:	90 95       	com	r25
    199c:	81 95       	neg	r24
    199e:	9f 4f       	sbci	r25, 0xFF	; 255
    19a0:	08 95       	ret

000019a2 <__divmodhi4_neg2>:
    19a2:	70 95       	com	r23
    19a4:	61 95       	neg	r22
    19a6:	7f 4f       	sbci	r23, 0xFF	; 255

000019a8 <__divmodhi4_exit>:
    19a8:	08 95       	ret

000019aa <__udivmodsi4>:
    19aa:	a1 e2       	ldi	r26, 0x21	; 33
    19ac:	1a 2e       	mov	r1, r26
    19ae:	aa 1b       	sub	r26, r26
    19b0:	bb 1b       	sub	r27, r27
    19b2:	fd 01       	movw	r30, r26
    19b4:	0d c0       	rjmp	.+26     	; 0x19d0 <__udivmodsi4_ep>

000019b6 <__udivmodsi4_loop>:
    19b6:	aa 1f       	adc	r26, r26
    19b8:	bb 1f       	adc	r27, r27
    19ba:	ee 1f       	adc	r30, r30
    19bc:	ff 1f       	adc	r31, r31
    19be:	a2 17       	cp	r26, r18
    19c0:	b3 07       	cpc	r27, r19
    19c2:	e4 07       	cpc	r30, r20
    19c4:	f5 07       	cpc	r31, r21
    19c6:	20 f0       	brcs	.+8      	; 0x19d0 <__udivmodsi4_ep>
    19c8:	a2 1b       	sub	r26, r18
    19ca:	b3 0b       	sbc	r27, r19
    19cc:	e4 0b       	sbc	r30, r20
    19ce:	f5 0b       	sbc	r31, r21

000019d0 <__udivmodsi4_ep>:
    19d0:	66 1f       	adc	r22, r22
    19d2:	77 1f       	adc	r23, r23
    19d4:	88 1f       	adc	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	1a 94       	dec	r1
    19da:	69 f7       	brne	.-38     	; 0x19b6 <__udivmodsi4_loop>
    19dc:	60 95       	com	r22
    19de:	70 95       	com	r23
    19e0:	80 95       	com	r24
    19e2:	90 95       	com	r25
    19e4:	9b 01       	movw	r18, r22
    19e6:	ac 01       	movw	r20, r24
    19e8:	bd 01       	movw	r22, r26
    19ea:	cf 01       	movw	r24, r30
    19ec:	08 95       	ret

000019ee <__udivmodhi4>:
    19ee:	aa 1b       	sub	r26, r26
    19f0:	bb 1b       	sub	r27, r27
    19f2:	51 e1       	ldi	r21, 0x11	; 17
    19f4:	07 c0       	rjmp	.+14     	; 0x1a04 <__udivmodhi4_ep>

000019f6 <__udivmodhi4_loop>:
    19f6:	aa 1f       	adc	r26, r26
    19f8:	bb 1f       	adc	r27, r27
    19fa:	a6 17       	cp	r26, r22
    19fc:	b7 07       	cpc	r27, r23
    19fe:	10 f0       	brcs	.+4      	; 0x1a04 <__udivmodhi4_ep>
    1a00:	a6 1b       	sub	r26, r22
    1a02:	b7 0b       	sbc	r27, r23

00001a04 <__udivmodhi4_ep>:
    1a04:	88 1f       	adc	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	5a 95       	dec	r21
    1a0a:	a9 f7       	brne	.-22     	; 0x19f6 <__udivmodhi4_loop>
    1a0c:	80 95       	com	r24
    1a0e:	90 95       	com	r25
    1a10:	bc 01       	movw	r22, r24
    1a12:	cd 01       	movw	r24, r26
    1a14:	08 95       	ret

00001a16 <memcpy>:
    1a16:	fb 01       	movw	r30, r22
    1a18:	dc 01       	movw	r26, r24
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <memcpy+0xa>
    1a1c:	01 90       	ld	r0, Z+
    1a1e:	0d 92       	st	X+, r0
    1a20:	41 50       	subi	r20, 0x01	; 1
    1a22:	50 40       	sbci	r21, 0x00	; 0
    1a24:	d8 f7       	brcc	.-10     	; 0x1a1c <memcpy+0x6>
    1a26:	08 95       	ret

00001a28 <_exit>:
    1a28:	f8 94       	cli

00001a2a <__stop_program>:
    1a2a:	ff cf       	rjmp	.-2      	; 0x1a2a <__stop_program>
