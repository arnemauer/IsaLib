
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000726  000007ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000726  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010a  0080010a  000007c4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000007c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000f27  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  00000f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000165d  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000067e  00000000  00000000  000026c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ba4  00000000  00000000  00002d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000294  00000000  00000000  000038e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000380  00000000  00000000  00003b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000871  00000000  00000000  00003efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000190  00000000  00000000  0000476d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	61 c0       	rjmp	.+194    	; 0xe0 <__vector_7>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	fc c2       	rjmp	.+1528   	; 0x626 <__vector_11>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	47 d0       	rcall	.+142    	; 0x12a <main>
  9c:	42 c3       	rjmp	.+1668   	; 0x722 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	80 93 b0 00 	sts	0x00B0, r24
  a6:	94 e0       	ldi	r25, 0x04	; 4
  a8:	90 93 b1 00 	sts	0x00B1, r25
  ac:	80 93 70 00 	sts	0x0070, r24
  b0:	8a ef       	ldi	r24, 0xFA	; 250
  b2:	80 93 b3 00 	sts	0x00B3, r24
  b6:	08 95       	ret

000000b8 <millis_get>:
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	8f b7       	in	r24, 0x3f	; 63
  be:	f8 94       	cli
  c0:	00 91 0a 01 	lds	r16, 0x010A
  c4:	10 91 0b 01 	lds	r17, 0x010B
  c8:	20 91 0c 01 	lds	r18, 0x010C
  cc:	30 91 0d 01 	lds	r19, 0x010D
  d0:	8f bf       	out	0x3f, r24	; 63
  d2:	60 2f       	mov	r22, r16
  d4:	71 2f       	mov	r23, r17
  d6:	82 2f       	mov	r24, r18
  d8:	93 2f       	mov	r25, r19
  da:	1f 91       	pop	r17
  dc:	0f 91       	pop	r16
  de:	08 95       	ret

000000e0 <__vector_7>:

ISR(ISR_VECT)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
	++milliseconds;
  f2:	80 91 0a 01 	lds	r24, 0x010A
  f6:	90 91 0b 01 	lds	r25, 0x010B
  fa:	a0 91 0c 01 	lds	r26, 0x010C
  fe:	b0 91 0d 01 	lds	r27, 0x010D
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	a1 1d       	adc	r26, r1
 106:	b1 1d       	adc	r27, r1
 108:	80 93 0a 01 	sts	0x010A, r24
 10c:	90 93 0b 01 	sts	0x010B, r25
 110:	a0 93 0c 01 	sts	0x010C, r26
 114:	b0 93 0d 01 	sts	0x010D, r27
}
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <main>:



int main() {
	
	sei();
 12a:	78 94       	sei
	        // Initialize library
	        millis_init();
 12c:	b9 df       	rcall	.-142    	; 0xa0 <millis_init>
	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
	
// WHOOP UP
	byte x;
		for(x=50;x>0;x++){
 12e:	0f 2e       	mov	r0, r31
 130:	f2 e3       	ldi	r31, 0x32	; 50
 132:	ff 2e       	mov	r15, r31
 134:	f0 2d       	mov	r31, r0
			toneAC((250*x/20) );
 136:	0f 2e       	mov	r0, r31
 138:	fa ef       	ldi	r31, 0xFA	; 250
 13a:	8f 2e       	mov	r8, r31
 13c:	f0 2d       	mov	r31, r0
 13e:	0f 2e       	mov	r0, r31
 140:	f4 e1       	ldi	r31, 0x14	; 20
 142:	cf 2e       	mov	r12, r31
 144:	d1 2c       	mov	r13, r1
 146:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	0f 2e       	mov	r0, r31
 14a:	f4 ed       	ldi	r31, 0xD4	; 212
 14c:	af 2e       	mov	r10, r31
 14e:	f0 e3       	ldi	r31, 0x30	; 48
 150:	bf 2e       	mov	r11, r31
 152:	f0 2d       	mov	r31, r0
 154:	0f 2e       	mov	r0, r31
 156:	f3 e0       	ldi	r31, 0x03	; 3
 158:	9f 2e       	mov	r9, r31
 15a:	f0 2d       	mov	r31, r0
 15c:	19 c0       	rjmp	.+50     	; 0x190 <main+0x66>
 15e:	8f 9c       	mul	r8, r15
 160:	c0 01       	movw	r24, r0
 162:	11 24       	eor	r1, r1
 164:	b6 01       	movw	r22, r12
 166:	94 d2       	rcall	.+1320   	; 0x690 <__divmodhi4>
 168:	88 27       	eor	r24, r24
 16a:	77 fd       	sbrc	r23, 7
 16c:	80 95       	com	r24
 16e:	98 2f       	mov	r25, r24
 170:	e1 2c       	mov	r14, r1
 172:	00 e0       	ldi	r16, 0x00	; 0
 174:	10 e0       	ldi	r17, 0x00	; 0
 176:	98 01       	movw	r18, r16
 178:	4a e0       	ldi	r20, 0x0A	; 10
 17a:	a2 d1       	rcall	.+836    	; 0x4c0 <_Z6toneACmhmh>
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	36 e7       	ldi	r19, 0x76	; 118
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	21 50       	subi	r18, 0x01	; 1
 184:	30 40       	sbci	r19, 0x00	; 0
 186:	80 40       	sbci	r24, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <main+0x58>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x62>
 18c:	00 00       	nop
	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
	
// WHOOP UP
	byte x;
		for(x=50;x>0;x++){
 18e:	f3 94       	inc	r15
 190:	f1 10       	cpse	r15, r1
 192:	e5 cf       	rjmp	.-54     	; 0x15e <main+0x34>
			toneAC((250*x/20) );
			_delay_ms(30); // Wait a second.
		}
		toneAC(); // Turn off toneAC, can also use noToneAC().
 194:	e1 2c       	mov	r14, r1
 196:	00 e0       	ldi	r16, 0x00	; 0
 198:	10 e0       	ldi	r17, 0x00	; 0
 19a:	98 01       	movw	r18, r16
 19c:	4a e0       	ldi	r20, 0x0A	; 10
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	cb 01       	movw	r24, r22
 1a4:	8d d1       	rcall	.+794    	; 0x4c0 <_Z6toneACmhmh>
 1a6:	9f ef       	ldi	r25, 0xFF	; 255
 1a8:	29 e6       	ldi	r18, 0x69	; 105
 1aa:	38 e1       	ldi	r19, 0x18	; 24
 1ac:	91 50       	subi	r25, 0x01	; 1
 1ae:	20 40       	sbci	r18, 0x00	; 0
 1b0:	30 40       	sbci	r19, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x82>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x8c>
 1b6:	00 00       	nop
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	9f e4       	ldi	r25, 0x4F	; 79
 1bc:	23 ec       	ldi	r18, 0xC3	; 195
 1be:	81 50       	subi	r24, 0x01	; 1
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	20 40       	sbci	r18, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0x94>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0x9e>
 1c8:	00 00       	nop
 1ca:	e5 01       	movw	r28, r10
_delay_ms(4000);


// WHOOP DOWN
for(x=50;x>0;x--){
	toneAC((250*x/20) );
 1cc:	ce 01       	movw	r24, r28
 1ce:	b6 01       	movw	r22, r12
 1d0:	5f d2       	rcall	.+1214   	; 0x690 <__divmodhi4>
 1d2:	88 27       	eor	r24, r24
 1d4:	77 fd       	sbrc	r23, 7
 1d6:	80 95       	com	r24
 1d8:	98 2f       	mov	r25, r24
 1da:	e1 2c       	mov	r14, r1
 1dc:	00 e0       	ldi	r16, 0x00	; 0
 1de:	10 e0       	ldi	r17, 0x00	; 0
 1e0:	98 01       	movw	r18, r16
 1e2:	4a e0       	ldi	r20, 0x0A	; 10
 1e4:	6d d1       	rcall	.+730    	; 0x4c0 <_Z6toneACmhmh>
 1e6:	3f ef       	ldi	r19, 0xFF	; 255
 1e8:	86 e7       	ldi	r24, 0x76	; 118
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	31 50       	subi	r19, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0xc2>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0xcc>
 1f6:	00 00       	nop
 1f8:	ca 5f       	subi	r28, 0xFA	; 250
 1fa:	d1 09       	sbc	r29, r1

_delay_ms(4000);


// WHOOP DOWN
for(x=50;x>0;x--){
 1fc:	39 f7       	brne	.-50     	; 0x1cc <main+0xa2>
	toneAC((250*x/20) );
	_delay_ms(30); // Wait a second.
}
toneAC(); // Turn off toneAC, can also use noToneAC().
 1fe:	00 e0       	ldi	r16, 0x00	; 0
 200:	10 e0       	ldi	r17, 0x00	; 0
 202:	98 01       	movw	r18, r16
 204:	4a e0       	ldi	r20, 0x0A	; 10
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	70 e0       	ldi	r23, 0x00	; 0
 20a:	cb 01       	movw	r24, r22
 20c:	59 d1       	rcall	.+690    	; 0x4c0 <_Z6toneACmhmh>
 20e:	2f ef       	ldi	r18, 0xFF	; 255
 210:	39 e6       	ldi	r19, 0x69	; 105
 212:	88 e1       	ldi	r24, 0x18	; 24
 214:	21 50       	subi	r18, 0x01	; 1
 216:	30 40       	sbci	r19, 0x00	; 0
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <main+0xea>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <main+0xf4>
 21e:	00 00       	nop
 220:	9f ef       	ldi	r25, 0xFF	; 255
 222:	2f e4       	ldi	r18, 0x4F	; 79
 224:	33 ec       	ldi	r19, 0xC3	; 195
 226:	91 50       	subi	r25, 0x01	; 1
 228:	20 40       	sbci	r18, 0x00	; 0
 22a:	30 40       	sbci	r19, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <main+0xfc>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x106>
 230:	00 00       	nop
_delay_ms(4000);		
		
		
// DOORBELL
for(x=0;x<2;x++){
toneAC(1500, 10, 500, true); // Play thisNote at full volume for noteDuration in the background.
 232:	ee 24       	eor	r14, r14
 234:	e3 94       	inc	r14
 236:	04 ef       	ldi	r16, 0xF4	; 244
 238:	11 e0       	ldi	r17, 0x01	; 1
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	4a e0       	ldi	r20, 0x0A	; 10
 240:	6c ed       	ldi	r22, 0xDC	; 220
 242:	75 e0       	ldi	r23, 0x05	; 5
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	3b d1       	rcall	.+630    	; 0x4c0 <_Z6toneACmhmh>
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	99 e6       	ldi	r25, 0x69	; 105
 24e:	28 e1       	ldi	r18, 0x18	; 24
 250:	81 50       	subi	r24, 0x01	; 1
 252:	90 40       	sbci	r25, 0x00	; 0
 254:	20 40       	sbci	r18, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <main+0x126>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x130>
 25a:	00 00       	nop
_delay_ms(500);
toneAC(1200, 10, 500, true); // Play thisNote at full volume for noteDuration in the background.
 25c:	04 ef       	ldi	r16, 0xF4	; 244
 25e:	11 e0       	ldi	r17, 0x01	; 1
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	4a e0       	ldi	r20, 0x0A	; 10
 266:	60 eb       	ldi	r22, 0xB0	; 176
 268:	74 e0       	ldi	r23, 0x04	; 4
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	28 d1       	rcall	.+592    	; 0x4c0 <_Z6toneACmhmh>
 270:	3f ef       	ldi	r19, 0xFF	; 255
 272:	8d e3       	ldi	r24, 0x3D	; 61
 274:	99 e4       	ldi	r25, 0x49	; 73
 276:	31 50       	subi	r19, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <main+0x14c>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x156>
 280:	00 00       	nop
_delay_ms(4000);		
		
		
// DOORBELL
for(x=0;x<2;x++){
toneAC(1500, 10, 500, true); // Play thisNote at full volume for noteDuration in the background.
 282:	04 ef       	ldi	r16, 0xF4	; 244
 284:	11 e0       	ldi	r17, 0x01	; 1
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	4a e0       	ldi	r20, 0x0A	; 10
 28c:	6c ed       	ldi	r22, 0xDC	; 220
 28e:	75 e0       	ldi	r23, 0x05	; 5
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	15 d1       	rcall	.+554    	; 0x4c0 <_Z6toneACmhmh>
 296:	2f ef       	ldi	r18, 0xFF	; 255
 298:	39 e6       	ldi	r19, 0x69	; 105
 29a:	88 e1       	ldi	r24, 0x18	; 24
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	30 40       	sbci	r19, 0x00	; 0
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x172>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x17c>
 2a6:	00 00       	nop
_delay_ms(500);
toneAC(1200, 10, 500, true); // Play thisNote at full volume for noteDuration in the background.
 2a8:	04 ef       	ldi	r16, 0xF4	; 244
 2aa:	11 e0       	ldi	r17, 0x01	; 1
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	4a e0       	ldi	r20, 0x0A	; 10
 2b2:	60 eb       	ldi	r22, 0xB0	; 176
 2b4:	74 e0       	ldi	r23, 0x04	; 4
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 d1       	rcall	.+516    	; 0x4c0 <_Z6toneACmhmh>
 2bc:	9f ef       	ldi	r25, 0xFF	; 255
 2be:	2d e3       	ldi	r18, 0x3D	; 61
 2c0:	39 e4       	ldi	r19, 0x49	; 73
 2c2:	91 50       	subi	r25, 0x01	; 1
 2c4:	20 40       	sbci	r18, 0x00	; 0
 2c6:	30 40       	sbci	r19, 0x00	; 0
 2c8:	e1 f7       	brne	.-8      	; 0x2c2 <main+0x198>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <main+0x1a2>
 2cc:	00 00       	nop
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	9f e4       	ldi	r25, 0x4F	; 79
 2d2:	23 ec       	ldi	r18, 0xC3	; 195
 2d4:	81 50       	subi	r24, 0x01	; 1
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	20 40       	sbci	r18, 0x00	; 0
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <main+0x1aa>
 2dc:	00 c0       	rjmp	.+0      	; 0x2de <main+0x1b4>
 2de:	00 00       	nop
 2e0:	d9 2d       	mov	r29, r9
 2e2:	23 c0       	rjmp	.+70     	; 0x32a <main+0x200>
//byte x;
byte y;
	for(y=0;y<3;y++){
	      for(x=0;x<(15*Duration);x++)
	      {
			toneAC(1000, 10, 40); // Play thisNote at full volume for noteDuration in the background.
 2e4:	e1 2c       	mov	r14, r1
 2e6:	08 e2       	ldi	r16, 0x28	; 40
 2e8:	10 e0       	ldi	r17, 0x00	; 0
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	4a e0       	ldi	r20, 0x0A	; 10
 2f0:	68 ee       	ldi	r22, 0xE8	; 232
 2f2:	73 e0       	ldi	r23, 0x03	; 3
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	e3 d0       	rcall	.+454    	; 0x4c0 <_Z6toneACmhmh>
			toneAC(750, 10, 40); // Play thisNote at full volume for noteDuration in the background.
 2fa:	08 e2       	ldi	r16, 0x28	; 40
 2fc:	10 e0       	ldi	r17, 0x00	; 0
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	4a e0       	ldi	r20, 0x0A	; 10
 304:	6e ee       	ldi	r22, 0xEE	; 238
 306:	72 e0       	ldi	r23, 0x02	; 2
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	d9 d0       	rcall	.+434    	; 0x4c0 <_Z6toneACmhmh>
// Phone ring
byte Duration = 1;
//byte x;
byte y;
	for(y=0;y<3;y++){
	      for(x=0;x<(15*Duration);x++)
 30e:	cf 5f       	subi	r28, 0xFF	; 255
 310:	cf 30       	cpi	r28, 0x0F	; 15
 312:	41 f7       	brne	.-48     	; 0x2e4 <main+0x1ba>
 314:	3f ef       	ldi	r19, 0xFF	; 255
 316:	87 e9       	ldi	r24, 0x97	; 151
 318:	9a e3       	ldi	r25, 0x3A	; 58
 31a:	31 50       	subi	r19, 0x01	; 1
 31c:	80 40       	sbci	r24, 0x00	; 0
 31e:	90 40       	sbci	r25, 0x00	; 0
 320:	e1 f7       	brne	.-8      	; 0x31a <main+0x1f0>
 322:	00 c0       	rjmp	.+0      	; 0x324 <main+0x1fa>
 324:	00 00       	nop
 326:	d1 50       	subi	r29, 0x01	; 1
	
// Phone ring
byte Duration = 1;
//byte x;
byte y;
	for(y=0;y<3;y++){
 328:	11 f0       	breq	.+4      	; 0x32e <main+0x204>
 32a:	cf 2d       	mov	r28, r15
 32c:	db cf       	rjmp	.-74     	; 0x2e4 <main+0x1ba>
 32e:	2f ef       	ldi	r18, 0xFF	; 255
 330:	3f e4       	ldi	r19, 0x4F	; 79
 332:	83 ec       	ldi	r24, 0xC3	; 195
 334:	21 50       	subi	r18, 0x01	; 1
 336:	30 40       	sbci	r19, 0x00	; 0
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0x20a>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x214>
 33e:	00 00       	nop
	
// Phone ring			
		
		_delay_ms(4000);

         toneAC(1200,10, 50);
 340:	e1 2c       	mov	r14, r1
 342:	02 e3       	ldi	r16, 0x32	; 50
 344:	10 e0       	ldi	r17, 0x00	; 0
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	4a e0       	ldi	r20, 0x0A	; 10
 34c:	60 eb       	ldi	r22, 0xB0	; 176
 34e:	74 e0       	ldi	r23, 0x04	; 4
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	b5 d0       	rcall	.+362    	; 0x4c0 <_Z6toneACmhmh>
 356:	9f ef       	ldi	r25, 0xFF	; 255
 358:	21 ee       	ldi	r18, 0xE1	; 225
 35a:	34 e0       	ldi	r19, 0x04	; 4
 35c:	91 50       	subi	r25, 0x01	; 1
 35e:	20 40       	sbci	r18, 0x00	; 0
 360:	30 40       	sbci	r19, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x232>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x23c>
 366:	00 00       	nop
         _delay_ms(100);
         toneAC(1200,10, 50);
 368:	02 e3       	ldi	r16, 0x32	; 50
 36a:	10 e0       	ldi	r17, 0x00	; 0
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	4a e0       	ldi	r20, 0x0A	; 10
 372:	60 eb       	ldi	r22, 0xB0	; 176
 374:	74 e0       	ldi	r23, 0x04	; 4
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	a2 d0       	rcall	.+324    	; 0x4c0 <_Z6toneACmhmh>
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	91 ee       	ldi	r25, 0xE1	; 225
 380:	24 e0       	ldi	r18, 0x04	; 4
 382:	81 50       	subi	r24, 0x01	; 1
 384:	90 40       	sbci	r25, 0x00	; 0
 386:	20 40       	sbci	r18, 0x00	; 0
 388:	e1 f7       	brne	.-8      	; 0x382 <main+0x258>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0x262>
 38c:	00 00       	nop
         _delay_ms(100);
         toneAC(1200,10, 50);
 38e:	02 e3       	ldi	r16, 0x32	; 50
 390:	10 e0       	ldi	r17, 0x00	; 0
 392:	20 e0       	ldi	r18, 0x00	; 0
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	4a e0       	ldi	r20, 0x0A	; 10
 398:	60 eb       	ldi	r22, 0xB0	; 176
 39a:	74 e0       	ldi	r23, 0x04	; 4
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	8f d0       	rcall	.+286    	; 0x4c0 <_Z6toneACmhmh>
 3a2:	3f ef       	ldi	r19, 0xFF	; 255
 3a4:	83 ec       	ldi	r24, 0xC3	; 195
 3a6:	99 e0       	ldi	r25, 0x09	; 9
 3a8:	31 50       	subi	r19, 0x01	; 1
 3aa:	80 40       	sbci	r24, 0x00	; 0
 3ac:	90 40       	sbci	r25, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <main+0x27e>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <main+0x288>
 3b2:	00 00       	nop
         _delay_ms(200);
         toneAC(1200,10, 300);
 3b4:	0c e2       	ldi	r16, 0x2C	; 44
 3b6:	11 e0       	ldi	r17, 0x01	; 1
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	4a e0       	ldi	r20, 0x0A	; 10
 3be:	60 eb       	ldi	r22, 0xB0	; 176
 3c0:	74 e0       	ldi	r23, 0x04	; 4
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	7c d0       	rcall	.+248    	; 0x4c0 <_Z6toneACmhmh>
 3c8:	2f ef       	ldi	r18, 0xFF	; 255
 3ca:	31 ee       	ldi	r19, 0xE1	; 225
 3cc:	84 e0       	ldi	r24, 0x04	; 4
 3ce:	21 50       	subi	r18, 0x01	; 1
 3d0:	30 40       	sbci	r19, 0x00	; 0
 3d2:	80 40       	sbci	r24, 0x00	; 0
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <main+0x2a4>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <main+0x2ae>
 3d8:	00 00       	nop
         _delay_ms(100);
         toneAC(1200,10, 300);
 3da:	0c e2       	ldi	r16, 0x2C	; 44
 3dc:	11 e0       	ldi	r17, 0x01	; 1
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	4a e0       	ldi	r20, 0x0A	; 10
 3e4:	60 eb       	ldi	r22, 0xB0	; 176
 3e6:	74 e0       	ldi	r23, 0x04	; 4
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	69 d0       	rcall	.+210    	; 0x4c0 <_Z6toneACmhmh>
 3ee:	9f ef       	ldi	r25, 0xFF	; 255
 3f0:	21 ee       	ldi	r18, 0xE1	; 225
 3f2:	34 e0       	ldi	r19, 0x04	; 4
 3f4:	91 50       	subi	r25, 0x01	; 1
 3f6:	20 40       	sbci	r18, 0x00	; 0
 3f8:	30 40       	sbci	r19, 0x00	; 0
 3fa:	e1 f7       	brne	.-8      	; 0x3f4 <main+0x2ca>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x2d4>
 3fe:	00 00       	nop
         _delay_ms(100);
         toneAC(1200,10, 300);
 400:	0c e2       	ldi	r16, 0x2C	; 44
 402:	11 e0       	ldi	r17, 0x01	; 1
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	4a e0       	ldi	r20, 0x0A	; 10
 40a:	60 eb       	ldi	r22, 0xB0	; 176
 40c:	74 e0       	ldi	r23, 0x04	; 4
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	56 d0       	rcall	.+172    	; 0x4c0 <_Z6toneACmhmh>
 414:	8f ef       	ldi	r24, 0xFF	; 255
 416:	93 ec       	ldi	r25, 0xC3	; 195
 418:	29 e0       	ldi	r18, 0x09	; 9
 41a:	81 50       	subi	r24, 0x01	; 1
 41c:	90 40       	sbci	r25, 0x00	; 0
 41e:	20 40       	sbci	r18, 0x00	; 0
 420:	e1 f7       	brne	.-8      	; 0x41a <main+0x2f0>
 422:	00 c0       	rjmp	.+0      	; 0x424 <main+0x2fa>
 424:	00 00       	nop
         _delay_ms(200);
         toneAC(1200,10, 50);
 426:	02 e3       	ldi	r16, 0x32	; 50
 428:	10 e0       	ldi	r17, 0x00	; 0
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	4a e0       	ldi	r20, 0x0A	; 10
 430:	60 eb       	ldi	r22, 0xB0	; 176
 432:	74 e0       	ldi	r23, 0x04	; 4
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	43 d0       	rcall	.+134    	; 0x4c0 <_Z6toneACmhmh>
 43a:	3f ef       	ldi	r19, 0xFF	; 255
 43c:	81 ee       	ldi	r24, 0xE1	; 225
 43e:	94 e0       	ldi	r25, 0x04	; 4
 440:	31 50       	subi	r19, 0x01	; 1
 442:	80 40       	sbci	r24, 0x00	; 0
 444:	90 40       	sbci	r25, 0x00	; 0
 446:	e1 f7       	brne	.-8      	; 0x440 <main+0x316>
 448:	00 c0       	rjmp	.+0      	; 0x44a <main+0x320>
 44a:	00 00       	nop
         _delay_ms(100);
         toneAC(1200,10, 50);
 44c:	02 e3       	ldi	r16, 0x32	; 50
 44e:	10 e0       	ldi	r17, 0x00	; 0
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	4a e0       	ldi	r20, 0x0A	; 10
 456:	60 eb       	ldi	r22, 0xB0	; 176
 458:	74 e0       	ldi	r23, 0x04	; 4
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	30 d0       	rcall	.+96     	; 0x4c0 <_Z6toneACmhmh>
 460:	2f ef       	ldi	r18, 0xFF	; 255
 462:	31 ee       	ldi	r19, 0xE1	; 225
 464:	84 e0       	ldi	r24, 0x04	; 4
 466:	21 50       	subi	r18, 0x01	; 1
 468:	30 40       	sbci	r19, 0x00	; 0
 46a:	80 40       	sbci	r24, 0x00	; 0
 46c:	e1 f7       	brne	.-8      	; 0x466 <main+0x33c>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <main+0x346>
 470:	00 00       	nop
         _delay_ms(100);
         toneAC(1200,10, 50);
 472:	02 e3       	ldi	r16, 0x32	; 50
 474:	10 e0       	ldi	r17, 0x00	; 0
 476:	20 e0       	ldi	r18, 0x00	; 0
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	4a e0       	ldi	r20, 0x0A	; 10
 47c:	60 eb       	ldi	r22, 0xB0	; 176
 47e:	74 e0       	ldi	r23, 0x04	; 4
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	1d d0       	rcall	.+58     	; 0x4c0 <_Z6toneACmhmh>
 486:	9a ea       	ldi	r25, 0xAA	; 170
 488:	26 ee       	ldi	r18, 0xE6	; 230
 48a:	36 e9       	ldi	r19, 0x96	; 150
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	91 50       	subi	r25, 0x01	; 1
 490:	20 40       	sbci	r18, 0x00	; 0
 492:	30 40       	sbci	r19, 0x00	; 0
 494:	80 40       	sbci	r24, 0x00	; 0
 496:	d9 f7       	brne	.-10     	; 0x48e <main+0x364>
 498:	00 00       	nop
	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
	
// WHOOP UP
	byte x;
		for(x=50;x>0;x++){
 49a:	0f 2e       	mov	r0, r31
 49c:	f2 e3       	ldi	r31, 0x32	; 50
 49e:	ff 2e       	mov	r15, r31
 4a0:	f0 2d       	mov	r31, r0
 4a2:	76 ce       	rjmp	.-788    	; 0x190 <main+0x66>

000004a4 <_Z8noToneACv>:
	  } // Just a simple delay, doesn't return control till finished.

}

void noToneAC() {
  TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
 4a4:	ef e6       	ldi	r30, 0x6F	; 111
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	80 81       	ld	r24, Z
 4aa:	8d 7f       	andi	r24, 0xFD	; 253
 4ac:	80 83       	st	Z, r24
  TCCR1B  = _BV(CS11);        // Default clock prescaler of 8.
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	80 93 81 00 	sts	0x0081, r24
  TCCR1A  = _BV(WGM10);       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	80 93 80 00 	sts	0x0080, r24
  PWMT1PORT &= ~_BV(PWMT1AMASK); // Set timer 1 PWM pins to LOW.
 4ba:	29 98       	cbi	0x05, 1	; 5
  PWMT1PORT &= ~_BV(PWMT1BMASK); // Other timer 1 PWM pin also to LOW.
 4bc:	2a 98       	cbi	0x05, 2	; 5
 4be:	08 95       	ret

000004c0 <_Z6toneACmhmh>:

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume control.



void toneAC(unsigned long frequency, uint8_t volume, unsigned long length, uint8_t background) {
 4c0:	4f 92       	push	r4
 4c2:	5f 92       	push	r5
 4c4:	6f 92       	push	r6
 4c6:	7f 92       	push	r7
 4c8:	8f 92       	push	r8
 4ca:	9f 92       	push	r9
 4cc:	af 92       	push	r10
 4ce:	bf 92       	push	r11
 4d0:	cf 92       	push	r12
 4d2:	df 92       	push	r13
 4d4:	ef 92       	push	r14
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	2b 01       	movw	r4, r22
 4e2:	3c 01       	movw	r6, r24
 4e4:	48 01       	movw	r8, r16
 4e6:	59 01       	movw	r10, r18
 4e8:	ce 2d       	mov	r28, r14
  if (frequency == 0 || volume == 0) { noToneAC(); return; } // If frequency or volume are 0, turn off sound and return.
 4ea:	61 15       	cp	r22, r1
 4ec:	71 05       	cpc	r23, r1
 4ee:	81 05       	cpc	r24, r1
 4f0:	91 05       	cpc	r25, r1
 4f2:	11 f0       	breq	.+4      	; 0x4f8 <_Z6toneACmhmh+0x38>
 4f4:	41 11       	cpse	r20, r1
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <_Z6toneACmhmh+0x3c>
 4f8:	d5 df       	rcall	.-86     	; 0x4a4 <_Z8noToneACv>
 4fa:	84 c0       	rjmp	.+264    	; 0x604 <_Z6toneACmhmh+0x144>
 4fc:	d4 2f       	mov	r29, r20
 4fe:	4b 30       	cpi	r20, 0x0B	; 11
 500:	08 f0       	brcs	.+2      	; 0x504 <_Z6toneACmhmh+0x44>
 502:	da e0       	ldi	r29, 0x0A	; 10
  if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).

  
  PWMT1DREG |= _BV(PWMT1AMASK) | _BV(PWMT1BMASK); // Set timer 1 PWM pins to OUTPUT (because analogWrite does it too).
 504:	84 b1       	in	r24, 0x04	; 4
 506:	86 60       	ori	r24, 0x06	; 6
 508:	84 b9       	out	0x04, r24	; 4

  uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
  unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	72 e1       	ldi	r23, 0x12	; 18
 50e:	8a e7       	ldi	r24, 0x7A	; 122
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	a3 01       	movw	r20, r6
 514:	92 01       	movw	r18, r4
 516:	cf d0       	rcall	.+414    	; 0x6b6 <__udivmodsi4>
 518:	cc 24       	eor	r12, r12
 51a:	ca 94       	dec	r12
 51c:	dc 2c       	mov	r13, r12
 51e:	76 01       	movw	r14, r12
 520:	c2 0e       	add	r12, r18
 522:	d3 1e       	adc	r13, r19
 524:	e4 1e       	adc	r14, r20
 526:	f5 1e       	adc	r15, r21
  if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
 528:	c1 14       	cp	r12, r1
 52a:	d1 04       	cpc	r13, r1
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	e8 06       	cpc	r14, r24
 530:	f1 04       	cpc	r15, r1
 532:	58 f0       	brcs	.+22     	; 0x54a <_Z6toneACmhmh+0x8a>
    prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    top = top / 256 - 1;                         // Calculate the top using prescaler 256.
 534:	cd 2c       	mov	r12, r13
 536:	de 2c       	mov	r13, r14
 538:	ef 2c       	mov	r14, r15
 53a:	ff 24       	eor	r15, r15
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	c9 1a       	sub	r12, r25
 540:	d1 08       	sbc	r13, r1
 542:	e1 08       	sbc	r14, r1
 544:	f1 08       	sbc	r15, r1
  PWMT1DREG |= _BV(PWMT1AMASK) | _BV(PWMT1BMASK); // Set timer 1 PWM pins to OUTPUT (because analogWrite does it too).

  uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
  unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
  if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
 546:	14 e0       	ldi	r17, 0x04	; 4
 548:	01 c0       	rjmp	.+2      	; 0x54c <_Z6toneACmhmh+0x8c>
  if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).

  
  PWMT1DREG |= _BV(PWMT1AMASK) | _BV(PWMT1BMASK); // Set timer 1 PWM pins to OUTPUT (because analogWrite does it too).

  uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
 54a:	11 e0       	ldi	r17, 0x01	; 1
  if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    top = top / 256 - 1;                         // Calculate the top using prescaler 256.
  }

  unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
 54c:	ed 2f       	mov	r30, r29
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	e1 50       	subi	r30, 0x01	; 1
 552:	ff 4f       	sbci	r31, 0xFF	; 255
 554:	20 81       	ld	r18, Z
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	50 e0       	ldi	r21, 0x00	; 0
 55c:	c7 01       	movw	r24, r14
 55e:	b6 01       	movw	r22, r12
 560:	aa d0       	rcall	.+340    	; 0x6b6 <__udivmodsi4>
 562:	39 01       	movw	r6, r18



  if (length > 0 && background) {  // Background tone playing, returns control to your sketch.
 564:	81 14       	cp	r8, r1
 566:	91 04       	cpc	r9, r1
 568:	a1 04       	cpc	r10, r1
 56a:	b1 04       	cpc	r11, r1
 56c:	b1 f0       	breq	.+44     	; 0x59a <_Z6toneACmhmh+0xda>
 56e:	cc 23       	and	r28, r28
 570:	a1 f0       	breq	.+40     	; 0x59a <_Z6toneACmhmh+0xda>

    _tAC_time = millis() + length; // Set when the note should end.
 572:	a2 dd       	rcall	.-1212   	; 0xb8 <millis_get>
 574:	dc 01       	movw	r26, r24
 576:	cb 01       	movw	r24, r22
 578:	88 0d       	add	r24, r8
 57a:	99 1d       	adc	r25, r9
 57c:	aa 1d       	adc	r26, r10
 57e:	bb 1d       	adc	r27, r11
 580:	80 93 0e 01 	sts	0x010E, r24
 584:	90 93 0f 01 	sts	0x010F, r25
 588:	a0 93 10 01 	sts	0x0110, r26
 58c:	b0 93 11 01 	sts	0x0111, r27
    TIMSK1 |= _BV(OCIE1A);         // Activate the timer interrupt.
 590:	ef e6       	ldi	r30, 0x6F	; 111
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	80 81       	ld	r24, Z
 596:	82 60       	ori	r24, 0x02	; 2
 598:	80 83       	st	Z, r24
  }

  ICR1   = top;                         // Set the top.
 59a:	d0 92 87 00 	sts	0x0087, r13
 59e:	c0 92 86 00 	sts	0x0086, r12
  if (TCNT1 > top) TCNT1 = top;         // Counter over the top, put within range.
 5a2:	80 91 84 00 	lds	r24, 0x0084
 5a6:	90 91 85 00 	lds	r25, 0x0085
 5aa:	a0 e0       	ldi	r26, 0x00	; 0
 5ac:	b0 e0       	ldi	r27, 0x00	; 0
 5ae:	c8 16       	cp	r12, r24
 5b0:	d9 06       	cpc	r13, r25
 5b2:	ea 06       	cpc	r14, r26
 5b4:	fb 06       	cpc	r15, r27
 5b6:	20 f4       	brcc	.+8      	; 0x5c0 <_Z6toneACmhmh+0x100>
 5b8:	d0 92 85 00 	sts	0x0085, r13
 5bc:	c0 92 84 00 	sts	0x0084, r12
  TCCR1B = _BV(WGM13)  | prescaler;     // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
 5c0:	10 61       	ori	r17, 0x10	; 16
 5c2:	10 93 81 00 	sts	0x0081, r17
  OCR1A  = OCR1B = duty;                // Set the duty cycle (volume).
 5c6:	70 92 8b 00 	sts	0x008B, r7
 5ca:	60 92 8a 00 	sts	0x008A, r6
 5ce:	70 92 89 00 	sts	0x0089, r7
 5d2:	60 92 88 00 	sts	0x0088, r6
  TCCR1A = _BV(COM1A1) | _BV(COM1B1) | _BV(COM1B0); // Inverted/non-inverted mode (AC).
 5d6:	80 eb       	ldi	r24, 0xB0	; 176
 5d8:	80 93 80 00 	sts	0x0080, r24


  if (length > 0 && !background) { 
 5dc:	81 14       	cp	r8, r1
 5de:	91 04       	cpc	r9, r1
 5e0:	a1 04       	cpc	r10, r1
 5e2:	b1 04       	cpc	r11, r1
 5e4:	79 f0       	breq	.+30     	; 0x604 <_Z6toneACmhmh+0x144>
 5e6:	c1 11       	cpse	r28, r1
 5e8:	0d c0       	rjmp	.+26     	; 0x604 <_Z6toneACmhmh+0x144>
 5ea:	8f e9       	ldi	r24, 0x9F	; 159
 5ec:	9f e0       	ldi	r25, 0x0F	; 15
 5ee:	01 97       	sbiw	r24, 0x01	; 1
 5f0:	f1 f7       	brne	.-4      	; 0x5ee <_Z6toneACmhmh+0x12e>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <_Z6toneACmhmh+0x134>
 5f4:	00 00       	nop
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	89 1a       	sub	r8, r25
 5fa:	91 08       	sbc	r9, r1
 5fc:	a1 08       	sbc	r10, r1
 5fe:	b1 08       	sbc	r11, r1
	  while(length--) {	_delay_ms(1); }
 600:	a1 f7       	brne	.-24     	; 0x5ea <_Z6toneACmhmh+0x12a>
	  noToneAC(); 
 602:	50 df       	rcall	.-352    	; 0x4a4 <_Z8noToneACv>
	  } // Just a simple delay, doesn't return control till finished.

}
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	ff 90       	pop	r15
 60e:	ef 90       	pop	r14
 610:	df 90       	pop	r13
 612:	cf 90       	pop	r12
 614:	bf 90       	pop	r11
 616:	af 90       	pop	r10
 618:	9f 90       	pop	r9
 61a:	8f 90       	pop	r8
 61c:	7f 90       	pop	r7
 61e:	6f 90       	pop	r6
 620:	5f 90       	pop	r5
 622:	4f 90       	pop	r4
 624:	08 95       	ret

00000626 <__vector_11>:
  TCCR1A  = _BV(WGM10);       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
  PWMT1PORT &= ~_BV(PWMT1AMASK); // Set timer 1 PWM pins to LOW.
  PWMT1PORT &= ~_BV(PWMT1BMASK); // Other timer 1 PWM pin also to LOW.
}

ISR(TIMER1_COMPA_vect) { // Timer interrupt vector.
 626:	1f 92       	push	r1
 628:	0f 92       	push	r0
 62a:	0f b6       	in	r0, 0x3f	; 63
 62c:	0f 92       	push	r0
 62e:	11 24       	eor	r1, r1
 630:	0f 93       	push	r16
 632:	1f 93       	push	r17
 634:	2f 93       	push	r18
 636:	3f 93       	push	r19
 638:	4f 93       	push	r20
 63a:	5f 93       	push	r21
 63c:	6f 93       	push	r22
 63e:	7f 93       	push	r23
 640:	8f 93       	push	r24
 642:	9f 93       	push	r25
 644:	af 93       	push	r26
 646:	bf 93       	push	r27
 648:	ef 93       	push	r30
 64a:	ff 93       	push	r31
	//noToneAC();
  if (millis() >= _tAC_time) noToneAC(); // Check to see if it's time for the note to end.
 64c:	35 dd       	rcall	.-1430   	; 0xb8 <millis_get>
 64e:	00 91 0e 01 	lds	r16, 0x010E
 652:	10 91 0f 01 	lds	r17, 0x010F
 656:	20 91 10 01 	lds	r18, 0x0110
 65a:	30 91 11 01 	lds	r19, 0x0111
 65e:	60 17       	cp	r22, r16
 660:	71 07       	cpc	r23, r17
 662:	82 07       	cpc	r24, r18
 664:	93 07       	cpc	r25, r19
 666:	08 f0       	brcs	.+2      	; 0x66a <__vector_11+0x44>
 668:	1d df       	rcall	.-454    	; 0x4a4 <_Z8noToneACv>
 66a:	ff 91       	pop	r31
 66c:	ef 91       	pop	r30
 66e:	bf 91       	pop	r27
 670:	af 91       	pop	r26
 672:	9f 91       	pop	r25
 674:	8f 91       	pop	r24
 676:	7f 91       	pop	r23
 678:	6f 91       	pop	r22
 67a:	5f 91       	pop	r21
 67c:	4f 91       	pop	r20
 67e:	3f 91       	pop	r19
 680:	2f 91       	pop	r18
 682:	1f 91       	pop	r17
 684:	0f 91       	pop	r16
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <__divmodhi4>:
 690:	97 fb       	bst	r25, 7
 692:	07 2e       	mov	r0, r23
 694:	16 f4       	brtc	.+4      	; 0x69a <__divmodhi4+0xa>
 696:	00 94       	com	r0
 698:	06 d0       	rcall	.+12     	; 0x6a6 <__divmodhi4_neg1>
 69a:	77 fd       	sbrc	r23, 7
 69c:	08 d0       	rcall	.+16     	; 0x6ae <__divmodhi4_neg2>
 69e:	2d d0       	rcall	.+90     	; 0x6fa <__udivmodhi4>
 6a0:	07 fc       	sbrc	r0, 7
 6a2:	05 d0       	rcall	.+10     	; 0x6ae <__divmodhi4_neg2>
 6a4:	3e f4       	brtc	.+14     	; 0x6b4 <__divmodhi4_exit>

000006a6 <__divmodhi4_neg1>:
 6a6:	90 95       	com	r25
 6a8:	81 95       	neg	r24
 6aa:	9f 4f       	sbci	r25, 0xFF	; 255
 6ac:	08 95       	ret

000006ae <__divmodhi4_neg2>:
 6ae:	70 95       	com	r23
 6b0:	61 95       	neg	r22
 6b2:	7f 4f       	sbci	r23, 0xFF	; 255

000006b4 <__divmodhi4_exit>:
 6b4:	08 95       	ret

000006b6 <__udivmodsi4>:
 6b6:	a1 e2       	ldi	r26, 0x21	; 33
 6b8:	1a 2e       	mov	r1, r26
 6ba:	aa 1b       	sub	r26, r26
 6bc:	bb 1b       	sub	r27, r27
 6be:	fd 01       	movw	r30, r26
 6c0:	0d c0       	rjmp	.+26     	; 0x6dc <__udivmodsi4_ep>

000006c2 <__udivmodsi4_loop>:
 6c2:	aa 1f       	adc	r26, r26
 6c4:	bb 1f       	adc	r27, r27
 6c6:	ee 1f       	adc	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	a2 17       	cp	r26, r18
 6cc:	b3 07       	cpc	r27, r19
 6ce:	e4 07       	cpc	r30, r20
 6d0:	f5 07       	cpc	r31, r21
 6d2:	20 f0       	brcs	.+8      	; 0x6dc <__udivmodsi4_ep>
 6d4:	a2 1b       	sub	r26, r18
 6d6:	b3 0b       	sbc	r27, r19
 6d8:	e4 0b       	sbc	r30, r20
 6da:	f5 0b       	sbc	r31, r21

000006dc <__udivmodsi4_ep>:
 6dc:	66 1f       	adc	r22, r22
 6de:	77 1f       	adc	r23, r23
 6e0:	88 1f       	adc	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	1a 94       	dec	r1
 6e6:	69 f7       	brne	.-38     	; 0x6c2 <__udivmodsi4_loop>
 6e8:	60 95       	com	r22
 6ea:	70 95       	com	r23
 6ec:	80 95       	com	r24
 6ee:	90 95       	com	r25
 6f0:	9b 01       	movw	r18, r22
 6f2:	ac 01       	movw	r20, r24
 6f4:	bd 01       	movw	r22, r26
 6f6:	cf 01       	movw	r24, r30
 6f8:	08 95       	ret

000006fa <__udivmodhi4>:
 6fa:	aa 1b       	sub	r26, r26
 6fc:	bb 1b       	sub	r27, r27
 6fe:	51 e1       	ldi	r21, 0x11	; 17
 700:	07 c0       	rjmp	.+14     	; 0x710 <__udivmodhi4_ep>

00000702 <__udivmodhi4_loop>:
 702:	aa 1f       	adc	r26, r26
 704:	bb 1f       	adc	r27, r27
 706:	a6 17       	cp	r26, r22
 708:	b7 07       	cpc	r27, r23
 70a:	10 f0       	brcs	.+4      	; 0x710 <__udivmodhi4_ep>
 70c:	a6 1b       	sub	r26, r22
 70e:	b7 0b       	sbc	r27, r23

00000710 <__udivmodhi4_ep>:
 710:	88 1f       	adc	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	5a 95       	dec	r21
 716:	a9 f7       	brne	.-22     	; 0x702 <__udivmodhi4_loop>
 718:	80 95       	com	r24
 71a:	90 95       	com	r25
 71c:	bc 01       	movw	r22, r24
 71e:	cd 01       	movw	r24, r26
 720:	08 95       	ret

00000722 <_exit>:
 722:	f8 94       	cli

00000724 <__stop_program>:
 724:	ff cf       	rjmp	.-2      	; 0x724 <__stop_program>
