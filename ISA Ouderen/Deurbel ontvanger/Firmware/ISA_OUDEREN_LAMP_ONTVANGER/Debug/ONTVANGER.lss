
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001ae2  00001b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ae2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017c  0080011a  0080011a  00001b90  2**0
                  ALLOC
  3 .stab         00000d08  00000000  00000000  00001b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000272  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002b0a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003c0  00000000  00000000  00002b39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003ad8  00000000  00000000  00002ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000126f  00000000  00000000  000069d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000026c4  00000000  00000000  00007c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000924  00000000  00000000  0000a304  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e4d  00000000  00000000  0000ac28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022d8  00000000  00000000  0000ba75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000388  00000000  00000000  0000dd4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c3 c2       	rjmp	.+1414   	; 0x588 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__vector_1>
       8:	db c2       	rjmp	.+1462   	; 0x5c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d9 c2       	rjmp	.+1458   	; 0x5c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	d7 c2       	rjmp	.+1454   	; 0x5c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	d5 c2       	rjmp	.+1450   	; 0x5c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	d3 c2       	rjmp	.+1446   	; 0x5c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	51 c7       	rjmp	.+3746   	; 0xec0 <__vector_7>
      1e:	00 00       	nop
      20:	cf c2       	rjmp	.+1438   	; 0x5c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	cd c2       	rjmp	.+1434   	; 0x5c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	cb c2       	rjmp	.+1430   	; 0x5c0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c9 c2       	rjmp	.+1426   	; 0x5c0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c7 c2       	rjmp	.+1422   	; 0x5c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c2       	rjmp	.+1418   	; 0x5c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4d c3       	rjmp	.+1690   	; 0x6d4 <__vector_14>
      3a:	00 00       	nop
      3c:	c1 c2       	rjmp	.+1410   	; 0x5c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bf c2       	rjmp	.+1406   	; 0x5c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	bd c2       	rjmp	.+1402   	; 0x5c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_18>
      4c:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__vector_19>
      50:	b7 c2       	rjmp	.+1390   	; 0x5c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	b5 c2       	rjmp	.+1386   	; 0x5c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	b3 c2       	rjmp	.+1382   	; 0x5c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b1 c2       	rjmp	.+1378   	; 0x5c0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	af c2       	rjmp	.+1374   	; 0x5c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	ad c2       	rjmp	.+1370   	; 0x5c0 <__bad_interrupt>
	...

00000068 <_ZL16icon_led_numbers>:
      68:	0c 0b 0a 0f 0e 0d 07 08 09 02 01 00                 ............

00000074 <_ZL22sound_pattern_doorbell>:
      74:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      84:	b0 04 00 00 f4 01 00 00 00 00 00 00 e8 03 00 00     ................
      94:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      a4:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000000b4 <_ZL19sound_pattern_phone>:
      b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     104:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     114:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     124:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     134:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     144:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     154:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     164:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     174:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     184:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     194:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     1a4:	00 00 00 00 e8 03 00 00 e8 03 00 00 28 00 00 00     ............(...
     1b4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1c4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1d4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1e4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1f4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     204:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     214:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     224:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     234:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     244:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     254:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     264:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     274:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     284:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     294:	ee 02 00 00 28 00 00 00 00 00 00 00 e8 03 00 00     ....(...........
     2a4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     304:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     314:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     324:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     334:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     344:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     354:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     364:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     374:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     384:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     394:	00 00 00 00 e8 03 00 00 00 00 00 00 00 00 00 00     ................
	...

000003b4 <_ZL18sound_pattern_fire>:
     3b4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3c4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3d4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3e4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3f4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     404:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     414:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     424:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...

00000434 <_ZL18sound_pattern_help>:
     434:	bf 04 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     444:	1c 07 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     454:	bf 04 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     464:	1c 07 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     474:	00 00 00 00 e8 03 00 00                             ........

0000047c <_ZL13flash_pattern>:
     47c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     48c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     49c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4ac:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4bc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4cc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4dc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4ec:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4fc:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     50c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     51c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     52c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     53c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     54c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     55c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     56c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...

0000057c <_ZL11icon_colors>:
     57c:	3d f5 00 00 b8 f5 ff 00 00 ff ff 00                 =...........

00000588 <__ctors_end>:
     588:	11 24       	eor	r1, r1
     58a:	1f be       	out	0x3f, r1	; 63
     58c:	cf ef       	ldi	r28, 0xFF	; 255
     58e:	d8 e0       	ldi	r29, 0x08	; 8
     590:	de bf       	out	0x3e, r29	; 62
     592:	cd bf       	out	0x3d, r28	; 61

00000594 <__do_copy_data>:
     594:	11 e0       	ldi	r17, 0x01	; 1
     596:	a0 e0       	ldi	r26, 0x00	; 0
     598:	b1 e0       	ldi	r27, 0x01	; 1
     59a:	e2 ee       	ldi	r30, 0xE2	; 226
     59c:	fa e1       	ldi	r31, 0x1A	; 26
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__do_copy_data+0x10>
     5a0:	05 90       	lpm	r0, Z+
     5a2:	0d 92       	st	X+, r0
     5a4:	aa 31       	cpi	r26, 0x1A	; 26
     5a6:	b1 07       	cpc	r27, r17
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <__do_copy_data+0xc>

000005aa <__do_clear_bss>:
     5aa:	22 e0       	ldi	r18, 0x02	; 2
     5ac:	aa e1       	ldi	r26, 0x1A	; 26
     5ae:	b1 e0       	ldi	r27, 0x01	; 1
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <.do_clear_bss_start>

000005b2 <.do_clear_bss_loop>:
     5b2:	1d 92       	st	X+, r1

000005b4 <.do_clear_bss_start>:
     5b4:	a6 39       	cpi	r26, 0x96	; 150
     5b6:	b2 07       	cpc	r27, r18
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <.do_clear_bss_loop>
     5ba:	d1 d0       	rcall	.+418    	; 0x75e <main>
     5bc:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <_exit>

000005c0 <__bad_interrupt>:
     5c0:	1f cd       	rjmp	.-1474   	; 0x0 <__vectors>

000005c2 <I2C_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
     5c2:	88 e4       	ldi	r24, 0x48	; 72
     5c4:	80 93 b8 00 	sts	0x00B8, r24
     5c8:	08 95       	ret

000005ca <I2C_start>:
     5ca:	ec eb       	ldi	r30, 0xBC	; 188
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	10 82       	st	Z, r1
     5d0:	94 ea       	ldi	r25, 0xA4	; 164
     5d2:	90 83       	st	Z, r25
     5d4:	90 81       	ld	r25, Z
     5d6:	99 23       	and	r25, r25
     5d8:	ec f7       	brge	.-6      	; 0x5d4 <I2C_start+0xa>
     5da:	90 91 b9 00 	lds	r25, 0x00B9
     5de:	98 7f       	andi	r25, 0xF8	; 248
     5e0:	98 30       	cpi	r25, 0x08	; 8
     5e2:	a1 f4       	brne	.+40     	; 0x60c <I2C_start+0x42>
     5e4:	80 93 bb 00 	sts	0x00BB, r24
     5e8:	84 e8       	ldi	r24, 0x84	; 132
     5ea:	80 93 bc 00 	sts	0x00BC, r24
     5ee:	ec eb       	ldi	r30, 0xBC	; 188
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	88 23       	and	r24, r24
     5f6:	ec f7       	brge	.-6      	; 0x5f2 <I2C_start+0x28>
     5f8:	90 91 b9 00 	lds	r25, 0x00B9
     5fc:	98 7f       	andi	r25, 0xF8	; 248
     5fe:	98 31       	cpi	r25, 0x18	; 24
     600:	39 f0       	breq	.+14     	; 0x610 <I2C_start+0x46>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 34       	cpi	r25, 0x40	; 64
     606:	29 f4       	brne	.+10     	; 0x612 <I2C_start+0x48>
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	08 95       	ret
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	08 95       	ret
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	08 95       	ret

00000614 <I2C_write>:
     614:	80 93 bb 00 	sts	0x00BB, r24
     618:	84 e8       	ldi	r24, 0x84	; 132
     61a:	80 93 bc 00 	sts	0x00BC, r24
     61e:	ec eb       	ldi	r30, 0xBC	; 188
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	88 23       	and	r24, r24
     626:	ec f7       	brge	.-6      	; 0x622 <I2C_write+0xe>
     628:	90 91 b9 00 	lds	r25, 0x00B9
     62c:	98 7f       	andi	r25, 0xF8	; 248
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	98 32       	cpi	r25, 0x28	; 40
     632:	09 f4       	brne	.+2      	; 0x636 <I2C_write+0x22>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	08 95       	ret

00000638 <I2C_read_ack>:
     638:	84 ec       	ldi	r24, 0xC4	; 196
     63a:	80 93 bc 00 	sts	0x00BC, r24
     63e:	ec eb       	ldi	r30, 0xBC	; 188
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	88 23       	and	r24, r24
     646:	ec f7       	brge	.-6      	; 0x642 <I2C_read_ack+0xa>
     648:	80 91 bb 00 	lds	r24, 0x00BB
     64c:	08 95       	ret

0000064e <I2C_stop>:

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     64e:	84 e9       	ldi	r24, 0x94	; 148
     650:	80 93 bc 00 	sts	0x00BC, r24
     654:	08 95       	ret

00000656 <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	84 bd       	out	0x24, r24	; 36
     65a:	93 e0       	ldi	r25, 0x03	; 3
     65c:	95 bd       	out	0x25, r25	; 37
     65e:	80 93 6e 00 	sts	0x006E, r24
     662:	8a ef       	ldi	r24, 0xFA	; 250
     664:	87 bd       	out	0x27, r24	; 39
     666:	08 95       	ret

00000668 <millis_get>:
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	8f b7       	in	r24, 0x3f	; 63
     66e:	f8 94       	cli
     670:	00 91 1a 01 	lds	r16, 0x011A
     674:	10 91 1b 01 	lds	r17, 0x011B
     678:	20 91 1c 01 	lds	r18, 0x011C
     67c:	30 91 1d 01 	lds	r19, 0x011D
     680:	8f bf       	out	0x3f, r24	; 63
     682:	60 2f       	mov	r22, r16
     684:	71 2f       	mov	r23, r17
     686:	82 2f       	mov	r24, r18
     688:	93 2f       	mov	r25, r19
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	08 95       	ret

00000690 <millis_resume>:
     690:	e4 e6       	ldi	r30, 0x64	; 100
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	8f 7d       	andi	r24, 0xDF	; 223
     698:	80 83       	st	Z, r24
     69a:	ee e6       	ldi	r30, 0x6E	; 110
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	82 60       	ori	r24, 0x02	; 2
     6a2:	80 83       	st	Z, r24
     6a4:	08 95       	ret

000006a6 <millis_pause>:
     6a6:	ee e6       	ldi	r30, 0x6E	; 110
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	8d 7f       	andi	r24, 0xFD	; 253
     6ae:	80 83       	st	Z, r24
     6b0:	e4 e6       	ldi	r30, 0x64	; 100
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	80 62       	ori	r24, 0x20	; 32
     6b8:	80 83       	st	Z, r24
     6ba:	08 95       	ret

000006bc <millis_reset>:
     6bc:	8f b7       	in	r24, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	10 92 1a 01 	sts	0x011A, r1
     6c4:	10 92 1b 01 	sts	0x011B, r1
     6c8:	10 92 1c 01 	sts	0x011C, r1
     6cc:	10 92 1d 01 	sts	0x011D, r1
     6d0:	8f bf       	out	0x3f, r24	; 63
     6d2:	08 95       	ret

000006d4 <__vector_14>:

ISR(ISR_VECT)
{
     6d4:	1f 92       	push	r1
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	8f 93       	push	r24
     6e0:	9f 93       	push	r25
     6e2:	af 93       	push	r26
     6e4:	bf 93       	push	r27
	++milliseconds;
     6e6:	80 91 1a 01 	lds	r24, 0x011A
     6ea:	90 91 1b 01 	lds	r25, 0x011B
     6ee:	a0 91 1c 01 	lds	r26, 0x011C
     6f2:	b0 91 1d 01 	lds	r27, 0x011D
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	a1 1d       	adc	r26, r1
     6fa:	b1 1d       	adc	r27, r1
     6fc:	80 93 1a 01 	sts	0x011A, r24
     700:	90 93 1b 01 	sts	0x011B, r25
     704:	a0 93 1c 01 	sts	0x011C, r26
     708:	b0 93 1d 01 	sts	0x011D, r27
}
     70c:	bf 91       	pop	r27
     70e:	af 91       	pop	r26
     710:	9f 91       	pop	r25
     712:	8f 91       	pop	r24
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <_Z11timer2_initv>:

// Initialise library
void timer2_init()
{
	// Timer settings
	TCCR2A = _BV(WGM21); // prescaler 128
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22)|_BV(CS20);
     724:	85 e0       	ldi	r24, 0x05	; 5
     726:	80 93 b1 00 	sts	0x00B1, r24
	
	OCR2A = ((F_CPU / 128) / 1000);
     72a:	8d e7       	ldi	r24, 0x7D	; 125
     72c:	80 93 b3 00 	sts	0x00B3, r24
     730:	08 95       	ret

00000732 <_Z13timer2_resumev>:


// Turn on timer and resume interrupts
void timer2_resume()
{
	power_timer2_enable();
     732:	e4 e6       	ldi	r30, 0x64	; 100
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	8f 7b       	andi	r24, 0xBF	; 191
     73a:	80 83       	st	Z, r24
	TIMSK2 |= _BV(OCIE2A);
     73c:	e0 e7       	ldi	r30, 0x70	; 112
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	80 81       	ld	r24, Z
     742:	82 60       	ori	r24, 0x02	; 2
     744:	80 83       	st	Z, r24
     746:	08 95       	ret

00000748 <_Z12timer2_pausev>:
}

// Pause interrupts and turn off timer to save power
void timer2_pause()
{
	TIMSK2 &= ~_BV(OCIE2A);
     748:	e0 e7       	ldi	r30, 0x70	; 112
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	8d 7f       	andi	r24, 0xFD	; 253
     750:	80 83       	st	Z, r24
	power_timer2_disable();
     752:	e4 e6       	ldi	r30, 0x64	; 100
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	80 64       	ori	r24, 0x40	; 64
     75a:	80 83       	st	Z, r24
     75c:	08 95       	ret

0000075e <main>:
	#include "tone.h"
};

		 
	
int main() {	
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	00 d0       	rcall	.+0      	; 0x764 <main+0x6>
     764:	00 d0       	rcall	.+0      	; 0x766 <main+0x8>
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
// disable ADC for less power 
	ADCSRA &= ~_BV(ADEN); // ADC off 
     76a:	ea e7       	ldi	r30, 0x7A	; 122
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	80 81       	ld	r24, Z
     770:	8f 77       	andi	r24, 0x7F	; 127
     772:	80 83       	st	Z, r24
	sei();
     774:	78 94       	sei
	
	DDRB |= _BV(0); // pb0 output
     776:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= _BV(0); // pb0 aan
     778:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     77a:	2f ef       	ldi	r18, 0xFF	; 255
     77c:	89 e6       	ldi	r24, 0x69	; 105
     77e:	98 e1       	ldi	r25, 0x18	; 24
     780:	21 50       	subi	r18, 0x01	; 1
     782:	80 40       	sbci	r24, 0x00	; 0
     784:	90 40       	sbci	r25, 0x00	; 0
     786:	e1 f7       	brne	.-8      	; 0x780 <main+0x22>
     788:	00 c0       	rjmp	.+0      	; 0x78a <main+0x2c>
     78a:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~_BV(0); // pb0 uit
     78c:	28 98       	cbi	0x05, 0	; 5


	DDRD |= _BV(7); // pb0 output
     78e:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= _BV(7); // pb0 aan
     790:	5f 9a       	sbi	0x0b, 7	; 11
     792:	ef ef       	ldi	r30, 0xFF	; 255
     794:	f9 e6       	ldi	r31, 0x69	; 105
     796:	28 e1       	ldi	r18, 0x18	; 24
     798:	e1 50       	subi	r30, 0x01	; 1
     79a:	f0 40       	sbci	r31, 0x00	; 0
     79c:	20 40       	sbci	r18, 0x00	; 0
     79e:	e1 f7       	brne	.-8      	; 0x798 <main+0x3a>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <main+0x44>
     7a2:	00 00       	nop
	_delay_ms(500);
	PORTD &= ~_BV(7); // pb0 uit
     7a4:	5f 98       	cbi	0x0b, 7	; 11
	
			/* Initialize MILLIS */
	        millis_init();
     7a6:	57 df       	rcall	.-338    	; 0x656 <millis_init>
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	93 ed       	ldi	r25, 0xD3	; 211
     7ac:	e0 e3       	ldi	r30, 0x30	; 48
     7ae:	81 50       	subi	r24, 0x01	; 1
     7b0:	90 40       	sbci	r25, 0x00	; 0
     7b2:	e0 40       	sbci	r30, 0x00	; 0
     7b4:	e1 f7       	brne	.-8      	; 0x7ae <main+0x50>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <main+0x5a>
     7b8:	00 00       	nop
			_delay_ms(1000);
			/* Initialize MILLIS */

			/* Initialize TONE */						
			tone_init();	
     7ba:	0e 94 43 0c 	call	0x1886	; 0x1886 <tone_init>
			noTone();	
     7be:	0e 94 45 0c 	call	0x188a	; 0x188a <noTone>
			/* Initialize TONE */						
						
						
			/* Initialize TIMER 2 */
			timer2_init();
     7c2:	ad df       	rcall	.-166    	; 0x71e <_Z11timer2_initv>
			timer2_pause();
     7c4:	c1 df       	rcall	.-126    	; 0x748 <_Z12timer2_pausev>
			/* Initialize UART */
			#ifdef DEBUG_SERIAL
			uart_init( ((F_CPU)/((UART_BAUD_RATE)*16l)-1)) ;
			_delay_ms(1000);
			#else
			power_usart0_disable();
     7c6:	e4 e6       	ldi	r30, 0x64	; 100
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	80 81       	ld	r24, Z
     7cc:	82 60       	ori	r24, 0x02	; 2
     7ce:	80 83       	st	Z, r24
			#endif
			/* Initialize UART */
		
			/* Initialize I2C */
			I2C_init();	
     7d0:	f8 de       	rcall	.-528    	; 0x5c2 <I2C_init>
			/* Initialize I2C */
			
			/* Initialize PCA9634 */
			pca9635_init();
     7d2:	e9 d3       	rcall	.+2002   	; 0xfa6 <pca9635_init>
     7d4:	13 e0       	ldi	r17, 0x03	; 3
			
			// blink 3 times fast
			for (byte i = 0; i <= 2; ++i){
			pca9635_set_all_led_pwm(255);
     7d6:	8f ef       	ldi	r24, 0xFF	; 255
     7d8:	2c d4       	rcall	.+2136   	; 0x1032 <pca9635_set_all_led_pwm>
     7da:	ff ef       	ldi	r31, 0xFF	; 255
     7dc:	21 ee       	ldi	r18, 0xE1	; 225
     7de:	84 e0       	ldi	r24, 0x04	; 4
     7e0:	f1 50       	subi	r31, 0x01	; 1
     7e2:	20 40       	sbci	r18, 0x00	; 0
     7e4:	80 40       	sbci	r24, 0x00	; 0
     7e6:	e1 f7       	brne	.-8      	; 0x7e0 <main+0x82>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <main+0x8c>
     7ea:	00 00       	nop
			_delay_ms(100);
			pca9635_set_all_led_pwm(0);
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	21 d4       	rcall	.+2114   	; 0x1032 <pca9635_set_all_led_pwm>
     7f0:	9f ef       	ldi	r25, 0xFF	; 255
     7f2:	e1 ee       	ldi	r30, 0xE1	; 225
     7f4:	f4 e0       	ldi	r31, 0x04	; 4
     7f6:	91 50       	subi	r25, 0x01	; 1
     7f8:	e0 40       	sbci	r30, 0x00	; 0
     7fa:	f0 40       	sbci	r31, 0x00	; 0
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <main+0x98>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <main+0xa2>
     800:	00 00       	nop
     802:	11 50       	subi	r17, 0x01	; 1
			
			/* Initialize PCA9634 */
			pca9635_init();
			
			// blink 3 times fast
			for (byte i = 0; i <= 2; ++i){
     804:	41 f7       	brne	.-48     	; 0x7d6 <main+0x78>
			
			/* Initialize PCA9634 */
			
		
			// node id, rfband, group id
			rf12_initialize(2, RF12_868MHZ, 14);
     806:	4e e0       	ldi	r20, 0x0E	; 14
     808:	62 e0       	ldi	r22, 0x02	; 2
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	52 d6       	rcall	.+3236   	; 0x14b2 <_Z15rf12_initializehhh>
			// see http://tools.jeelabs.org/rfm12b
		


			deep_sleep_ok = 1; // put device in deep sleep after initializing
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	80 93 34 01 	sts	0x0134, r24
			_delay_ms(1000);
			#endif
			
			// initialised
			
				pca9635_set_led_pwm(1, 255);
     814:	6f ef       	ldi	r22, 0xFF	; 255
     816:	fc d3       	rcall	.+2040   	; 0x1010 <pca9635_set_led_pwm>
     818:	2f ef       	ldi	r18, 0xFF	; 255
     81a:	87 e8       	ldi	r24, 0x87	; 135
     81c:	93 e1       	ldi	r25, 0x13	; 19
     81e:	21 50       	subi	r18, 0x01	; 1
     820:	80 40       	sbci	r24, 0x00	; 0
     822:	90 40       	sbci	r25, 0x00	; 0
     824:	e1 f7       	brne	.-8      	; 0x81e <main+0xc0>
     826:	00 c0       	rjmp	.+0      	; 0x828 <main+0xca>
     828:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(8, 255);
     82a:	6f ef       	ldi	r22, 0xFF	; 255
     82c:	88 e0       	ldi	r24, 0x08	; 8
     82e:	f0 d3       	rcall	.+2016   	; 0x1010 <pca9635_set_led_pwm>
     830:	ef ef       	ldi	r30, 0xFF	; 255
     832:	f7 e8       	ldi	r31, 0x87	; 135
     834:	23 e1       	ldi	r18, 0x13	; 19
     836:	e1 50       	subi	r30, 0x01	; 1
     838:	f0 40       	sbci	r31, 0x00	; 0
     83a:	20 40       	sbci	r18, 0x00	; 0
     83c:	e1 f7       	brne	.-8      	; 0x836 <main+0xd8>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <main+0xe2>
     840:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(11, 255);
     842:	6f ef       	ldi	r22, 0xFF	; 255
     844:	8b e0       	ldi	r24, 0x0B	; 11
     846:	e4 d3       	rcall	.+1992   	; 0x1010 <pca9635_set_led_pwm>
     848:	8f ef       	ldi	r24, 0xFF	; 255
     84a:	97 e8       	ldi	r25, 0x87	; 135
     84c:	e3 e1       	ldi	r30, 0x13	; 19
     84e:	81 50       	subi	r24, 0x01	; 1
     850:	90 40       	sbci	r25, 0x00	; 0
     852:	e0 40       	sbci	r30, 0x00	; 0
     854:	e1 f7       	brne	.-8      	; 0x84e <main+0xf0>
     856:	00 c0       	rjmp	.+0      	; 0x858 <main+0xfa>
     858:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(14, 255);
     85a:	6f ef       	ldi	r22, 0xFF	; 255
     85c:	8e e0       	ldi	r24, 0x0E	; 14
     85e:	d8 d3       	rcall	.+1968   	; 0x1010 <pca9635_set_led_pwm>
     860:	ff ef       	ldi	r31, 0xFF	; 255
     862:	2f e0       	ldi	r18, 0x0F	; 15
     864:	87 e2       	ldi	r24, 0x27	; 39
     866:	f1 50       	subi	r31, 0x01	; 1
     868:	20 40       	sbci	r18, 0x00	; 0
     86a:	80 40       	sbci	r24, 0x00	; 0
     86c:	e1 f7       	brne	.-8      	; 0x866 <main+0x108>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <main+0x112>
     870:	00 00       	nop
				_delay_ms(800);
				pca9635_set_all_led_pwm(0);
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	de d3       	rcall	.+1980   	; 0x1032 <pca9635_set_all_led_pwm>
				pca9635_set_sleep(1);
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	ec d3       	rcall	.+2008   	; 0x1052 <pca9635_set_sleep>

		PORTD |= _BV(7); // pb0 aan
		
		
	if (rf12_recvDone() && rf12_crc == 0) {
		if(rf12_data[0] == 0x99) { // 153
     87a:	0f 2e       	mov	r0, r31
     87c:	fe e3       	ldi	r31, 0x3E	; 62
     87e:	cf 2e       	mov	r12, r31
     880:	f1 e0       	ldi	r31, 0x01	; 1
     882:	df 2e       	mov	r13, r31
     884:	f0 2d       	mov	r31, r0
		// process incoming data here
								
			if (RF12_WANTS_ACK) {
     886:	0c e3       	ldi	r16, 0x3C	; 60
     888:	11 e0       	ldi	r17, 0x01	; 1
			}
			
												
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[1]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     88a:	0f 2e       	mov	r0, r31
     88c:	ff e3       	ldi	r31, 0x3F	; 63
     88e:	8f 2e       	mov	r8, r31
     890:	f1 e0       	ldi	r31, 0x01	; 1
     892:	9f 2e       	mov	r9, r31
     894:	f0 2d       	mov	r31, r0
										 
							
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     896:	41 2c       	mov	r4, r1
     898:	51 2c       	mov	r5, r1
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     89a:	49 82       	std	Y+1, r4	; 0x01
     89c:	5a 82       	std	Y+2, r5	; 0x02
							
							 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     89e:	22 24       	eor	r2, r2
     8a0:	23 94       	inc	r2
				
				
	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).


		PORTD |= _BV(7); // pb0 aan
     8a2:	5f 9a       	sbi	0x0b, 7	; 11
		
		
	if (rf12_recvDone() && rf12_crc == 0) {
     8a4:	2d d4       	rcall	.+2138   	; 0x1100 <_Z13rf12_recvDonev>
     8a6:	88 23       	and	r24, r24
     8a8:	09 f4       	brne	.+2      	; 0x8ac <main+0x14e>
     8aa:	e6 c0       	rjmp	.+460    	; 0xa78 <__stack+0x179>
     8ac:	80 91 82 01 	lds	r24, 0x0182
     8b0:	90 91 83 01 	lds	r25, 0x0183
     8b4:	89 2b       	or	r24, r25
     8b6:	09 f4       	brne	.+2      	; 0x8ba <main+0x15c>
     8b8:	da c0       	rjmp	.+436    	; 0xa6e <__stack+0x16f>
     8ba:	de c0       	rjmp	.+444    	; 0xa78 <__stack+0x179>
		if(rf12_data[0] == 0x99) { // 153
		// process incoming data here
								
			if (RF12_WANTS_ACK) {
     8bc:	f8 01       	movw	r30, r16
     8be:	80 81       	ld	r24, Z
     8c0:	85 ff       	sbrs	r24, 5
     8c2:	0e c0       	rjmp	.+28     	; 0x8e0 <main+0x182>
     8c4:	80 81       	ld	r24, Z
     8c6:	88 23       	and	r24, r24
     8c8:	0c f0       	brlt	.+2      	; 0x8cc <main+0x16e>
     8ca:	db c0       	rjmp	.+438    	; 0xa82 <__stack+0x183>
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <main+0x182>
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     8ce:	f8 01       	movw	r30, r16
     8d0:	80 81       	ld	r24, Z
     8d2:	8f 71       	andi	r24, 0x1F	; 31
     8d4:	80 6c       	ori	r24, 0xC0	; 192
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	b2 01       	movw	r22, r4
     8da:	68 d5       	rcall	.+2768   	; 0x13ac <_Z14rf12_sendStarthPKvh>
				rf12_sendWait(1); // don't power down too soon
     8dc:	82 2d       	mov	r24, r2
     8de:	74 d5       	rcall	.+2792   	; 0x13c8 <_Z13rf12_sendWaith>
			}
			
												
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[1]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     8e0:	f4 01       	movw	r30, r8
     8e2:	30 80       	ld	r3, Z

				if(data & 0x10){
     8e4:	33 2d       	mov	r19, r3
     8e6:	30 71       	andi	r19, 0x10	; 16
     8e8:	34 fe       	sbrs	r3, 4
     8ea:	06 c0       	rjmp	.+12     	; 0x8f8 <main+0x19a>
					 // start alarm	 
					 active_alarm = active_alarm | data; // 00001111 
     8ec:	80 91 33 01 	lds	r24, 0x0133
     8f0:	83 29       	or	r24, r3
     8f2:	80 93 33 01 	sts	0x0133, r24
     8f6:	07 c0       	rjmp	.+14     	; 0x906 <__stack+0x7>
					 
				 }else{
					 // stop alarm
					 active_alarm =  active_alarm & (~data); /* invert data, compare with active alarm array to clear the right alarm bit */		 
     8f8:	83 2d       	mov	r24, r3
     8fa:	80 95       	com	r24
     8fc:	90 91 33 01 	lds	r25, 0x0133
     900:	89 23       	and	r24, r25
     902:	80 93 33 01 	sts	0x0133, r24
				 }
				 
				////////////////		Fill alarm array		 ////////////////				 
				
			 // IS ER EEN ALARM ACTIEF in array active_alarm?
				 if(active_alarm & 0x0F){
     906:	20 91 33 01 	lds	r18, 0x0133
     90a:	82 2f       	mov	r24, r18
     90c:	8f 70       	andi	r24, 0x0F	; 15
     90e:	09 f4       	brne	.+2      	; 0x912 <__stack+0x13>
     910:	8b c0       	rjmp	.+278    	; 0xa28 <__stack+0x129>
				  
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
     912:	80 91 2f 01 	lds	r24, 0x012F
     916:	90 91 30 01 	lds	r25, 0x0130
     91a:	a0 91 31 01 	lds	r26, 0x0131
     91e:	b0 91 32 01 	lds	r27, 0x0132
     922:	89 2b       	or	r24, r25
     924:	8a 2b       	or	r24, r26
     926:	8b 2b       	or	r24, r27
     928:	c1 f5       	brne	.+112    	; 0x99a <__stack+0x9b>
							// Geen alarm actief
				
							
							 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
     92a:	10 92 34 01 	sts	0x0134, r1
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     92e:	23 fd       	sbrc	r18, 3
     930:	0c c0       	rjmp	.+24     	; 0x94a <__stack+0x4b>
     932:	22 fd       	sbrc	r18, 2
     934:	06 c0       	rjmp	.+12     	; 0x942 <__stack+0x43>
     936:	21 fd       	sbrc	r18, 1
     938:	06 c0       	rjmp	.+12     	; 0x946 <__stack+0x47>
     93a:	20 ff       	sbrs	r18, 0
     93c:	0b c0       	rjmp	.+22     	; 0x954 <__stack+0x55>
     93e:	83 e0       	ldi	r24, 0x03	; 3
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0x4d>
							
							 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     942:	82 2d       	mov	r24, r2
     944:	03 c0       	rjmp	.+6      	; 0x94c <__stack+0x4d>
     946:	82 e0       	ldi	r24, 0x02	; 2
     948:	01 c0       	rjmp	.+2      	; 0x94c <__stack+0x4d>
     94a:	80 e0       	ldi	r24, 0x00	; 0
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
									sound_current_alarm = i;
     94c:	80 93 2e 01 	sts	0x012E, r24
									icon_current_alarm  = i;
     950:	80 93 23 01 	sts	0x0123, r24
									break;
								} 
							 }

							// 2. timer 0 - millis starten
							millis_reset();
     954:	b3 de       	rcall	.-666    	; 0x6bc <millis_reset>
							millis_resume();
     956:	9c de       	rcall	.-712    	; 0x690 <millis_resume>
							
							active_alarm_time = millis_get() + alarm_duration;
     958:	87 de       	rcall	.-754    	; 0x668 <millis_get>
     95a:	20 91 00 01 	lds	r18, 0x0100
     95e:	30 91 01 01 	lds	r19, 0x0101
     962:	40 91 02 01 	lds	r20, 0x0102
     966:	50 91 03 01 	lds	r21, 0x0103
     96a:	dc 01       	movw	r26, r24
     96c:	cb 01       	movw	r24, r22
     96e:	82 0f       	add	r24, r18
     970:	93 1f       	adc	r25, r19
     972:	a4 1f       	adc	r26, r20
     974:	b5 1f       	adc	r27, r21
     976:	80 93 2f 01 	sts	0x012F, r24
     97a:	90 93 30 01 	sts	0x0130, r25
     97e:	a0 93 31 01 	sts	0x0131, r26
     982:	b0 93 32 01 	sts	0x0132, r27
							
							// wake up pca9635!
							power_twi_enable();
     986:	e4 e6       	ldi	r30, 0x64	; 100
     988:	f0 e0       	ldi	r31, 0x00	; 0
     98a:	80 81       	ld	r24, Z
     98c:	8f 77       	andi	r24, 0x7F	; 127
     98e:	80 83       	st	Z, r24
							I2C_init();
     990:	18 de       	rcall	.-976    	; 0x5c2 <I2C_init>
							pca9635_set_sleep(0);
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	5e d3       	rcall	.+1724   	; 0x1052 <pca9635_set_sleep>
				 
							// 3. timer 2 - alarm timer starten
							timer2_resume();							
     996:	cd de       	rcall	.-614    	; 0x732 <_Z13timer2_resumev>
     998:	68 c0       	rjmp	.+208    	; 0xa6a <__stack+0x16b>
										 
							
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     99a:	31 11       	cpse	r19, r1
     99c:	78 c0       	rjmp	.+240    	; 0xa8e <__stack+0x18f>
     99e:	0f 2e       	mov	r0, r31
     9a0:	fe e0       	ldi	r31, 0x0E	; 14
     9a2:	af 2e       	mov	r10, r31
     9a4:	f1 e0       	ldi	r31, 0x01	; 1
     9a6:	bf 2e       	mov	r11, r31
     9a8:	f0 2d       	mov	r31, r0
     9aa:	72 01       	movw	r14, r4
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     9ac:	f5 01       	movw	r30, r10
     9ae:	21 91       	ld	r18, Z+
     9b0:	5f 01       	movw	r10, r30
     9b2:	23 21       	and	r18, r3
     9b4:	c9 f0       	breq	.+50     	; 0x9e8 <__stack+0xe9>
     9b6:	f9 81       	ldd	r31, Y+1	; 0x01
     9b8:	fb 83       	std	Y+3, r31	; 0x03
     9ba:	2a 81       	ldd	r18, Y+2	; 0x02
     9bc:	2c 83       	std	Y+4, r18	; 0x04
											for (byte j = 0; j <= 2; j++){
												pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[i].lednr[j])), 0); // leds off!
     9be:	37 01       	movw	r6, r14
     9c0:	66 0c       	add	r6, r6
     9c2:	77 1c       	adc	r7, r7
     9c4:	6e 0c       	add	r6, r14
     9c6:	7f 1c       	adc	r7, r15
     9c8:	eb 81       	ldd	r30, Y+3	; 0x03
     9ca:	fc 81       	ldd	r31, Y+4	; 0x04
     9cc:	e6 0d       	add	r30, r6
     9ce:	f7 1d       	adc	r31, r7
     9d0:	e8 59       	subi	r30, 0x98	; 152
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	84 91       	lpm	r24, Z
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	1b d3       	rcall	.+1590   	; 0x1010 <pca9635_set_led_pwm>
     9da:	8b 81       	ldd	r24, Y+3	; 0x03
     9dc:	9c 81       	ldd	r25, Y+4	; 0x04
     9de:	01 96       	adiw	r24, 0x01	; 1
     9e0:	9c 83       	std	Y+4, r25	; 0x04
     9e2:	8b 83       	std	Y+3, r24	; 0x03
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
											for (byte j = 0; j <= 2; j++){
     9e4:	03 97       	sbiw	r24, 0x03	; 3
     9e6:	81 f7       	brne	.-32     	; 0x9c8 <__stack+0xc9>
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	e9 1a       	sub	r14, r25
     9ec:	f9 0a       	sbc	r15, r25
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
     9ee:	e4 e0       	ldi	r30, 0x04	; 4
     9f0:	ee 16       	cp	r14, r30
     9f2:	f1 04       	cpc	r15, r1
     9f4:	d9 f6       	brne	.-74     	; 0x9ac <__stack+0xad>
     9f6:	39 c0       	rjmp	.+114    	; 0xa6a <__stack+0x16b>
							
							
								// Only reset active alarm timer if there is a new alarm...
								// 0x10 = activate bit 0x0F are bits of the alarms
								if( (data & 0x10) && (data & 0x0F)){
										active_alarm_time = millis_get() + alarm_duration;
     9f8:	37 de       	rcall	.-914    	; 0x668 <millis_get>
     9fa:	20 91 00 01 	lds	r18, 0x0100
     9fe:	30 91 01 01 	lds	r19, 0x0101
     a02:	40 91 02 01 	lds	r20, 0x0102
     a06:	50 91 03 01 	lds	r21, 0x0103
     a0a:	dc 01       	movw	r26, r24
     a0c:	cb 01       	movw	r24, r22
     a0e:	82 0f       	add	r24, r18
     a10:	93 1f       	adc	r25, r19
     a12:	a4 1f       	adc	r26, r20
     a14:	b5 1f       	adc	r27, r21
     a16:	80 93 2f 01 	sts	0x012F, r24
     a1a:	90 93 30 01 	sts	0x0130, r25
     a1e:	a0 93 31 01 	sts	0x0131, r26
     a22:	b0 93 32 01 	sts	0x0132, r27
     a26:	21 c0       	rjmp	.+66     	; 0xa6a <__stack+0x16b>
					 
					 

				}else{ //  if(active_alarm & 0x0F){ // IS ER EEN ALARM ACTIEF in active_alarm?
						// no active alarm in array	
						active_alarm_time = 0; // set alarm time to zero, timers will be disabled in next timer 2 interrupt
     a28:	10 92 2f 01 	sts	0x012F, r1
     a2c:	10 92 30 01 	sts	0x0130, r1
     a30:	10 92 31 01 	sts	0x0131, r1
     a34:	10 92 32 01 	sts	0x0132, r1
     a38:	18 c0       	rjmp	.+48     	; 0xa6a <__stack+0x16b>
				//		PRR		= 0x69;
				//		#else
				//	PRR		= 0xEB;
				//	#endif

				set_sleep_mode(SLEEP_MODE_STANDBY); // if active alarm, go in pwr save mode to keep timer 2 running
     a3a:	83 b7       	in	r24, 0x33	; 51
     a3c:	81 7f       	andi	r24, 0xF1	; 241
     a3e:	8c 60       	ori	r24, 0x0C	; 12
     a40:	83 bf       	out	0x33, r24	; 51
				sleep_enable();
     a42:	83 b7       	in	r24, 0x33	; 51
     a44:	81 60       	ori	r24, 0x01	; 1
     a46:	83 bf       	out	0x33, r24	; 51
				// turn off brown-out enable in software
				 sleep_bod_disable();
     a48:	85 b7       	in	r24, 0x35	; 53
     a4a:	80 66       	ori	r24, 0x60	; 96
     a4c:	85 bf       	out	0x35, r24	; 53
     a4e:	8f 7d       	andi	r24, 0xDF	; 223
     a50:	85 bf       	out	0x35, r24	; 53
			 
				// Put the device to sleep:
				sleep_cpu();
     a52:	88 95       	sleep
     a54:	07 c0       	rjmp	.+14     	; 0xa64 <__stack+0x165>
		}else{
				// disable various adc + usart0
				set_sleep_mode(SLEEP_MODE_IDLE);
     a56:	83 b7       	in	r24, 0x33	; 51
     a58:	81 7f       	andi	r24, 0xF1	; 241
     a5a:	83 bf       	out	0x33, r24	; 51
				sleep_enable();
     a5c:	83 b7       	in	r24, 0x33	; 51
     a5e:	81 60       	ori	r24, 0x01	; 1
     a60:	83 bf       	out	0x33, r24	; 51
			
				// Put the device to sleep:
				sleep_cpu();
     a62:	88 95       	sleep
		}
	
			// Clear sleep enable (SE) bit:
			sleep_disable();
     a64:	83 b7       	in	r24, 0x33	; 51
     a66:	8e 7f       	andi	r24, 0xFE	; 254
     a68:	83 bf       	out	0x33, r24	; 51
	}



	
		PORTD &= ~_BV(7); // pb0 uit
     a6a:	5f 98       	cbi	0x0b, 7	; 11
				
				
				
				
				
	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
     a6c:	1a cf       	rjmp	.-460    	; 0x8a2 <main+0x144>

		PORTD |= _BV(7); // pb0 aan
		
		
	if (rf12_recvDone() && rf12_crc == 0) {
		if(rf12_data[0] == 0x99) { // 153
     a6e:	f6 01       	movw	r30, r12
     a70:	80 81       	ld	r24, Z
     a72:	89 39       	cpi	r24, 0x99	; 153
     a74:	d1 f7       	brne	.-12     	; 0xa6a <__stack+0x16b>
     a76:	22 cf       	rjmp	.-444    	; 0x8bc <main+0x15e>
		
									
	} else {
		
		// switch into idle mode until the next interrupt - Choose our preferred sleep mode:
		if(deep_sleep_ok == 1){
     a78:	80 91 34 01 	lds	r24, 0x0134
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	59 f7       	brne	.-42     	; 0xa56 <__stack+0x157>
     a80:	dc cf       	rjmp	.-72     	; 0xa3a <__stack+0x13b>
	if (rf12_recvDone() && rf12_crc == 0) {
		if(rf12_data[0] == 0x99) { // 153
		// process incoming data here
								
			if (RF12_WANTS_ACK) {
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     a82:	f8 01       	movw	r30, r16
     a84:	80 81       	ld	r24, Z
     a86:	86 ff       	sbrs	r24, 6
     a88:	22 cf       	rjmp	.-444    	; 0x8ce <main+0x170>
     a8a:	80 e8       	ldi	r24, 0x80	; 128
     a8c:	24 cf       	rjmp	.-440    	; 0x8d6 <main+0x178>
								}
							
							
								// Only reset active alarm timer if there is a new alarm...
								// 0x10 = activate bit 0x0F are bits of the alarms
								if( (data & 0x10) && (data & 0x0F)){
     a8e:	83 2d       	mov	r24, r3
     a90:	8f 70       	andi	r24, 0x0F	; 15
     a92:	59 f3       	breq	.-42     	; 0xa6a <__stack+0x16b>
     a94:	b1 cf       	rjmp	.-158    	; 0x9f8 <__stack+0xf9>

00000a96 <_Z9isr_soundv>:
	}
						
}


	void isr_sound(){
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
		//	uart0_putc(sound_current_step);
		//	uart0_putc(millis_get());
		//	uart0_putc(_sound_note_time);
		
			// Stop note if necessary 
			if(_sound_note_time != 0){ // sound already playing?		
     a9a:	80 91 29 01 	lds	r24, 0x0129
     a9e:	90 91 2a 01 	lds	r25, 0x012A
     aa2:	a0 91 2b 01 	lds	r26, 0x012B
     aa6:	b0 91 2c 01 	lds	r27, 0x012C
     aaa:	89 2b       	or	r24, r25
     aac:	8a 2b       	or	r24, r26
     aae:	8b 2b       	or	r24, r27
     ab0:	81 f0       	breq	.+32     	; 0xad2 <_Z9isr_soundv+0x3c>
				//	uart0_puts("GS");
				if(millis_get() < _sound_note_time ){ // Do we need to stop the current note?
     ab2:	da dd       	rcall	.-1100   	; 0x668 <millis_get>
     ab4:	00 91 29 01 	lds	r16, 0x0129
     ab8:	10 91 2a 01 	lds	r17, 0x012A
     abc:	20 91 2b 01 	lds	r18, 0x012B
     ac0:	30 91 2c 01 	lds	r19, 0x012C
     ac4:	60 17       	cp	r22, r16
     ac6:	71 07       	cpc	r23, r17
     ac8:	82 07       	cpc	r24, r18
     aca:	93 07       	cpc	r25, r19
     acc:	08 f4       	brcc	.+2      	; 0xad0 <_Z9isr_soundv+0x3a>
     ace:	ef c0       	rjmp	.+478    	; 0xcae <_Z9isr_soundv+0x218>
					//uart0_puts("DS");
					return; // dont stop current note
					
				}else{
					noTone(); // stop current note
     ad0:	dc d6       	rcall	.+3512   	; 0x188a <noTone>
			
			// play next tone
		//	uart0_puts("PN");
		//	tone(unsigned long frequency, uint8_t volume);
		//uart0_putc(sound_current_alarm);
			if(sound_current_alarm == 0 ){
     ad2:	80 91 2e 01 	lds	r24, 0x012E
     ad6:	81 11       	cpse	r24, r1
     ad8:	2e c0       	rjmp	.+92     	; 0xb36 <_Z9isr_soundv+0xa0>
				tone(pgm_read_word(&(sound_pattern_doorbell[sound_current_step].frequency)), sound_alarm_volume); // freq, volume
     ada:	e0 91 2d 01 	lds	r30, 0x012D
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	ec 58       	subi	r30, 0x8C	; 140
     aee:	ff 4f       	sbci	r31, 0xFF	; 255
     af0:	65 91       	lpm	r22, Z+
     af2:	74 91       	lpm	r23, Z
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	41 e0       	ldi	r20, 0x01	; 1
     afa:	d4 d6       	rcall	.+3496   	; 0x18a4 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_doorbell[sound_current_step].time)));
     afc:	b5 dd       	rcall	.-1174   	; 0x668 <millis_get>
     afe:	e0 91 2d 01 	lds	r30, 0x012D
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	ee 0f       	add	r30, r30
     b0a:	ff 1f       	adc	r31, r31
     b0c:	ee 0f       	add	r30, r30
     b0e:	ff 1f       	adc	r31, r31
     b10:	e8 58       	subi	r30, 0x88	; 136
     b12:	ff 4f       	sbci	r31, 0xFF	; 255
     b14:	25 91       	lpm	r18, Z+
     b16:	34 91       	lpm	r19, Z
     b18:	dc 01       	movw	r26, r24
     b1a:	cb 01       	movw	r24, r22
     b1c:	82 0f       	add	r24, r18
     b1e:	93 1f       	adc	r25, r19
     b20:	a1 1d       	adc	r26, r1
     b22:	b1 1d       	adc	r27, r1
     b24:	80 93 29 01 	sts	0x0129, r24
     b28:	90 93 2a 01 	sts	0x012A, r25
     b2c:	a0 93 2b 01 	sts	0x012B, r26
     b30:	b0 93 2c 01 	sts	0x012C, r27
     b34:	8f c0       	rjmp	.+286    	; 0xc54 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 1 ){
     b36:	81 30       	cpi	r24, 0x01	; 1
     b38:	71 f5       	brne	.+92     	; 0xb96 <_Z9isr_soundv+0x100>
				tone(pgm_read_word(&(sound_pattern_phone[sound_current_step].frequency)), sound_alarm_volume);
     b3a:	e0 91 2d 01 	lds	r30, 0x012D
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	ee 0f       	add	r30, r30
     b46:	ff 1f       	adc	r31, r31
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	ec 54       	subi	r30, 0x4C	; 76
     b4e:	ff 4f       	sbci	r31, 0xFF	; 255
     b50:	65 91       	lpm	r22, Z+
     b52:	74 91       	lpm	r23, Z
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	41 e0       	ldi	r20, 0x01	; 1
     b5a:	a4 d6       	rcall	.+3400   	; 0x18a4 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_phone[sound_current_step].time)));
     b5c:	85 dd       	rcall	.-1270   	; 0x668 <millis_get>
     b5e:	e0 91 2d 01 	lds	r30, 0x012D
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	ee 0f       	add	r30, r30
     b6e:	ff 1f       	adc	r31, r31
     b70:	e8 54       	subi	r30, 0x48	; 72
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	25 91       	lpm	r18, Z+
     b76:	34 91       	lpm	r19, Z
     b78:	dc 01       	movw	r26, r24
     b7a:	cb 01       	movw	r24, r22
     b7c:	82 0f       	add	r24, r18
     b7e:	93 1f       	adc	r25, r19
     b80:	a1 1d       	adc	r26, r1
     b82:	b1 1d       	adc	r27, r1
     b84:	80 93 29 01 	sts	0x0129, r24
     b88:	90 93 2a 01 	sts	0x012A, r25
     b8c:	a0 93 2b 01 	sts	0x012B, r26
     b90:	b0 93 2c 01 	sts	0x012C, r27
     b94:	5f c0       	rjmp	.+190    	; 0xc54 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 2 ){
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	71 f5       	brne	.+92     	; 0xbf6 <_Z9isr_soundv+0x160>
				tone(pgm_read_word(&(sound_pattern_fire[sound_current_step].frequency)), sound_alarm_volume);
     b9a:	e0 91 2d 01 	lds	r30, 0x012D
     b9e:	f0 e0       	ldi	r31, 0x00	; 0
     ba0:	ee 0f       	add	r30, r30
     ba2:	ff 1f       	adc	r31, r31
     ba4:	ee 0f       	add	r30, r30
     ba6:	ff 1f       	adc	r31, r31
     ba8:	ee 0f       	add	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	ec 54       	subi	r30, 0x4C	; 76
     bae:	fc 4f       	sbci	r31, 0xFC	; 252
     bb0:	65 91       	lpm	r22, Z+
     bb2:	74 91       	lpm	r23, Z
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	74 d6       	rcall	.+3304   	; 0x18a4 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_fire[sound_current_step].time)));
     bbc:	55 dd       	rcall	.-1366   	; 0x668 <millis_get>
     bbe:	e0 91 2d 01 	lds	r30, 0x012D
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	ee 0f       	add	r30, r30
     bc6:	ff 1f       	adc	r31, r31
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	e8 54       	subi	r30, 0x48	; 72
     bd2:	fc 4f       	sbci	r31, 0xFC	; 252
     bd4:	25 91       	lpm	r18, Z+
     bd6:	34 91       	lpm	r19, Z
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	82 0f       	add	r24, r18
     bde:	93 1f       	adc	r25, r19
     be0:	a1 1d       	adc	r26, r1
     be2:	b1 1d       	adc	r27, r1
     be4:	80 93 29 01 	sts	0x0129, r24
     be8:	90 93 2a 01 	sts	0x012A, r25
     bec:	a0 93 2b 01 	sts	0x012B, r26
     bf0:	b0 93 2c 01 	sts	0x012C, r27
     bf4:	2f c0       	rjmp	.+94     	; 0xc54 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 3 ){
     bf6:	83 30       	cpi	r24, 0x03	; 3
     bf8:	69 f5       	brne	.+90     	; 0xc54 <_Z9isr_soundv+0x1be>
				tone(pgm_read_word(&(sound_pattern_help[sound_current_step].frequency)),sound_alarm_volume);
     bfa:	e0 91 2d 01 	lds	r30, 0x012D
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	ee 0f       	add	r30, r30
     c06:	ff 1f       	adc	r31, r31
     c08:	ee 0f       	add	r30, r30
     c0a:	ff 1f       	adc	r31, r31
     c0c:	ec 5c       	subi	r30, 0xCC	; 204
     c0e:	fb 4f       	sbci	r31, 0xFB	; 251
     c10:	65 91       	lpm	r22, Z+
     c12:	74 91       	lpm	r23, Z
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	41 e0       	ldi	r20, 0x01	; 1
     c1a:	44 d6       	rcall	.+3208   	; 0x18a4 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_help[sound_current_step].time)));
     c1c:	25 dd       	rcall	.-1462   	; 0x668 <millis_get>
     c1e:	e0 91 2d 01 	lds	r30, 0x012D
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	ee 0f       	add	r30, r30
     c2a:	ff 1f       	adc	r31, r31
     c2c:	ee 0f       	add	r30, r30
     c2e:	ff 1f       	adc	r31, r31
     c30:	e8 5c       	subi	r30, 0xC8	; 200
     c32:	fb 4f       	sbci	r31, 0xFB	; 251
     c34:	25 91       	lpm	r18, Z+
     c36:	34 91       	lpm	r19, Z
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	82 0f       	add	r24, r18
     c3e:	93 1f       	adc	r25, r19
     c40:	a1 1d       	adc	r26, r1
     c42:	b1 1d       	adc	r27, r1
     c44:	80 93 29 01 	sts	0x0129, r24
     c48:	90 93 2a 01 	sts	0x012A, r25
     c4c:	a0 93 2b 01 	sts	0x012B, r26
     c50:	b0 93 2c 01 	sts	0x012C, r27
			}
			
		//_sound_note_time = millis_get() + 1000;
			
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
     c54:	50 91 2d 01 	lds	r21, 0x012D
     c58:	40 91 2e 01 	lds	r20, 0x012E
     c5c:	25 2f       	mov	r18, r21
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	e4 2f       	mov	r30, r20
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	ee 5e       	subi	r30, 0xEE	; 238
     c66:	fe 4f       	sbci	r31, 0xFE	; 254
     c68:	80 81       	ld	r24, Z
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	28 17       	cp	r18, r24
     c70:	39 07       	cpc	r19, r25
     c72:	d4 f0       	brlt	.+52     	; 0xca8 <_Z9isr_soundv+0x212>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c74:	20 91 33 01 	lds	r18, 0x0133
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     c78:	92 2f       	mov	r25, r18
     c7a:	9f 70       	andi	r25, 0x0F	; 15
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
     c7e:	4f 5f       	subi	r20, 0xFF	; 255
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     c80:	44 30       	cpi	r20, 0x04	; 4
     c82:	09 f4       	brne	.+2      	; 0xc86 <_Z9isr_soundv+0x1f0>
     c84:	43 2f       	mov	r20, r19
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c86:	e4 2f       	mov	r30, r20
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	e2 5f       	subi	r30, 0xF2	; 242
     c8c:	fe 4f       	sbci	r31, 0xFE	; 254
     c8e:	80 81       	ld	r24, Z
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     c90:	91 11       	cpse	r25, r1
     c92:	03 c0       	rjmp	.+6      	; 0xc9a <_Z9isr_soundv+0x204>
     c94:	40 93 2e 01 	sts	0x012E, r20
     c98:	04 c0       	rjmp	.+8      	; 0xca2 <_Z9isr_soundv+0x20c>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c9a:	82 23       	and	r24, r18
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
     c9c:	81 f3       	breq	.-32     	; 0xc7e <_Z9isr_soundv+0x1e8>
     c9e:	40 93 2e 01 	sts	0x012E, r20
						done = 1; // in case there is no active alarm anymore, just breakout while
					}

				} // while
				
				sound_current_step = 0; // reset sound_current_step to zero to start the next sound	
     ca2:	10 92 2d 01 	sts	0x012D, r1
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <_Z9isr_soundv+0x218>
				
			}else{
				// set sound_current_step plus one
				sound_current_step++;
     ca8:	5f 5f       	subi	r21, 0xFF	; 255
     caa:	50 93 2d 01 	sts	0x012D, r21
			}
	
				
		} //void isr_sound()
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	08 95       	ret

00000cb4 <_Z15isr_light_flashv>:
		
	void isr_light_flash(){
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
			
		// Do we need to go to the next flash?
		if(_flash_time != 0){ // is there already a flash ?
     cbc:	80 91 24 01 	lds	r24, 0x0124
     cc0:	90 91 25 01 	lds	r25, 0x0125
     cc4:	a0 91 26 01 	lds	r26, 0x0126
     cc8:	b0 91 27 01 	lds	r27, 0x0127
     ccc:	89 2b       	or	r24, r25
     cce:	8a 2b       	or	r24, r26
     cd0:	8b 2b       	or	r24, r27
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <_Z15isr_light_flashv+0x22>
     cd4:	48 c0       	rjmp	.+144    	; 0xd66 <_Z15isr_light_flashv+0xb2>
			if(millis_get() < _flash_time ){ // Do we need to stop the current note?
     cd6:	c8 dc       	rcall	.-1648   	; 0x668 <millis_get>
     cd8:	00 91 24 01 	lds	r16, 0x0124
     cdc:	10 91 25 01 	lds	r17, 0x0125
     ce0:	20 91 26 01 	lds	r18, 0x0126
     ce4:	30 91 27 01 	lds	r19, 0x0127
     ce8:	60 17       	cp	r22, r16
     cea:	71 07       	cpc	r23, r17
     cec:	82 07       	cpc	r24, r18
     cee:	93 07       	cpc	r25, r19
     cf0:	08 f0       	brcs	.+2      	; 0xcf4 <_Z15isr_light_flashv+0x40>
     cf2:	39 c0       	rjmp	.+114    	; 0xd66 <_Z15isr_light_flashv+0xb2>
     cf4:	3b c0       	rjmp	.+118    	; 0xd6c <_Z15isr_light_flashv+0xb8>
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
     cf6:	80 91 28 01 	lds	r24, 0x0128
     cfa:	fe 01       	movw	r30, r28
     cfc:	98 e0       	ldi	r25, 0x08	; 8
     cfe:	89 9f       	mul	r24, r25
     d00:	e0 0d       	add	r30, r0
     d02:	f1 1d       	adc	r31, r1
     d04:	11 24       	eor	r1, r1
     d06:	e4 58       	subi	r30, 0x84	; 132
     d08:	fb 4f       	sbci	r31, 0xFB	; 251
     d0a:	64 91       	lpm	r22, Z
     d0c:	8c 2f       	mov	r24, r28
     d0e:	8d 5f       	subi	r24, 0xFD	; 253
     d10:	7f d1       	rcall	.+766    	; 0x1010 <pca9635_set_led_pwm>
     d12:	21 96       	adiw	r28, 0x01	; 1
			}						
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
     d14:	c4 30       	cpi	r28, 0x04	; 4
     d16:	d1 05       	cpc	r29, r1
     d18:	71 f7       	brne	.-36     	; 0xcf6 <_Z15isr_light_flashv+0x42>
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
		}
		
		_flash_time = millis_get() + pgm_read_word(&(flash_pattern[_flash_current_step].time));
     d1a:	a6 dc       	rcall	.-1716   	; 0x668 <millis_get>
     d1c:	40 91 28 01 	lds	r20, 0x0128
     d20:	e4 2f       	mov	r30, r20
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	ee 0f       	add	r30, r30
     d26:	ff 1f       	adc	r31, r31
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	ee 0f       	add	r30, r30
     d2e:	ff 1f       	adc	r31, r31
     d30:	e0 58       	subi	r30, 0x80	; 128
     d32:	fb 4f       	sbci	r31, 0xFB	; 251
     d34:	25 91       	lpm	r18, Z+
     d36:	34 91       	lpm	r19, Z
     d38:	dc 01       	movw	r26, r24
     d3a:	cb 01       	movw	r24, r22
     d3c:	82 0f       	add	r24, r18
     d3e:	93 1f       	adc	r25, r19
     d40:	a1 1d       	adc	r26, r1
     d42:	b1 1d       	adc	r27, r1
     d44:	80 93 24 01 	sts	0x0124, r24
     d48:	90 93 25 01 	sts	0x0125, r25
     d4c:	a0 93 26 01 	sts	0x0126, r26
     d50:	b0 93 27 01 	sts	0x0127, r27
			
		// is variable _flash_current_step equal to total steps?
		if(_flash_current_step == (flash_keys -1 )) {
     d54:	4f 31       	cpi	r20, 0x1F	; 31
     d56:	19 f4       	brne	.+6      	; 0xd5e <_Z15isr_light_flashv+0xaa>
			//reset _flash_current_step to 0
			_flash_current_step = 0;				
     d58:	10 92 28 01 	sts	0x0128, r1
     d5c:	07 c0       	rjmp	.+14     	; 0xd6c <_Z15isr_light_flashv+0xb8>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
     d5e:	4f 5f       	subi	r20, 0xFF	; 255
     d60:	40 93 28 01 	sts	0x0128, r20
     d64:	03 c0       	rjmp	.+6      	; 0xd6c <_Z15isr_light_flashv+0xb8>
			}
	
				
		} //void isr_sound()
		
	void isr_light_flash(){
     d66:	c0 e0       	ldi	r28, 0x00	; 0
     d68:	d0 e0       	ldi	r29, 0x00	; 0
     d6a:	c5 cf       	rjmp	.-118    	; 0xcf6 <_Z15isr_light_flashv+0x42>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
		}
		
	} // END isr_light_flash
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	08 95       	ret

00000d76 <_Z14isr_light_iconv>:
		
		
		
		
		
	void isr_light_icon(){
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
		
		// Do we need to go to the next flash?
		if(_icon_time != 0){ // is there already a flash ?
     d7e:	80 91 1e 01 	lds	r24, 0x011E
     d82:	90 91 1f 01 	lds	r25, 0x011F
     d86:	a0 91 20 01 	lds	r26, 0x0120
     d8a:	b0 91 21 01 	lds	r27, 0x0121
     d8e:	89 2b       	or	r24, r25
     d90:	8a 2b       	or	r24, r26
     d92:	8b 2b       	or	r24, r27
     d94:	79 f0       	breq	.+30     	; 0xdb4 <_Z14isr_light_iconv+0x3e>
			if(millis_get() < _icon_time ){ // Do we need to stop the current note?
     d96:	68 dc       	rcall	.-1840   	; 0x668 <millis_get>
     d98:	00 91 1e 01 	lds	r16, 0x011E
     d9c:	10 91 1f 01 	lds	r17, 0x011F
     da0:	20 91 20 01 	lds	r18, 0x0120
     da4:	30 91 21 01 	lds	r19, 0x0121
     da8:	60 17       	cp	r22, r16
     daa:	71 07       	cpc	r23, r17
     dac:	82 07       	cpc	r24, r18
     dae:	93 07       	cpc	r25, r19
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <_Z14isr_light_iconv+0x3e>
     db2:	81 c0       	rjmp	.+258    	; 0xeb6 <_Z14isr_light_iconv+0x140>
	// step 2 = 250 - (2 x 25)  = 200
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
     db4:	20 91 22 01 	lds	r18, 0x0122
     db8:	22 23       	and	r18, r18
     dba:	19 f0       	breq	.+6      	; 0xdc2 <_Z14isr_light_iconv+0x4c>
     dbc:	2b 30       	cpi	r18, 0x0B	; 11
     dbe:	21 f5       	brne	.+72     	; 0xe08 <_Z14isr_light_iconv+0x92>
     dc0:	12 c0       	rjmp	.+36     	; 0xde6 <_Z14isr_light_iconv+0x70>
		intensity = 255;
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 1000;
     dc2:	52 dc       	rcall	.-1884   	; 0x668 <millis_get>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	88 51       	subi	r24, 0x18	; 24
     dca:	9c 4f       	sbci	r25, 0xFC	; 252
     dcc:	af 4f       	sbci	r26, 0xFF	; 255
     dce:	bf 4f       	sbci	r27, 0xFF	; 255
     dd0:	80 93 1e 01 	sts	0x011E, r24
     dd4:	90 93 1f 01 	sts	0x011F, r25
     dd8:	a0 93 20 01 	sts	0x0120, r26
     ddc:	b0 93 21 01 	sts	0x0121, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     de0:	cf ef       	ldi	r28, 0xFF	; 255
     de2:	d0 e0       	ldi	r29, 0x00	; 0
     de4:	25 c0       	rjmp	.+74     	; 0xe30 <_Z14isr_light_iconv+0xba>
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 1000;
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
     de6:	40 dc       	rcall	.-1920   	; 0x668 <millis_get>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	a1 1d       	adc	r26, r1
     df0:	b1 1d       	adc	r27, r1
     df2:	80 93 1e 01 	sts	0x011E, r24
     df6:	90 93 1f 01 	sts	0x011F, r25
     dfa:	a0 93 20 01 	sts	0x0120, r26
     dfe:	b0 93 21 01 	sts	0x0121, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     e02:	cf ef       	ldi	r28, 0xFF	; 255
     e04:	d0 e0       	ldi	r29, 0x00	; 0
     e06:	14 c0       	rjmp	.+40     	; 0xe30 <_Z14isr_light_iconv+0xba>
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
		}
			
	}else{
		intensity = (250 - (icon_current_step * 25)); // step 1 to 10, 
     e08:	37 ee       	ldi	r19, 0xE7	; 231
     e0a:	32 03       	mulsu	r19, r18
     e0c:	e0 01       	movw	r28, r0
     e0e:	11 24       	eor	r1, r1
     e10:	c6 50       	subi	r28, 0x06	; 6
     e12:	df 4f       	sbci	r29, 0xFF	; 255
		_icon_time = millis_get() + 30;
     e14:	29 dc       	rcall	.-1966   	; 0x668 <millis_get>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	4e 96       	adiw	r24, 0x1e	; 30
     e1c:	a1 1d       	adc	r26, r1
     e1e:	b1 1d       	adc	r27, r1
     e20:	80 93 1e 01 	sts	0x011E, r24
     e24:	90 93 1f 01 	sts	0x011F, r25
     e28:	a0 93 20 01 	sts	0x0120, r26
     e2c:	b0 93 21 01 	sts	0x0121, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     e30:	00 e0       	ldi	r16, 0x00	; 0
     e32:	10 e0       	ldi	r17, 0x00	; 0
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     e34:	80 91 23 01 	lds	r24, 0x0123
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	9c 01       	movw	r18, r24
     e3c:	22 0f       	add	r18, r18
     e3e:	33 1f       	adc	r19, r19
     e40:	82 0f       	add	r24, r18
     e42:	93 1f       	adc	r25, r19
     e44:	80 0f       	add	r24, r16
     e46:	91 1f       	adc	r25, r17
     e48:	fc 01       	movw	r30, r24
     e4a:	e4 58       	subi	r30, 0x84	; 132
     e4c:	fa 4f       	sbci	r31, 0xFA	; 250
     e4e:	44 91       	lpm	r20, Z
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     e50:	fc 01       	movw	r30, r24
     e52:	e8 59       	subi	r30, 0x98	; 152
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	84 91       	lpm	r24, Z
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     e58:	4c 9f       	mul	r20, r28
     e5a:	90 01       	movw	r18, r0
     e5c:	4d 9f       	mul	r20, r29
     e5e:	30 0d       	add	r19, r0
     e60:	11 24       	eor	r1, r1
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     e62:	63 2f       	mov	r22, r19
     e64:	d5 d0       	rcall	.+426    	; 0x1010 <pca9635_set_led_pwm>
     e66:	0f 5f       	subi	r16, 0xFF	; 255
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
		_icon_time = millis_get() + 30;
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
     e6a:	03 30       	cpi	r16, 0x03	; 3
     e6c:	11 05       	cpc	r17, r1
     e6e:	11 f7       	brne	.-60     	; 0xe34 <_Z14isr_light_iconv+0xbe>
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
	}
	

	// is variable _flash_current_step equal to total steps?
	if(icon_current_step == 11) {
     e70:	80 91 22 01 	lds	r24, 0x0122
     e74:	8b 30       	cpi	r24, 0x0B	; 11
     e76:	e1 f4       	brne	.+56     	; 0xeb0 <_Z14isr_light_iconv+0x13a>
		//reset _flash_current_step to 0
		icon_current_step = 0;
     e78:	10 92 22 01 	sts	0x0122, r1
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e7c:	30 91 33 01 	lds	r19, 0x0133
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     e80:	23 2f       	mov	r18, r19
     e82:	2f 70       	andi	r18, 0x0F	; 15
     e84:	80 91 23 01 	lds	r24, 0x0123
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     e88:	40 e0       	ldi	r20, 0x00	; 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
     e8a:	8f 5f       	subi	r24, 0xFF	; 255
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     e8c:	84 30       	cpi	r24, 0x04	; 4
     e8e:	09 f4       	brne	.+2      	; 0xe92 <_Z14isr_light_iconv+0x11c>
     e90:	84 2f       	mov	r24, r20
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e92:	e8 2f       	mov	r30, r24
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	e2 5f       	subi	r30, 0xF2	; 242
     e98:	fe 4f       	sbci	r31, 0xFE	; 254
     e9a:	90 81       	ld	r25, Z
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     e9c:	21 11       	cpse	r18, r1
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <_Z14isr_light_iconv+0x130>
     ea0:	80 93 23 01 	sts	0x0123, r24
     ea4:	08 c0       	rjmp	.+16     	; 0xeb6 <_Z14isr_light_iconv+0x140>
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     ea6:	93 23       	and	r25, r19
		//reset _flash_current_step to 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
     ea8:	81 f3       	breq	.-32     	; 0xe8a <_Z14isr_light_iconv+0x114>
     eaa:	80 93 23 01 	sts	0x0123, r24
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <_Z14isr_light_iconv+0x140>
			} // while
			
			
		}else{
		// set _flash_current_step +1
		icon_current_step++;
     eb0:	8f 5f       	subi	r24, 0xFF	; 255
     eb2:	80 93 22 01 	sts	0x0122, r24
	}
	
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	08 95       	ret

00000ec0 <__vector_7>:

	
	
	
	
ISR (TIMER2_COMPA_vect) {
     ec0:	1f 92       	push	r1
     ec2:	0f 92       	push	r0
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	0f 92       	push	r0
     ec8:	11 24       	eor	r1, r1
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	2f 93       	push	r18
     ed0:	3f 93       	push	r19
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31

	// check if the alarm needs to be stopped
	if(millis_get() >= active_alarm_time || active_alarm_time == 0){
     ee6:	c0 db       	rcall	.-2176   	; 0x668 <millis_get>
     ee8:	00 91 2f 01 	lds	r16, 0x012F
     eec:	10 91 30 01 	lds	r17, 0x0130
     ef0:	20 91 31 01 	lds	r18, 0x0131
     ef4:	30 91 32 01 	lds	r19, 0x0132
     ef8:	60 17       	cp	r22, r16
     efa:	71 07       	cpc	r23, r17
     efc:	82 07       	cpc	r24, r18
     efe:	93 07       	cpc	r25, r19
     f00:	20 f4       	brcc	.+8      	; 0xf0a <__vector_7+0x4a>
     f02:	01 2b       	or	r16, r17
     f04:	02 2b       	or	r16, r18
     f06:	03 2b       	or	r16, r19
     f08:	c1 f5       	brne	.+112    	; 0xf7a <__vector_7+0xba>
		// stop alarm
			
			// reset steps of sound, flash and icon
			sound_current_step		= 0;
     f0a:	10 92 2d 01 	sts	0x012D, r1
			_sound_note_time		= 0;
     f0e:	10 92 29 01 	sts	0x0129, r1
     f12:	10 92 2a 01 	sts	0x012A, r1
     f16:	10 92 2b 01 	sts	0x012B, r1
     f1a:	10 92 2c 01 	sts	0x012C, r1
										
			_flash_current_step		= 0;
     f1e:	10 92 28 01 	sts	0x0128, r1
			_flash_time				= 0;
     f22:	10 92 24 01 	sts	0x0124, r1
     f26:	10 92 25 01 	sts	0x0125, r1
     f2a:	10 92 26 01 	sts	0x0126, r1
     f2e:	10 92 27 01 	sts	0x0127, r1
										
			icon_current_step		= 0;
     f32:	10 92 22 01 	sts	0x0122, r1
			_icon_time				= 0;
     f36:	10 92 1e 01 	sts	0x011E, r1
     f3a:	10 92 1f 01 	sts	0x011F, r1
     f3e:	10 92 20 01 	sts	0x0120, r1
     f42:	10 92 21 01 	sts	0x0121, r1
										
			// empty alarm arrray
			active_alarm = 0x00; 
     f46:	10 92 33 01 	sts	0x0133, r1
			active_alarm_time = 0;
     f4a:	10 92 2f 01 	sts	0x012F, r1
     f4e:	10 92 30 01 	sts	0x0130, r1
     f52:	10 92 31 01 	sts	0x0131, r1
     f56:	10 92 32 01 	sts	0x0132, r1
					
			// alle leds uit, pca in slaapstand
			pca9635_set_all_led_pwm(0); // dimm all leds to zero
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	6a d0       	rcall	.+212    	; 0x1032 <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1); // put pca9635 in sleep
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	78 d0       	rcall	.+240    	; 0x1052 <pca9635_set_sleep>
			power_twi_disable();
     f62:	e4 e6       	ldi	r30, 0x64	; 100
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	80 68       	ori	r24, 0x80	; 128
     f6a:	80 83       	st	Z, r24
			
			// automatisch slapen in loop.

			//uart0_puts("STOPINT");
			// stop timer 0
			millis_pause();
     f6c:	9c db       	rcall	.-2248   	; 0x6a6 <millis_pause>
			
			// stop sound
			noTone();
     f6e:	8d d4       	rcall	.+2330   	; 0x188a <noTone>
			
			// stop timer 2
			timer2_pause();
     f70:	eb db       	rcall	.-2090   	; 0x748 <_Z12timer2_pausev>
			
			deep_sleep_ok = 1;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	80 93 34 01 	sts	0x0134, r24
     f78:	03 c0       	rjmp	.+6      	; 0xf80 <__vector_7+0xc0>
					
	}else{
		// continue alarm
		isr_sound();
     f7a:	8d dd       	rcall	.-1254   	; 0xa96 <_Z9isr_soundv>
	    isr_light_flash();
     f7c:	9b de       	rcall	.-714    	; 0xcb4 <_Z15isr_light_flashv>
		isr_light_icon();		
     f7e:	fb de       	rcall	.-522    	; 0xd76 <_Z14isr_light_iconv>
	}
						
}
     f80:	ff 91       	pop	r31
     f82:	ef 91       	pop	r30
     f84:	bf 91       	pop	r27
     f86:	af 91       	pop	r26
     f88:	9f 91       	pop	r25
     f8a:	8f 91       	pop	r24
     f8c:	7f 91       	pop	r23
     f8e:	6f 91       	pop	r22
     f90:	5f 91       	pop	r21
     f92:	4f 91       	pop	r20
     f94:	3f 91       	pop	r19
     f96:	2f 91       	pop	r18
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	0f 90       	pop	r0
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	0f 90       	pop	r0
     fa2:	1f 90       	pop	r1
     fa4:	18 95       	reti

00000fa6 <pca9635_init>:
	   I2C_write(value);	
  	}
			  
  	I2C_stop();
		  
}
     fa6:	80 e8       	ldi	r24, 0x80	; 128
     fa8:	10 db       	rcall	.-2528   	; 0x5ca <I2C_start>
     faa:	80 e8       	ldi	r24, 0x80	; 128
     fac:	33 db       	rcall	.-2458   	; 0x614 <I2C_write>
     fae:	80 e8       	ldi	r24, 0x80	; 128
     fb0:	31 db       	rcall	.-2462   	; 0x614 <I2C_write>
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	2f db       	rcall	.-2466   	; 0x614 <I2C_write>
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	2d db       	rcall	.-2470   	; 0x614 <I2C_write>
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	2b db       	rcall	.-2474   	; 0x614 <I2C_write>
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	29 db       	rcall	.-2478   	; 0x614 <I2C_write>
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	27 db       	rcall	.-2482   	; 0x614 <I2C_write>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	25 db       	rcall	.-2486   	; 0x614 <I2C_write>
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	23 db       	rcall	.-2490   	; 0x614 <I2C_write>
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	21 db       	rcall	.-2494   	; 0x614 <I2C_write>
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	1f db       	rcall	.-2498   	; 0x614 <I2C_write>
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	1d db       	rcall	.-2502   	; 0x614 <I2C_write>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	1b db       	rcall	.-2506   	; 0x614 <I2C_write>
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	19 db       	rcall	.-2510   	; 0x614 <I2C_write>
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	17 db       	rcall	.-2514   	; 0x614 <I2C_write>
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	15 db       	rcall	.-2518   	; 0x614 <I2C_write>
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	13 db       	rcall	.-2522   	; 0x614 <I2C_write>
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	11 db       	rcall	.-2526   	; 0x614 <I2C_write>
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	0f db       	rcall	.-2530   	; 0x614 <I2C_write>
     ff6:	8f ef       	ldi	r24, 0xFF	; 255
     ff8:	0d db       	rcall	.-2534   	; 0x614 <I2C_write>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	0b db       	rcall	.-2538   	; 0x614 <I2C_write>
     ffe:	8a ea       	ldi	r24, 0xAA	; 170
    1000:	09 db       	rcall	.-2542   	; 0x614 <I2C_write>
    1002:	8a ea       	ldi	r24, 0xAA	; 170
    1004:	07 db       	rcall	.-2546   	; 0x614 <I2C_write>
    1006:	8a ea       	ldi	r24, 0xAA	; 170
    1008:	05 db       	rcall	.-2550   	; 0x614 <I2C_write>
    100a:	8a ea       	ldi	r24, 0xAA	; 170
    100c:	03 db       	rcall	.-2554   	; 0x614 <I2C_write>
    100e:	1f cb       	rjmp	.-2498   	; 0x64e <I2C_stop>

00001010 <pca9635_set_led_pwm>:
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	d8 2f       	mov	r29, r24
    1016:	c6 2f       	mov	r28, r22
    1018:	80 e8       	ldi	r24, 0x80	; 128
    101a:	d7 da       	rcall	.-2642   	; 0x5ca <I2C_start>
    101c:	8d 2f       	mov	r24, r29
    101e:	8e 5f       	subi	r24, 0xFE	; 254
    1020:	80 68       	ori	r24, 0x80	; 128
    1022:	f8 da       	rcall	.-2576   	; 0x614 <I2C_write>
    1024:	8c 2f       	mov	r24, r28
    1026:	f6 da       	rcall	.-2580   	; 0x614 <I2C_write>
    1028:	12 db       	rcall	.-2524   	; 0x64e <I2C_stop>
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <pca9635_set_all_led_pwm>:
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	d8 2f       	mov	r29, r24
    1038:	80 e8       	ldi	r24, 0x80	; 128
    103a:	c7 da       	rcall	.-2674   	; 0x5ca <I2C_start>
    103c:	82 e8       	ldi	r24, 0x82	; 130
    103e:	ea da       	rcall	.-2604   	; 0x614 <I2C_write>
    1040:	c0 e1       	ldi	r28, 0x10	; 16
    1042:	8d 2f       	mov	r24, r29
    1044:	e7 da       	rcall	.-2610   	; 0x614 <I2C_write>
    1046:	c1 50       	subi	r28, 0x01	; 1
    1048:	e1 f7       	brne	.-8      	; 0x1042 <pca9635_set_all_led_pwm+0x10>
    104a:	01 db       	rcall	.-2558   	; 0x64e <I2C_stop>
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	08 95       	ret

00001052 <pca9635_set_sleep>:

/**
* Changes the oscillator mode between sleep (1) and active (0)
*/
uint8_t pca9635_set_sleep(uint8_t sleep)
{
    1052:	cf 93       	push	r28
    1054:	c8 2f       	mov	r28, r24
	I2C_start((0x40<<1)+I2C_READ);
    1056:	81 e8       	ldi	r24, 0x81	; 129
    1058:	b8 da       	rcall	.-2704   	; 0x5ca <I2C_start>
	I2C_write(0x80); // autoincrement, mode 0,
    105a:	80 e8       	ldi	r24, 0x80	; 128
    105c:	db da       	rcall	.-2634   	; 0x614 <I2C_write>
	// I2C_stop(); ???nodig?
	uint8_t data = I2C_read_ack();
    105e:	ec da       	rcall	.-2600   	; 0x638 <I2C_read_ack>
	
	if(sleep){		// set or unset bit 4
    1060:	cc 23       	and	r28, r28
    1062:	11 f0       	breq	.+4      	; 0x1068 <pca9635_set_sleep+0x16>
		data |= (1<<4);
    1064:	80 61       	ori	r24, 0x10	; 16
    1066:	01 c0       	rjmp	.+2      	; 0x106a <pca9635_set_sleep+0x18>
	}else{
		data &= ~(1<<4);
    1068:	8f 7e       	andi	r24, 0xEF	; 239
	}
	
	uint8_t ack = I2C_write(data);  
    106a:	d4 da       	rcall	.-2648   	; 0x614 <I2C_write>
    106c:	c8 2f       	mov	r28, r24
	I2C_stop();
    106e:	ef da       	rcall	.-2594   	; 0x64e <I2C_stop>
	return ack;
}
    1070:	8c 2f       	mov	r24, r28
    1072:	cf 91       	pop	r28
    1074:	08 95       	ret

00001076 <_ZL15blockInterruptsv>:
			//PORTB &= ~_BV(0); // pb0 uit
	} else {
		rfmstate &= ~B11111000; // make sure everything is switched off (except bod, wkup, clk)
		rf12_xfer(rfmstate);
	}
	rxstate = TXIDLE;
    1076:	e8 98       	cbi	0x1d, 0	; 29
    1078:	08 95       	ret

0000107a <_ZL15allowInterruptsv>:
    107a:	e8 9a       	sbi	0x1d, 0	; 29
    107c:	08 95       	ret

0000107e <_ZL9rf12_byteh>:
    107e:	8e bd       	out	0x2e, r24	; 46
    1080:	0d b4       	in	r0, 0x2d	; 45
    1082:	07 fe       	sbrs	r0, 7
    1084:	fd cf       	rjmp	.-6      	; 0x1080 <_ZL9rf12_byteh+0x2>
    1086:	8e b5       	in	r24, 0x2e	; 46
    1088:	08 95       	ret

0000108a <_ZL9rf12_xferj>:
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	18 2f       	mov	r17, r24
    1092:	c9 2f       	mov	r28, r25
    1094:	f0 df       	rcall	.-32     	; 0x1076 <_ZL15blockInterruptsv>
    1096:	2a 98       	cbi	0x05, 2	; 5
    1098:	8c 2f       	mov	r24, r28
    109a:	f1 df       	rcall	.-30     	; 0x107e <_ZL9rf12_byteh>
    109c:	d8 2f       	mov	r29, r24
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	c8 2f       	mov	r28, r24
    10a2:	81 2f       	mov	r24, r17
    10a4:	ec df       	rcall	.-40     	; 0x107e <_ZL9rf12_byteh>
    10a6:	c8 2b       	or	r28, r24
    10a8:	2a 9a       	sbi	0x05, 2	; 5
    10aa:	e7 df       	rcall	.-50     	; 0x107a <_ZL15allowInterruptsv>
    10ac:	8c 2f       	mov	r24, r28
    10ae:	9d 2f       	mov	r25, r29
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	08 95       	ret

000010b8 <_ZL9rf12_idlev>:
    10b8:	80 91 89 01 	lds	r24, 0x0189
    10bc:	90 91 8a 01 	lds	r25, 0x018A
    10c0:	8f 70       	andi	r24, 0x0F	; 15
    10c2:	90 93 8a 01 	sts	0x018A, r25
    10c6:	80 93 89 01 	sts	0x0189, r24
    10ca:	80 91 89 01 	lds	r24, 0x0189
    10ce:	90 91 8a 01 	lds	r25, 0x018A
    10d2:	88 60       	ori	r24, 0x08	; 8
    10d4:	90 93 8a 01 	sts	0x018A, r25
    10d8:	80 93 89 01 	sts	0x0189, r24
    10dc:	80 91 89 01 	lds	r24, 0x0189
    10e0:	90 91 8a 01 	lds	r25, 0x018A
    10e4:	d2 cf       	rjmp	.-92     	; 0x108a <_ZL9rf12_xferj>

000010e6 <_Z12rf12_spiInitv>:
    10e6:	84 b1       	in	r24, 0x04	; 4
    10e8:	8c 62       	ori	r24, 0x2C	; 44
    10ea:	84 b9       	out	0x04, r24	; 4
    10ec:	2a 9a       	sbi	0x05, 2	; 5
    10ee:	24 98       	cbi	0x04, 4	; 4
    10f0:	80 e5       	ldi	r24, 0x50	; 80
    10f2:	8c bd       	out	0x2c, r24	; 44
    10f4:	8d b5       	in	r24, 0x2d	; 45
    10f6:	81 60       	ori	r24, 0x01	; 1
    10f8:	8d bd       	out	0x2d, r24	; 45
    10fa:	52 98       	cbi	0x0a, 2	; 10
    10fc:	5a 9a       	sbi	0x0b, 2	; 11
    10fe:	08 95       	ret

00001100 <_Z13rf12_recvDonev>:
    1100:	80 91 8b 01 	lds	r24, 0x018B
    1104:	87 30       	cpi	r24, 0x07	; 7
    1106:	09 f0       	breq	.+2      	; 0x110a <_Z13rf12_recvDonev+0xa>
    1108:	51 c0       	rjmp	.+162    	; 0x11ac <_Z13rf12_recvDonev+0xac>
    110a:	80 91 8e 01 	lds	r24, 0x018E
    110e:	88 23       	and	r24, r24
    1110:	a1 f0       	breq	.+40     	; 0x113a <_Z13rf12_recvDonev+0x3a>
    1112:	90 91 8c 01 	lds	r25, 0x018C
    1116:	98 17       	cp	r25, r24
    1118:	28 f4       	brcc	.+10     	; 0x1124 <_Z13rf12_recvDonev+0x24>
    111a:	80 91 8c 01 	lds	r24, 0x018C
    111e:	87 34       	cpi	r24, 0x47	; 71
    1120:	08 f4       	brcc	.+2      	; 0x1124 <_Z13rf12_recvDonev+0x24>
    1122:	44 c0       	rjmp	.+136    	; 0x11ac <_Z13rf12_recvDonev+0xac>
    1124:	84 e0       	ldi	r24, 0x04	; 4
    1126:	80 93 8b 01 	sts	0x018B, r24
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	90 93 83 01 	sts	0x0183, r25
    1132:	80 93 82 01 	sts	0x0182, r24
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	08 95       	ret
    113a:	20 91 8c 01 	lds	r18, 0x018C
    113e:	80 91 3d 01 	lds	r24, 0x013D
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	05 96       	adiw	r24, 0x05	; 5
    1148:	28 17       	cp	r18, r24
    114a:	39 07       	cpc	r19, r25
    114c:	24 f4       	brge	.+8      	; 0x1156 <_Z13rf12_recvDonev+0x56>
    114e:	80 91 8c 01 	lds	r24, 0x018C
    1152:	87 34       	cpi	r24, 0x47	; 71
    1154:	58 f1       	brcs	.+86     	; 0x11ac <_Z13rf12_recvDonev+0xac>
    1156:	84 e0       	ldi	r24, 0x04	; 4
    1158:	80 93 8b 01 	sts	0x018B, r24
    115c:	80 91 3d 01 	lds	r24, 0x013D
    1160:	83 34       	cpi	r24, 0x43	; 67
    1162:	30 f0       	brcs	.+12     	; 0x1170 <_Z13rf12_recvDonev+0x70>
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	90 93 83 01 	sts	0x0183, r25
    116c:	80 93 82 01 	sts	0x0182, r24
    1170:	80 91 3c 01 	lds	r24, 0x013C
    1174:	86 ff       	sbrs	r24, 6
    1176:	0b c0       	rjmp	.+22     	; 0x118e <_Z13rf12_recvDonev+0x8e>
    1178:	80 91 8f 01 	lds	r24, 0x018F
    117c:	98 2f       	mov	r25, r24
    117e:	9f 71       	andi	r25, 0x1F	; 31
    1180:	9f 31       	cpi	r25, 0x1F	; 31
    1182:	29 f0       	breq	.+10     	; 0x118e <_Z13rf12_recvDonev+0x8e>
    1184:	90 91 3c 01 	lds	r25, 0x013C
    1188:	89 27       	eor	r24, r25
    118a:	8f 71       	andi	r24, 0x1F	; 31
    118c:	79 f4       	brne	.+30     	; 0x11ac <_Z13rf12_recvDonev+0xac>
    118e:	80 91 82 01 	lds	r24, 0x0182
    1192:	90 91 83 01 	lds	r25, 0x0183
    1196:	89 2b       	or	r24, r25
    1198:	09 f0       	breq	.+2      	; 0x119c <_Z13rf12_recvDonev+0x9c>
    119a:	55 c0       	rjmp	.+170    	; 0x1246 <_Z13rf12_recvDonev+0x146>
    119c:	e0 91 35 01 	lds	r30, 0x0135
    11a0:	f0 91 36 01 	lds	r31, 0x0136
    11a4:	30 97       	sbiw	r30, 0x00	; 0
    11a6:	09 f0       	breq	.+2      	; 0x11aa <_Z13rf12_recvDonev+0xaa>
    11a8:	4a c0       	rjmp	.+148    	; 0x123e <_Z13rf12_recvDonev+0x13e>
    11aa:	4d c0       	rjmp	.+154    	; 0x1246 <_Z13rf12_recvDonev+0x146>
    11ac:	80 91 8b 01 	lds	r24, 0x018B
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	09 f0       	breq	.+2      	; 0x11b6 <_Z13rf12_recvDonev+0xb6>
    11b4:	42 c0       	rjmp	.+132    	; 0x123a <_Z13rf12_recvDonev+0x13a>
    11b6:	10 92 3d 01 	sts	0x013D, r1
    11ba:	10 92 8c 01 	sts	0x018C, r1
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	9f ef       	ldi	r25, 0xFF	; 255
    11c2:	90 93 83 01 	sts	0x0183, r25
    11c6:	80 93 82 01 	sts	0x0182, r24
    11ca:	20 91 8d 01 	lds	r18, 0x018D
    11ce:	22 23       	and	r18, r18
    11d0:	d9 f0       	breq	.+54     	; 0x1208 <_Z13rf12_recvDonev+0x108>
    11d2:	82 27       	eor	r24, r18
    11d4:	28 2f       	mov	r18, r24
    11d6:	22 95       	swap	r18
    11d8:	28 27       	eor	r18, r24
    11da:	02 2e       	mov	r0, r18
    11dc:	26 95       	lsr	r18
    11de:	26 95       	lsr	r18
    11e0:	20 25       	eor	r18, r0
    11e2:	02 2e       	mov	r0, r18
    11e4:	26 95       	lsr	r18
    11e6:	20 25       	eor	r18, r0
    11e8:	27 70       	andi	r18, 0x07	; 7
    11ea:	08 2e       	mov	r0, r24
    11ec:	89 2f       	mov	r24, r25
    11ee:	26 95       	lsr	r18
    11f0:	07 94       	ror	r0
    11f2:	27 95       	ror	r18
    11f4:	90 2d       	mov	r25, r0
    11f6:	82 27       	eor	r24, r18
    11f8:	06 94       	lsr	r0
    11fa:	27 95       	ror	r18
    11fc:	90 25       	eor	r25, r0
    11fe:	82 27       	eor	r24, r18
    1200:	90 93 83 01 	sts	0x0183, r25
    1204:	80 93 82 01 	sts	0x0182, r24
    1208:	87 e0       	ldi	r24, 0x07	; 7
    120a:	80 93 8b 01 	sts	0x018B, r24
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	80 93 85 01 	sts	0x0185, r24
    1214:	83 ea       	ldi	r24, 0xA3	; 163
    1216:	94 e9       	ldi	r25, 0x94	; 148
    1218:	38 df       	rcall	.-400    	; 0x108a <_ZL9rf12_xferj>
    121a:	80 91 89 01 	lds	r24, 0x0189
    121e:	90 91 8a 01 	lds	r25, 0x018A
    1222:	88 6d       	ori	r24, 0xD8	; 216
    1224:	90 93 8a 01 	sts	0x018A, r25
    1228:	80 93 89 01 	sts	0x0189, r24
    122c:	80 91 89 01 	lds	r24, 0x0189
    1230:	90 91 8a 01 	lds	r25, 0x018A
    1234:	2a df       	rcall	.-428    	; 0x108a <_ZL9rf12_xferj>
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	08 95       	ret
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	08 95       	ret
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	09 95       	icall
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	08 95       	ret
    1246:	8f ef       	ldi	r24, 0xFF	; 255
    1248:	9f ef       	ldi	r25, 0xFF	; 255
    124a:	dc 01       	movw	r26, r24
    124c:	80 93 37 01 	sts	0x0137, r24
    1250:	90 93 38 01 	sts	0x0138, r25
    1254:	a0 93 39 01 	sts	0x0139, r26
    1258:	b0 93 3a 01 	sts	0x013A, r27
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	08 95       	ret

00001260 <_Z15rf12_setBitrateh>:
    1260:	cf 92       	push	r12
    1262:	df 92       	push	r13
    1264:	ef 92       	push	r14
    1266:	ff 92       	push	r15
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	c8 2f       	mov	r28, r24
    1270:	08 2f       	mov	r16, r24
    1272:	10 e0       	ldi	r17, 0x00	; 0
    1274:	c8 01       	movw	r24, r16
    1276:	96 6c       	ori	r25, 0xC6	; 198
    1278:	08 df       	rcall	.-496    	; 0x108a <_ZL9rf12_xferj>
    127a:	cf 77       	andi	r28, 0x7F	; 127
    127c:	2c 2f       	mov	r18, r28
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	2f 5f       	subi	r18, 0xFF	; 255
    1282:	3f 4f       	sbci	r19, 0xFF	; 255
    1284:	44 27       	eor	r20, r20
    1286:	37 fd       	sbrc	r19, 7
    1288:	40 95       	com	r20
    128a:	54 2f       	mov	r21, r20
    128c:	6b ef       	ldi	r22, 0xFB	; 251
    128e:	72 e4       	ldi	r23, 0x42	; 66
    1290:	85 e0       	ldi	r24, 0x05	; 5
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	e5 d3       	rcall	.+1994   	; 0x1a60 <__udivmodsi4>
    1296:	69 01       	movw	r12, r18
    1298:	7a 01       	movw	r14, r20
    129a:	c8 01       	movw	r24, r16
    129c:	88 0f       	add	r24, r24
    129e:	89 2f       	mov	r24, r25
    12a0:	88 1f       	adc	r24, r24
    12a2:	99 0b       	sbc	r25, r25
    12a4:	8c 01       	movw	r16, r24
    12a6:	00 0f       	add	r16, r16
    12a8:	11 1f       	adc	r17, r17
    12aa:	00 0f       	add	r16, r16
    12ac:	11 1f       	adc	r17, r17
    12ae:	00 0f       	add	r16, r16
    12b0:	11 1f       	adc	r17, r17
    12b2:	08 1b       	sub	r16, r24
    12b4:	19 0b       	sbc	r17, r25
    12b6:	0f 5f       	subi	r16, 0xFF	; 255
    12b8:	1f 4f       	sbci	r17, 0xFF	; 255
    12ba:	98 01       	movw	r18, r16
    12bc:	44 27       	eor	r20, r20
    12be:	37 fd       	sbrc	r19, 7
    12c0:	40 95       	com	r20
    12c2:	54 2f       	mov	r21, r20
    12c4:	c7 01       	movw	r24, r14
    12c6:	b6 01       	movw	r22, r12
    12c8:	cb d3       	rcall	.+1942   	; 0x1a60 <__udivmodsi4>
    12ca:	da 01       	movw	r26, r20
    12cc:	c9 01       	movw	r24, r18
    12ce:	68 94       	set
    12d0:	12 f8       	bld	r1, 2
    12d2:	b6 95       	lsr	r27
    12d4:	a7 95       	ror	r26
    12d6:	97 95       	ror	r25
    12d8:	87 95       	ror	r24
    12da:	16 94       	lsr	r1
    12dc:	d1 f7       	brne	.-12     	; 0x12d2 <_Z15rf12_setBitrateh+0x72>
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	6d 57       	subi	r22, 0x7D	; 125
    12e4:	7c 4f       	sbci	r23, 0xFC	; 252
    12e6:	8f 4f       	sbci	r24, 0xFF	; 255
    12e8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ea:	24 e8       	ldi	r18, 0x84	; 132
    12ec:	33 e0       	ldi	r19, 0x03	; 3
    12ee:	40 e0       	ldi	r20, 0x00	; 0
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	b6 d3       	rcall	.+1900   	; 0x1a60 <__udivmodsi4>
    12f4:	20 93 84 01 	sts	0x0184, r18
    12f8:	cf 91       	pop	r28
    12fa:	1f 91       	pop	r17
    12fc:	0f 91       	pop	r16
    12fe:	ff 90       	pop	r15
    1300:	ef 90       	pop	r14
    1302:	df 90       	pop	r13
    1304:	cf 90       	pop	r12
    1306:	08 95       	ret

00001308 <_Z19rf12_setFixedLengthh>:
    1308:	81 11       	cpse	r24, r1
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <_Z19rf12_setFixedLengthh+0xa>
    130c:	10 92 8e 01 	sts	0x018E, r1
    1310:	08 95       	ret
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	80 93 8e 01 	sts	0x018E, r24
    1318:	08 95       	ret

0000131a <_Z14rf12_sendStarth>:
    131a:	86 fd       	sbrc	r24, 6
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <_Z14rf12_sendStarth+0xe>
    131e:	80 7e       	andi	r24, 0xE0	; 224
    1320:	90 91 8f 01 	lds	r25, 0x018F
    1324:	9f 71       	andi	r25, 0x1F	; 31
    1326:	89 0f       	add	r24, r25
    1328:	80 93 3c 01 	sts	0x013C, r24
    132c:	e0 91 35 01 	lds	r30, 0x0135
    1330:	f0 91 36 01 	lds	r31, 0x0136
    1334:	30 97       	sbiw	r30, 0x00	; 0
    1336:	11 f0       	breq	.+4      	; 0x133c <_Z14rf12_sendStarth+0x22>
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	09 95       	icall
    133c:	8f ef       	ldi	r24, 0xFF	; 255
    133e:	9f ef       	ldi	r25, 0xFF	; 255
    1340:	90 93 83 01 	sts	0x0183, r25
    1344:	80 93 82 01 	sts	0x0182, r24
    1348:	80 91 82 01 	lds	r24, 0x0182
    134c:	90 91 83 01 	lds	r25, 0x0183
    1350:	20 91 8d 01 	lds	r18, 0x018D
    1354:	82 27       	eor	r24, r18
    1356:	28 2f       	mov	r18, r24
    1358:	22 95       	swap	r18
    135a:	28 27       	eor	r18, r24
    135c:	02 2e       	mov	r0, r18
    135e:	26 95       	lsr	r18
    1360:	26 95       	lsr	r18
    1362:	20 25       	eor	r18, r0
    1364:	02 2e       	mov	r0, r18
    1366:	26 95       	lsr	r18
    1368:	20 25       	eor	r18, r0
    136a:	27 70       	andi	r18, 0x07	; 7
    136c:	08 2e       	mov	r0, r24
    136e:	89 2f       	mov	r24, r25
    1370:	26 95       	lsr	r18
    1372:	07 94       	ror	r0
    1374:	27 95       	ror	r18
    1376:	90 2d       	mov	r25, r0
    1378:	82 27       	eor	r24, r18
    137a:	06 94       	lsr	r0
    137c:	27 95       	ror	r18
    137e:	90 25       	eor	r25, r0
    1380:	82 27       	eor	r24, r18
    1382:	90 93 83 01 	sts	0x0183, r25
    1386:	80 93 82 01 	sts	0x0182, r24
    138a:	88 e0       	ldi	r24, 0x08	; 8
    138c:	80 93 8b 01 	sts	0x018B, r24
    1390:	80 91 89 01 	lds	r24, 0x0189
    1394:	90 91 8a 01 	lds	r25, 0x018A
    1398:	88 63       	ori	r24, 0x38	; 56
    139a:	90 93 8a 01 	sts	0x018A, r25
    139e:	80 93 89 01 	sts	0x0189, r24
    13a2:	80 91 89 01 	lds	r24, 0x0189
    13a6:	90 91 8a 01 	lds	r25, 0x018A
    13aa:	6f ce       	rjmp	.-802    	; 0x108a <_ZL9rf12_xferj>

000013ac <_Z14rf12_sendStarthPKvh>:
    13ac:	cf 93       	push	r28
    13ae:	c8 2f       	mov	r28, r24
    13b0:	40 93 3d 01 	sts	0x013D, r20
    13b4:	2e e3       	ldi	r18, 0x3E	; 62
    13b6:	31 e0       	ldi	r19, 0x01	; 1
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	82 2f       	mov	r24, r18
    13bc:	93 2f       	mov	r25, r19
    13be:	86 d3       	rcall	.+1804   	; 0x1acc <memcpy>
    13c0:	8c 2f       	mov	r24, r28
    13c2:	ab df       	rcall	.-170    	; 0x131a <_Z14rf12_sendStarth>
    13c4:	cf 91       	pop	r28
    13c6:	08 95       	ret

000013c8 <_Z13rf12_sendWaith>:
    13c8:	44 e0       	ldi	r20, 0x04	; 4
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	5c e0       	ldi	r21, 0x0C	; 12
    13ce:	16 c0       	rjmp	.+44     	; 0x13fc <_Z13rf12_sendWaith+0x34>
    13d0:	88 23       	and	r24, r24
    13d2:	a1 f0       	breq	.+40     	; 0x13fc <_Z13rf12_sendWaith+0x34>
    13d4:	93 b7       	in	r25, 0x33	; 51
    13d6:	91 7f       	andi	r25, 0xF1	; 241
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	21 f0       	breq	.+8      	; 0x13e4 <_Z13rf12_sendWaith+0x1c>
    13dc:	82 30       	cpi	r24, 0x02	; 2
    13de:	21 f4       	brne	.+8      	; 0x13e8 <_Z13rf12_sendWaith+0x20>
    13e0:	25 2f       	mov	r18, r21
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <_Z13rf12_sendWaith+0x22>
    13e4:	24 2f       	mov	r18, r20
    13e6:	01 c0       	rjmp	.+2      	; 0x13ea <_Z13rf12_sendWaith+0x22>
    13e8:	23 2f       	mov	r18, r19
    13ea:	92 2b       	or	r25, r18
    13ec:	93 bf       	out	0x33, r25	; 51
    13ee:	93 b7       	in	r25, 0x33	; 51
    13f0:	91 60       	ori	r25, 0x01	; 1
    13f2:	93 bf       	out	0x33, r25	; 51
    13f4:	88 95       	sleep
    13f6:	93 b7       	in	r25, 0x33	; 51
    13f8:	9e 7f       	andi	r25, 0xFE	; 254
    13fa:	93 bf       	out	0x33, r25	; 51
    13fc:	90 91 8b 01 	lds	r25, 0x018B
    1400:	94 30       	cpi	r25, 0x04	; 4
    1402:	31 f7       	brne	.-52     	; 0x13d0 <_Z13rf12_sendWaith+0x8>
    1404:	08 95       	ret

00001406 <_Z21rf12_interruptcontrolv>:
    1406:	e8 9a       	sbi	0x1d, 0	; 29
    1408:	08 95       	ret

0000140a <_Z12rf12_restorehhh>:
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	d6 2f       	mov	r29, r22
    1410:	c4 2f       	mov	r28, r20
    1412:	80 93 8f 01 	sts	0x018F, r24
    1416:	40 93 8d 01 	sts	0x018D, r20
    141a:	60 93 90 01 	sts	0x0190, r22
    141e:	f3 df       	rcall	.-26     	; 0x1406 <_Z21rf12_interruptcontrolv>
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	72 df       	rcall	.-284    	; 0x1308 <_Z19rf12_setFixedLengthh>
    1424:	28 de       	rcall	.-944    	; 0x1076 <_ZL15blockInterruptsv>
    1426:	25 e0       	ldi	r18, 0x05	; 5
    1428:	32 e8       	ldi	r19, 0x82	; 130
    142a:	30 93 8a 01 	sts	0x018A, r19
    142e:	20 93 89 01 	sts	0x0189, r18
    1432:	80 91 89 01 	lds	r24, 0x0189
    1436:	90 91 8a 01 	lds	r25, 0x018A
    143a:	27 de       	rcall	.-946    	; 0x108a <_ZL9rf12_xferj>
    143c:	20 e1       	ldi	r18, 0x10	; 16
    143e:	d2 9f       	mul	r29, r18
    1440:	c0 01       	movw	r24, r0
    1442:	11 24       	eor	r1, r1
    1444:	87 6c       	ori	r24, 0xC7	; 199
    1446:	90 68       	ori	r25, 0x80	; 128
    1448:	20 de       	rcall	.-960    	; 0x108a <_ZL9rf12_xferj>
    144a:	80 e4       	ldi	r24, 0x40	; 64
    144c:	96 ea       	ldi	r25, 0xA6	; 166
    144e:	1d de       	rcall	.-966    	; 0x108a <_ZL9rf12_xferj>
    1450:	86 e0       	ldi	r24, 0x06	; 6
    1452:	06 df       	rcall	.-500    	; 0x1260 <_Z15rf12_setBitrateh>
    1454:	82 ea       	ldi	r24, 0xA2	; 162
    1456:	94 e9       	ldi	r25, 0x94	; 148
    1458:	18 de       	rcall	.-976    	; 0x108a <_ZL9rf12_xferj>
    145a:	8c ea       	ldi	r24, 0xAC	; 172
    145c:	92 ec       	ldi	r25, 0xC2	; 194
    145e:	15 de       	rcall	.-982    	; 0x108a <_ZL9rf12_xferj>
    1460:	cc 23       	and	r28, r28
    1462:	41 f0       	breq	.+16     	; 0x1474 <_Z12rf12_restorehhh+0x6a>
    1464:	83 e8       	ldi	r24, 0x83	; 131
    1466:	9a ec       	ldi	r25, 0xCA	; 202
    1468:	10 de       	rcall	.-992    	; 0x108a <_ZL9rf12_xferj>
    146a:	8c 2f       	mov	r24, r28
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9e 6c       	ori	r25, 0xCE	; 206
    1470:	0c de       	rcall	.-1000   	; 0x108a <_ZL9rf12_xferj>
    1472:	06 c0       	rjmp	.+12     	; 0x1480 <_Z12rf12_restorehhh+0x76>
    1474:	8b e8       	ldi	r24, 0x8B	; 139
    1476:	9a ec       	ldi	r25, 0xCA	; 202
    1478:	08 de       	rcall	.-1008   	; 0x108a <_ZL9rf12_xferj>
    147a:	8d e2       	ldi	r24, 0x2D	; 45
    147c:	9e ec       	ldi	r25, 0xCE	; 206
    147e:	05 de       	rcall	.-1014   	; 0x108a <_ZL9rf12_xferj>
    1480:	83 e8       	ldi	r24, 0x83	; 131
    1482:	94 ec       	ldi	r25, 0xC4	; 196
    1484:	02 de       	rcall	.-1020   	; 0x108a <_ZL9rf12_xferj>
    1486:	80 e5       	ldi	r24, 0x50	; 80
    1488:	98 e9       	ldi	r25, 0x98	; 152
    148a:	ff dd       	rcall	.-1026   	; 0x108a <_ZL9rf12_xferj>
    148c:	87 e7       	ldi	r24, 0x77	; 119
    148e:	9c ec       	ldi	r25, 0xCC	; 204
    1490:	fc dd       	rcall	.-1032   	; 0x108a <_ZL9rf12_xferj>
    1492:	80 e0       	ldi	r24, 0x00	; 0
    1494:	90 ee       	ldi	r25, 0xE0	; 224
    1496:	f9 dd       	rcall	.-1038   	; 0x108a <_ZL9rf12_xferj>
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	98 ec       	ldi	r25, 0xC8	; 200
    149c:	f6 dd       	rcall	.-1044   	; 0x108a <_ZL9rf12_xferj>
    149e:	89 e4       	ldi	r24, 0x49	; 73
    14a0:	90 ec       	ldi	r25, 0xC0	; 192
    14a2:	f3 dd       	rcall	.-1050   	; 0x108a <_ZL9rf12_xferj>
    14a4:	84 e0       	ldi	r24, 0x04	; 4
    14a6:	80 93 8b 01 	sts	0x018B, r24
    14aa:	e7 dd       	rcall	.-1074   	; 0x107a <_ZL15allowInterruptsv>
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	08 95       	ret

000014b2 <_Z15rf12_initializehhh>:
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	c8 2f       	mov	r28, r24
    14ba:	d6 2f       	mov	r29, r22
    14bc:	14 2f       	mov	r17, r20
    14be:	80 93 8f 01 	sts	0x018F, r24
    14c2:	40 93 8d 01 	sts	0x018D, r20
    14c6:	60 93 90 01 	sts	0x0190, r22
    14ca:	0d de       	rcall	.-998    	; 0x10e6 <_Z12rf12_spiInitv>
    14cc:	9c df       	rcall	.-200    	; 0x1406 <_Z21rf12_interruptcontrolv>
    14ce:	82 e8       	ldi	r24, 0x82	; 130
    14d0:	9a ec       	ldi	r25, 0xCA	; 202
    14d2:	db dd       	rcall	.-1098   	; 0x108a <_ZL9rf12_xferj>
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	9e ef       	ldi	r25, 0xFE	; 254
    14d8:	d8 dd       	rcall	.-1104   	; 0x108a <_ZL9rf12_xferj>
    14da:	85 e0       	ldi	r24, 0x05	; 5
    14dc:	80 93 8b 01 	sts	0x018B, r24
    14e0:	83 b7       	in	r24, 0x33	; 51
    14e2:	81 7f       	andi	r24, 0xF1	; 241
    14e4:	83 bf       	out	0x33, r24	; 51
    14e6:	80 91 8b 01 	lds	r24, 0x018B
    14ea:	85 30       	cpi	r24, 0x05	; 5
    14ec:	59 f4       	brne	.+22     	; 0x1504 <_Z15rf12_initializehhh+0x52>
    14ee:	93 b7       	in	r25, 0x33	; 51
    14f0:	91 60       	ori	r25, 0x01	; 1
    14f2:	93 bf       	out	0x33, r25	; 51
    14f4:	88 95       	sleep
    14f6:	93 b7       	in	r25, 0x33	; 51
    14f8:	9e 7f       	andi	r25, 0xFE	; 254
    14fa:	93 bf       	out	0x33, r25	; 51
    14fc:	90 91 8b 01 	lds	r25, 0x018B
    1500:	95 30       	cpi	r25, 0x05	; 5
    1502:	a9 f3       	breq	.-22     	; 0x14ee <_Z15rf12_initializehhh+0x3c>
    1504:	41 2f       	mov	r20, r17
    1506:	6d 2f       	mov	r22, r29
    1508:	8c 2f       	mov	r24, r28
    150a:	7f df       	rcall	.-258    	; 0x140a <_Z12rf12_restorehhh>
    150c:	80 91 8f 01 	lds	r24, 0x018F
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	08 95       	ret

00001518 <_Z16rf12_setWatchdogm>:
/// interrupt in the RFM12 module. Use rf12_wakeup() to check if the wakeup-interrupt
/// fired. This allows very deep sleep states (timer off) while still being able to wakeup
/// because of the external interrupt. The RFM12b wakeup-timer only needs about 1.5µA.
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
    1518:	cf 92       	push	r12
    151a:	df 92       	push	r13
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	cf 93       	push	r28
    1522:	6b 01       	movw	r12, r22
    1524:	7c 01       	movw	r14, r24
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    1526:	8f ef       	ldi	r24, 0xFF	; 255
    1528:	c8 16       	cp	r12, r24
    152a:	d1 04       	cpc	r13, r1
    152c:	e1 04       	cpc	r14, r1
    152e:	f1 04       	cpc	r15, r1
    1530:	79 f0       	breq	.+30     	; 0x1550 <_Z16rf12_setWatchdogm+0x38>
    1532:	70 f0       	brcs	.+28     	; 0x1550 <_Z16rf12_setWatchdogm+0x38>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    1534:	c0 e0       	ldi	r28, 0x00	; 0
	while (m > 255) {
		r  += 1;
    1536:	cf 5f       	subi	r28, 0xFF	; 255
		m >>= 1;
    1538:	f6 94       	lsr	r15
    153a:	e7 94       	ror	r14
    153c:	d7 94       	ror	r13
    153e:	c7 94       	ror	r12
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    1540:	8f ef       	ldi	r24, 0xFF	; 255
    1542:	c8 16       	cp	r12, r24
    1544:	d1 04       	cpc	r13, r1
    1546:	e1 04       	cpc	r14, r1
    1548:	f1 04       	cpc	r15, r1
    154a:	09 f0       	breq	.+2      	; 0x154e <_Z16rf12_setWatchdogm+0x36>
    154c:	a0 f7       	brcc	.-24     	; 0x1536 <_Z16rf12_setWatchdogm+0x1e>
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <_Z16rf12_setWatchdogm+0x3a>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    1550:	c0 e0       	ldi	r28, 0x00	; 0
		m >>= 1;
	}
	
	// Disable old wakeup-timer if enabled
//	if (bitRead(rfmstate,1)) {
	if ((rfmstate>>1)&0x01){
    1552:	80 91 89 01 	lds	r24, 0x0189
    1556:	90 91 8a 01 	lds	r25, 0x018A
    155a:	81 ff       	sbrs	r24, 1
    155c:	0e c0       	rjmp	.+28     	; 0x157a <_Z16rf12_setWatchdogm+0x62>
		//bitClear(rfmstate,1);
		rfmstate &= ~(1 << 1);
    155e:	80 91 89 01 	lds	r24, 0x0189
    1562:	90 91 8a 01 	lds	r25, 0x018A
    1566:	8d 7f       	andi	r24, 0xFD	; 253
    1568:	90 93 8a 01 	sts	0x018A, r25
    156c:	80 93 89 01 	sts	0x0189, r24
		rf12_xfer(rfmstate);
    1570:	80 91 89 01 	lds	r24, 0x0189
    1574:	90 91 8a 01 	lds	r25, 0x018A
    1578:	88 dd       	rcall	.-1264   	; 0x108a <_ZL9rf12_xferj>
	}
	
	// enable wakeup call if we have to
	if (m>0) {
    157a:	c1 14       	cp	r12, r1
    157c:	d1 04       	cpc	r13, r1
    157e:	e1 04       	cpc	r14, r1
    1580:	f1 04       	cpc	r15, r1
    1582:	b1 f0       	breq	.+44     	; 0x15b0 <_Z16rf12_setWatchdogm+0x98>
		// write time to wakeup-register
		rf12_xfer(RF_WAKEUP_TIMER | (r<<8) | m);
    1584:	3c 2f       	mov	r19, r28
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	d7 01       	movw	r26, r14
    158a:	c6 01       	movw	r24, r12
    158c:	90 6e       	ori	r25, 0xE0	; 224
    158e:	82 2b       	or	r24, r18
    1590:	93 2b       	or	r25, r19
    1592:	7b dd       	rcall	.-1290   	; 0x108a <_ZL9rf12_xferj>
		// enable wakeup
		//bitSet(rfmstate,1);
		rfmstate |= (1 << 1);
    1594:	80 91 89 01 	lds	r24, 0x0189
    1598:	90 91 8a 01 	lds	r25, 0x018A
    159c:	82 60       	ori	r24, 0x02	; 2
    159e:	90 93 8a 01 	sts	0x018A, r25
    15a2:	80 93 89 01 	sts	0x0189, r24
		rf12_xfer(rfmstate);
    15a6:	80 91 89 01 	lds	r24, 0x0189
    15aa:	90 91 8a 01 	lds	r25, 0x018A
    15ae:	6d dd       	rcall	.-1318   	; 0x108a <_ZL9rf12_xferj>
	}
}
    15b0:	cf 91       	pop	r28
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	df 90       	pop	r13
    15b8:	cf 90       	pop	r12
    15ba:	08 95       	ret

000015bc <__vector_1>:
	}

}


ISR(INT0_vect) {
    15bc:	1f 92       	push	r1
    15be:	0f 92       	push	r0
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	0f 92       	push	r0
    15c4:	11 24       	eor	r1, r1
    15c6:	1f 93       	push	r17
    15c8:	2f 93       	push	r18
    15ca:	3f 93       	push	r19
    15cc:	4f 93       	push	r20
    15ce:	5f 93       	push	r21
    15d0:	6f 93       	push	r22
    15d2:	7f 93       	push	r23
    15d4:	8f 93       	push	r24
    15d6:	9f 93       	push	r25
    15d8:	af 93       	push	r26
    15da:	bf 93       	push	r27
    15dc:	cf 93       	push	r28
    15de:	df 93       	push	r29
    15e0:	ef 93       	push	r30
    15e2:	ff 93       	push	r31
/// Requests RFM12 state from RF module and reads back a waiting data byte if there is
/// any.
/// One of two commands accessing SPI, so interrupts disabled in here
/// @param *data Pointer to  byte where to write the received data to (if any)
static uint16_t rf12_xferState (uint8_t *data) {
	blockInterrupts();
    15e4:	48 dd       	rcall	.-1392   	; 0x1076 <_ZL15blockInterruptsv>

	// writing can take place at full speed, even 8 MHz works
	//bitClear(SS_PORT, cs_pin);
	PORT_RFM_CS &= ~(1<<BIT_RFM_CS); //clear CS
    15e6:	2a 98       	cbi	0x05, 2	; 5
	uint16_t res = rf12_byte(0x00) << 8;
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	49 dd       	rcall	.-1390   	; 0x107e <_ZL9rf12_byteh>
    15ec:	d8 2f       	mov	r29, r24
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	c8 2f       	mov	r28, r24
	res |= rf12_byte(0x00);
    15f2:	45 dd       	rcall	.-1398   	; 0x107e <_ZL9rf12_byteh>
    15f4:	c8 2b       	or	r28, r24
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
    15f6:	dd 23       	and	r29, r29
    15f8:	2c f4       	brge	.+10     	; 0x1604 <__vector_1+0x48>
    15fa:	80 91 8b 01 	lds	r24, 0x018B
    15fe:	87 30       	cpi	r24, 0x07	; 7
    1600:	09 f4       	brne	.+2      	; 0x1604 <__vector_1+0x48>
    1602:	11 c1       	rjmp	.+546    	; 0x1826 <__vector_1+0x26a>
		#if F_CPU > 10000000
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
		#endif
	}
	
	PORT_RFM_CS |= (1 << BIT_RFM_CS); //  bitSet(SS_PORT, cs_pin);
    1604:	2a 9a       	sbi	0x05, 2	; 5

	allowInterrupts();
    1606:	39 dd       	rcall	.-1422   	; 0x107a <_ZL15allowInterruptsv>
/// @details
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uint8_t in;
	state = rf12_xferState(&in);
    1608:	d0 93 88 01 	sts	0x0188, r29
    160c:	c0 93 87 01 	sts	0x0187, r28

	// data received or byte needed for sending
	if (state & RF_FIFO_BIT) {
    1610:	20 91 87 01 	lds	r18, 0x0187
    1614:	30 91 88 01 	lds	r19, 0x0188
    1618:	33 23       	and	r19, r19
    161a:	0c f0       	brlt	.+2      	; 0x161e <__vector_1+0x62>
    161c:	e3 c0       	rjmp	.+454    	; 0x17e4 <__vector_1+0x228>
		
		// RECEIVING - RECEIVING - RECEIVING!
		if (rxstate == TXRECV) {  // we are receiving
    161e:	80 91 8b 01 	lds	r24, 0x018B
    1622:	87 30       	cpi	r24, 0x07	; 7
    1624:	09 f0       	breq	.+2      	; 0x1628 <__vector_1+0x6c>
    1626:	7a c0       	rjmp	.+244    	; 0x171c <__vector_1+0x160>

			if (rxfill == 0 && group != 0)
    1628:	80 91 8c 01 	lds	r24, 0x018C
    162c:	81 11       	cpse	r24, r1
    162e:	04 c0       	rjmp	.+8      	; 0x1638 <__vector_1+0x7c>
    1630:	80 91 8d 01 	lds	r24, 0x018D
    1634:	81 11       	cpse	r24, r1
    1636:	01 c1       	rjmp	.+514    	; 0x183a <__vector_1+0x27e>
			rf12_buf[rxfill++] = group;

			rf12_buf[rxfill++] = in;
    1638:	80 91 8c 01 	lds	r24, 0x018C
    163c:	e8 2f       	mov	r30, r24
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	e5 5c       	subi	r30, 0xC5	; 197
    1642:	fe 4f       	sbci	r31, 0xFE	; 254
    1644:	10 83       	st	Z, r17
    1646:	8f 5f       	subi	r24, 0xFF	; 255
    1648:	80 93 8c 01 	sts	0x018C, r24
			rf12_crc = _crc16_update(rf12_crc, in);
    164c:	20 91 82 01 	lds	r18, 0x0182
    1650:	30 91 83 01 	lds	r19, 0x0183
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    1654:	21 27       	eor	r18, r17
    1656:	12 2f       	mov	r17, r18
    1658:	12 95       	swap	r17
    165a:	12 27       	eor	r17, r18
    165c:	01 2e       	mov	r0, r17
    165e:	16 95       	lsr	r17
    1660:	16 95       	lsr	r17
    1662:	10 25       	eor	r17, r0
    1664:	01 2e       	mov	r0, r17
    1666:	16 95       	lsr	r17
    1668:	10 25       	eor	r17, r0
    166a:	17 70       	andi	r17, 0x07	; 7
    166c:	02 2e       	mov	r0, r18
    166e:	23 2f       	mov	r18, r19
    1670:	16 95       	lsr	r17
    1672:	07 94       	ror	r0
    1674:	17 95       	ror	r17
    1676:	30 2d       	mov	r19, r0
    1678:	21 27       	eor	r18, r17
    167a:	06 94       	lsr	r0
    167c:	17 95       	ror	r17
    167e:	30 25       	eor	r19, r0
    1680:	21 27       	eor	r18, r17
    1682:	30 93 83 01 	sts	0x0183, r19
    1686:	20 93 82 01 	sts	0x0182, r18

		

		
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
    168a:	e0 91 85 01 	lds	r30, 0x0185
    168e:	e3 30       	cpi	r30, 0x03	; 3
    1690:	18 f5       	brcc	.+70     	; 0x16d8 <__vector_1+0x11c>
    1692:	80 91 8c 01 	lds	r24, 0x018C
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 97       	sbiw	r24, 0x02	; 2
    169a:	60 91 84 01 	lds	r22, 0x0184
    169e:	70 e0       	ldi	r23, 0x00	; 0
    16a0:	cc d1       	rcall	.+920    	; 0x1a3a <__divmodhi4>
    16a2:	89 2b       	or	r24, r25
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <__vector_1+0xec>
    16a6:	d4 c0       	rjmp	.+424    	; 0x1850 <__vector_1+0x294>
    16a8:	17 c0       	rjmp	.+46     	; 0x16d8 <__vector_1+0x11c>
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
    16ac:	ea 5e       	subi	r30, 0xEA	; 234
    16ae:	fe 4f       	sbci	r31, 0xFE	; 254
				: (drssi_dec_tree[drssi] >> 4);
    16b0:	80 81       	ld	r24, Z
    16b2:	8f 70       	andi	r24, 0x0F	; 15
    16b4:	06 c0       	rjmp	.+12     	; 0x16c2 <__vector_1+0x106>
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	ea 5e       	subi	r30, 0xEA	; 234
    16ba:	fe 4f       	sbci	r31, 0xFE	; 254
    16bc:	80 81       	ld	r24, Z
    16be:	82 95       	swap	r24
    16c0:	8f 70       	andi	r24, 0x0F	; 15
    16c2:	80 93 85 01 	sts	0x0185, r24
				if ( drssi < 3 ) {     // not yet final destination, set new threshold
    16c6:	83 30       	cpi	r24, 0x03	; 3
    16c8:	38 f4       	brcc	.+14     	; 0x16d8 <__vector_1+0x11c>
					rf12_xfer(RF_RECV_CONTROL | drssi*2+1);
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	80 6a       	ori	r24, 0xA0	; 160
    16d4:	94 69       	ori	r25, 0x94	; 148
    16d6:	d9 dc       	rcall	.-1614   	; 0x108a <_ZL9rf12_xferj>
			}
//PORTB |= _BV(0); // pb0 aan

		
			// check if we got all the bytes (or maximum packet length was reached)
			if (fixedLength) {
    16d8:	80 91 8e 01 	lds	r24, 0x018E
    16dc:	88 23       	and	r24, r24
    16de:	59 f0       	breq	.+22     	; 0x16f6 <__vector_1+0x13a>
				if (rxfill >= fixedLength || rxfill >= RF_MAX) {
    16e0:	90 91 8c 01 	lds	r25, 0x018C
    16e4:	98 17       	cp	r25, r24
    16e6:	28 f4       	brcc	.+10     	; 0x16f2 <__vector_1+0x136>
    16e8:	80 91 8c 01 	lds	r24, 0x018C
    16ec:	87 34       	cpi	r24, 0x47	; 71
    16ee:	08 f4       	brcc	.+2      	; 0x16f2 <__vector_1+0x136>
    16f0:	79 c0       	rjmp	.+242    	; 0x17e4 <__vector_1+0x228>
					//PORTB |= _BV(0); // pb0 aan
					rf12_idle();
    16f2:	e2 dc       	rcall	.-1596   	; 0x10b8 <_ZL9rf12_idlev>
    16f4:	77 c0       	rjmp	.+238    	; 0x17e4 <__vector_1+0x228>
					//PORTB &= ~_BV(0); // pb0 uit
				}
			} else if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX) {
    16f6:	20 91 8c 01 	lds	r18, 0x018C
    16fa:	80 91 3d 01 	lds	r24, 0x013D
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	05 96       	adiw	r24, 0x05	; 5
    1704:	28 17       	cp	r18, r24
    1706:	39 07       	cpc	r19, r25
    1708:	2c f4       	brge	.+10     	; 0x1714 <__vector_1+0x158>
    170a:	80 91 8c 01 	lds	r24, 0x018C
    170e:	87 34       	cpi	r24, 0x47	; 71
    1710:	08 f4       	brcc	.+2      	; 0x1714 <__vector_1+0x158>
    1712:	68 c0       	rjmp	.+208    	; 0x17e4 <__vector_1+0x228>
				PORTB |= _BV(0); // pb0 aan
    1714:	28 9a       	sbi	0x05, 0	; 5
				rf12_idle();
    1716:	d0 dc       	rcall	.-1632   	; 0x10b8 <_ZL9rf12_idlev>
				PORTB &= ~_BV(0); // pb0 uit
    1718:	28 98       	cbi	0x05, 0	; 5
    171a:	64 c0       	rjmp	.+200    	; 0x17e4 <__vector_1+0x228>
					//PORTB &= ~_BV(0); // pb0 uit
			// SENDING - SENDING - SENDING!
			} else {                  // we are sending
			uint8_t out;

			if (rxstate < 0) {
    171c:	80 91 8b 01 	lds	r24, 0x018B
    1720:	88 23       	and	r24, r24
    1722:	0c f0       	brlt	.+2      	; 0x1726 <__vector_1+0x16a>
    1724:	2f c0       	rjmp	.+94     	; 0x1784 <__vector_1+0x1c8>
				uint8_t pos = 3 + rf12_len + rxstate++;
    1726:	e0 91 3d 01 	lds	r30, 0x013D
    172a:	80 91 8b 01 	lds	r24, 0x018B
    172e:	98 2f       	mov	r25, r24
    1730:	9f 5f       	subi	r25, 0xFF	; 255
    1732:	90 93 8b 01 	sts	0x018B, r25
    1736:	ed 5f       	subi	r30, 0xFD	; 253
    1738:	8e 0f       	add	r24, r30
				out = rf12_buf[pos];
    173a:	e8 2f       	mov	r30, r24
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	e5 5c       	subi	r30, 0xC5	; 197
    1740:	fe 4f       	sbci	r31, 0xFE	; 254
    1742:	80 81       	ld	r24, Z
				rf12_crc = _crc16_update(rf12_crc, out);
    1744:	20 91 82 01 	lds	r18, 0x0182
    1748:	30 91 83 01 	lds	r19, 0x0183
    174c:	28 27       	eor	r18, r24
    174e:	92 2f       	mov	r25, r18
    1750:	92 95       	swap	r25
    1752:	92 27       	eor	r25, r18
    1754:	09 2e       	mov	r0, r25
    1756:	96 95       	lsr	r25
    1758:	96 95       	lsr	r25
    175a:	90 25       	eor	r25, r0
    175c:	09 2e       	mov	r0, r25
    175e:	96 95       	lsr	r25
    1760:	90 25       	eor	r25, r0
    1762:	97 70       	andi	r25, 0x07	; 7
    1764:	02 2e       	mov	r0, r18
    1766:	23 2f       	mov	r18, r19
    1768:	96 95       	lsr	r25
    176a:	07 94       	ror	r0
    176c:	97 95       	ror	r25
    176e:	30 2d       	mov	r19, r0
    1770:	29 27       	eor	r18, r25
    1772:	06 94       	lsr	r0
    1774:	97 95       	ror	r25
    1776:	30 25       	eor	r19, r0
    1778:	29 27       	eor	r18, r25
    177a:	30 93 83 01 	sts	0x0183, r19
    177e:	20 93 82 01 	sts	0x0182, r18
    1782:	2d c0       	rjmp	.+90     	; 0x17de <__vector_1+0x222>
			} else
			switch (rxstate++) {
    1784:	80 91 8b 01 	lds	r24, 0x018B
    1788:	98 2f       	mov	r25, r24
    178a:	9f 5f       	subi	r25, 0xFF	; 255
    178c:	90 93 8b 01 	sts	0x018B, r25
    1790:	83 30       	cpi	r24, 0x03	; 3
    1792:	09 f1       	breq	.+66     	; 0x17d6 <__vector_1+0x21a>
    1794:	2c f4       	brge	.+10     	; 0x17a0 <__vector_1+0x1e4>
    1796:	88 23       	and	r24, r24
    1798:	99 f0       	breq	.+38     	; 0x17c0 <__vector_1+0x204>
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	f9 f4       	brne	.+62     	; 0x17dc <__vector_1+0x220>
    179e:	15 c0       	rjmp	.+42     	; 0x17ca <__vector_1+0x20e>
    17a0:	8b 30       	cpi	r24, 0x0B	; 11
    17a2:	19 f0       	breq	.+6      	; 0x17aa <__vector_1+0x1ee>
    17a4:	8c 30       	cpi	r24, 0x0C	; 12
    17a6:	d1 f4       	brne	.+52     	; 0x17dc <__vector_1+0x220>
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <__vector_1+0x1f2>
				case TXSYN1: out = 0x2D; break;
    17aa:	8d e2       	ldi	r24, 0x2D	; 45
    17ac:	18 c0       	rjmp	.+48     	; 0x17de <__vector_1+0x222>
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
    17ae:	80 91 8d 01 	lds	r24, 0x018D
    17b2:	20 91 3d 01 	lds	r18, 0x013D
    17b6:	9e ef       	ldi	r25, 0xFE	; 254
    17b8:	92 1b       	sub	r25, r18
    17ba:	90 93 8b 01 	sts	0x018B, r25
    17be:	0f c0       	rjmp	.+30     	; 0x17de <__vector_1+0x222>
				case TXCRC1: out = rf12_crc; break;
    17c0:	80 91 82 01 	lds	r24, 0x0182
    17c4:	90 91 83 01 	lds	r25, 0x0183
    17c8:	0a c0       	rjmp	.+20     	; 0x17de <__vector_1+0x222>
				case TXCRC2: out = rf12_crc >> 8; break;
    17ca:	80 91 82 01 	lds	r24, 0x0182
    17ce:	90 91 83 01 	lds	r25, 0x0183
    17d2:	89 2f       	mov	r24, r25
    17d4:	04 c0       	rjmp	.+8      	; 0x17de <__vector_1+0x222>
				case TXDONE: rf12_idle(); // fall through
    17d6:	70 dc       	rcall	.-1824   	; 0x10b8 <_ZL9rf12_idlev>
				default:     out = 0xAA;
    17d8:	8a ea       	ldi	r24, 0xAA	; 170
    17da:	01 c0       	rjmp	.+2      	; 0x17de <__vector_1+0x222>
    17dc:	8a ea       	ldi	r24, 0xAA	; 170
			}

			rf12_xfer(RF_TXREG_WRITE | out);
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	98 6b       	ori	r25, 0xB8	; 184
    17e2:	53 dc       	rcall	.-1882   	; 0x108a <_ZL9rf12_xferj>
	}
	

	
	// power-on reset
	if (state & RF_POR_BIT) {
    17e4:	80 91 87 01 	lds	r24, 0x0187
    17e8:	90 91 88 01 	lds	r25, 0x0188
    17ec:	96 ff       	sbrs	r25, 6
    17ee:	03 c0       	rjmp	.+6      	; 0x17f6 <__vector_1+0x23a>
		rxstate = POR_RECEIVED;
    17f0:	86 e0       	ldi	r24, 0x06	; 6
    17f2:	80 93 8b 01 	sts	0x018B, r24
	}

	// got wakeup call
	if (state & RF_WDG_BIT) {
    17f6:	80 91 87 01 	lds	r24, 0x0187
    17fa:	90 91 88 01 	lds	r25, 0x0188
    17fe:	94 ff       	sbrs	r25, 4
    1800:	07 c0       	rjmp	.+14     	; 0x1810 <__vector_1+0x254>
		rf12_setWatchdog(0);
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	70 e0       	ldi	r23, 0x00	; 0
    1806:	cb 01       	movw	r24, r22
    1808:	87 de       	rcall	.-754    	; 0x1518 <_Z16rf12_setWatchdogm>
		rf12_gotwakeup = 1;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	80 93 86 01 	sts	0x0186, r24
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
    1810:	80 91 87 01 	lds	r24, 0x0187
    1814:	90 91 88 01 	lds	r25, 0x0188
    1818:	95 ff       	sbrs	r25, 5
    181a:	21 c0       	rjmp	.+66     	; 0x185e <__vector_1+0x2a2>
		//PORTB |= _BV(0); // pb0 aan
		rf12_idle();
    181c:	4d dc       	rcall	.-1894   	; 0x10b8 <_ZL9rf12_idlev>
		//PORTB &= ~_BV(0); // pb0 uit
		rxstate = TXIDLE;
    181e:	84 e0       	ldi	r24, 0x04	; 4
    1820:	80 93 8b 01 	sts	0x018B, r24
    1824:	1c c0       	rjmp	.+56     	; 0x185e <__vector_1+0x2a2>
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
		// slow down to under 2.5 MHz
		#if F_CPU > 10000000

		SPCR |= (1 << SPR0); //  bitSet(SPCR, SPR0);
    1826:	8c b5       	in	r24, 0x2c	; 44
    1828:	81 60       	ori	r24, 0x01	; 1
    182a:	8c bd       	out	0x2c, r24	; 44
		#endif
		
		*data = rf12_byte(0x00);
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	27 dc       	rcall	.-1970   	; 0x107e <_ZL9rf12_byteh>
    1830:	18 2f       	mov	r17, r24
		
		#if F_CPU > 10000000
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
    1832:	8c b5       	in	r24, 0x2c	; 44
    1834:	8e 7f       	andi	r24, 0xFE	; 254
    1836:	8c bd       	out	0x2c, r24	; 44
    1838:	e5 ce       	rjmp	.-566    	; 0x1604 <__vector_1+0x48>
		
		// RECEIVING - RECEIVING - RECEIVING!
		if (rxstate == TXRECV) {  // we are receiving

			if (rxfill == 0 && group != 0)
			rf12_buf[rxfill++] = group;
    183a:	90 91 8c 01 	lds	r25, 0x018C
    183e:	e9 2f       	mov	r30, r25
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	e5 5c       	subi	r30, 0xC5	; 197
    1844:	fe 4f       	sbci	r31, 0xFE	; 254
    1846:	80 83       	st	Z, r24
    1848:	9f 5f       	subi	r25, 0xFF	; 255
    184a:	90 93 8c 01 	sts	0x018C, r25
    184e:	f4 ce       	rjmp	.-536    	; 0x1638 <__vector_1+0x7c>
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    1850:	80 91 87 01 	lds	r24, 0x0187
    1854:	90 91 88 01 	lds	r25, 0x0188
    1858:	90 fd       	sbrc	r25, 0
    185a:	27 cf       	rjmp	.-434    	; 0x16aa <__vector_1+0xee>
    185c:	2c cf       	rjmp	.-424    	; 0x16b6 <__vector_1+0xfa>
ISR(INT0_vect) {
//PORTB |= _BV(0); // pb0 aan

		rf12_interrupt();
	//PORTB &= ~_BV(0); // pb0 uit
}
    185e:	ff 91       	pop	r31
    1860:	ef 91       	pop	r30
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	bf 91       	pop	r27
    1868:	af 91       	pop	r26
    186a:	9f 91       	pop	r25
    186c:	8f 91       	pop	r24
    186e:	7f 91       	pop	r23
    1870:	6f 91       	pop	r22
    1872:	5f 91       	pop	r21
    1874:	4f 91       	pop	r20
    1876:	3f 91       	pop	r19
    1878:	2f 91       	pop	r18
    187a:	1f 91       	pop	r17
    187c:	0f 90       	pop	r0
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	0f 90       	pop	r0
    1882:	1f 90       	pop	r1
    1884:	18 95       	reti

00001886 <tone_init>:
#include <avr/power.h>

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume counsigned long _tAC_time;ntrol.

void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
    1886:	21 9a       	sbi	0x04, 1	; 4
    1888:	08 95       	ret

0000188a <noTone>:


	void noTone() {
	//	uart0_puts("STOP");
	//	TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
		 TCCR1B  &= ~(1<<0) | ~(1<<1) | ~(1<<2) ;        // No clock source (Timer/Counter stopped).
    188a:	e1 e8       	ldi	r30, 0x81	; 129
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	80 83       	st	Z, r24
		 TCCR1A  = 0x00;       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
    1892:	10 92 80 00 	sts	0x0080, r1
		 power_timer1_disable();
    1896:	e4 e6       	ldi	r30, 0x64	; 100
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	88 60       	ori	r24, 0x08	; 8
    189e:	80 83       	st	Z, r24
		PORTB &= ~(1 << 1); // Set pin PB1 to LOW.
    18a0:	29 98       	cbi	0x05, 1	; 5
    18a2:	08 95       	ret

000018a4 <tone>:
void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
	
}

void tone(unsigned long frequency, uint8_t volume) {
    18a4:	cf 92       	push	r12
    18a6:	df 92       	push	r13
    18a8:	ef 92       	push	r14
    18aa:	ff 92       	push	r15
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
    18b0:	6b 01       	movw	r12, r22
    18b2:	7c 01       	movw	r14, r24
	 power_timer1_enable();
    18b4:	e4 e6       	ldi	r30, 0x64	; 100
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	87 7f       	andi	r24, 0xF7	; 247
    18bc:	80 83       	st	Z, r24
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
    18be:	c1 14       	cp	r12, r1
    18c0:	d1 04       	cpc	r13, r1
    18c2:	e1 04       	cpc	r14, r1
    18c4:	f1 04       	cpc	r15, r1
    18c6:	11 f0       	breq	.+4      	; 0x18cc <tone+0x28>
    18c8:	41 11       	cpse	r20, r1
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <tone+0x2c>
    18cc:	de df       	rcall	.-68     	; 0x188a <noTone>
    18ce:	4d c0       	rjmp	.+154    	; 0x196a <tone+0xc6>
    18d0:	d4 2f       	mov	r29, r20
    18d2:	4b 30       	cpi	r20, 0x0B	; 11
    18d4:	08 f0       	brcs	.+2      	; 0x18d8 <tone+0x34>
    18d6:	da e0       	ldi	r29, 0x0A	; 10
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
    18d8:	60 e0       	ldi	r22, 0x00	; 0
    18da:	72 e1       	ldi	r23, 0x12	; 18
    18dc:	8a e7       	ldi	r24, 0x7A	; 122
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a7 01       	movw	r20, r14
    18e2:	96 01       	movw	r18, r12
    18e4:	bd d0       	rcall	.+378    	; 0x1a60 <__udivmodsi4>
    18e6:	cc 24       	eor	r12, r12
    18e8:	ca 94       	dec	r12
    18ea:	dc 2c       	mov	r13, r12
    18ec:	76 01       	movw	r14, r12
    18ee:	c2 0e       	add	r12, r18
    18f0:	d3 1e       	adc	r13, r19
    18f2:	e4 1e       	adc	r14, r20
    18f4:	f5 1e       	adc	r15, r21
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    18f6:	c1 14       	cp	r12, r1
    18f8:	d1 04       	cpc	r13, r1
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	e8 06       	cpc	r14, r24
    18fe:	f1 04       	cpc	r15, r1
    1900:	58 f0       	brcs	.+22     	; 0x1918 <tone+0x74>
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
    1902:	cd 2c       	mov	r12, r13
    1904:	de 2c       	mov	r13, r14
    1906:	ef 2c       	mov	r14, r15
    1908:	ff 24       	eor	r15, r15
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	c8 1a       	sub	r12, r24
    190e:	d1 08       	sbc	r13, r1
    1910:	e1 08       	sbc	r14, r1
    1912:	f1 08       	sbc	r15, r1
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    1914:	c4 e0       	ldi	r28, 0x04	; 4
    1916:	01 c0       	rjmp	.+2      	; 0x191a <tone+0x76>
	 power_timer1_enable();
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
    1918:	c1 e0       	ldi	r28, 0x01	; 1
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
		}
	
		unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
    191a:	ed 2f       	mov	r30, r29
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	ed 5f       	subi	r30, 0xFD	; 253
    1920:	fe 4f       	sbci	r31, 0xFE	; 254
    1922:	20 81       	ld	r18, Z
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	c7 01       	movw	r24, r14
    192c:	b6 01       	movw	r22, r12
    192e:	98 d0       	rcall	.+304    	; 0x1a60 <__udivmodsi4>
		
		ICR1   = top;							// Set the top.
    1930:	d0 92 87 00 	sts	0x0087, r13
    1934:	c0 92 86 00 	sts	0x0086, r12
		if (TCNT1 > top) TCNT1 = top;			// Counter over the top, put within range.
    1938:	80 91 84 00 	lds	r24, 0x0084
    193c:	90 91 85 00 	lds	r25, 0x0085
    1940:	a0 e0       	ldi	r26, 0x00	; 0
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	c8 16       	cp	r12, r24
    1946:	d9 06       	cpc	r13, r25
    1948:	ea 06       	cpc	r14, r26
    194a:	fb 06       	cpc	r15, r27
    194c:	20 f4       	brcc	.+8      	; 0x1956 <tone+0xb2>
    194e:	d0 92 85 00 	sts	0x0085, r13
    1952:	c0 92 84 00 	sts	0x0084, r12
			TCCR1B = _BV(WGM13)  | prescaler;   // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
    1956:	c0 61       	ori	r28, 0x10	; 16
    1958:	c0 93 81 00 	sts	0x0081, r28
			OCR1A  = duty;						// Set the duty cycle (volume).
    195c:	30 93 89 00 	sts	0x0089, r19
    1960:	20 93 88 00 	sts	0x0088, r18
			TCCR1A = _BV(COM1A1);				// Clear OC1A/OC1B on Compare Match (Set output to low level).
    1964:	80 e8       	ldi	r24, 0x80	; 128
    1966:	80 93 80 00 	sts	0x0080, r24
			

}
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	08 95       	ret

00001978 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	0f 92       	push	r0
    1980:	11 24       	eor	r1, r1
    1982:	2f 93       	push	r18
    1984:	3f 93       	push	r19
    1986:	4f 93       	push	r20
    1988:	5f 93       	push	r21
    198a:	8f 93       	push	r24
    198c:	9f 93       	push	r25
    198e:	ef 93       	push	r30
    1990:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    1992:	40 91 c0 00 	lds	r20, 0x00C0
    data = UART0_DATA;
    1996:	50 91 c6 00 	lds	r21, 0x00C6
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    199a:	48 71       	andi	r20, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    199c:	80 91 93 01 	lds	r24, 0x0193
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	01 96       	adiw	r24, 0x01	; 1
    19a4:	8f 77       	andi	r24, 0x7F	; 127
    19a6:	99 27       	eor	r25, r25
    
    if ( tmphead == UART_RxTail ) {
    19a8:	20 91 92 01 	lds	r18, 0x0192
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	28 17       	cp	r18, r24
    19b0:	39 07       	cpc	r19, r25
    19b2:	39 f0       	breq	.+14     	; 0x19c2 <__vector_18+0x4a>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
    19b4:	80 93 93 01 	sts	0x0193, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    19b8:	fc 01       	movw	r30, r24
    19ba:	ea 56       	subi	r30, 0x6A	; 106
    19bc:	fe 4f       	sbci	r31, 0xFE	; 254
    19be:	50 83       	st	Z, r21
    19c0:	01 c0       	rjmp	.+2      	; 0x19c4 <__vector_18+0x4c>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    19c2:	42 e0       	ldi	r20, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    19c4:	40 93 91 01 	sts	0x0191, r20
}
    19c8:	ff 91       	pop	r31
    19ca:	ef 91       	pop	r30
    19cc:	9f 91       	pop	r25
    19ce:	8f 91       	pop	r24
    19d0:	5f 91       	pop	r21
    19d2:	4f 91       	pop	r20
    19d4:	3f 91       	pop	r19
    19d6:	2f 91       	pop	r18
    19d8:	0f 90       	pop	r0
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	0f 90       	pop	r0
    19de:	1f 90       	pop	r1
    19e0:	18 95       	reti

000019e2 <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    19e2:	1f 92       	push	r1
    19e4:	0f 92       	push	r0
    19e6:	0f b6       	in	r0, 0x3f	; 63
    19e8:	0f 92       	push	r0
    19ea:	11 24       	eor	r1, r1
    19ec:	8f 93       	push	r24
    19ee:	9f 93       	push	r25
    19f0:	ef 93       	push	r30
    19f2:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART_TxHead != UART_TxTail) {
    19f4:	90 91 95 01 	lds	r25, 0x0195
    19f8:	80 91 94 01 	lds	r24, 0x0194
    19fc:	98 17       	cp	r25, r24
    19fe:	79 f0       	breq	.+30     	; 0x1a1e <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
    1a00:	80 91 94 01 	lds	r24, 0x0194
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	8f 77       	andi	r24, 0x7F	; 127
    1a0a:	99 27       	eor	r25, r25
        UART_TxTail = tmptail;
    1a0c:	80 93 94 01 	sts	0x0194, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1a10:	fc 01       	movw	r30, r24
    1a12:	ea 5e       	subi	r30, 0xEA	; 234
    1a14:	fd 4f       	sbci	r31, 0xFD	; 253
    1a16:	80 81       	ld	r24, Z
    1a18:	80 93 c6 00 	sts	0x00C6, r24
    1a1c:	05 c0       	rjmp	.+10     	; 0x1a28 <__vector_19+0x46>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1a1e:	e1 ec       	ldi	r30, 0xC1	; 193
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	8f 7d       	andi	r24, 0xDF	; 223
    1a26:	80 83       	st	Z, r24
    }
}
    1a28:	ff 91       	pop	r31
    1a2a:	ef 91       	pop	r30
    1a2c:	9f 91       	pop	r25
    1a2e:	8f 91       	pop	r24
    1a30:	0f 90       	pop	r0
    1a32:	0f be       	out	0x3f, r0	; 63
    1a34:	0f 90       	pop	r0
    1a36:	1f 90       	pop	r1
    1a38:	18 95       	reti

00001a3a <__divmodhi4>:
    1a3a:	97 fb       	bst	r25, 7
    1a3c:	07 2e       	mov	r0, r23
    1a3e:	16 f4       	brtc	.+4      	; 0x1a44 <__divmodhi4+0xa>
    1a40:	00 94       	com	r0
    1a42:	06 d0       	rcall	.+12     	; 0x1a50 <__divmodhi4_neg1>
    1a44:	77 fd       	sbrc	r23, 7
    1a46:	08 d0       	rcall	.+16     	; 0x1a58 <__divmodhi4_neg2>
    1a48:	2d d0       	rcall	.+90     	; 0x1aa4 <__udivmodhi4>
    1a4a:	07 fc       	sbrc	r0, 7
    1a4c:	05 d0       	rcall	.+10     	; 0x1a58 <__divmodhi4_neg2>
    1a4e:	3e f4       	brtc	.+14     	; 0x1a5e <__divmodhi4_exit>

00001a50 <__divmodhi4_neg1>:
    1a50:	90 95       	com	r25
    1a52:	81 95       	neg	r24
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	08 95       	ret

00001a58 <__divmodhi4_neg2>:
    1a58:	70 95       	com	r23
    1a5a:	61 95       	neg	r22
    1a5c:	7f 4f       	sbci	r23, 0xFF	; 255

00001a5e <__divmodhi4_exit>:
    1a5e:	08 95       	ret

00001a60 <__udivmodsi4>:
    1a60:	a1 e2       	ldi	r26, 0x21	; 33
    1a62:	1a 2e       	mov	r1, r26
    1a64:	aa 1b       	sub	r26, r26
    1a66:	bb 1b       	sub	r27, r27
    1a68:	fd 01       	movw	r30, r26
    1a6a:	0d c0       	rjmp	.+26     	; 0x1a86 <__udivmodsi4_ep>

00001a6c <__udivmodsi4_loop>:
    1a6c:	aa 1f       	adc	r26, r26
    1a6e:	bb 1f       	adc	r27, r27
    1a70:	ee 1f       	adc	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	a2 17       	cp	r26, r18
    1a76:	b3 07       	cpc	r27, r19
    1a78:	e4 07       	cpc	r30, r20
    1a7a:	f5 07       	cpc	r31, r21
    1a7c:	20 f0       	brcs	.+8      	; 0x1a86 <__udivmodsi4_ep>
    1a7e:	a2 1b       	sub	r26, r18
    1a80:	b3 0b       	sbc	r27, r19
    1a82:	e4 0b       	sbc	r30, r20
    1a84:	f5 0b       	sbc	r31, r21

00001a86 <__udivmodsi4_ep>:
    1a86:	66 1f       	adc	r22, r22
    1a88:	77 1f       	adc	r23, r23
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	1a 94       	dec	r1
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <__udivmodsi4_loop>
    1a92:	60 95       	com	r22
    1a94:	70 95       	com	r23
    1a96:	80 95       	com	r24
    1a98:	90 95       	com	r25
    1a9a:	9b 01       	movw	r18, r22
    1a9c:	ac 01       	movw	r20, r24
    1a9e:	bd 01       	movw	r22, r26
    1aa0:	cf 01       	movw	r24, r30
    1aa2:	08 95       	ret

00001aa4 <__udivmodhi4>:
    1aa4:	aa 1b       	sub	r26, r26
    1aa6:	bb 1b       	sub	r27, r27
    1aa8:	51 e1       	ldi	r21, 0x11	; 17
    1aaa:	07 c0       	rjmp	.+14     	; 0x1aba <__udivmodhi4_ep>

00001aac <__udivmodhi4_loop>:
    1aac:	aa 1f       	adc	r26, r26
    1aae:	bb 1f       	adc	r27, r27
    1ab0:	a6 17       	cp	r26, r22
    1ab2:	b7 07       	cpc	r27, r23
    1ab4:	10 f0       	brcs	.+4      	; 0x1aba <__udivmodhi4_ep>
    1ab6:	a6 1b       	sub	r26, r22
    1ab8:	b7 0b       	sbc	r27, r23

00001aba <__udivmodhi4_ep>:
    1aba:	88 1f       	adc	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	5a 95       	dec	r21
    1ac0:	a9 f7       	brne	.-22     	; 0x1aac <__udivmodhi4_loop>
    1ac2:	80 95       	com	r24
    1ac4:	90 95       	com	r25
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	cd 01       	movw	r24, r26
    1aca:	08 95       	ret

00001acc <memcpy>:
    1acc:	fb 01       	movw	r30, r22
    1ace:	dc 01       	movw	r26, r24
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <memcpy+0xa>
    1ad2:	01 90       	ld	r0, Z+
    1ad4:	0d 92       	st	X+, r0
    1ad6:	41 50       	subi	r20, 0x01	; 1
    1ad8:	50 40       	sbci	r21, 0x00	; 0
    1ada:	d8 f7       	brcc	.-10     	; 0x1ad2 <memcpy+0x6>
    1adc:	08 95       	ret

00001ade <_exit>:
    1ade:	f8 94       	cli

00001ae0 <__stop_program>:
    1ae0:	ff cf       	rjmp	.-2      	; 0x1ae0 <__stop_program>
