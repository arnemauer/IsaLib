
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00001ac4  00001b58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ac4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017c  0080012c  0080012c  00001b84  2**0
                  ALLOC
  3 .stab         00000e4c  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002d2b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003a0  00000000  00000000  00002d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003d70  00000000  00000000  000030fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b3  00000000  00000000  00006e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002878  00000000  00000000  0000811d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009bc  00000000  00000000  0000a998  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000eaf  00000000  00000000  0000b354  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a38  00000000  00000000  0000c203  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003c8  00000000  00000000  0000ec3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c3 c2       	rjmp	.+1414   	; 0x588 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__vector_1>
       8:	db c2       	rjmp	.+1462   	; 0x5c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d9 c2       	rjmp	.+1458   	; 0x5c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	d7 c2       	rjmp	.+1454   	; 0x5c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	d5 c2       	rjmp	.+1450   	; 0x5c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	d3 c2       	rjmp	.+1446   	; 0x5c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	08 c7       	rjmp	.+3600   	; 0xe2e <__vector_7>
      1e:	00 00       	nop
      20:	cf c2       	rjmp	.+1438   	; 0x5c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	cd c2       	rjmp	.+1434   	; 0x5c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	cb c2       	rjmp	.+1430   	; 0x5c0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c9 c2       	rjmp	.+1426   	; 0x5c0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c7 c2       	rjmp	.+1422   	; 0x5c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c2       	rjmp	.+1418   	; 0x5c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	50 c3       	rjmp	.+1696   	; 0x6da <__vector_14>
      3a:	00 00       	nop
      3c:	c1 c2       	rjmp	.+1410   	; 0x5c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bf c2       	rjmp	.+1406   	; 0x5c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	bd c2       	rjmp	.+1402   	; 0x5c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <__vector_18>
      4c:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__vector_19>
      50:	b7 c2       	rjmp	.+1390   	; 0x5c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	b5 c2       	rjmp	.+1386   	; 0x5c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	b3 c2       	rjmp	.+1382   	; 0x5c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b1 c2       	rjmp	.+1378   	; 0x5c0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	af c2       	rjmp	.+1374   	; 0x5c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	ad c2       	rjmp	.+1370   	; 0x5c0 <__bad_interrupt>
	...

00000068 <_ZL16icon_led_numbers>:
      68:	0c 0b 0a 0f 0e 0d 07 08 09 02 01 00                 ............

00000074 <_ZL22sound_pattern_doorbell>:
      74:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      84:	b0 04 00 00 f4 01 00 00 00 00 00 00 e8 03 00 00     ................
      94:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      a4:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000000b4 <_ZL19sound_pattern_phone>:
      b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     104:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     114:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     124:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     134:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     144:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     154:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     164:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     174:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     184:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     194:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     1a4:	00 00 00 00 e8 03 00 00 e8 03 00 00 28 00 00 00     ............(...
     1b4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1c4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1d4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1e4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1f4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     204:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     214:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     224:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     234:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     244:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     254:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     264:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     274:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     284:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     294:	ee 02 00 00 28 00 00 00 00 00 00 00 e8 03 00 00     ....(...........
     2a4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     304:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     314:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     324:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     334:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     344:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     354:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     364:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     374:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     384:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     394:	00 00 00 00 e8 03 00 00 00 00 00 00 00 00 00 00     ................
	...

000003b4 <_ZL18sound_pattern_fire>:
     3b4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3c4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3d4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3e4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3f4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     404:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     414:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     424:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...

00000434 <_ZL18sound_pattern_help>:
     434:	bf 04 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     444:	1c 07 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     454:	bf 04 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     464:	1c 07 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     474:	00 00 00 00 e8 03 00 00                             ........

0000047c <_ZL13flash_pattern>:
     47c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     48c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     49c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4ac:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4bc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4cc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4dc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4ec:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4fc:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     50c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     51c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     52c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     53c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     54c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     55c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     56c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...

0000057c <_ZL11icon_colors>:
     57c:	3d f5 00 00 b8 f5 ff 00 00 ff ff 00                 =...........

00000588 <__ctors_end>:
     588:	11 24       	eor	r1, r1
     58a:	1f be       	out	0x3f, r1	; 63
     58c:	cf ef       	ldi	r28, 0xFF	; 255
     58e:	d8 e0       	ldi	r29, 0x08	; 8
     590:	de bf       	out	0x3e, r29	; 62
     592:	cd bf       	out	0x3d, r28	; 61

00000594 <__do_copy_data>:
     594:	11 e0       	ldi	r17, 0x01	; 1
     596:	a0 e0       	ldi	r26, 0x00	; 0
     598:	b1 e0       	ldi	r27, 0x01	; 1
     59a:	e4 ec       	ldi	r30, 0xC4	; 196
     59c:	fa e1       	ldi	r31, 0x1A	; 26
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__do_copy_data+0x10>
     5a0:	05 90       	lpm	r0, Z+
     5a2:	0d 92       	st	X+, r0
     5a4:	ac 32       	cpi	r26, 0x2C	; 44
     5a6:	b1 07       	cpc	r27, r17
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <__do_copy_data+0xc>

000005aa <__do_clear_bss>:
     5aa:	22 e0       	ldi	r18, 0x02	; 2
     5ac:	ac e2       	ldi	r26, 0x2C	; 44
     5ae:	b1 e0       	ldi	r27, 0x01	; 1
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <.do_clear_bss_start>

000005b2 <.do_clear_bss_loop>:
     5b2:	1d 92       	st	X+, r1

000005b4 <.do_clear_bss_start>:
     5b4:	a8 3a       	cpi	r26, 0xA8	; 168
     5b6:	b2 07       	cpc	r27, r18
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <.do_clear_bss_loop>
     5ba:	b4 d0       	rcall	.+360    	; 0x724 <main>
     5bc:	0c 94 60 0d 	jmp	0x1ac0	; 0x1ac0 <_exit>

000005c0 <__bad_interrupt>:
     5c0:	1f cd       	rjmp	.-1474   	; 0x0 <__vectors>

000005c2 <I2C_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
     5c2:	88 e4       	ldi	r24, 0x48	; 72
     5c4:	80 93 b8 00 	sts	0x00B8, r24
     5c8:	08 95       	ret

000005ca <I2C_start>:
     5ca:	ec eb       	ldi	r30, 0xBC	; 188
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	10 82       	st	Z, r1
     5d0:	94 ea       	ldi	r25, 0xA4	; 164
     5d2:	90 83       	st	Z, r25
     5d4:	90 81       	ld	r25, Z
     5d6:	99 23       	and	r25, r25
     5d8:	ec f7       	brge	.-6      	; 0x5d4 <I2C_start+0xa>
     5da:	90 91 b9 00 	lds	r25, 0x00B9
     5de:	98 7f       	andi	r25, 0xF8	; 248
     5e0:	98 30       	cpi	r25, 0x08	; 8
     5e2:	a1 f4       	brne	.+40     	; 0x60c <I2C_start+0x42>
     5e4:	80 93 bb 00 	sts	0x00BB, r24
     5e8:	84 e8       	ldi	r24, 0x84	; 132
     5ea:	80 93 bc 00 	sts	0x00BC, r24
     5ee:	ec eb       	ldi	r30, 0xBC	; 188
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	88 23       	and	r24, r24
     5f6:	ec f7       	brge	.-6      	; 0x5f2 <I2C_start+0x28>
     5f8:	90 91 b9 00 	lds	r25, 0x00B9
     5fc:	98 7f       	andi	r25, 0xF8	; 248
     5fe:	98 31       	cpi	r25, 0x18	; 24
     600:	39 f0       	breq	.+14     	; 0x610 <I2C_start+0x46>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 34       	cpi	r25, 0x40	; 64
     606:	29 f4       	brne	.+10     	; 0x612 <I2C_start+0x48>
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	08 95       	ret
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	08 95       	ret
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	08 95       	ret

00000614 <I2C_write>:
     614:	80 93 bb 00 	sts	0x00BB, r24
     618:	84 e8       	ldi	r24, 0x84	; 132
     61a:	80 93 bc 00 	sts	0x00BC, r24
     61e:	ec eb       	ldi	r30, 0xBC	; 188
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	88 23       	and	r24, r24
     626:	ec f7       	brge	.-6      	; 0x622 <I2C_write+0xe>
     628:	90 91 b9 00 	lds	r25, 0x00B9
     62c:	98 7f       	andi	r25, 0xF8	; 248
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	98 32       	cpi	r25, 0x28	; 40
     632:	09 f4       	brne	.+2      	; 0x636 <I2C_write+0x22>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	08 95       	ret

00000638 <I2C_read_ack>:
     638:	84 ec       	ldi	r24, 0xC4	; 196
     63a:	80 93 bc 00 	sts	0x00BC, r24
     63e:	ec eb       	ldi	r30, 0xBC	; 188
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	88 23       	and	r24, r24
     646:	ec f7       	brge	.-6      	; 0x642 <I2C_read_ack+0xa>
     648:	80 91 bb 00 	lds	r24, 0x00BB
     64c:	08 95       	ret

0000064e <I2C_stop>:

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     64e:	84 e9       	ldi	r24, 0x94	; 148
     650:	80 93 bc 00 	sts	0x00BC, r24
     654:	08 95       	ret

00000656 <log_s>:
 *
 * @param s The specified string
 */
void log_s(const char *s) {
#ifdef LOG_AVAILABLE
    uart0_puts(s);
     656:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <uart0_puts>
     65a:	08 95       	ret

0000065c <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	84 bd       	out	0x24, r24	; 36
     660:	93 e0       	ldi	r25, 0x03	; 3
     662:	95 bd       	out	0x25, r25	; 37
     664:	80 93 6e 00 	sts	0x006E, r24
     668:	8a ef       	ldi	r24, 0xFA	; 250
     66a:	87 bd       	out	0x27, r24	; 39
     66c:	08 95       	ret

0000066e <millis_get>:
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	8f b7       	in	r24, 0x3f	; 63
     674:	f8 94       	cli
     676:	00 91 2c 01 	lds	r16, 0x012C
     67a:	10 91 2d 01 	lds	r17, 0x012D
     67e:	20 91 2e 01 	lds	r18, 0x012E
     682:	30 91 2f 01 	lds	r19, 0x012F
     686:	8f bf       	out	0x3f, r24	; 63
     688:	60 2f       	mov	r22, r16
     68a:	71 2f       	mov	r23, r17
     68c:	82 2f       	mov	r24, r18
     68e:	93 2f       	mov	r25, r19
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	08 95       	ret

00000696 <millis_resume>:
     696:	e4 e6       	ldi	r30, 0x64	; 100
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	8f 7d       	andi	r24, 0xDF	; 223
     69e:	80 83       	st	Z, r24
     6a0:	ee e6       	ldi	r30, 0x6E	; 110
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	82 60       	ori	r24, 0x02	; 2
     6a8:	80 83       	st	Z, r24
     6aa:	08 95       	ret

000006ac <millis_pause>:
     6ac:	ee e6       	ldi	r30, 0x6E	; 110
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 81       	ld	r24, Z
     6b2:	8d 7f       	andi	r24, 0xFD	; 253
     6b4:	80 83       	st	Z, r24
     6b6:	e4 e6       	ldi	r30, 0x64	; 100
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	80 81       	ld	r24, Z
     6bc:	80 62       	ori	r24, 0x20	; 32
     6be:	80 83       	st	Z, r24
     6c0:	08 95       	ret

000006c2 <millis_reset>:
     6c2:	8f b7       	in	r24, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	10 92 2c 01 	sts	0x012C, r1
     6ca:	10 92 2d 01 	sts	0x012D, r1
     6ce:	10 92 2e 01 	sts	0x012E, r1
     6d2:	10 92 2f 01 	sts	0x012F, r1
     6d6:	8f bf       	out	0x3f, r24	; 63
     6d8:	08 95       	ret

000006da <__vector_14>:

ISR(ISR_VECT)
{
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	8f 93       	push	r24
     6e6:	9f 93       	push	r25
     6e8:	af 93       	push	r26
     6ea:	bf 93       	push	r27
	++milliseconds;
     6ec:	80 91 2c 01 	lds	r24, 0x012C
     6f0:	90 91 2d 01 	lds	r25, 0x012D
     6f4:	a0 91 2e 01 	lds	r26, 0x012E
     6f8:	b0 91 2f 01 	lds	r27, 0x012F
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	a1 1d       	adc	r26, r1
     700:	b1 1d       	adc	r27, r1
     702:	80 93 2c 01 	sts	0x012C, r24
     706:	90 93 2d 01 	sts	0x012D, r25
     70a:	a0 93 2e 01 	sts	0x012E, r26
     70e:	b0 93 2f 01 	sts	0x012F, r27
}
     712:	bf 91       	pop	r27
     714:	af 91       	pop	r26
     716:	9f 91       	pop	r25
     718:	8f 91       	pop	r24
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <main>:



			 
	
int main() {	
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	00 d0       	rcall	.+0      	; 0x72a <main+0x6>
     72a:	1f 92       	push	r1
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62

// disable ADC for less power 
	ADCSRA &= ~_BV(ADEN); // ADC off 
     730:	ea e7       	ldi	r30, 0x7A	; 122
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	80 81       	ld	r24, Z
     736:	8f 77       	andi	r24, 0x7F	; 127
     738:	80 83       	st	Z, r24
	sei();
     73a:	78 94       	sei
			/* Initialize MILLIS */
	        millis_init();
     73c:	8f df       	rcall	.-226    	; 0x65c <millis_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     73e:	2f ef       	ldi	r18, 0xFF	; 255
     740:	8b e7       	ldi	r24, 0x7B	; 123
     742:	92 e9       	ldi	r25, 0x92	; 146
     744:	21 50       	subi	r18, 0x01	; 1
     746:	80 40       	sbci	r24, 0x00	; 0
     748:	90 40       	sbci	r25, 0x00	; 0
     74a:	e1 f7       	brne	.-8      	; 0x744 <main+0x20>
     74c:	00 c0       	rjmp	.+0      	; 0x74e <main+0x2a>
     74e:	00 00       	nop
			_delay_ms(3000);
			/* Initialize MILLIS */

			/* Initialize TONE */						
			tone_init();		
     750:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <tone_init>
			/* Initialize TONE */						
						
			/* Initialize TIMER 2 */
			// Timer settings
			TCCR2A = _BV(WGM21); // prescaler 128
     754:	82 e0       	ldi	r24, 0x02	; 2
     756:	80 93 b0 00 	sts	0x00B0, r24
			TCCR2B = _BV(CS22)|_BV(CS20);
     75a:	85 e0       	ldi	r24, 0x05	; 5
     75c:	80 93 b1 00 	sts	0x00B1, r24
							 	
			// TIMSK2 = _BV(OCIE2A); // DO NOT ENABLE TIMER2 BY DEFAULT!
			OCR2A = ((F_CPU / 128) / 1000);
     760:	8d e7       	ldi	r24, 0x7D	; 125
     762:	80 93 b3 00 	sts	0x00B3, r24
			power_timer2_disable(); // power timer2 down!
     766:	e4 e6       	ldi	r30, 0x64	; 100
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	80 64       	ori	r24, 0x40	; 64
     76e:	80 83       	st	Z, r24
			/* Initialize TIMER 2 */			
			

			/* Initialize UART */
			uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     770:	80 e1       	ldi	r24, 0x10	; 16
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 cd 0c 	call	0x199a	; 0x199a <uart0_init>
     778:	ef ef       	ldi	r30, 0xFF	; 255
     77a:	f3 ed       	ldi	r31, 0xD3	; 211
     77c:	20 e3       	ldi	r18, 0x30	; 48
     77e:	e1 50       	subi	r30, 0x01	; 1
     780:	f0 40       	sbci	r31, 0x00	; 0
     782:	20 40       	sbci	r18, 0x00	; 0
     784:	e1 f7       	brne	.-8      	; 0x77e <main+0x5a>
     786:	00 c0       	rjmp	.+0      	; 0x788 <main+0x64>
     788:	00 00       	nop
			//uart0_puts("kak");
			_delay_ms(1000);
			/* Initialize UART */
		
			/* Initialize I2C */
			I2C_init();	
     78a:	1b df       	rcall	.-458    	; 0x5c2 <I2C_init>
			/* Initialize I2C */
			
			/* Initialize PCA9634 */
			pca9635_init();
     78c:	c8 d3       	rcall	.+1936   	; 0xf1e <pca9635_init>
			pca9635_set_all_led_pwm(255);
     78e:	8f ef       	ldi	r24, 0xFF	; 255
     790:	0c d4       	rcall	.+2072   	; 0xfaa <pca9635_set_all_led_pwm>
     792:	8f ef       	ldi	r24, 0xFF	; 255
     794:	93 ed       	ldi	r25, 0xD3	; 211
     796:	e0 e3       	ldi	r30, 0x30	; 48
     798:	81 50       	subi	r24, 0x01	; 1
     79a:	90 40       	sbci	r25, 0x00	; 0
     79c:	e0 40       	sbci	r30, 0x00	; 0
     79e:	e1 f7       	brne	.-8      	; 0x798 <main+0x74>
     7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <main+0x7e>
     7a2:	00 00       	nop
			_delay_ms(1000);
			pca9635_set_all_led_pwm(0);
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	01 d4       	rcall	.+2050   	; 0xfaa <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1);
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	0f d4       	rcall	.+2078   	; 0xfca <pca9635_set_sleep>
     7ac:	ff ef       	ldi	r31, 0xFF	; 255
     7ae:	23 ed       	ldi	r18, 0xD3	; 211
     7b0:	80 e3       	ldi	r24, 0x30	; 48
     7b2:	f1 50       	subi	r31, 0x01	; 1
     7b4:	20 40       	sbci	r18, 0x00	; 0
     7b6:	80 40       	sbci	r24, 0x00	; 0
     7b8:	e1 f7       	brne	.-8      	; 0x7b2 <main+0x8e>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <main+0x98>
     7bc:	00 00       	nop
		//	log_s("PCA ok");
			_delay_ms(1000);
			
			
  // node id, rfband, group id
    rf12_initialize(2, RF12_868MHZ, 14);
     7be:	4e e0       	ldi	r20, 0x0E	; 14
     7c0:	62 e0       	ldi	r22, 0x02	; 2
     7c2:	82 e0       	ldi	r24, 0x02	; 2
     7c4:	32 d6       	rcall	.+3172   	; 0x142a <_Z15rf12_initializehhh>
    // see http://tools.jeelabs.org/rfm12b
  //  rf12_control(0xC040); // set low-battery level to 2.2V i.s.o. 3.1V

log_s("initialized!");
     7c6:	8e e0       	ldi	r24, 0x0E	; 14
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	45 df       	rcall	.-374    	; 0x656 <log_s>
     7cc:	9f ef       	ldi	r25, 0xFF	; 255
     7ce:	e3 ed       	ldi	r30, 0xD3	; 211
     7d0:	f0 e3       	ldi	r31, 0x30	; 48
     7d2:	91 50       	subi	r25, 0x01	; 1
     7d4:	e0 40       	sbci	r30, 0x00	; 0
     7d6:	f0 40       	sbci	r31, 0x00	; 0
     7d8:	e1 f7       	brne	.-8      	; 0x7d2 <main+0xae>
     7da:	00 c0       	rjmp	.+0      	; 0x7dc <main+0xb8>
     7dc:	00 00       	nop
	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
				{
						
			if (RF12_WANTS_ACK) {
     7de:	0f 2e       	mov	r0, r31
     7e0:	fe e4       	ldi	r31, 0x4E	; 78
     7e2:	ef 2e       	mov	r14, r31
     7e4:	f1 e0       	ldi	r31, 0x01	; 1
     7e6:	ff 2e       	mov	r15, r31
     7e8:	f0 2d       	mov	r31, r0
		//		}
				
				
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[0]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     7ea:	0f 2e       	mov	r0, r31
     7ec:	f0 e5       	ldi	r31, 0x50	; 80
     7ee:	af 2e       	mov	r10, r31
     7f0:	f1 e0       	ldi	r31, 0x01	; 1
     7f2:	bf 2e       	mov	r11, r31
     7f4:	f0 2d       	mov	r31, r0
							pca9635_set_sleep(0);
						//	pca9635_set_led_mode(2);
							
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     7f6:	61 2c       	mov	r6, r1
     7f8:	71 2c       	mov	r7, r1
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     7fa:	69 82       	std	Y+1, r6	; 0x01
     7fc:	47 2c       	mov	r4, r7
							// Geen alarm actief

							deep_sleep_ok = false; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     7fe:	55 24       	eor	r5, r5
     800:	53 94       	inc	r5

	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
     802:	3a d4       	rcall	.+2164   	; 0x1078 <_Z13rf12_recvDonev>
     804:	88 23       	and	r24, r24
     806:	09 f4       	brne	.+2      	; 0x80a <main+0xe6>
     808:	de c0       	rjmp	.+444    	; 0x9c6 <__stack+0xc7>
     80a:	80 91 94 01 	lds	r24, 0x0194
     80e:	90 91 95 01 	lds	r25, 0x0195
     812:	89 2b       	or	r24, r25
     814:	09 f4       	brne	.+2      	; 0x818 <main+0xf4>
     816:	d0 c0       	rjmp	.+416    	; 0x9b8 <__stack+0xb9>
     818:	d6 c0       	rjmp	.+428    	; 0x9c6 <__stack+0xc7>
		// process incoming data here
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
				{
						
			if (RF12_WANTS_ACK) {
     81a:	f7 01       	movw	r30, r14
     81c:	80 81       	ld	r24, Z
     81e:	88 23       	and	r24, r24
     820:	0c f0       	brlt	.+2      	; 0x824 <main+0x100>
     822:	d6 c0       	rjmp	.+428    	; 0x9d0 <__stack+0xd1>
     824:	09 c0       	rjmp	.+18     	; 0x838 <main+0x114>
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     826:	f7 01       	movw	r30, r14
     828:	80 81       	ld	r24, Z
     82a:	8f 71       	andi	r24, 0x1F	; 31
     82c:	80 6c       	ori	r24, 0xC0	; 192
     82e:	40 e0       	ldi	r20, 0x00	; 0
     830:	b3 01       	movw	r22, r6
     832:	78 d5       	rcall	.+2800   	; 0x1324 <_Z14rf12_sendStarthPKvh>
				rf12_sendWait(1); // don't power down too soon
     834:	85 2d       	mov	r24, r5
     836:	84 d5       	rcall	.+2824   	; 0x1340 <_Z13rf12_sendWaith>
			//	uart0_puts("ACK-OK");
				//_delay_ms(10);
			}
			
			
		uart0_puts("DATA");
     838:	8b e1       	ldi	r24, 0x1B	; 27
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <uart0_puts>
     840:	8f e3       	ldi	r24, 0x3F	; 63
     842:	9c e9       	ldi	r25, 0x9C	; 156
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	f1 f7       	brne	.-4      	; 0x844 <main+0x120>
     848:	00 c0       	rjmp	.+0      	; 0x84a <main+0x126>
     84a:	00 00       	nop
		//		}
				
				
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[0]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     84c:	f5 01       	movw	r30, r10
     84e:	30 80       	ld	r3, Z
				uart0_putc(data);
     850:	83 2d       	mov	r24, r3
     852:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <uart0_putc>
     856:	8f e3       	ldi	r24, 0x3F	; 63
     858:	9c e9       	ldi	r25, 0x9C	; 156
     85a:	01 97       	sbiw	r24, 0x01	; 1
     85c:	f1 f7       	brne	.-4      	; 0x85a <main+0x136>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <main+0x13c>
     860:	00 00       	nop
				_delay_ms(10);
				 if(data & 0x10){
     862:	13 2d       	mov	r17, r3
     864:	10 71       	andi	r17, 0x10	; 16
     866:	34 fe       	sbrs	r3, 4
     868:	06 c0       	rjmp	.+12     	; 0x876 <main+0x152>
					 // start alarm	 
					// uart0_puts("START");
					 active_alarm = active_alarm | data; // 00001111 
     86a:	80 91 45 01 	lds	r24, 0x0145
     86e:	83 29       	or	r24, r3
     870:	80 93 45 01 	sts	0x0145, r24
     874:	07 c0       	rjmp	.+14     	; 0x884 <main+0x160>
				 }else{
					 // stop alarm
					//  uart0_puts("STOP");
					 active_alarm =  active_alarm & (~data); /* invert data, compare with active alarm array to clear the right alarm bit */		 
     876:	83 2d       	mov	r24, r3
     878:	80 95       	com	r24
     87a:	90 91 45 01 	lds	r25, 0x0145
     87e:	89 23       	and	r24, r25
     880:	80 93 45 01 	sts	0x0145, r24
				 }
				 
				////////////////		Fill alarm array		 ////////////////				 
				
			 // IS ER EEN ALARM ACTIEF in array active_alarm?
				 if(active_alarm & 0x0F){
     884:	20 91 45 01 	lds	r18, 0x0145
     888:	82 2f       	mov	r24, r18
     88a:	8f 70       	andi	r24, 0x0F	; 15
     88c:	09 f4       	brne	.+2      	; 0x890 <main+0x16c>
     88e:	7b c0       	rjmp	.+246    	; 0x986 <__stack+0x87>
			  	
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
     890:	80 91 41 01 	lds	r24, 0x0141
     894:	90 91 42 01 	lds	r25, 0x0142
     898:	a0 91 43 01 	lds	r26, 0x0143
     89c:	b0 91 44 01 	lds	r27, 0x0144
     8a0:	89 2b       	or	r24, r25
     8a2:	8a 2b       	or	r24, r26
     8a4:	8b 2b       	or	r24, r27
     8a6:	39 f5       	brne	.+78     	; 0x8f6 <main+0x1d2>
							// Geen alarm actief

							deep_sleep_ok = false; // prevent while loop from going in deepsleep
     8a8:	10 92 46 01 	sts	0x0146, r1
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     8ac:	23 fd       	sbrc	r18, 3
     8ae:	0c c0       	rjmp	.+24     	; 0x8c8 <main+0x1a4>
     8b0:	22 fd       	sbrc	r18, 2
     8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <main+0x19c>
     8b4:	21 fd       	sbrc	r18, 1
     8b6:	06 c0       	rjmp	.+12     	; 0x8c4 <main+0x1a0>
     8b8:	20 ff       	sbrs	r18, 0
     8ba:	0b c0       	rjmp	.+22     	; 0x8d2 <main+0x1ae>
     8bc:	83 e0       	ldi	r24, 0x03	; 3
     8be:	05 c0       	rjmp	.+10     	; 0x8ca <main+0x1a6>
							// Geen alarm actief

							deep_sleep_ok = false; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     8c0:	85 2d       	mov	r24, r5
     8c2:	03 c0       	rjmp	.+6      	; 0x8ca <main+0x1a6>
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <main+0x1a6>
     8c8:	80 e0       	ldi	r24, 0x00	; 0
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
									sound_current_alarm = i;
     8ca:	80 93 40 01 	sts	0x0140, r24
									icon_current_alarm  = i;
     8ce:	80 93 35 01 	sts	0x0135, r24
									break;
								} 
							 }

							// 2. timer 0 - millis starten
							millis_reset();
     8d2:	f7 de       	rcall	.-530    	; 0x6c2 <millis_reset>
							millis_resume();
     8d4:	e0 de       	rcall	.-576    	; 0x696 <millis_resume>
				 
							// 3. timer 2 - alarm timer starten
							power_timer2_enable();
     8d6:	e4 e6       	ldi	r30, 0x64	; 100
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	80 81       	ld	r24, Z
     8dc:	8f 7b       	andi	r24, 0xBF	; 191
     8de:	80 83       	st	Z, r24
							TIMSK2 |= _BV(OCIE2A);
     8e0:	e0 e7       	ldi	r30, 0x70	; 112
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	80 81       	ld	r24, Z
     8e6:	82 60       	ori	r24, 0x02	; 2
     8e8:	80 83       	st	Z, r24
			 
							// wake up pca9635!
							pca9635_set_sleep(0);
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	6e d3       	rcall	.+1756   	; 0xfca <pca9635_set_sleep>
						 } //  if(active_alarm_time == 0) {
				 

				 		// Only reset active alarm timer if there is a new alarm...
						// 0x10 = activate bit 0x0F are bits of the alarms
						if( (data & 0x10) && (data & 0x0F)){
     8ee:	11 23       	and	r17, r17
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <main+0x1d0>
     8f2:	74 c0       	rjmp	.+232    	; 0x9dc <__stack+0xdd>
     8f4:	2c c0       	rjmp	.+88     	; 0x94e <__stack+0x4f>
							pca9635_set_sleep(0);
						//	pca9635_set_led_mode(2);
							
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     8f6:	11 11       	cpse	r17, r1
     8f8:	2a c0       	rjmp	.+84     	; 0x94e <__stack+0x4f>
     8fa:	0f 2e       	mov	r0, r31
     8fc:	f0 e2       	ldi	r31, 0x20	; 32
     8fe:	cf 2e       	mov	r12, r31
     900:	f1 e0       	ldi	r31, 0x01	; 1
     902:	df 2e       	mov	r13, r31
     904:	f0 2d       	mov	r31, r0
     906:	83 01       	movw	r16, r6
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     908:	f6 01       	movw	r30, r12
     90a:	21 91       	ld	r18, Z+
     90c:	6f 01       	movw	r12, r30
     90e:	23 21       	and	r18, r3
     910:	c1 f0       	breq	.+48     	; 0x942 <__stack+0x43>
     912:	f9 81       	ldd	r31, Y+1	; 0x01
     914:	fa 83       	std	Y+2, r31	; 0x02
     916:	4b 82       	std	Y+3, r4	; 0x03
											for (byte j = 0; j <= 2; j++){
												pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[i].lednr[j])), 0); // leds off!
     918:	48 01       	movw	r8, r16
     91a:	88 0c       	add	r8, r8
     91c:	99 1c       	adc	r9, r9
     91e:	80 0e       	add	r8, r16
     920:	91 1e       	adc	r9, r17
     922:	ea 81       	ldd	r30, Y+2	; 0x02
     924:	fb 81       	ldd	r31, Y+3	; 0x03
     926:	e8 0d       	add	r30, r8
     928:	f9 1d       	adc	r31, r9
     92a:	e8 59       	subi	r30, 0x98	; 152
     92c:	ff 4f       	sbci	r31, 0xFF	; 255
     92e:	84 91       	lpm	r24, Z
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	2a d3       	rcall	.+1620   	; 0xf88 <pca9635_set_led_pwm>
     934:	8a 81       	ldd	r24, Y+2	; 0x02
     936:	9b 81       	ldd	r25, Y+3	; 0x03
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	9b 83       	std	Y+3, r25	; 0x03
     93c:	8a 83       	std	Y+2, r24	; 0x02
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
											for (byte j = 0; j <= 2; j++){
     93e:	03 97       	sbiw	r24, 0x03	; 3
     940:	81 f7       	brne	.-32     	; 0x922 <__stack+0x23>
     942:	0f 5f       	subi	r16, 0xFF	; 255
     944:	1f 4f       	sbci	r17, 0xFF	; 255
							
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
     946:	04 30       	cpi	r16, 0x04	; 4
     948:	11 05       	cpc	r17, r1
     94a:	f1 f6       	brne	.-68     	; 0x908 <__stack+0x9>
     94c:	47 c0       	rjmp	.+142    	; 0x9dc <__stack+0xdd>
						 } //  if(active_alarm_time == 0) {
				 

				 		// Only reset active alarm timer if there is a new alarm...
						// 0x10 = activate bit 0x0F are bits of the alarms
						if( (data & 0x10) && (data & 0x0F)){
     94e:	83 2d       	mov	r24, r3
     950:	8f 70       	andi	r24, 0x0F	; 15
     952:	09 f4       	brne	.+2      	; 0x956 <__stack+0x57>
     954:	43 c0       	rjmp	.+134    	; 0x9dc <__stack+0xdd>
				 			active_alarm_time = millis_get() + alarm_duration; 		 
     956:	8b de       	rcall	.-746    	; 0x66e <millis_get>
     958:	00 91 00 01 	lds	r16, 0x0100
     95c:	10 91 01 01 	lds	r17, 0x0101
     960:	20 91 02 01 	lds	r18, 0x0102
     964:	30 91 03 01 	lds	r19, 0x0103
     968:	dc 01       	movw	r26, r24
     96a:	cb 01       	movw	r24, r22
     96c:	80 0f       	add	r24, r16
     96e:	91 1f       	adc	r25, r17
     970:	a2 1f       	adc	r26, r18
     972:	b3 1f       	adc	r27, r19
     974:	80 93 41 01 	sts	0x0141, r24
     978:	90 93 42 01 	sts	0x0142, r25
     97c:	a0 93 43 01 	sts	0x0143, r26
     980:	b0 93 44 01 	sts	0x0144, r27
     984:	2b c0       	rjmp	.+86     	; 0x9dc <__stack+0xdd>
						 }

				}else{ //  if(active_alarm & 0x0F){ // IS ER EEN ALARM ACTIEF in active_alarm?
						// no active alarm in array
												
						active_alarm_time = 0; // set alarm time to zero, timers will be disabled in next timer 2 interrupt
     986:	10 92 41 01 	sts	0x0141, r1
     98a:	10 92 42 01 	sts	0x0142, r1
     98e:	10 92 43 01 	sts	0x0143, r1
     992:	10 92 44 01 	sts	0x0144, r1
     996:	22 c0       	rjmp	.+68     	; 0x9dc <__stack+0xdd>
									
	} else {
		
		// switch into idle mode until the next interrupt - Choose our preferred sleep mode:
		if(deep_sleep_ok){
			set_sleep_mode(SLEEP_MODE_PWR_SAVE); // if active alarm, go in pwr save mode to keep timer 2 running
     998:	83 b7       	in	r24, 0x33	; 51
     99a:	81 7f       	andi	r24, 0xF1	; 241
     99c:	86 60       	ori	r24, 0x06	; 6
     99e:	83 bf       	out	0x33, r24	; 51
     9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <__stack+0xa9>
		}else{
			set_sleep_mode(SLEEP_MODE_IDLE);
     9a2:	83 b7       	in	r24, 0x33	; 51
     9a4:	81 7f       	andi	r24, 0xF1	; 241
     9a6:	83 bf       	out	0x33, r24	; 51
		}
    // _delay_ms(5);
	
    // Set sleep enable (SE) bit:
    sleep_enable();
     9a8:	83 b7       	in	r24, 0x33	; 51
     9aa:	81 60       	ori	r24, 0x01	; 1
     9ac:	83 bf       	out	0x33, r24	; 51
    
    // Put the device to sleep:
    sleep_cpu();
     9ae:	88 95       	sleep
	
	// Clear sleep enable (SE) bit:
	sleep_disable();
     9b0:	83 b7       	in	r24, 0x33	; 51
     9b2:	8e 7f       	andi	r24, 0xFE	; 254
     9b4:	83 bf       	out	0x33, r24	; 51
     9b6:	25 cf       	rjmp	.-438    	; 0x802 <main+0xde>
	
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     9b8:	2f b6       	in	r2, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     9ba:	f8 94       	cli
				{
						
			if (RF12_WANTS_ACK) {
     9bc:	f7 01       	movw	r30, r14
     9be:	80 81       	ld	r24, Z
     9c0:	85 fd       	sbrc	r24, 5
     9c2:	2b cf       	rjmp	.-426    	; 0x81a <main+0xf6>
     9c4:	39 cf       	rjmp	.-398    	; 0x838 <main+0x114>
					 
									
	} else {
		
		// switch into idle mode until the next interrupt - Choose our preferred sleep mode:
		if(deep_sleep_ok){
     9c6:	80 91 46 01 	lds	r24, 0x0146
     9ca:	81 11       	cpse	r24, r1
     9cc:	e5 cf       	rjmp	.-54     	; 0x998 <__stack+0x99>
     9ce:	e9 cf       	rjmp	.-46     	; 0x9a2 <__stack+0xa3>
		// process incoming data here
				ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
				{
						
			if (RF12_WANTS_ACK) {
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     9d0:	f7 01       	movw	r30, r14
     9d2:	80 81       	ld	r24, Z
     9d4:	86 ff       	sbrs	r24, 6
     9d6:	27 cf       	rjmp	.-434    	; 0x826 <main+0x102>
     9d8:	80 e8       	ldi	r24, 0x80	; 128
     9da:	29 cf       	rjmp	.-430    	; 0x82e <main+0x10a>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     9dc:	2f be       	out	0x3f, r2	; 63
    __asm__ volatile ("" ::: "memory");
     9de:	11 cf       	rjmp	.-478    	; 0x802 <main+0xde>

000009e0 <_Z9isr_soundv>:
	}
						
}


	void isr_sound(){
     9e0:	ef 92       	push	r14
     9e2:	0f 93       	push	r16
     9e4:	1f 93       	push	r17
		//	uart0_putc(sound_current_step);
		//	uart0_putc(millis_get());
		//	uart0_putc(_sound_note_time);
			// Stop note if necessary 
			if(_sound_note_time != 0){ // sound already playing?		
     9e6:	80 91 3b 01 	lds	r24, 0x013B
     9ea:	90 91 3c 01 	lds	r25, 0x013C
     9ee:	a0 91 3d 01 	lds	r26, 0x013D
     9f2:	b0 91 3e 01 	lds	r27, 0x013E
     9f6:	89 2b       	or	r24, r25
     9f8:	8a 2b       	or	r24, r26
     9fa:	8b 2b       	or	r24, r27
     9fc:	81 f0       	breq	.+32     	; 0xa1e <_Z9isr_soundv+0x3e>
				//	uart0_puts("GS");
				if(millis_get() < _sound_note_time ){ // Do we need to stop the current note?
     9fe:	37 de       	rcall	.-914    	; 0x66e <millis_get>
     a00:	00 91 3b 01 	lds	r16, 0x013B
     a04:	10 91 3c 01 	lds	r17, 0x013C
     a08:	20 91 3d 01 	lds	r18, 0x013D
     a0c:	30 91 3e 01 	lds	r19, 0x013E
     a10:	60 17       	cp	r22, r16
     a12:	71 07       	cpc	r23, r17
     a14:	82 07       	cpc	r24, r18
     a16:	93 07       	cpc	r25, r19
     a18:	08 f4       	brcc	.+2      	; 0xa1c <_Z9isr_soundv+0x3c>
     a1a:	ff c0       	rjmp	.+510    	; 0xc1a <_Z9isr_soundv+0x23a>
					//uart0_puts("DS");
					return; // dont stop current note
					
				}else{
					noTone(); // stop current note
     a1c:	f0 d6       	rcall	.+3552   	; 0x17fe <noTone>
			
			// play next tone
		//	uart0_puts("PN");
		//	tone(unsigned long frequency, uint8_t volume);
		//uart0_putc(sound_current_alarm);
			if(sound_current_alarm == 0 ){
     a1e:	80 91 40 01 	lds	r24, 0x0140
     a22:	81 11       	cpse	r24, r1
     a24:	32 c0       	rjmp	.+100    	; 0xa8a <_Z9isr_soundv+0xaa>
				tone(pgm_read_word(&(sound_pattern_doorbell[sound_current_step].frequency)), 10); // freq, volume
     a26:	e0 91 3f 01 	lds	r30, 0x013F
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	ee 0f       	add	r30, r30
     a2e:	ff 1f       	adc	r31, r31
     a30:	ee 0f       	add	r30, r30
     a32:	ff 1f       	adc	r31, r31
     a34:	ee 0f       	add	r30, r30
     a36:	ff 1f       	adc	r31, r31
     a38:	ec 58       	subi	r30, 0x8C	; 140
     a3a:	ff 4f       	sbci	r31, 0xFF	; 255
     a3c:	65 91       	lpm	r22, Z+
     a3e:	74 91       	lpm	r23, Z
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	e1 2c       	mov	r14, r1
     a46:	00 e0       	ldi	r16, 0x00	; 0
     a48:	10 e0       	ldi	r17, 0x00	; 0
     a4a:	98 01       	movw	r18, r16
     a4c:	4a e0       	ldi	r20, 0x0A	; 10
     a4e:	df d6       	rcall	.+3518   	; 0x180e <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_doorbell[sound_current_step].time)));
     a50:	0e de       	rcall	.-996    	; 0x66e <millis_get>
     a52:	e0 91 3f 01 	lds	r30, 0x013F
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	e8 58       	subi	r30, 0x88	; 136
     a66:	ff 4f       	sbci	r31, 0xFF	; 255
     a68:	25 91       	lpm	r18, Z+
     a6a:	34 91       	lpm	r19, Z
     a6c:	dc 01       	movw	r26, r24
     a6e:	cb 01       	movw	r24, r22
     a70:	82 0f       	add	r24, r18
     a72:	93 1f       	adc	r25, r19
     a74:	a1 1d       	adc	r26, r1
     a76:	b1 1d       	adc	r27, r1
     a78:	80 93 3b 01 	sts	0x013B, r24
     a7c:	90 93 3c 01 	sts	0x013C, r25
     a80:	a0 93 3d 01 	sts	0x013D, r26
     a84:	b0 93 3e 01 	sts	0x013E, r27
     a88:	9b c0       	rjmp	.+310    	; 0xbc0 <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 1 ){
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	91 f5       	brne	.+100    	; 0xaf2 <_Z9isr_soundv+0x112>
				tone(pgm_read_word(&(sound_pattern_phone[sound_current_step].frequency)), 10);
     a8e:	e0 91 3f 01 	lds	r30, 0x013F
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	ee 0f       	add	r30, r30
     a96:	ff 1f       	adc	r31, r31
     a98:	ee 0f       	add	r30, r30
     a9a:	ff 1f       	adc	r31, r31
     a9c:	ee 0f       	add	r30, r30
     a9e:	ff 1f       	adc	r31, r31
     aa0:	ec 54       	subi	r30, 0x4C	; 76
     aa2:	ff 4f       	sbci	r31, 0xFF	; 255
     aa4:	65 91       	lpm	r22, Z+
     aa6:	74 91       	lpm	r23, Z
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	e1 2c       	mov	r14, r1
     aae:	00 e0       	ldi	r16, 0x00	; 0
     ab0:	10 e0       	ldi	r17, 0x00	; 0
     ab2:	98 01       	movw	r18, r16
     ab4:	4a e0       	ldi	r20, 0x0A	; 10
     ab6:	ab d6       	rcall	.+3414   	; 0x180e <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_phone[sound_current_step].time)));
     ab8:	da dd       	rcall	.-1100   	; 0x66e <millis_get>
     aba:	e0 91 3f 01 	lds	r30, 0x013F
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	ee 0f       	add	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	ee 0f       	add	r30, r30
     ac6:	ff 1f       	adc	r31, r31
     ac8:	ee 0f       	add	r30, r30
     aca:	ff 1f       	adc	r31, r31
     acc:	e8 54       	subi	r30, 0x48	; 72
     ace:	ff 4f       	sbci	r31, 0xFF	; 255
     ad0:	25 91       	lpm	r18, Z+
     ad2:	34 91       	lpm	r19, Z
     ad4:	dc 01       	movw	r26, r24
     ad6:	cb 01       	movw	r24, r22
     ad8:	82 0f       	add	r24, r18
     ada:	93 1f       	adc	r25, r19
     adc:	a1 1d       	adc	r26, r1
     ade:	b1 1d       	adc	r27, r1
     ae0:	80 93 3b 01 	sts	0x013B, r24
     ae4:	90 93 3c 01 	sts	0x013C, r25
     ae8:	a0 93 3d 01 	sts	0x013D, r26
     aec:	b0 93 3e 01 	sts	0x013E, r27
     af0:	67 c0       	rjmp	.+206    	; 0xbc0 <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 2 ){
     af2:	82 30       	cpi	r24, 0x02	; 2
     af4:	91 f5       	brne	.+100    	; 0xb5a <_Z9isr_soundv+0x17a>
				tone(pgm_read_word(&(sound_pattern_fire[sound_current_step].frequency)), 10);
     af6:	e0 91 3f 01 	lds	r30, 0x013F
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	ee 0f       	add	r30, r30
     afe:	ff 1f       	adc	r31, r31
     b00:	ee 0f       	add	r30, r30
     b02:	ff 1f       	adc	r31, r31
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	ec 54       	subi	r30, 0x4C	; 76
     b0a:	fc 4f       	sbci	r31, 0xFC	; 252
     b0c:	65 91       	lpm	r22, Z+
     b0e:	74 91       	lpm	r23, Z
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	e1 2c       	mov	r14, r1
     b16:	00 e0       	ldi	r16, 0x00	; 0
     b18:	10 e0       	ldi	r17, 0x00	; 0
     b1a:	98 01       	movw	r18, r16
     b1c:	4a e0       	ldi	r20, 0x0A	; 10
     b1e:	77 d6       	rcall	.+3310   	; 0x180e <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_fire[sound_current_step].time)));
     b20:	a6 dd       	rcall	.-1204   	; 0x66e <millis_get>
     b22:	e0 91 3f 01 	lds	r30, 0x013F
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	ee 0f       	add	r30, r30
     b2e:	ff 1f       	adc	r31, r31
     b30:	ee 0f       	add	r30, r30
     b32:	ff 1f       	adc	r31, r31
     b34:	e8 54       	subi	r30, 0x48	; 72
     b36:	fc 4f       	sbci	r31, 0xFC	; 252
     b38:	25 91       	lpm	r18, Z+
     b3a:	34 91       	lpm	r19, Z
     b3c:	dc 01       	movw	r26, r24
     b3e:	cb 01       	movw	r24, r22
     b40:	82 0f       	add	r24, r18
     b42:	93 1f       	adc	r25, r19
     b44:	a1 1d       	adc	r26, r1
     b46:	b1 1d       	adc	r27, r1
     b48:	80 93 3b 01 	sts	0x013B, r24
     b4c:	90 93 3c 01 	sts	0x013C, r25
     b50:	a0 93 3d 01 	sts	0x013D, r26
     b54:	b0 93 3e 01 	sts	0x013E, r27
     b58:	33 c0       	rjmp	.+102    	; 0xbc0 <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 3 ){
     b5a:	83 30       	cpi	r24, 0x03	; 3
     b5c:	89 f5       	brne	.+98     	; 0xbc0 <_Z9isr_soundv+0x1e0>
				tone(pgm_read_word(&(sound_pattern_help[sound_current_step].frequency)),10);
     b5e:	e0 91 3f 01 	lds	r30, 0x013F
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	ee 0f       	add	r30, r30
     b6e:	ff 1f       	adc	r31, r31
     b70:	ec 5c       	subi	r30, 0xCC	; 204
     b72:	fb 4f       	sbci	r31, 0xFB	; 251
     b74:	65 91       	lpm	r22, Z+
     b76:	74 91       	lpm	r23, Z
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	e1 2c       	mov	r14, r1
     b7e:	00 e0       	ldi	r16, 0x00	; 0
     b80:	10 e0       	ldi	r17, 0x00	; 0
     b82:	98 01       	movw	r18, r16
     b84:	4a e0       	ldi	r20, 0x0A	; 10
     b86:	43 d6       	rcall	.+3206   	; 0x180e <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_help[sound_current_step].time)));
     b88:	72 dd       	rcall	.-1308   	; 0x66e <millis_get>
     b8a:	e0 91 3f 01 	lds	r30, 0x013F
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	ee 0f       	add	r30, r30
     b96:	ff 1f       	adc	r31, r31
     b98:	ee 0f       	add	r30, r30
     b9a:	ff 1f       	adc	r31, r31
     b9c:	e8 5c       	subi	r30, 0xC8	; 200
     b9e:	fb 4f       	sbci	r31, 0xFB	; 251
     ba0:	25 91       	lpm	r18, Z+
     ba2:	34 91       	lpm	r19, Z
     ba4:	dc 01       	movw	r26, r24
     ba6:	cb 01       	movw	r24, r22
     ba8:	82 0f       	add	r24, r18
     baa:	93 1f       	adc	r25, r19
     bac:	a1 1d       	adc	r26, r1
     bae:	b1 1d       	adc	r27, r1
     bb0:	80 93 3b 01 	sts	0x013B, r24
     bb4:	90 93 3c 01 	sts	0x013C, r25
     bb8:	a0 93 3d 01 	sts	0x013D, r26
     bbc:	b0 93 3e 01 	sts	0x013E, r27
			}
			
		//_sound_note_time = millis_get() + 1000;
			
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
     bc0:	50 91 3f 01 	lds	r21, 0x013F
     bc4:	40 91 40 01 	lds	r20, 0x0140
     bc8:	25 2f       	mov	r18, r21
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	e4 2f       	mov	r30, r20
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	ec 5d       	subi	r30, 0xDC	; 220
     bd2:	fe 4f       	sbci	r31, 0xFE	; 254
     bd4:	80 81       	ld	r24, Z
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	28 17       	cp	r18, r24
     bdc:	39 07       	cpc	r19, r25
     bde:	d4 f0       	brlt	.+52     	; 0xc14 <_Z9isr_soundv+0x234>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     be0:	20 91 45 01 	lds	r18, 0x0145
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     be4:	92 2f       	mov	r25, r18
     be6:	9f 70       	andi	r25, 0x0F	; 15
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
     bea:	4f 5f       	subi	r20, 0xFF	; 255
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     bec:	44 30       	cpi	r20, 0x04	; 4
     bee:	09 f4       	brne	.+2      	; 0xbf2 <_Z9isr_soundv+0x212>
     bf0:	43 2f       	mov	r20, r19
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     bf2:	e4 2f       	mov	r30, r20
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	e0 5e       	subi	r30, 0xE0	; 224
     bf8:	fe 4f       	sbci	r31, 0xFE	; 254
     bfa:	80 81       	ld	r24, Z
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     bfc:	91 11       	cpse	r25, r1
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <_Z9isr_soundv+0x226>
     c00:	40 93 40 01 	sts	0x0140, r20
     c04:	04 c0       	rjmp	.+8      	; 0xc0e <_Z9isr_soundv+0x22e>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c06:	82 23       	and	r24, r18
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
     c08:	81 f3       	breq	.-32     	; 0xbea <_Z9isr_soundv+0x20a>
     c0a:	40 93 40 01 	sts	0x0140, r20
						done = 1; // in case there is no active alarm anymore, just breakout while
					}

				} // while
				
				sound_current_step = 0; // reset sound_current_step to zero to start the next sound	
     c0e:	10 92 3f 01 	sts	0x013F, r1
     c12:	03 c0       	rjmp	.+6      	; 0xc1a <_Z9isr_soundv+0x23a>
				
			}else{
				// set sound_current_step plus one
				sound_current_step++;
     c14:	5f 5f       	subi	r21, 0xFF	; 255
     c16:	50 93 3f 01 	sts	0x013F, r21
			}
	
				
		} //void isr_sound()
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	ef 90       	pop	r14
     c20:	08 95       	ret

00000c22 <_Z15isr_light_flashv>:
		
	void isr_light_flash(){
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
			
		// Do we need to go to the next flash?
		if(_flash_time != 0){ // is there already a flash ?
     c2a:	80 91 36 01 	lds	r24, 0x0136
     c2e:	90 91 37 01 	lds	r25, 0x0137
     c32:	a0 91 38 01 	lds	r26, 0x0138
     c36:	b0 91 39 01 	lds	r27, 0x0139
     c3a:	89 2b       	or	r24, r25
     c3c:	8a 2b       	or	r24, r26
     c3e:	8b 2b       	or	r24, r27
     c40:	09 f4       	brne	.+2      	; 0xc44 <_Z15isr_light_flashv+0x22>
     c42:	48 c0       	rjmp	.+144    	; 0xcd4 <_Z15isr_light_flashv+0xb2>
			if(millis_get() < _flash_time ){ // Do we need to stop the current note?
     c44:	14 dd       	rcall	.-1496   	; 0x66e <millis_get>
     c46:	00 91 36 01 	lds	r16, 0x0136
     c4a:	10 91 37 01 	lds	r17, 0x0137
     c4e:	20 91 38 01 	lds	r18, 0x0138
     c52:	30 91 39 01 	lds	r19, 0x0139
     c56:	60 17       	cp	r22, r16
     c58:	71 07       	cpc	r23, r17
     c5a:	82 07       	cpc	r24, r18
     c5c:	93 07       	cpc	r25, r19
     c5e:	08 f0       	brcs	.+2      	; 0xc62 <_Z15isr_light_flashv+0x40>
     c60:	39 c0       	rjmp	.+114    	; 0xcd4 <_Z15isr_light_flashv+0xb2>
     c62:	3b c0       	rjmp	.+118    	; 0xcda <_Z15isr_light_flashv+0xb8>
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
     c64:	80 91 3a 01 	lds	r24, 0x013A
     c68:	fe 01       	movw	r30, r28
     c6a:	98 e0       	ldi	r25, 0x08	; 8
     c6c:	89 9f       	mul	r24, r25
     c6e:	e0 0d       	add	r30, r0
     c70:	f1 1d       	adc	r31, r1
     c72:	11 24       	eor	r1, r1
     c74:	e4 58       	subi	r30, 0x84	; 132
     c76:	fb 4f       	sbci	r31, 0xFB	; 251
     c78:	64 91       	lpm	r22, Z
     c7a:	8c 2f       	mov	r24, r28
     c7c:	8d 5f       	subi	r24, 0xFD	; 253
     c7e:	84 d1       	rcall	.+776    	; 0xf88 <pca9635_set_led_pwm>
     c80:	21 96       	adiw	r28, 0x01	; 1
			}						
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
     c82:	c4 30       	cpi	r28, 0x04	; 4
     c84:	d1 05       	cpc	r29, r1
     c86:	71 f7       	brne	.-36     	; 0xc64 <_Z15isr_light_flashv+0x42>
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
		}
		//pca9635_set_led_pwm_flash(3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[0])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[1])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[2])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[3])) );
		
		_flash_time = millis_get() + pgm_read_word(&(flash_pattern[_flash_current_step].time));
     c88:	f2 dc       	rcall	.-1564   	; 0x66e <millis_get>
     c8a:	40 91 3a 01 	lds	r20, 0x013A
     c8e:	e4 2f       	mov	r30, r20
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	ee 0f       	add	r30, r30
     c94:	ff 1f       	adc	r31, r31
     c96:	ee 0f       	add	r30, r30
     c98:	ff 1f       	adc	r31, r31
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	e0 58       	subi	r30, 0x80	; 128
     ca0:	fb 4f       	sbci	r31, 0xFB	; 251
     ca2:	25 91       	lpm	r18, Z+
     ca4:	34 91       	lpm	r19, Z
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	82 0f       	add	r24, r18
     cac:	93 1f       	adc	r25, r19
     cae:	a1 1d       	adc	r26, r1
     cb0:	b1 1d       	adc	r27, r1
     cb2:	80 93 36 01 	sts	0x0136, r24
     cb6:	90 93 37 01 	sts	0x0137, r25
     cba:	a0 93 38 01 	sts	0x0138, r26
     cbe:	b0 93 39 01 	sts	0x0139, r27
			
		// is variable _flash_current_step equal to total steps?
		if(_flash_current_step == (flash_keys -1 )) {
     cc2:	4f 31       	cpi	r20, 0x1F	; 31
     cc4:	19 f4       	brne	.+6      	; 0xccc <_Z15isr_light_flashv+0xaa>
			//reset _flash_current_step to 0
			_flash_current_step = 0;				
     cc6:	10 92 3a 01 	sts	0x013A, r1
     cca:	07 c0       	rjmp	.+14     	; 0xcda <_Z15isr_light_flashv+0xb8>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
     ccc:	4f 5f       	subi	r20, 0xFF	; 255
     cce:	40 93 3a 01 	sts	0x013A, r20
     cd2:	03 c0       	rjmp	.+6      	; 0xcda <_Z15isr_light_flashv+0xb8>
			}
	
				
		} //void isr_sound()
		
	void isr_light_flash(){
     cd4:	c0 e0       	ldi	r28, 0x00	; 0
     cd6:	d0 e0       	ldi	r29, 0x00	; 0
     cd8:	c5 cf       	rjmp	.-118    	; 0xc64 <_Z15isr_light_flashv+0x42>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
		}
		
	} // END isr_light_flash
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <_Z14isr_light_iconv>:
		
		
		
		
		
	void isr_light_icon(){
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
		
		// Do we need to go to the next flash?
		if(_icon_time != 0){ // is there already a flash ?
     cec:	80 91 30 01 	lds	r24, 0x0130
     cf0:	90 91 31 01 	lds	r25, 0x0131
     cf4:	a0 91 32 01 	lds	r26, 0x0132
     cf8:	b0 91 33 01 	lds	r27, 0x0133
     cfc:	89 2b       	or	r24, r25
     cfe:	8a 2b       	or	r24, r26
     d00:	8b 2b       	or	r24, r27
     d02:	79 f0       	breq	.+30     	; 0xd22 <_Z14isr_light_iconv+0x3e>
			if(millis_get() < _icon_time ){ // Do we need to stop the current note?
     d04:	b4 dc       	rcall	.-1688   	; 0x66e <millis_get>
     d06:	00 91 30 01 	lds	r16, 0x0130
     d0a:	10 91 31 01 	lds	r17, 0x0131
     d0e:	20 91 32 01 	lds	r18, 0x0132
     d12:	30 91 33 01 	lds	r19, 0x0133
     d16:	60 17       	cp	r22, r16
     d18:	71 07       	cpc	r23, r17
     d1a:	82 07       	cpc	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	08 f4       	brcc	.+2      	; 0xd22 <_Z14isr_light_iconv+0x3e>
     d20:	81 c0       	rjmp	.+258    	; 0xe24 <_Z14isr_light_iconv+0x140>
	// step 2 = 250 - (2 x 25)  = 200
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
     d22:	20 91 34 01 	lds	r18, 0x0134
     d26:	22 23       	and	r18, r18
     d28:	19 f0       	breq	.+6      	; 0xd30 <_Z14isr_light_iconv+0x4c>
     d2a:	2b 30       	cpi	r18, 0x0B	; 11
     d2c:	21 f5       	brne	.+72     	; 0xd76 <_Z14isr_light_iconv+0x92>
     d2e:	12 c0       	rjmp	.+36     	; 0xd54 <_Z14isr_light_iconv+0x70>
		intensity = 255;
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 1000;
     d30:	9e dc       	rcall	.-1732   	; 0x66e <millis_get>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	88 51       	subi	r24, 0x18	; 24
     d38:	9c 4f       	sbci	r25, 0xFC	; 252
     d3a:	af 4f       	sbci	r26, 0xFF	; 255
     d3c:	bf 4f       	sbci	r27, 0xFF	; 255
     d3e:	80 93 30 01 	sts	0x0130, r24
     d42:	90 93 31 01 	sts	0x0131, r25
     d46:	a0 93 32 01 	sts	0x0132, r26
     d4a:	b0 93 33 01 	sts	0x0133, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     d4e:	cf ef       	ldi	r28, 0xFF	; 255
     d50:	d0 e0       	ldi	r29, 0x00	; 0
     d52:	25 c0       	rjmp	.+74     	; 0xd9e <_Z14isr_light_iconv+0xba>
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 1000;
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
     d54:	8c dc       	rcall	.-1768   	; 0x66e <millis_get>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	a1 1d       	adc	r26, r1
     d5e:	b1 1d       	adc	r27, r1
     d60:	80 93 30 01 	sts	0x0130, r24
     d64:	90 93 31 01 	sts	0x0131, r25
     d68:	a0 93 32 01 	sts	0x0132, r26
     d6c:	b0 93 33 01 	sts	0x0133, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     d70:	cf ef       	ldi	r28, 0xFF	; 255
     d72:	d0 e0       	ldi	r29, 0x00	; 0
     d74:	14 c0       	rjmp	.+40     	; 0xd9e <_Z14isr_light_iconv+0xba>
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
		}
			
	}else{
		intensity = (250 - (icon_current_step * 25)); // step 1 to 10, 
     d76:	37 ee       	ldi	r19, 0xE7	; 231
     d78:	32 03       	mulsu	r19, r18
     d7a:	e0 01       	movw	r28, r0
     d7c:	11 24       	eor	r1, r1
     d7e:	c6 50       	subi	r28, 0x06	; 6
     d80:	df 4f       	sbci	r29, 0xFF	; 255
		_icon_time = millis_get() + 30;
     d82:	75 dc       	rcall	.-1814   	; 0x66e <millis_get>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	4e 96       	adiw	r24, 0x1e	; 30
     d8a:	a1 1d       	adc	r26, r1
     d8c:	b1 1d       	adc	r27, r1
     d8e:	80 93 30 01 	sts	0x0130, r24
     d92:	90 93 31 01 	sts	0x0131, r25
     d96:	a0 93 32 01 	sts	0x0132, r26
     d9a:	b0 93 33 01 	sts	0x0133, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     d9e:	00 e0       	ldi	r16, 0x00	; 0
     da0:	10 e0       	ldi	r17, 0x00	; 0
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     da2:	80 91 35 01 	lds	r24, 0x0135
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	9c 01       	movw	r18, r24
     daa:	22 0f       	add	r18, r18
     dac:	33 1f       	adc	r19, r19
     dae:	82 0f       	add	r24, r18
     db0:	93 1f       	adc	r25, r19
     db2:	80 0f       	add	r24, r16
     db4:	91 1f       	adc	r25, r17
     db6:	fc 01       	movw	r30, r24
     db8:	e4 58       	subi	r30, 0x84	; 132
     dba:	fa 4f       	sbci	r31, 0xFA	; 250
     dbc:	44 91       	lpm	r20, Z
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     dbe:	fc 01       	movw	r30, r24
     dc0:	e8 59       	subi	r30, 0x98	; 152
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	84 91       	lpm	r24, Z
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     dc6:	4c 9f       	mul	r20, r28
     dc8:	90 01       	movw	r18, r0
     dca:	4d 9f       	mul	r20, r29
     dcc:	30 0d       	add	r19, r0
     dce:	11 24       	eor	r1, r1
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     dd0:	63 2f       	mov	r22, r19
     dd2:	da d0       	rcall	.+436    	; 0xf88 <pca9635_set_led_pwm>
     dd4:	0f 5f       	subi	r16, 0xFF	; 255
     dd6:	1f 4f       	sbci	r17, 0xFF	; 255
		_icon_time = millis_get() + 30;
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
     dd8:	03 30       	cpi	r16, 0x03	; 3
     dda:	11 05       	cpc	r17, r1
     ddc:	11 f7       	brne	.-60     	; 0xda2 <_Z14isr_light_iconv+0xbe>
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
	}
	

	// is variable _flash_current_step equal to total steps?
	if(icon_current_step == 11) {
     dde:	80 91 34 01 	lds	r24, 0x0134
     de2:	8b 30       	cpi	r24, 0x0B	; 11
     de4:	e1 f4       	brne	.+56     	; 0xe1e <_Z14isr_light_iconv+0x13a>
		//reset _flash_current_step to 0
		icon_current_step = 0;
     de6:	10 92 34 01 	sts	0x0134, r1
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     dea:	30 91 45 01 	lds	r19, 0x0145
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     dee:	23 2f       	mov	r18, r19
     df0:	2f 70       	andi	r18, 0x0F	; 15
     df2:	80 91 35 01 	lds	r24, 0x0135
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     df6:	40 e0       	ldi	r20, 0x00	; 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
     df8:	8f 5f       	subi	r24, 0xFF	; 255
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	09 f4       	brne	.+2      	; 0xe00 <_Z14isr_light_iconv+0x11c>
     dfe:	84 2f       	mov	r24, r20
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e00:	e8 2f       	mov	r30, r24
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	e0 5e       	subi	r30, 0xE0	; 224
     e06:	fe 4f       	sbci	r31, 0xFE	; 254
     e08:	90 81       	ld	r25, Z
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     e0a:	21 11       	cpse	r18, r1
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <_Z14isr_light_iconv+0x130>
     e0e:	80 93 35 01 	sts	0x0135, r24
     e12:	08 c0       	rjmp	.+16     	; 0xe24 <_Z14isr_light_iconv+0x140>
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e14:	93 23       	and	r25, r19
		//reset _flash_current_step to 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
     e16:	81 f3       	breq	.-32     	; 0xdf8 <_Z14isr_light_iconv+0x114>
     e18:	80 93 35 01 	sts	0x0135, r24
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <_Z14isr_light_iconv+0x140>
			} // while
			
			
		}else{
		// set _flash_current_step +1
		icon_current_step++;
     e1e:	8f 5f       	subi	r24, 0xFF	; 255
     e20:	80 93 34 01 	sts	0x0134, r24
	}
	
} // END isr_light_icon
     e24:	df 91       	pop	r29
     e26:	cf 91       	pop	r28
     e28:	1f 91       	pop	r17
     e2a:	0f 91       	pop	r16
     e2c:	08 95       	ret

00000e2e <__vector_7>:

	
	
	
	
ISR (TIMER2_COMPA_vect) {
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	2f 93       	push	r18
     e3e:	3f 93       	push	r19
     e40:	4f 93       	push	r20
     e42:	5f 93       	push	r21
     e44:	6f 93       	push	r22
     e46:	7f 93       	push	r23
     e48:	8f 93       	push	r24
     e4a:	9f 93       	push	r25
     e4c:	af 93       	push	r26
     e4e:	bf 93       	push	r27
     e50:	ef 93       	push	r30
     e52:	ff 93       	push	r31
//uart0_puts("I");

	// check if the alarm needs to be stopped
	if(millis_get() >= active_alarm_time || active_alarm_time == 0){
     e54:	0c dc       	rcall	.-2024   	; 0x66e <millis_get>
     e56:	00 91 41 01 	lds	r16, 0x0141
     e5a:	10 91 42 01 	lds	r17, 0x0142
     e5e:	20 91 43 01 	lds	r18, 0x0143
     e62:	30 91 44 01 	lds	r19, 0x0144
     e66:	60 17       	cp	r22, r16
     e68:	71 07       	cpc	r23, r17
     e6a:	82 07       	cpc	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	28 f4       	brcc	.+10     	; 0xe7a <__vector_7+0x4c>
     e70:	01 2b       	or	r16, r17
     e72:	02 2b       	or	r16, r18
     e74:	03 2b       	or	r16, r19
     e76:	09 f0       	breq	.+2      	; 0xe7a <__vector_7+0x4c>
     e78:	3c c0       	rjmp	.+120    	; 0xef2 <__vector_7+0xc4>
		// stop alarm
			
			//uart0_puts("STOPINT");			
			// stop timer 0
			millis_pause();
     e7a:	18 dc       	rcall	.-2000   	; 0x6ac <millis_pause>
			
			// stop sound
			noTone();
     e7c:	c0 d4       	rcall	.+2432   	; 0x17fe <noTone>
			
			// stop timer 2
			TIMSK2 &= ~_BV(OCIE2A);
     e7e:	e0 e7       	ldi	r30, 0x70	; 112
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	8d 7f       	andi	r24, 0xFD	; 253
     e86:	80 83       	st	Z, r24
			power_timer2_disable();
     e88:	e4 e6       	ldi	r30, 0x64	; 100
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	80 64       	ori	r24, 0x40	; 64
     e90:	80 83       	st	Z, r24
			
			// reset steps of sound, flash and icon
			sound_current_step		= 0;
     e92:	10 92 3f 01 	sts	0x013F, r1
			_sound_note_time		= 0;
     e96:	10 92 3b 01 	sts	0x013B, r1
     e9a:	10 92 3c 01 	sts	0x013C, r1
     e9e:	10 92 3d 01 	sts	0x013D, r1
     ea2:	10 92 3e 01 	sts	0x013E, r1
										
			_flash_current_step		= 0;
     ea6:	10 92 3a 01 	sts	0x013A, r1
			_flash_time				= 0;
     eaa:	10 92 36 01 	sts	0x0136, r1
     eae:	10 92 37 01 	sts	0x0137, r1
     eb2:	10 92 38 01 	sts	0x0138, r1
     eb6:	10 92 39 01 	sts	0x0139, r1
										
			icon_current_step		= 0;
     eba:	10 92 34 01 	sts	0x0134, r1
			_icon_time				= 0;
     ebe:	10 92 30 01 	sts	0x0130, r1
     ec2:	10 92 31 01 	sts	0x0131, r1
     ec6:	10 92 32 01 	sts	0x0132, r1
     eca:	10 92 33 01 	sts	0x0133, r1
										
			// empty alarm arrray
			active_alarm = 0x00; 
     ece:	10 92 45 01 	sts	0x0145, r1
			active_alarm_time = 0;
     ed2:	10 92 41 01 	sts	0x0141, r1
     ed6:	10 92 42 01 	sts	0x0142, r1
     eda:	10 92 43 01 	sts	0x0143, r1
     ede:	10 92 44 01 	sts	0x0144, r1
					
			// alle leds uit, pca in slaapstand
			pca9635_set_all_led_pwm(0); // dimm all leds to zero
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	62 d0       	rcall	.+196    	; 0xfaa <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1); // put pca9635 in sleep
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	70 d0       	rcall	.+224    	; 0xfca <pca9635_set_sleep>
			// automatisch slapen in loop.

			deep_sleep_ok = true;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	80 93 46 01 	sts	0x0146, r24
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <__vector_7+0xca>
					
	}else{
		// continue alarm
		isr_sound();
     ef2:	76 dd       	rcall	.-1300   	; 0x9e0 <_Z9isr_soundv>
	    isr_light_flash();
     ef4:	96 de       	rcall	.-724    	; 0xc22 <_Z15isr_light_flashv>
		isr_light_icon();		
     ef6:	f6 de       	rcall	.-532    	; 0xce4 <_Z14isr_light_iconv>
	}
						
}
     ef8:	ff 91       	pop	r31
     efa:	ef 91       	pop	r30
     efc:	bf 91       	pop	r27
     efe:	af 91       	pop	r26
     f00:	9f 91       	pop	r25
     f02:	8f 91       	pop	r24
     f04:	7f 91       	pop	r23
     f06:	6f 91       	pop	r22
     f08:	5f 91       	pop	r21
     f0a:	4f 91       	pop	r20
     f0c:	3f 91       	pop	r19
     f0e:	2f 91       	pop	r18
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <pca9635_init>:
	   I2C_write(value);	
  	}
			  
  	I2C_stop();
		  
}
     f1e:	80 e8       	ldi	r24, 0x80	; 128
     f20:	54 db       	rcall	.-2392   	; 0x5ca <I2C_start>
     f22:	80 e8       	ldi	r24, 0x80	; 128
     f24:	77 db       	rcall	.-2322   	; 0x614 <I2C_write>
     f26:	80 e8       	ldi	r24, 0x80	; 128
     f28:	75 db       	rcall	.-2326   	; 0x614 <I2C_write>
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	73 db       	rcall	.-2330   	; 0x614 <I2C_write>
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	71 db       	rcall	.-2334   	; 0x614 <I2C_write>
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	6f db       	rcall	.-2338   	; 0x614 <I2C_write>
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	6d db       	rcall	.-2342   	; 0x614 <I2C_write>
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	6b db       	rcall	.-2346   	; 0x614 <I2C_write>
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	69 db       	rcall	.-2350   	; 0x614 <I2C_write>
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	67 db       	rcall	.-2354   	; 0x614 <I2C_write>
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	65 db       	rcall	.-2358   	; 0x614 <I2C_write>
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	63 db       	rcall	.-2362   	; 0x614 <I2C_write>
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	61 db       	rcall	.-2366   	; 0x614 <I2C_write>
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	5f db       	rcall	.-2370   	; 0x614 <I2C_write>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	5d db       	rcall	.-2374   	; 0x614 <I2C_write>
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	5b db       	rcall	.-2378   	; 0x614 <I2C_write>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	59 db       	rcall	.-2382   	; 0x614 <I2C_write>
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	57 db       	rcall	.-2386   	; 0x614 <I2C_write>
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	55 db       	rcall	.-2390   	; 0x614 <I2C_write>
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	53 db       	rcall	.-2394   	; 0x614 <I2C_write>
     f6e:	8f ef       	ldi	r24, 0xFF	; 255
     f70:	51 db       	rcall	.-2398   	; 0x614 <I2C_write>
     f72:	80 e0       	ldi	r24, 0x00	; 0
     f74:	4f db       	rcall	.-2402   	; 0x614 <I2C_write>
     f76:	8a ea       	ldi	r24, 0xAA	; 170
     f78:	4d db       	rcall	.-2406   	; 0x614 <I2C_write>
     f7a:	8a ea       	ldi	r24, 0xAA	; 170
     f7c:	4b db       	rcall	.-2410   	; 0x614 <I2C_write>
     f7e:	8a ea       	ldi	r24, 0xAA	; 170
     f80:	49 db       	rcall	.-2414   	; 0x614 <I2C_write>
     f82:	8a ea       	ldi	r24, 0xAA	; 170
     f84:	47 db       	rcall	.-2418   	; 0x614 <I2C_write>
     f86:	63 cb       	rjmp	.-2362   	; 0x64e <I2C_stop>

00000f88 <pca9635_set_led_pwm>:
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	d8 2f       	mov	r29, r24
     f8e:	c6 2f       	mov	r28, r22
     f90:	80 e8       	ldi	r24, 0x80	; 128
     f92:	1b db       	rcall	.-2506   	; 0x5ca <I2C_start>
     f94:	8d 2f       	mov	r24, r29
     f96:	8e 5f       	subi	r24, 0xFE	; 254
     f98:	80 68       	ori	r24, 0x80	; 128
     f9a:	3c db       	rcall	.-2440   	; 0x614 <I2C_write>
     f9c:	8c 2f       	mov	r24, r28
     f9e:	3a db       	rcall	.-2444   	; 0x614 <I2C_write>
     fa0:	56 db       	rcall	.-2388   	; 0x64e <I2C_stop>
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <pca9635_set_all_led_pwm>:
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	d8 2f       	mov	r29, r24
     fb0:	80 e8       	ldi	r24, 0x80	; 128
     fb2:	0b db       	rcall	.-2538   	; 0x5ca <I2C_start>
     fb4:	82 e8       	ldi	r24, 0x82	; 130
     fb6:	2e db       	rcall	.-2468   	; 0x614 <I2C_write>
     fb8:	c0 e1       	ldi	r28, 0x10	; 16
     fba:	8d 2f       	mov	r24, r29
     fbc:	2b db       	rcall	.-2474   	; 0x614 <I2C_write>
     fbe:	c1 50       	subi	r28, 0x01	; 1
     fc0:	e1 f7       	brne	.-8      	; 0xfba <pca9635_set_all_led_pwm+0x10>
     fc2:	45 db       	rcall	.-2422   	; 0x64e <I2C_stop>
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <pca9635_set_sleep>:

/**
* Changes the oscillator mode between sleep (1) and active (0)
*/
uint8_t pca9635_set_sleep(uint8_t sleep)
{
     fca:	cf 93       	push	r28
     fcc:	c8 2f       	mov	r28, r24
	I2C_start((0x40<<1)+I2C_READ);
     fce:	81 e8       	ldi	r24, 0x81	; 129
     fd0:	fc da       	rcall	.-2568   	; 0x5ca <I2C_start>
	I2C_write(0x80); // autoincrement, mode 0,
     fd2:	80 e8       	ldi	r24, 0x80	; 128
     fd4:	1f db       	rcall	.-2498   	; 0x614 <I2C_write>
	// I2C_stop(); ???nodig?
	uint8_t data = I2C_read_ack();
     fd6:	30 db       	rcall	.-2464   	; 0x638 <I2C_read_ack>
	
	if(sleep){		// set or unset bit 4
     fd8:	cc 23       	and	r28, r28
     fda:	11 f0       	breq	.+4      	; 0xfe0 <pca9635_set_sleep+0x16>
		data |= (1<<4);
     fdc:	80 61       	ori	r24, 0x10	; 16
     fde:	01 c0       	rjmp	.+2      	; 0xfe2 <pca9635_set_sleep+0x18>
	}else{
		data &= ~(1<<4);
     fe0:	8f 7e       	andi	r24, 0xEF	; 239
	}
	
	uint8_t ack = I2C_write(data);  
     fe2:	18 db       	rcall	.-2512   	; 0x614 <I2C_write>
     fe4:	c8 2f       	mov	r28, r24
	I2C_stop();
     fe6:	33 db       	rcall	.-2458   	; 0x64e <I2C_stop>
	return ack;
}
     fe8:	8c 2f       	mov	r24, r28
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <_ZL15blockInterruptsv>:
	rf12_idle();
	else {
		rfmstate &= ~B11111000; // make sure everything is switched off (except bod, wkup, clk)
		rf12_xfer(rfmstate);
	}
	rxstate = TXIDLE;
     fee:	e8 98       	cbi	0x1d, 0	; 29
     ff0:	08 95       	ret

00000ff2 <_ZL15allowInterruptsv>:
     ff2:	e8 9a       	sbi	0x1d, 0	; 29
     ff4:	08 95       	ret

00000ff6 <_ZL9rf12_byteh>:
     ff6:	8e bd       	out	0x2e, r24	; 46
     ff8:	0d b4       	in	r0, 0x2d	; 45
     ffa:	07 fe       	sbrs	r0, 7
     ffc:	fd cf       	rjmp	.-6      	; 0xff8 <_ZL9rf12_byteh+0x2>
     ffe:	8e b5       	in	r24, 0x2e	; 46
    1000:	08 95       	ret

00001002 <_ZL9rf12_xferj>:
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	18 2f       	mov	r17, r24
    100a:	c9 2f       	mov	r28, r25
    100c:	f0 df       	rcall	.-32     	; 0xfee <_ZL15blockInterruptsv>
    100e:	2a 98       	cbi	0x05, 2	; 5
    1010:	8c 2f       	mov	r24, r28
    1012:	f1 df       	rcall	.-30     	; 0xff6 <_ZL9rf12_byteh>
    1014:	d8 2f       	mov	r29, r24
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	c8 2f       	mov	r28, r24
    101a:	81 2f       	mov	r24, r17
    101c:	ec df       	rcall	.-40     	; 0xff6 <_ZL9rf12_byteh>
    101e:	c8 2b       	or	r28, r24
    1020:	2a 9a       	sbi	0x05, 2	; 5
    1022:	e7 df       	rcall	.-50     	; 0xff2 <_ZL15allowInterruptsv>
    1024:	8c 2f       	mov	r24, r28
    1026:	9d 2f       	mov	r25, r29
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	1f 91       	pop	r17
    102e:	08 95       	ret

00001030 <_ZL9rf12_idlev>:
    1030:	80 91 9b 01 	lds	r24, 0x019B
    1034:	90 91 9c 01 	lds	r25, 0x019C
    1038:	8f 70       	andi	r24, 0x0F	; 15
    103a:	90 93 9c 01 	sts	0x019C, r25
    103e:	80 93 9b 01 	sts	0x019B, r24
    1042:	80 91 9b 01 	lds	r24, 0x019B
    1046:	90 91 9c 01 	lds	r25, 0x019C
    104a:	88 60       	ori	r24, 0x08	; 8
    104c:	90 93 9c 01 	sts	0x019C, r25
    1050:	80 93 9b 01 	sts	0x019B, r24
    1054:	80 91 9b 01 	lds	r24, 0x019B
    1058:	90 91 9c 01 	lds	r25, 0x019C
    105c:	d2 cf       	rjmp	.-92     	; 0x1002 <_ZL9rf12_xferj>

0000105e <_Z12rf12_spiInitv>:
    105e:	84 b1       	in	r24, 0x04	; 4
    1060:	8c 62       	ori	r24, 0x2C	; 44
    1062:	84 b9       	out	0x04, r24	; 4
    1064:	2a 9a       	sbi	0x05, 2	; 5
    1066:	24 98       	cbi	0x04, 4	; 4
    1068:	80 e5       	ldi	r24, 0x50	; 80
    106a:	8c bd       	out	0x2c, r24	; 44
    106c:	8d b5       	in	r24, 0x2d	; 45
    106e:	81 60       	ori	r24, 0x01	; 1
    1070:	8d bd       	out	0x2d, r24	; 45
    1072:	52 98       	cbi	0x0a, 2	; 10
    1074:	5a 9a       	sbi	0x0b, 2	; 11
    1076:	08 95       	ret

00001078 <_Z13rf12_recvDonev>:
    1078:	80 91 9d 01 	lds	r24, 0x019D
    107c:	87 30       	cpi	r24, 0x07	; 7
    107e:	09 f0       	breq	.+2      	; 0x1082 <_Z13rf12_recvDonev+0xa>
    1080:	51 c0       	rjmp	.+162    	; 0x1124 <_Z13rf12_recvDonev+0xac>
    1082:	80 91 a0 01 	lds	r24, 0x01A0
    1086:	88 23       	and	r24, r24
    1088:	a1 f0       	breq	.+40     	; 0x10b2 <_Z13rf12_recvDonev+0x3a>
    108a:	90 91 9e 01 	lds	r25, 0x019E
    108e:	98 17       	cp	r25, r24
    1090:	28 f4       	brcc	.+10     	; 0x109c <_Z13rf12_recvDonev+0x24>
    1092:	80 91 9e 01 	lds	r24, 0x019E
    1096:	87 34       	cpi	r24, 0x47	; 71
    1098:	08 f4       	brcc	.+2      	; 0x109c <_Z13rf12_recvDonev+0x24>
    109a:	44 c0       	rjmp	.+136    	; 0x1124 <_Z13rf12_recvDonev+0xac>
    109c:	84 e0       	ldi	r24, 0x04	; 4
    109e:	80 93 9d 01 	sts	0x019D, r24
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	90 93 95 01 	sts	0x0195, r25
    10aa:	80 93 94 01 	sts	0x0194, r24
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	08 95       	ret
    10b2:	20 91 9e 01 	lds	r18, 0x019E
    10b6:	80 91 4f 01 	lds	r24, 0x014F
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	05 96       	adiw	r24, 0x05	; 5
    10c0:	28 17       	cp	r18, r24
    10c2:	39 07       	cpc	r19, r25
    10c4:	24 f4       	brge	.+8      	; 0x10ce <_Z13rf12_recvDonev+0x56>
    10c6:	80 91 9e 01 	lds	r24, 0x019E
    10ca:	87 34       	cpi	r24, 0x47	; 71
    10cc:	58 f1       	brcs	.+86     	; 0x1124 <_Z13rf12_recvDonev+0xac>
    10ce:	84 e0       	ldi	r24, 0x04	; 4
    10d0:	80 93 9d 01 	sts	0x019D, r24
    10d4:	80 91 4f 01 	lds	r24, 0x014F
    10d8:	83 34       	cpi	r24, 0x43	; 67
    10da:	30 f0       	brcs	.+12     	; 0x10e8 <_Z13rf12_recvDonev+0x70>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	90 93 95 01 	sts	0x0195, r25
    10e4:	80 93 94 01 	sts	0x0194, r24
    10e8:	80 91 4e 01 	lds	r24, 0x014E
    10ec:	86 ff       	sbrs	r24, 6
    10ee:	0b c0       	rjmp	.+22     	; 0x1106 <_Z13rf12_recvDonev+0x8e>
    10f0:	80 91 a1 01 	lds	r24, 0x01A1
    10f4:	98 2f       	mov	r25, r24
    10f6:	9f 71       	andi	r25, 0x1F	; 31
    10f8:	9f 31       	cpi	r25, 0x1F	; 31
    10fa:	29 f0       	breq	.+10     	; 0x1106 <_Z13rf12_recvDonev+0x8e>
    10fc:	90 91 4e 01 	lds	r25, 0x014E
    1100:	89 27       	eor	r24, r25
    1102:	8f 71       	andi	r24, 0x1F	; 31
    1104:	79 f4       	brne	.+30     	; 0x1124 <_Z13rf12_recvDonev+0xac>
    1106:	80 91 94 01 	lds	r24, 0x0194
    110a:	90 91 95 01 	lds	r25, 0x0195
    110e:	89 2b       	or	r24, r25
    1110:	09 f0       	breq	.+2      	; 0x1114 <_Z13rf12_recvDonev+0x9c>
    1112:	55 c0       	rjmp	.+170    	; 0x11be <_Z13rf12_recvDonev+0x146>
    1114:	e0 91 47 01 	lds	r30, 0x0147
    1118:	f0 91 48 01 	lds	r31, 0x0148
    111c:	30 97       	sbiw	r30, 0x00	; 0
    111e:	09 f0       	breq	.+2      	; 0x1122 <_Z13rf12_recvDonev+0xaa>
    1120:	4a c0       	rjmp	.+148    	; 0x11b6 <_Z13rf12_recvDonev+0x13e>
    1122:	4d c0       	rjmp	.+154    	; 0x11be <_Z13rf12_recvDonev+0x146>
    1124:	80 91 9d 01 	lds	r24, 0x019D
    1128:	84 30       	cpi	r24, 0x04	; 4
    112a:	09 f0       	breq	.+2      	; 0x112e <_Z13rf12_recvDonev+0xb6>
    112c:	42 c0       	rjmp	.+132    	; 0x11b2 <_Z13rf12_recvDonev+0x13a>
    112e:	10 92 4f 01 	sts	0x014F, r1
    1132:	10 92 9e 01 	sts	0x019E, r1
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	9f ef       	ldi	r25, 0xFF	; 255
    113a:	90 93 95 01 	sts	0x0195, r25
    113e:	80 93 94 01 	sts	0x0194, r24
    1142:	20 91 9f 01 	lds	r18, 0x019F
    1146:	22 23       	and	r18, r18
    1148:	d9 f0       	breq	.+54     	; 0x1180 <_Z13rf12_recvDonev+0x108>
    114a:	82 27       	eor	r24, r18
    114c:	28 2f       	mov	r18, r24
    114e:	22 95       	swap	r18
    1150:	28 27       	eor	r18, r24
    1152:	02 2e       	mov	r0, r18
    1154:	26 95       	lsr	r18
    1156:	26 95       	lsr	r18
    1158:	20 25       	eor	r18, r0
    115a:	02 2e       	mov	r0, r18
    115c:	26 95       	lsr	r18
    115e:	20 25       	eor	r18, r0
    1160:	27 70       	andi	r18, 0x07	; 7
    1162:	08 2e       	mov	r0, r24
    1164:	89 2f       	mov	r24, r25
    1166:	26 95       	lsr	r18
    1168:	07 94       	ror	r0
    116a:	27 95       	ror	r18
    116c:	90 2d       	mov	r25, r0
    116e:	82 27       	eor	r24, r18
    1170:	06 94       	lsr	r0
    1172:	27 95       	ror	r18
    1174:	90 25       	eor	r25, r0
    1176:	82 27       	eor	r24, r18
    1178:	90 93 95 01 	sts	0x0195, r25
    117c:	80 93 94 01 	sts	0x0194, r24
    1180:	87 e0       	ldi	r24, 0x07	; 7
    1182:	80 93 9d 01 	sts	0x019D, r24
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	80 93 97 01 	sts	0x0197, r24
    118c:	83 ea       	ldi	r24, 0xA3	; 163
    118e:	94 e9       	ldi	r25, 0x94	; 148
    1190:	38 df       	rcall	.-400    	; 0x1002 <_ZL9rf12_xferj>
    1192:	80 91 9b 01 	lds	r24, 0x019B
    1196:	90 91 9c 01 	lds	r25, 0x019C
    119a:	88 6d       	ori	r24, 0xD8	; 216
    119c:	90 93 9c 01 	sts	0x019C, r25
    11a0:	80 93 9b 01 	sts	0x019B, r24
    11a4:	80 91 9b 01 	lds	r24, 0x019B
    11a8:	90 91 9c 01 	lds	r25, 0x019C
    11ac:	2a df       	rcall	.-428    	; 0x1002 <_ZL9rf12_xferj>
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	08 95       	ret
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	08 95       	ret
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	09 95       	icall
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	08 95       	ret
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	9f ef       	ldi	r25, 0xFF	; 255
    11c2:	dc 01       	movw	r26, r24
    11c4:	80 93 49 01 	sts	0x0149, r24
    11c8:	90 93 4a 01 	sts	0x014A, r25
    11cc:	a0 93 4b 01 	sts	0x014B, r26
    11d0:	b0 93 4c 01 	sts	0x014C, r27
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	08 95       	ret

000011d8 <_Z15rf12_setBitrateh>:
    11d8:	cf 92       	push	r12
    11da:	df 92       	push	r13
    11dc:	ef 92       	push	r14
    11de:	ff 92       	push	r15
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	cf 93       	push	r28
    11e6:	c8 2f       	mov	r28, r24
    11e8:	08 2f       	mov	r16, r24
    11ea:	10 e0       	ldi	r17, 0x00	; 0
    11ec:	c8 01       	movw	r24, r16
    11ee:	96 6c       	ori	r25, 0xC6	; 198
    11f0:	08 df       	rcall	.-496    	; 0x1002 <_ZL9rf12_xferj>
    11f2:	cf 77       	andi	r28, 0x7F	; 127
    11f4:	2c 2f       	mov	r18, r28
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	2f 5f       	subi	r18, 0xFF	; 255
    11fa:	3f 4f       	sbci	r19, 0xFF	; 255
    11fc:	44 27       	eor	r20, r20
    11fe:	37 fd       	sbrc	r19, 7
    1200:	40 95       	com	r20
    1202:	54 2f       	mov	r21, r20
    1204:	6b ef       	ldi	r22, 0xFB	; 251
    1206:	72 e4       	ldi	r23, 0x42	; 66
    1208:	85 e0       	ldi	r24, 0x05	; 5
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	1a d4       	rcall	.+2100   	; 0x1a42 <__udivmodsi4>
    120e:	69 01       	movw	r12, r18
    1210:	7a 01       	movw	r14, r20
    1212:	c8 01       	movw	r24, r16
    1214:	88 0f       	add	r24, r24
    1216:	89 2f       	mov	r24, r25
    1218:	88 1f       	adc	r24, r24
    121a:	99 0b       	sbc	r25, r25
    121c:	8c 01       	movw	r16, r24
    121e:	00 0f       	add	r16, r16
    1220:	11 1f       	adc	r17, r17
    1222:	00 0f       	add	r16, r16
    1224:	11 1f       	adc	r17, r17
    1226:	00 0f       	add	r16, r16
    1228:	11 1f       	adc	r17, r17
    122a:	08 1b       	sub	r16, r24
    122c:	19 0b       	sbc	r17, r25
    122e:	0f 5f       	subi	r16, 0xFF	; 255
    1230:	1f 4f       	sbci	r17, 0xFF	; 255
    1232:	98 01       	movw	r18, r16
    1234:	44 27       	eor	r20, r20
    1236:	37 fd       	sbrc	r19, 7
    1238:	40 95       	com	r20
    123a:	54 2f       	mov	r21, r20
    123c:	c7 01       	movw	r24, r14
    123e:	b6 01       	movw	r22, r12
    1240:	00 d4       	rcall	.+2048   	; 0x1a42 <__udivmodsi4>
    1242:	da 01       	movw	r26, r20
    1244:	c9 01       	movw	r24, r18
    1246:	68 94       	set
    1248:	12 f8       	bld	r1, 2
    124a:	b6 95       	lsr	r27
    124c:	a7 95       	ror	r26
    124e:	97 95       	ror	r25
    1250:	87 95       	ror	r24
    1252:	16 94       	lsr	r1
    1254:	d1 f7       	brne	.-12     	; 0x124a <_Z15rf12_setBitrateh+0x72>
    1256:	bc 01       	movw	r22, r24
    1258:	cd 01       	movw	r24, r26
    125a:	6d 57       	subi	r22, 0x7D	; 125
    125c:	7c 4f       	sbci	r23, 0xFC	; 252
    125e:	8f 4f       	sbci	r24, 0xFF	; 255
    1260:	9f 4f       	sbci	r25, 0xFF	; 255
    1262:	24 e8       	ldi	r18, 0x84	; 132
    1264:	33 e0       	ldi	r19, 0x03	; 3
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	eb d3       	rcall	.+2006   	; 0x1a42 <__udivmodsi4>
    126c:	20 93 96 01 	sts	0x0196, r18
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	ff 90       	pop	r15
    1278:	ef 90       	pop	r14
    127a:	df 90       	pop	r13
    127c:	cf 90       	pop	r12
    127e:	08 95       	ret

00001280 <_Z19rf12_setFixedLengthh>:
    1280:	81 11       	cpse	r24, r1
    1282:	03 c0       	rjmp	.+6      	; 0x128a <_Z19rf12_setFixedLengthh+0xa>
    1284:	10 92 a0 01 	sts	0x01A0, r1
    1288:	08 95       	ret
    128a:	8f 5f       	subi	r24, 0xFF	; 255
    128c:	80 93 a0 01 	sts	0x01A0, r24
    1290:	08 95       	ret

00001292 <_Z14rf12_sendStarth>:
    1292:	86 fd       	sbrc	r24, 6
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <_Z14rf12_sendStarth+0xe>
    1296:	80 7e       	andi	r24, 0xE0	; 224
    1298:	90 91 a1 01 	lds	r25, 0x01A1
    129c:	9f 71       	andi	r25, 0x1F	; 31
    129e:	89 0f       	add	r24, r25
    12a0:	80 93 4e 01 	sts	0x014E, r24
    12a4:	e0 91 47 01 	lds	r30, 0x0147
    12a8:	f0 91 48 01 	lds	r31, 0x0148
    12ac:	30 97       	sbiw	r30, 0x00	; 0
    12ae:	11 f0       	breq	.+4      	; 0x12b4 <_Z14rf12_sendStarth+0x22>
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	09 95       	icall
    12b4:	8f ef       	ldi	r24, 0xFF	; 255
    12b6:	9f ef       	ldi	r25, 0xFF	; 255
    12b8:	90 93 95 01 	sts	0x0195, r25
    12bc:	80 93 94 01 	sts	0x0194, r24
    12c0:	80 91 94 01 	lds	r24, 0x0194
    12c4:	90 91 95 01 	lds	r25, 0x0195
    12c8:	20 91 9f 01 	lds	r18, 0x019F
    12cc:	82 27       	eor	r24, r18
    12ce:	28 2f       	mov	r18, r24
    12d0:	22 95       	swap	r18
    12d2:	28 27       	eor	r18, r24
    12d4:	02 2e       	mov	r0, r18
    12d6:	26 95       	lsr	r18
    12d8:	26 95       	lsr	r18
    12da:	20 25       	eor	r18, r0
    12dc:	02 2e       	mov	r0, r18
    12de:	26 95       	lsr	r18
    12e0:	20 25       	eor	r18, r0
    12e2:	27 70       	andi	r18, 0x07	; 7
    12e4:	08 2e       	mov	r0, r24
    12e6:	89 2f       	mov	r24, r25
    12e8:	26 95       	lsr	r18
    12ea:	07 94       	ror	r0
    12ec:	27 95       	ror	r18
    12ee:	90 2d       	mov	r25, r0
    12f0:	82 27       	eor	r24, r18
    12f2:	06 94       	lsr	r0
    12f4:	27 95       	ror	r18
    12f6:	90 25       	eor	r25, r0
    12f8:	82 27       	eor	r24, r18
    12fa:	90 93 95 01 	sts	0x0195, r25
    12fe:	80 93 94 01 	sts	0x0194, r24
    1302:	88 e0       	ldi	r24, 0x08	; 8
    1304:	80 93 9d 01 	sts	0x019D, r24
    1308:	80 91 9b 01 	lds	r24, 0x019B
    130c:	90 91 9c 01 	lds	r25, 0x019C
    1310:	88 63       	ori	r24, 0x38	; 56
    1312:	90 93 9c 01 	sts	0x019C, r25
    1316:	80 93 9b 01 	sts	0x019B, r24
    131a:	80 91 9b 01 	lds	r24, 0x019B
    131e:	90 91 9c 01 	lds	r25, 0x019C
    1322:	6f ce       	rjmp	.-802    	; 0x1002 <_ZL9rf12_xferj>

00001324 <_Z14rf12_sendStarthPKvh>:
    1324:	cf 93       	push	r28
    1326:	c8 2f       	mov	r28, r24
    1328:	40 93 4f 01 	sts	0x014F, r20
    132c:	20 e5       	ldi	r18, 0x50	; 80
    132e:	31 e0       	ldi	r19, 0x01	; 1
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	82 2f       	mov	r24, r18
    1334:	93 2f       	mov	r25, r19
    1336:	bb d3       	rcall	.+1910   	; 0x1aae <memcpy>
    1338:	8c 2f       	mov	r24, r28
    133a:	ab df       	rcall	.-170    	; 0x1292 <_Z14rf12_sendStarth>
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <_Z13rf12_sendWaith>:
    1340:	44 e0       	ldi	r20, 0x04	; 4
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	5c e0       	ldi	r21, 0x0C	; 12
    1346:	16 c0       	rjmp	.+44     	; 0x1374 <_Z13rf12_sendWaith+0x34>
    1348:	88 23       	and	r24, r24
    134a:	a1 f0       	breq	.+40     	; 0x1374 <_Z13rf12_sendWaith+0x34>
    134c:	93 b7       	in	r25, 0x33	; 51
    134e:	91 7f       	andi	r25, 0xF1	; 241
    1350:	83 30       	cpi	r24, 0x03	; 3
    1352:	21 f0       	breq	.+8      	; 0x135c <_Z13rf12_sendWaith+0x1c>
    1354:	82 30       	cpi	r24, 0x02	; 2
    1356:	21 f4       	brne	.+8      	; 0x1360 <_Z13rf12_sendWaith+0x20>
    1358:	25 2f       	mov	r18, r21
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <_Z13rf12_sendWaith+0x22>
    135c:	24 2f       	mov	r18, r20
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <_Z13rf12_sendWaith+0x22>
    1360:	23 2f       	mov	r18, r19
    1362:	92 2b       	or	r25, r18
    1364:	93 bf       	out	0x33, r25	; 51
    1366:	93 b7       	in	r25, 0x33	; 51
    1368:	91 60       	ori	r25, 0x01	; 1
    136a:	93 bf       	out	0x33, r25	; 51
    136c:	88 95       	sleep
    136e:	93 b7       	in	r25, 0x33	; 51
    1370:	9e 7f       	andi	r25, 0xFE	; 254
    1372:	93 bf       	out	0x33, r25	; 51
    1374:	90 91 9d 01 	lds	r25, 0x019D
    1378:	94 30       	cpi	r25, 0x04	; 4
    137a:	31 f7       	brne	.-52     	; 0x1348 <_Z13rf12_sendWaith+0x8>
    137c:	08 95       	ret

0000137e <_Z21rf12_interruptcontrolv>:
    137e:	e8 9a       	sbi	0x1d, 0	; 29
    1380:	08 95       	ret

00001382 <_Z12rf12_restorehhh>:
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	d6 2f       	mov	r29, r22
    1388:	c4 2f       	mov	r28, r20
    138a:	80 93 a1 01 	sts	0x01A1, r24
    138e:	40 93 9f 01 	sts	0x019F, r20
    1392:	60 93 a2 01 	sts	0x01A2, r22
    1396:	f3 df       	rcall	.-26     	; 0x137e <_Z21rf12_interruptcontrolv>
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	72 df       	rcall	.-284    	; 0x1280 <_Z19rf12_setFixedLengthh>
    139c:	28 de       	rcall	.-944    	; 0xfee <_ZL15blockInterruptsv>
    139e:	25 e0       	ldi	r18, 0x05	; 5
    13a0:	32 e8       	ldi	r19, 0x82	; 130
    13a2:	30 93 9c 01 	sts	0x019C, r19
    13a6:	20 93 9b 01 	sts	0x019B, r18
    13aa:	80 91 9b 01 	lds	r24, 0x019B
    13ae:	90 91 9c 01 	lds	r25, 0x019C
    13b2:	27 de       	rcall	.-946    	; 0x1002 <_ZL9rf12_xferj>
    13b4:	20 e1       	ldi	r18, 0x10	; 16
    13b6:	d2 9f       	mul	r29, r18
    13b8:	c0 01       	movw	r24, r0
    13ba:	11 24       	eor	r1, r1
    13bc:	87 6c       	ori	r24, 0xC7	; 199
    13be:	90 68       	ori	r25, 0x80	; 128
    13c0:	20 de       	rcall	.-960    	; 0x1002 <_ZL9rf12_xferj>
    13c2:	80 e4       	ldi	r24, 0x40	; 64
    13c4:	96 ea       	ldi	r25, 0xA6	; 166
    13c6:	1d de       	rcall	.-966    	; 0x1002 <_ZL9rf12_xferj>
    13c8:	86 e0       	ldi	r24, 0x06	; 6
    13ca:	06 df       	rcall	.-500    	; 0x11d8 <_Z15rf12_setBitrateh>
    13cc:	82 ea       	ldi	r24, 0xA2	; 162
    13ce:	94 e9       	ldi	r25, 0x94	; 148
    13d0:	18 de       	rcall	.-976    	; 0x1002 <_ZL9rf12_xferj>
    13d2:	8c ea       	ldi	r24, 0xAC	; 172
    13d4:	92 ec       	ldi	r25, 0xC2	; 194
    13d6:	15 de       	rcall	.-982    	; 0x1002 <_ZL9rf12_xferj>
    13d8:	cc 23       	and	r28, r28
    13da:	41 f0       	breq	.+16     	; 0x13ec <_Z12rf12_restorehhh+0x6a>
    13dc:	83 e8       	ldi	r24, 0x83	; 131
    13de:	9a ec       	ldi	r25, 0xCA	; 202
    13e0:	10 de       	rcall	.-992    	; 0x1002 <_ZL9rf12_xferj>
    13e2:	8c 2f       	mov	r24, r28
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9e 6c       	ori	r25, 0xCE	; 206
    13e8:	0c de       	rcall	.-1000   	; 0x1002 <_ZL9rf12_xferj>
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <_Z12rf12_restorehhh+0x76>
    13ec:	8b e8       	ldi	r24, 0x8B	; 139
    13ee:	9a ec       	ldi	r25, 0xCA	; 202
    13f0:	08 de       	rcall	.-1008   	; 0x1002 <_ZL9rf12_xferj>
    13f2:	8d e2       	ldi	r24, 0x2D	; 45
    13f4:	9e ec       	ldi	r25, 0xCE	; 206
    13f6:	05 de       	rcall	.-1014   	; 0x1002 <_ZL9rf12_xferj>
    13f8:	83 e8       	ldi	r24, 0x83	; 131
    13fa:	94 ec       	ldi	r25, 0xC4	; 196
    13fc:	02 de       	rcall	.-1020   	; 0x1002 <_ZL9rf12_xferj>
    13fe:	80 e5       	ldi	r24, 0x50	; 80
    1400:	98 e9       	ldi	r25, 0x98	; 152
    1402:	ff dd       	rcall	.-1026   	; 0x1002 <_ZL9rf12_xferj>
    1404:	87 e7       	ldi	r24, 0x77	; 119
    1406:	9c ec       	ldi	r25, 0xCC	; 204
    1408:	fc dd       	rcall	.-1032   	; 0x1002 <_ZL9rf12_xferj>
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 ee       	ldi	r25, 0xE0	; 224
    140e:	f9 dd       	rcall	.-1038   	; 0x1002 <_ZL9rf12_xferj>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	98 ec       	ldi	r25, 0xC8	; 200
    1414:	f6 dd       	rcall	.-1044   	; 0x1002 <_ZL9rf12_xferj>
    1416:	89 e4       	ldi	r24, 0x49	; 73
    1418:	90 ec       	ldi	r25, 0xC0	; 192
    141a:	f3 dd       	rcall	.-1050   	; 0x1002 <_ZL9rf12_xferj>
    141c:	84 e0       	ldi	r24, 0x04	; 4
    141e:	80 93 9d 01 	sts	0x019D, r24
    1422:	e7 dd       	rcall	.-1074   	; 0xff2 <_ZL15allowInterruptsv>
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	08 95       	ret

0000142a <_Z15rf12_initializehhh>:
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	c8 2f       	mov	r28, r24
    1432:	d6 2f       	mov	r29, r22
    1434:	14 2f       	mov	r17, r20
    1436:	80 93 a1 01 	sts	0x01A1, r24
    143a:	40 93 9f 01 	sts	0x019F, r20
    143e:	60 93 a2 01 	sts	0x01A2, r22
    1442:	0d de       	rcall	.-998    	; 0x105e <_Z12rf12_spiInitv>
    1444:	9c df       	rcall	.-200    	; 0x137e <_Z21rf12_interruptcontrolv>
    1446:	82 e8       	ldi	r24, 0x82	; 130
    1448:	9a ec       	ldi	r25, 0xCA	; 202
    144a:	db dd       	rcall	.-1098   	; 0x1002 <_ZL9rf12_xferj>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	9e ef       	ldi	r25, 0xFE	; 254
    1450:	d8 dd       	rcall	.-1104   	; 0x1002 <_ZL9rf12_xferj>
    1452:	85 e0       	ldi	r24, 0x05	; 5
    1454:	80 93 9d 01 	sts	0x019D, r24
    1458:	83 b7       	in	r24, 0x33	; 51
    145a:	81 7f       	andi	r24, 0xF1	; 241
    145c:	83 bf       	out	0x33, r24	; 51
    145e:	80 91 9d 01 	lds	r24, 0x019D
    1462:	85 30       	cpi	r24, 0x05	; 5
    1464:	59 f4       	brne	.+22     	; 0x147c <_Z15rf12_initializehhh+0x52>
    1466:	93 b7       	in	r25, 0x33	; 51
    1468:	91 60       	ori	r25, 0x01	; 1
    146a:	93 bf       	out	0x33, r25	; 51
    146c:	88 95       	sleep
    146e:	93 b7       	in	r25, 0x33	; 51
    1470:	9e 7f       	andi	r25, 0xFE	; 254
    1472:	93 bf       	out	0x33, r25	; 51
    1474:	90 91 9d 01 	lds	r25, 0x019D
    1478:	95 30       	cpi	r25, 0x05	; 5
    147a:	a9 f3       	breq	.-22     	; 0x1466 <_Z15rf12_initializehhh+0x3c>
    147c:	41 2f       	mov	r20, r17
    147e:	6d 2f       	mov	r22, r29
    1480:	8c 2f       	mov	r24, r28
    1482:	7f df       	rcall	.-258    	; 0x1382 <_Z12rf12_restorehhh>
    1484:	80 91 a1 01 	lds	r24, 0x01A1
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	08 95       	ret

00001490 <_Z16rf12_setWatchdogm>:
/// interrupt in the RFM12 module. Use rf12_wakeup() to check if the wakeup-interrupt
/// fired. This allows very deep sleep states (timer off) while still being able to wakeup
/// because of the external interrupt. The RFM12b wakeup-timer only needs about 1.5µA.
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
    1490:	cf 92       	push	r12
    1492:	df 92       	push	r13
    1494:	ef 92       	push	r14
    1496:	ff 92       	push	r15
    1498:	cf 93       	push	r28
    149a:	6b 01       	movw	r12, r22
    149c:	7c 01       	movw	r14, r24
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    149e:	8f ef       	ldi	r24, 0xFF	; 255
    14a0:	c8 16       	cp	r12, r24
    14a2:	d1 04       	cpc	r13, r1
    14a4:	e1 04       	cpc	r14, r1
    14a6:	f1 04       	cpc	r15, r1
    14a8:	79 f0       	breq	.+30     	; 0x14c8 <_Z16rf12_setWatchdogm+0x38>
    14aa:	70 f0       	brcs	.+28     	; 0x14c8 <_Z16rf12_setWatchdogm+0x38>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    14ac:	c0 e0       	ldi	r28, 0x00	; 0
	while (m > 255) {
		r  += 1;
    14ae:	cf 5f       	subi	r28, 0xFF	; 255
		m >>= 1;
    14b0:	f6 94       	lsr	r15
    14b2:	e7 94       	ror	r14
    14b4:	d7 94       	ror	r13
    14b6:	c7 94       	ror	r12
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    14b8:	8f ef       	ldi	r24, 0xFF	; 255
    14ba:	c8 16       	cp	r12, r24
    14bc:	d1 04       	cpc	r13, r1
    14be:	e1 04       	cpc	r14, r1
    14c0:	f1 04       	cpc	r15, r1
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <_Z16rf12_setWatchdogm+0x36>
    14c4:	a0 f7       	brcc	.-24     	; 0x14ae <_Z16rf12_setWatchdogm+0x1e>
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <_Z16rf12_setWatchdogm+0x3a>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    14c8:	c0 e0       	ldi	r28, 0x00	; 0
		m >>= 1;
	}
	
	// Disable old wakeup-timer if enabled
//	if (bitRead(rfmstate,1)) {
	if ((rfmstate>>1)&0x01){
    14ca:	80 91 9b 01 	lds	r24, 0x019B
    14ce:	90 91 9c 01 	lds	r25, 0x019C
    14d2:	81 ff       	sbrs	r24, 1
    14d4:	0e c0       	rjmp	.+28     	; 0x14f2 <_Z16rf12_setWatchdogm+0x62>
		//bitClear(rfmstate,1);
		rfmstate &= ~(1 << 1);
    14d6:	80 91 9b 01 	lds	r24, 0x019B
    14da:	90 91 9c 01 	lds	r25, 0x019C
    14de:	8d 7f       	andi	r24, 0xFD	; 253
    14e0:	90 93 9c 01 	sts	0x019C, r25
    14e4:	80 93 9b 01 	sts	0x019B, r24
		rf12_xfer(rfmstate);
    14e8:	80 91 9b 01 	lds	r24, 0x019B
    14ec:	90 91 9c 01 	lds	r25, 0x019C
    14f0:	88 dd       	rcall	.-1264   	; 0x1002 <_ZL9rf12_xferj>
	}
	
	// enable wakeup call if we have to
	if (m>0) {
    14f2:	c1 14       	cp	r12, r1
    14f4:	d1 04       	cpc	r13, r1
    14f6:	e1 04       	cpc	r14, r1
    14f8:	f1 04       	cpc	r15, r1
    14fa:	b1 f0       	breq	.+44     	; 0x1528 <_Z16rf12_setWatchdogm+0x98>
		// write time to wakeup-register
		rf12_xfer(RF_WAKEUP_TIMER | (r<<8) | m);
    14fc:	3c 2f       	mov	r19, r28
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	d7 01       	movw	r26, r14
    1502:	c6 01       	movw	r24, r12
    1504:	90 6e       	ori	r25, 0xE0	; 224
    1506:	82 2b       	or	r24, r18
    1508:	93 2b       	or	r25, r19
    150a:	7b dd       	rcall	.-1290   	; 0x1002 <_ZL9rf12_xferj>
		// enable wakeup
		//bitSet(rfmstate,1);
		rfmstate |= (1 << 1);
    150c:	80 91 9b 01 	lds	r24, 0x019B
    1510:	90 91 9c 01 	lds	r25, 0x019C
    1514:	82 60       	ori	r24, 0x02	; 2
    1516:	90 93 9c 01 	sts	0x019C, r25
    151a:	80 93 9b 01 	sts	0x019B, r24
		rf12_xfer(rfmstate);
    151e:	80 91 9b 01 	lds	r24, 0x019B
    1522:	90 91 9c 01 	lds	r25, 0x019C
    1526:	6d dd       	rcall	.-1318   	; 0x1002 <_ZL9rf12_xferj>
	}
}
    1528:	cf 91       	pop	r28
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	08 95       	ret

00001534 <__vector_1>:
	while (!bitRead(PINB, RFM_IRQ - 8))
	rf12_interrupt();
}
#else
*/
ISR(INT0_vect) {
    1534:	1f 92       	push	r1
    1536:	0f 92       	push	r0
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	0f 92       	push	r0
    153c:	11 24       	eor	r1, r1
    153e:	1f 93       	push	r17
    1540:	2f 93       	push	r18
    1542:	3f 93       	push	r19
    1544:	4f 93       	push	r20
    1546:	5f 93       	push	r21
    1548:	6f 93       	push	r22
    154a:	7f 93       	push	r23
    154c:	8f 93       	push	r24
    154e:	9f 93       	push	r25
    1550:	af 93       	push	r26
    1552:	bf 93       	push	r27
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	ef 93       	push	r30
    155a:	ff 93       	push	r31
/// Requests RFM12 state from RF module and reads back a waiting data byte if there is
/// any.
/// One of two commands accessing SPI, so interrupts disabled in here
/// @param *data Pointer to  byte where to write the received data to (if any)
static uint16_t rf12_xferState (uint8_t *data) {
	blockInterrupts();
    155c:	48 dd       	rcall	.-1392   	; 0xfee <_ZL15blockInterruptsv>

	// writing can take place at full speed, even 8 MHz works
	//bitClear(SS_PORT, cs_pin);
	PORT_RFM_CS &= ~(1<<BIT_RFM_CS); //clear CS
    155e:	2a 98       	cbi	0x05, 2	; 5
	uint16_t res = rf12_byte(0x00) << 8;
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	49 dd       	rcall	.-1390   	; 0xff6 <_ZL9rf12_byteh>
    1564:	d8 2f       	mov	r29, r24
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	c8 2f       	mov	r28, r24
	res |= rf12_byte(0x00);
    156a:	45 dd       	rcall	.-1398   	; 0xff6 <_ZL9rf12_byteh>
    156c:	c8 2b       	or	r28, r24
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
    156e:	dd 23       	and	r29, r29
    1570:	2c f4       	brge	.+10     	; 0x157c <__vector_1+0x48>
    1572:	80 91 9d 01 	lds	r24, 0x019D
    1576:	87 30       	cpi	r24, 0x07	; 7
    1578:	09 f4       	brne	.+2      	; 0x157c <__vector_1+0x48>
    157a:	0f c1       	rjmp	.+542    	; 0x179a <__vector_1+0x266>
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
		#endif
	}
	
	//bitSet(SS_PORT, cs_pin);
	PORT_RFM_CS |= (1 << BIT_RFM_CS); //  bitSet(SS_PORT, cs_pin);
    157c:	2a 9a       	sbi	0x05, 2	; 5

	allowInterrupts();
    157e:	39 dd       	rcall	.-1422   	; 0xff2 <_ZL15allowInterruptsv>
/// @details
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uint8_t in;
	state = rf12_xferState(&in);
    1580:	d0 93 9a 01 	sts	0x019A, r29
    1584:	c0 93 99 01 	sts	0x0199, r28

	// data received or byte needed for sending
	if (state & RF_FIFO_BIT) {
    1588:	20 91 99 01 	lds	r18, 0x0199
    158c:	30 91 9a 01 	lds	r19, 0x019A
    1590:	33 23       	and	r19, r19
    1592:	0c f0       	brlt	.+2      	; 0x1596 <__vector_1+0x62>
    1594:	e1 c0       	rjmp	.+450    	; 0x1758 <__vector_1+0x224>
		
		if (rxstate == TXRECV) {  // we are receiving
    1596:	80 91 9d 01 	lds	r24, 0x019D
    159a:	87 30       	cpi	r24, 0x07	; 7
    159c:	09 f0       	breq	.+2      	; 0x15a0 <__vector_1+0x6c>
    159e:	78 c0       	rjmp	.+240    	; 0x1690 <__vector_1+0x15c>

			if (rxfill == 0 && group != 0)
    15a0:	80 91 9e 01 	lds	r24, 0x019E
    15a4:	81 11       	cpse	r24, r1
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <__vector_1+0x7c>
    15a8:	80 91 9f 01 	lds	r24, 0x019F
    15ac:	81 11       	cpse	r24, r1
    15ae:	ff c0       	rjmp	.+510    	; 0x17ae <__vector_1+0x27a>
			rf12_buf[rxfill++] = group;

			rf12_buf[rxfill++] = in;
    15b0:	80 91 9e 01 	lds	r24, 0x019E
    15b4:	e8 2f       	mov	r30, r24
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	e3 5b       	subi	r30, 0xB3	; 179
    15ba:	fe 4f       	sbci	r31, 0xFE	; 254
    15bc:	10 83       	st	Z, r17
    15be:	8f 5f       	subi	r24, 0xFF	; 255
    15c0:	80 93 9e 01 	sts	0x019E, r24
			rf12_crc = _crc16_update(rf12_crc, in);
    15c4:	20 91 94 01 	lds	r18, 0x0194
    15c8:	30 91 95 01 	lds	r19, 0x0195
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    15cc:	21 27       	eor	r18, r17
    15ce:	12 2f       	mov	r17, r18
    15d0:	12 95       	swap	r17
    15d2:	12 27       	eor	r17, r18
    15d4:	01 2e       	mov	r0, r17
    15d6:	16 95       	lsr	r17
    15d8:	16 95       	lsr	r17
    15da:	10 25       	eor	r17, r0
    15dc:	01 2e       	mov	r0, r17
    15de:	16 95       	lsr	r17
    15e0:	10 25       	eor	r17, r0
    15e2:	17 70       	andi	r17, 0x07	; 7
    15e4:	02 2e       	mov	r0, r18
    15e6:	23 2f       	mov	r18, r19
    15e8:	16 95       	lsr	r17
    15ea:	07 94       	ror	r0
    15ec:	17 95       	ror	r17
    15ee:	30 2d       	mov	r19, r0
    15f0:	21 27       	eor	r18, r17
    15f2:	06 94       	lsr	r0
    15f4:	17 95       	ror	r17
    15f6:	30 25       	eor	r19, r0
    15f8:	21 27       	eor	r18, r17
    15fa:	30 93 95 01 	sts	0x0195, r19
    15fe:	20 93 94 01 	sts	0x0194, r18

			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
    1602:	e0 91 97 01 	lds	r30, 0x0197
    1606:	e3 30       	cpi	r30, 0x03	; 3
    1608:	18 f5       	brcc	.+70     	; 0x1650 <__vector_1+0x11c>
    160a:	80 91 9e 01 	lds	r24, 0x019E
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 97       	sbiw	r24, 0x02	; 2
    1612:	60 91 96 01 	lds	r22, 0x0196
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	01 d2       	rcall	.+1026   	; 0x1a1c <__divmodhi4>
    161a:	89 2b       	or	r24, r25
    161c:	09 f4       	brne	.+2      	; 0x1620 <__vector_1+0xec>
    161e:	d2 c0       	rjmp	.+420    	; 0x17c4 <__vector_1+0x290>
    1620:	17 c0       	rjmp	.+46     	; 0x1650 <__vector_1+0x11c>
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    1622:	f0 e0       	ldi	r31, 0x00	; 0
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
    1624:	e8 5d       	subi	r30, 0xD8	; 216
    1626:	fe 4f       	sbci	r31, 0xFE	; 254
				: (drssi_dec_tree[drssi] >> 4);
    1628:	80 81       	ld	r24, Z
    162a:	8f 70       	andi	r24, 0x0F	; 15
    162c:	06 c0       	rjmp	.+12     	; 0x163a <__vector_1+0x106>
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	e8 5d       	subi	r30, 0xD8	; 216
    1632:	fe 4f       	sbci	r31, 0xFE	; 254
    1634:	80 81       	ld	r24, Z
    1636:	82 95       	swap	r24
    1638:	8f 70       	andi	r24, 0x0F	; 15
    163a:	80 93 97 01 	sts	0x0197, r24
				if ( drssi < 3 ) {     // not yet final destination, set new threshold
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	38 f4       	brcc	.+14     	; 0x1650 <__vector_1+0x11c>
					rf12_xfer(RF_RECV_CONTROL | drssi*2+1);
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	01 96       	adiw	r24, 0x01	; 1
    164a:	80 6a       	ori	r24, 0xA0	; 160
    164c:	94 69       	ori	r25, 0x94	; 148
    164e:	d9 dc       	rcall	.-1614   	; 0x1002 <_ZL9rf12_xferj>
				}
			}

			// check if we got all the bytes (or maximum packet length was reached)
			if (fixedLength) {
    1650:	80 91 a0 01 	lds	r24, 0x01A0
    1654:	88 23       	and	r24, r24
    1656:	59 f0       	breq	.+22     	; 0x166e <__vector_1+0x13a>
				if (rxfill >= fixedLength || rxfill >= RF_MAX) {
    1658:	90 91 9e 01 	lds	r25, 0x019E
    165c:	98 17       	cp	r25, r24
    165e:	28 f4       	brcc	.+10     	; 0x166a <__vector_1+0x136>
    1660:	80 91 9e 01 	lds	r24, 0x019E
    1664:	87 34       	cpi	r24, 0x47	; 71
    1666:	08 f4       	brcc	.+2      	; 0x166a <__vector_1+0x136>
    1668:	77 c0       	rjmp	.+238    	; 0x1758 <__vector_1+0x224>
					rf12_idle();
    166a:	e2 dc       	rcall	.-1596   	; 0x1030 <_ZL9rf12_idlev>
    166c:	75 c0       	rjmp	.+234    	; 0x1758 <__vector_1+0x224>
				}
				} else if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX) {
    166e:	20 91 9e 01 	lds	r18, 0x019E
    1672:	80 91 4f 01 	lds	r24, 0x014F
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	05 96       	adiw	r24, 0x05	; 5
    167c:	28 17       	cp	r18, r24
    167e:	39 07       	cpc	r19, r25
    1680:	2c f4       	brge	.+10     	; 0x168c <__vector_1+0x158>
    1682:	80 91 9e 01 	lds	r24, 0x019E
    1686:	87 34       	cpi	r24, 0x47	; 71
    1688:	08 f4       	brcc	.+2      	; 0x168c <__vector_1+0x158>
    168a:	66 c0       	rjmp	.+204    	; 0x1758 <__vector_1+0x224>
				rf12_idle();
    168c:	d1 dc       	rcall	.-1630   	; 0x1030 <_ZL9rf12_idlev>
    168e:	64 c0       	rjmp	.+200    	; 0x1758 <__vector_1+0x224>
			}
			} else {                  // we are sending
			uint8_t out;

			if (rxstate < 0) {
    1690:	80 91 9d 01 	lds	r24, 0x019D
    1694:	88 23       	and	r24, r24
    1696:	0c f0       	brlt	.+2      	; 0x169a <__vector_1+0x166>
    1698:	2f c0       	rjmp	.+94     	; 0x16f8 <__vector_1+0x1c4>
				uint8_t pos = 3 + rf12_len + rxstate++;
    169a:	e0 91 4f 01 	lds	r30, 0x014F
    169e:	80 91 9d 01 	lds	r24, 0x019D
    16a2:	98 2f       	mov	r25, r24
    16a4:	9f 5f       	subi	r25, 0xFF	; 255
    16a6:	90 93 9d 01 	sts	0x019D, r25
    16aa:	ed 5f       	subi	r30, 0xFD	; 253
    16ac:	8e 0f       	add	r24, r30
				out = rf12_buf[pos];
    16ae:	e8 2f       	mov	r30, r24
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	e3 5b       	subi	r30, 0xB3	; 179
    16b4:	fe 4f       	sbci	r31, 0xFE	; 254
    16b6:	80 81       	ld	r24, Z
				rf12_crc = _crc16_update(rf12_crc, out);
    16b8:	20 91 94 01 	lds	r18, 0x0194
    16bc:	30 91 95 01 	lds	r19, 0x0195
    16c0:	28 27       	eor	r18, r24
    16c2:	92 2f       	mov	r25, r18
    16c4:	92 95       	swap	r25
    16c6:	92 27       	eor	r25, r18
    16c8:	09 2e       	mov	r0, r25
    16ca:	96 95       	lsr	r25
    16cc:	96 95       	lsr	r25
    16ce:	90 25       	eor	r25, r0
    16d0:	09 2e       	mov	r0, r25
    16d2:	96 95       	lsr	r25
    16d4:	90 25       	eor	r25, r0
    16d6:	97 70       	andi	r25, 0x07	; 7
    16d8:	02 2e       	mov	r0, r18
    16da:	23 2f       	mov	r18, r19
    16dc:	96 95       	lsr	r25
    16de:	07 94       	ror	r0
    16e0:	97 95       	ror	r25
    16e2:	30 2d       	mov	r19, r0
    16e4:	29 27       	eor	r18, r25
    16e6:	06 94       	lsr	r0
    16e8:	97 95       	ror	r25
    16ea:	30 25       	eor	r19, r0
    16ec:	29 27       	eor	r18, r25
    16ee:	30 93 95 01 	sts	0x0195, r19
    16f2:	20 93 94 01 	sts	0x0194, r18
    16f6:	2d c0       	rjmp	.+90     	; 0x1752 <__vector_1+0x21e>
			} else
			switch (rxstate++) {
    16f8:	80 91 9d 01 	lds	r24, 0x019D
    16fc:	98 2f       	mov	r25, r24
    16fe:	9f 5f       	subi	r25, 0xFF	; 255
    1700:	90 93 9d 01 	sts	0x019D, r25
    1704:	83 30       	cpi	r24, 0x03	; 3
    1706:	09 f1       	breq	.+66     	; 0x174a <__vector_1+0x216>
    1708:	2c f4       	brge	.+10     	; 0x1714 <__vector_1+0x1e0>
    170a:	88 23       	and	r24, r24
    170c:	99 f0       	breq	.+38     	; 0x1734 <__vector_1+0x200>
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	f9 f4       	brne	.+62     	; 0x1750 <__vector_1+0x21c>
    1712:	15 c0       	rjmp	.+42     	; 0x173e <__vector_1+0x20a>
    1714:	8b 30       	cpi	r24, 0x0B	; 11
    1716:	19 f0       	breq	.+6      	; 0x171e <__vector_1+0x1ea>
    1718:	8c 30       	cpi	r24, 0x0C	; 12
    171a:	d1 f4       	brne	.+52     	; 0x1750 <__vector_1+0x21c>
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <__vector_1+0x1ee>
				case TXSYN1: out = 0x2D; break;
    171e:	8d e2       	ldi	r24, 0x2D	; 45
    1720:	18 c0       	rjmp	.+48     	; 0x1752 <__vector_1+0x21e>
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
    1722:	80 91 9f 01 	lds	r24, 0x019F
    1726:	20 91 4f 01 	lds	r18, 0x014F
    172a:	9e ef       	ldi	r25, 0xFE	; 254
    172c:	92 1b       	sub	r25, r18
    172e:	90 93 9d 01 	sts	0x019D, r25
    1732:	0f c0       	rjmp	.+30     	; 0x1752 <__vector_1+0x21e>
				case TXCRC1: out = rf12_crc; break;
    1734:	80 91 94 01 	lds	r24, 0x0194
    1738:	90 91 95 01 	lds	r25, 0x0195
    173c:	0a c0       	rjmp	.+20     	; 0x1752 <__vector_1+0x21e>
				case TXCRC2: out = rf12_crc >> 8; break;
    173e:	80 91 94 01 	lds	r24, 0x0194
    1742:	90 91 95 01 	lds	r25, 0x0195
    1746:	89 2f       	mov	r24, r25
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <__vector_1+0x21e>
				case TXDONE: rf12_idle(); // fall through
    174a:	72 dc       	rcall	.-1820   	; 0x1030 <_ZL9rf12_idlev>
				default:     out = 0xAA;
    174c:	8a ea       	ldi	r24, 0xAA	; 170
    174e:	01 c0       	rjmp	.+2      	; 0x1752 <__vector_1+0x21e>
    1750:	8a ea       	ldi	r24, 0xAA	; 170
			}

			rf12_xfer(RF_TXREG_WRITE | out);
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	98 6b       	ori	r25, 0xB8	; 184
    1756:	55 dc       	rcall	.-1878   	; 0x1002 <_ZL9rf12_xferj>
		}
	}
	
	// power-on reset
	if (state & RF_POR_BIT) {
    1758:	80 91 99 01 	lds	r24, 0x0199
    175c:	90 91 9a 01 	lds	r25, 0x019A
    1760:	96 ff       	sbrs	r25, 6
    1762:	03 c0       	rjmp	.+6      	; 0x176a <__vector_1+0x236>
		rxstate = POR_RECEIVED;
    1764:	86 e0       	ldi	r24, 0x06	; 6
    1766:	80 93 9d 01 	sts	0x019D, r24
	}

	// got wakeup call
	if (state & RF_WDG_BIT) {
    176a:	80 91 99 01 	lds	r24, 0x0199
    176e:	90 91 9a 01 	lds	r25, 0x019A
    1772:	94 ff       	sbrs	r25, 4
    1774:	07 c0       	rjmp	.+14     	; 0x1784 <__vector_1+0x250>
		rf12_setWatchdog(0);
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	cb 01       	movw	r24, r22
    177c:	89 de       	rcall	.-750    	; 0x1490 <_Z16rf12_setWatchdogm>
		rf12_gotwakeup = 1;
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	80 93 98 01 	sts	0x0198, r24
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
    1784:	80 91 99 01 	lds	r24, 0x0199
    1788:	90 91 9a 01 	lds	r25, 0x019A
    178c:	95 ff       	sbrs	r25, 5
    178e:	21 c0       	rjmp	.+66     	; 0x17d2 <__vector_1+0x29e>
		rf12_idle();
    1790:	4f dc       	rcall	.-1890   	; 0x1030 <_ZL9rf12_idlev>
		rxstate = TXIDLE;
    1792:	84 e0       	ldi	r24, 0x04	; 4
    1794:	80 93 9d 01 	sts	0x019D, r24
    1798:	1c c0       	rjmp	.+56     	; 0x17d2 <__vector_1+0x29e>
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
		// slow down to under 2.5 MHz
		#if F_CPU > 10000000
		//bitSet(SPCR, SPR0);
		SPCR |= (1 << SPR0); //  bitSet(SPCR, SPR0);
    179a:	8c b5       	in	r24, 0x2c	; 44
    179c:	81 60       	ori	r24, 0x01	; 1
    179e:	8c bd       	out	0x2c, r24	; 44
		#endif
		*data = rf12_byte(0x00);
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	29 dc       	rcall	.-1966   	; 0xff6 <_ZL9rf12_byteh>
    17a4:	18 2f       	mov	r17, r24
		#if F_CPU > 10000000
		//bitClear(SPCR, SPR0);
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
    17a6:	8c b5       	in	r24, 0x2c	; 44
    17a8:	8e 7f       	andi	r24, 0xFE	; 254
    17aa:	8c bd       	out	0x2c, r24	; 44
    17ac:	e7 ce       	rjmp	.-562    	; 0x157c <__vector_1+0x48>
	if (state & RF_FIFO_BIT) {
		
		if (rxstate == TXRECV) {  // we are receiving

			if (rxfill == 0 && group != 0)
			rf12_buf[rxfill++] = group;
    17ae:	90 91 9e 01 	lds	r25, 0x019E
    17b2:	e9 2f       	mov	r30, r25
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	e3 5b       	subi	r30, 0xB3	; 179
    17b8:	fe 4f       	sbci	r31, 0xFE	; 254
    17ba:	80 83       	st	Z, r24
    17bc:	9f 5f       	subi	r25, 0xFF	; 255
    17be:	90 93 9e 01 	sts	0x019E, r25
    17c2:	f6 ce       	rjmp	.-532    	; 0x15b0 <__vector_1+0x7c>
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    17c4:	80 91 99 01 	lds	r24, 0x0199
    17c8:	90 91 9a 01 	lds	r25, 0x019A
    17cc:	90 fd       	sbrc	r25, 0
    17ce:	29 cf       	rjmp	.-430    	; 0x1622 <__vector_1+0xee>
    17d0:	2e cf       	rjmp	.-420    	; 0x162e <__vector_1+0xfa>
#else
*/
ISR(INT0_vect) {
	//uart0_puts("I");
	rf12_interrupt();
}
    17d2:	ff 91       	pop	r31
    17d4:	ef 91       	pop	r30
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	bf 91       	pop	r27
    17dc:	af 91       	pop	r26
    17de:	9f 91       	pop	r25
    17e0:	8f 91       	pop	r24
    17e2:	7f 91       	pop	r23
    17e4:	6f 91       	pop	r22
    17e6:	5f 91       	pop	r21
    17e8:	4f 91       	pop	r20
    17ea:	3f 91       	pop	r19
    17ec:	2f 91       	pop	r18
    17ee:	1f 91       	pop	r17
    17f0:	0f 90       	pop	r0
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	0f 90       	pop	r0
    17f6:	1f 90       	pop	r1
    17f8:	18 95       	reti

000017fa <tone_init>:
#include <avr/io.h>

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume counsigned long _tAC_time;ntrol.

void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
    17fa:	21 9a       	sbi	0x04, 1	; 4
    17fc:	08 95       	ret

000017fe <noTone>:


	void noTone() {
	//	uart0_puts("STOP");
	//	TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
		 TCCR1B  &= ~(1<<0) | ~(1<<1) | ~(1<<2) ;        // No clock source (Timer/Counter stopped).
    17fe:	e1 e8       	ldi	r30, 0x81	; 129
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	80 83       	st	Z, r24
		 TCCR1A  = 0x00;       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
    1806:	10 92 80 00 	sts	0x0080, r1
		PORTB &= ~(1 << 1); // Set pin PB1 to LOW.
    180a:	29 98       	cbi	0x05, 1	; 5
    180c:	08 95       	ret

0000180e <tone>:
void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
	
}

void tone(unsigned long frequency, uint8_t volume) {
    180e:	cf 92       	push	r12
    1810:	df 92       	push	r13
    1812:	ef 92       	push	r14
    1814:	ff 92       	push	r15
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	6b 01       	movw	r12, r22
    181c:	7c 01       	movw	r14, r24
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
    181e:	61 15       	cp	r22, r1
    1820:	71 05       	cpc	r23, r1
    1822:	81 05       	cpc	r24, r1
    1824:	91 05       	cpc	r25, r1
    1826:	11 f0       	breq	.+4      	; 0x182c <tone+0x1e>
    1828:	41 11       	cpse	r20, r1
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <tone+0x22>
    182c:	e8 df       	rcall	.-48     	; 0x17fe <noTone>
    182e:	4d c0       	rjmp	.+154    	; 0x18ca <tone+0xbc>
    1830:	d4 2f       	mov	r29, r20
    1832:	4b 30       	cpi	r20, 0x0B	; 11
    1834:	08 f0       	brcs	.+2      	; 0x1838 <tone+0x2a>
    1836:	da e0       	ldi	r29, 0x0A	; 10
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
    1838:	60 e0       	ldi	r22, 0x00	; 0
    183a:	72 e1       	ldi	r23, 0x12	; 18
    183c:	8a e7       	ldi	r24, 0x7A	; 122
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	a7 01       	movw	r20, r14
    1842:	96 01       	movw	r18, r12
    1844:	fe d0       	rcall	.+508    	; 0x1a42 <__udivmodsi4>
    1846:	cc 24       	eor	r12, r12
    1848:	ca 94       	dec	r12
    184a:	dc 2c       	mov	r13, r12
    184c:	76 01       	movw	r14, r12
    184e:	c2 0e       	add	r12, r18
    1850:	d3 1e       	adc	r13, r19
    1852:	e4 1e       	adc	r14, r20
    1854:	f5 1e       	adc	r15, r21
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    1856:	c1 14       	cp	r12, r1
    1858:	d1 04       	cpc	r13, r1
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	e8 06       	cpc	r14, r24
    185e:	f1 04       	cpc	r15, r1
    1860:	58 f0       	brcs	.+22     	; 0x1878 <tone+0x6a>
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
    1862:	cd 2c       	mov	r12, r13
    1864:	de 2c       	mov	r13, r14
    1866:	ef 2c       	mov	r14, r15
    1868:	ff 24       	eor	r15, r15
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	c8 1a       	sub	r12, r24
    186e:	d1 08       	sbc	r13, r1
    1870:	e1 08       	sbc	r14, r1
    1872:	f1 08       	sbc	r15, r1
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    1874:	c4 e0       	ldi	r28, 0x04	; 4
    1876:	01 c0       	rjmp	.+2      	; 0x187a <tone+0x6c>
void tone(unsigned long frequency, uint8_t volume) {
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
    1878:	c1 e0       	ldi	r28, 0x01	; 1
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
		}
	
		unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
    187a:	ed 2f       	mov	r30, r29
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	ed 5f       	subi	r30, 0xFD	; 253
    1880:	fe 4f       	sbci	r31, 0xFE	; 254
    1882:	20 81       	ld	r18, Z
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	c7 01       	movw	r24, r14
    188c:	b6 01       	movw	r22, r12
    188e:	d9 d0       	rcall	.+434    	; 0x1a42 <__udivmodsi4>
		
		ICR1   = top;							// Set the top.
    1890:	d0 92 87 00 	sts	0x0087, r13
    1894:	c0 92 86 00 	sts	0x0086, r12
		if (TCNT1 > top) TCNT1 = top;			// Counter over the top, put within range.
    1898:	80 91 84 00 	lds	r24, 0x0084
    189c:	90 91 85 00 	lds	r25, 0x0085
    18a0:	a0 e0       	ldi	r26, 0x00	; 0
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	c8 16       	cp	r12, r24
    18a6:	d9 06       	cpc	r13, r25
    18a8:	ea 06       	cpc	r14, r26
    18aa:	fb 06       	cpc	r15, r27
    18ac:	20 f4       	brcc	.+8      	; 0x18b6 <tone+0xa8>
    18ae:	d0 92 85 00 	sts	0x0085, r13
    18b2:	c0 92 84 00 	sts	0x0084, r12
			TCCR1B = _BV(WGM13)  | prescaler;   // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
    18b6:	c0 61       	ori	r28, 0x10	; 16
    18b8:	c0 93 81 00 	sts	0x0081, r28
			OCR1A  = duty;						// Set the duty cycle (volume).
    18bc:	30 93 89 00 	sts	0x0089, r19
    18c0:	20 93 88 00 	sts	0x0088, r18
			TCCR1A = _BV(COM1A1);				// Clear OC1A/OC1B on Compare Match (Set output to low level).
    18c4:	80 e8       	ldi	r24, 0x80	; 128
    18c6:	80 93 80 00 	sts	0x0080, r24

}
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	ff 90       	pop	r15
    18d0:	ef 90       	pop	r14
    18d2:	df 90       	pop	r13
    18d4:	cf 90       	pop	r12
    18d6:	08 95       	ret

000018d8 <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    18d8:	1f 92       	push	r1
    18da:	0f 92       	push	r0
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	0f 92       	push	r0
    18e0:	11 24       	eor	r1, r1
    18e2:	2f 93       	push	r18
    18e4:	3f 93       	push	r19
    18e6:	4f 93       	push	r20
    18e8:	5f 93       	push	r21
    18ea:	8f 93       	push	r24
    18ec:	9f 93       	push	r25
    18ee:	ef 93       	push	r30
    18f0:	ff 93       	push	r31
    18f2:	40 91 c0 00 	lds	r20, 0x00C0
    18f6:	50 91 c6 00 	lds	r21, 0x00C6
    18fa:	48 71       	andi	r20, 0x18	; 24
    18fc:	80 91 a5 01 	lds	r24, 0x01A5
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	01 96       	adiw	r24, 0x01	; 1
    1904:	8f 77       	andi	r24, 0x7F	; 127
    1906:	99 27       	eor	r25, r25
    1908:	20 91 a4 01 	lds	r18, 0x01A4
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	28 17       	cp	r18, r24
    1910:	39 07       	cpc	r19, r25
    1912:	39 f0       	breq	.+14     	; 0x1922 <__vector_18+0x4a>
    1914:	80 93 a5 01 	sts	0x01A5, r24
    1918:	fc 01       	movw	r30, r24
    191a:	e8 55       	subi	r30, 0x58	; 88
    191c:	fe 4f       	sbci	r31, 0xFE	; 254
    191e:	50 83       	st	Z, r21
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <__vector_18+0x4c>
    1922:	42 e0       	ldi	r20, 0x02	; 2
    1924:	40 93 a3 01 	sts	0x01A3, r20
    1928:	ff 91       	pop	r31
    192a:	ef 91       	pop	r30
    192c:	9f 91       	pop	r25
    192e:	8f 91       	pop	r24
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	0f 90       	pop	r0
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	0f 90       	pop	r0
    193e:	1f 90       	pop	r1
    1940:	18 95       	reti

00001942 <__vector_19>:
    1942:	1f 92       	push	r1
    1944:	0f 92       	push	r0
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	0f 92       	push	r0
    194a:	11 24       	eor	r1, r1
    194c:	8f 93       	push	r24
    194e:	9f 93       	push	r25
    1950:	ef 93       	push	r30
    1952:	ff 93       	push	r31
    1954:	90 91 a7 01 	lds	r25, 0x01A7
    1958:	80 91 a6 01 	lds	r24, 0x01A6
    195c:	98 17       	cp	r25, r24
    195e:	79 f0       	breq	.+30     	; 0x197e <__vector_19+0x3c>
    1960:	80 91 a6 01 	lds	r24, 0x01A6
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	8f 77       	andi	r24, 0x7F	; 127
    196a:	99 27       	eor	r25, r25
    196c:	80 93 a6 01 	sts	0x01A6, r24
    1970:	fc 01       	movw	r30, r24
    1972:	e8 5d       	subi	r30, 0xD8	; 216
    1974:	fd 4f       	sbci	r31, 0xFD	; 253
    1976:	80 81       	ld	r24, Z
    1978:	80 93 c6 00 	sts	0x00C6, r24
    197c:	05 c0       	rjmp	.+10     	; 0x1988 <__vector_19+0x46>
    197e:	e1 ec       	ldi	r30, 0xC1	; 193
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	8f 7d       	andi	r24, 0xDF	; 223
    1986:	80 83       	st	Z, r24
    1988:	ff 91       	pop	r31
    198a:	ef 91       	pop	r30
    198c:	9f 91       	pop	r25
    198e:	8f 91       	pop	r24
    1990:	0f 90       	pop	r0
    1992:	0f be       	out	0x3f, r0	; 63
    1994:	0f 90       	pop	r0
    1996:	1f 90       	pop	r1
    1998:	18 95       	reti

0000199a <uart0_init>:
    199a:	10 92 a7 01 	sts	0x01A7, r1
    199e:	10 92 a6 01 	sts	0x01A6, r1
    19a2:	10 92 a5 01 	sts	0x01A5, r1
    19a6:	10 92 a4 01 	sts	0x01A4, r1
    19aa:	99 23       	and	r25, r25
    19ac:	24 f4       	brge	.+8      	; 0x19b6 <uart0_init+0x1c>
    19ae:	22 e0       	ldi	r18, 0x02	; 2
    19b0:	20 93 c0 00 	sts	0x00C0, r18
    19b4:	9f 77       	andi	r25, 0x7F	; 127
    19b6:	90 93 c5 00 	sts	0x00C5, r25
    19ba:	80 93 c4 00 	sts	0x00C4, r24
    19be:	88 e9       	ldi	r24, 0x98	; 152
    19c0:	80 93 c1 00 	sts	0x00C1, r24
    19c4:	86 e0       	ldi	r24, 0x06	; 6
    19c6:	80 93 c2 00 	sts	0x00C2, r24
    19ca:	08 95       	ret

000019cc <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    19cc:	60 91 a7 01 	lds	r22, 0x01A7
    19d0:	70 e0       	ldi	r23, 0x00	; 0
    19d2:	6f 5f       	subi	r22, 0xFF	; 255
    19d4:	7f 4f       	sbci	r23, 0xFF	; 255
    19d6:	6f 77       	andi	r22, 0x7F	; 127
    19d8:	77 27       	eor	r23, r23
    19da:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
    19dc:	20 91 a6 01 	lds	r18, 0x01A6
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	24 17       	cp	r18, r20
    19e4:	35 07       	cpc	r19, r21
    19e6:	d1 f3       	breq	.-12     	; 0x19dc <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    19e8:	fb 01       	movw	r30, r22
    19ea:	e8 5d       	subi	r30, 0xD8	; 216
    19ec:	fd 4f       	sbci	r31, 0xFD	; 253
    19ee:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    19f0:	60 93 a7 01 	sts	0x01A7, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
    19f4:	e1 ec       	ldi	r30, 0xC1	; 193
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	80 62       	ori	r24, 0x20	; 32
    19fc:	80 83       	st	Z, r24
    19fe:	08 95       	ret

00001a00 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	ec 01       	movw	r28, r24
	while (*s) {
    1a06:	88 81       	ld	r24, Y
    1a08:	88 23       	and	r24, r24
    1a0a:	29 f0       	breq	.+10     	; 0x1a16 <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
    1a0c:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
    1a0e:	de df       	rcall	.-68     	; 0x19cc <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
    1a10:	89 91       	ld	r24, Y+
    1a12:	81 11       	cpse	r24, r1
    1a14:	fc cf       	rjmp	.-8      	; 0x1a0e <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <__divmodhi4>:
    1a1c:	97 fb       	bst	r25, 7
    1a1e:	07 2e       	mov	r0, r23
    1a20:	16 f4       	brtc	.+4      	; 0x1a26 <__divmodhi4+0xa>
    1a22:	00 94       	com	r0
    1a24:	06 d0       	rcall	.+12     	; 0x1a32 <__divmodhi4_neg1>
    1a26:	77 fd       	sbrc	r23, 7
    1a28:	08 d0       	rcall	.+16     	; 0x1a3a <__divmodhi4_neg2>
    1a2a:	2d d0       	rcall	.+90     	; 0x1a86 <__udivmodhi4>
    1a2c:	07 fc       	sbrc	r0, 7
    1a2e:	05 d0       	rcall	.+10     	; 0x1a3a <__divmodhi4_neg2>
    1a30:	3e f4       	brtc	.+14     	; 0x1a40 <__divmodhi4_exit>

00001a32 <__divmodhi4_neg1>:
    1a32:	90 95       	com	r25
    1a34:	81 95       	neg	r24
    1a36:	9f 4f       	sbci	r25, 0xFF	; 255
    1a38:	08 95       	ret

00001a3a <__divmodhi4_neg2>:
    1a3a:	70 95       	com	r23
    1a3c:	61 95       	neg	r22
    1a3e:	7f 4f       	sbci	r23, 0xFF	; 255

00001a40 <__divmodhi4_exit>:
    1a40:	08 95       	ret

00001a42 <__udivmodsi4>:
    1a42:	a1 e2       	ldi	r26, 0x21	; 33
    1a44:	1a 2e       	mov	r1, r26
    1a46:	aa 1b       	sub	r26, r26
    1a48:	bb 1b       	sub	r27, r27
    1a4a:	fd 01       	movw	r30, r26
    1a4c:	0d c0       	rjmp	.+26     	; 0x1a68 <__udivmodsi4_ep>

00001a4e <__udivmodsi4_loop>:
    1a4e:	aa 1f       	adc	r26, r26
    1a50:	bb 1f       	adc	r27, r27
    1a52:	ee 1f       	adc	r30, r30
    1a54:	ff 1f       	adc	r31, r31
    1a56:	a2 17       	cp	r26, r18
    1a58:	b3 07       	cpc	r27, r19
    1a5a:	e4 07       	cpc	r30, r20
    1a5c:	f5 07       	cpc	r31, r21
    1a5e:	20 f0       	brcs	.+8      	; 0x1a68 <__udivmodsi4_ep>
    1a60:	a2 1b       	sub	r26, r18
    1a62:	b3 0b       	sbc	r27, r19
    1a64:	e4 0b       	sbc	r30, r20
    1a66:	f5 0b       	sbc	r31, r21

00001a68 <__udivmodsi4_ep>:
    1a68:	66 1f       	adc	r22, r22
    1a6a:	77 1f       	adc	r23, r23
    1a6c:	88 1f       	adc	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	1a 94       	dec	r1
    1a72:	69 f7       	brne	.-38     	; 0x1a4e <__udivmodsi4_loop>
    1a74:	60 95       	com	r22
    1a76:	70 95       	com	r23
    1a78:	80 95       	com	r24
    1a7a:	90 95       	com	r25
    1a7c:	9b 01       	movw	r18, r22
    1a7e:	ac 01       	movw	r20, r24
    1a80:	bd 01       	movw	r22, r26
    1a82:	cf 01       	movw	r24, r30
    1a84:	08 95       	ret

00001a86 <__udivmodhi4>:
    1a86:	aa 1b       	sub	r26, r26
    1a88:	bb 1b       	sub	r27, r27
    1a8a:	51 e1       	ldi	r21, 0x11	; 17
    1a8c:	07 c0       	rjmp	.+14     	; 0x1a9c <__udivmodhi4_ep>

00001a8e <__udivmodhi4_loop>:
    1a8e:	aa 1f       	adc	r26, r26
    1a90:	bb 1f       	adc	r27, r27
    1a92:	a6 17       	cp	r26, r22
    1a94:	b7 07       	cpc	r27, r23
    1a96:	10 f0       	brcs	.+4      	; 0x1a9c <__udivmodhi4_ep>
    1a98:	a6 1b       	sub	r26, r22
    1a9a:	b7 0b       	sbc	r27, r23

00001a9c <__udivmodhi4_ep>:
    1a9c:	88 1f       	adc	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	5a 95       	dec	r21
    1aa2:	a9 f7       	brne	.-22     	; 0x1a8e <__udivmodhi4_loop>
    1aa4:	80 95       	com	r24
    1aa6:	90 95       	com	r25
    1aa8:	bc 01       	movw	r22, r24
    1aaa:	cd 01       	movw	r24, r26
    1aac:	08 95       	ret

00001aae <memcpy>:
    1aae:	fb 01       	movw	r30, r22
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <memcpy+0xa>
    1ab4:	01 90       	ld	r0, Z+
    1ab6:	0d 92       	st	X+, r0
    1ab8:	41 50       	subi	r20, 0x01	; 1
    1aba:	50 40       	sbci	r21, 0x00	; 0
    1abc:	d8 f7       	brcc	.-10     	; 0x1ab4 <memcpy+0x6>
    1abe:	08 95       	ret

00001ac0 <_exit>:
    1ac0:	f8 94       	cli

00001ac2 <__stop_program>:
    1ac2:	ff cf       	rjmp	.-2      	; 0x1ac2 <__stop_program>
