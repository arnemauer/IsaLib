
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00001b3e  00001bd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017c  0080012c  0080012c  00001bfe  2**0
                  ALLOC
  3 .stab         00000e4c  00000000  00000000  00001c00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002da7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003a0  00000000  00000000  00002dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003d24  00000000  00000000  00003176  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001285  00000000  00000000  00006e9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002902  00000000  00000000  0000811f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009e8  00000000  00000000  0000aa24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000eaa  00000000  00000000  0000b40c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a2b  00000000  00000000  0000c2b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003f0  00000000  00000000  0000ece1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c3 c2       	rjmp	.+1414   	; 0x588 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_1>
       8:	db c2       	rjmp	.+1462   	; 0x5c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d9 c2       	rjmp	.+1458   	; 0x5c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	d7 c2       	rjmp	.+1454   	; 0x5c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	d5 c2       	rjmp	.+1450   	; 0x5c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	d3 c2       	rjmp	.+1446   	; 0x5c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c7       	rjmp	.+3632   	; 0xe4e <__vector_7>
      1e:	00 00       	nop
      20:	cf c2       	rjmp	.+1438   	; 0x5c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	cd c2       	rjmp	.+1434   	; 0x5c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	cb c2       	rjmp	.+1430   	; 0x5c0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c9 c2       	rjmp	.+1426   	; 0x5c0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c7 c2       	rjmp	.+1422   	; 0x5c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c2       	rjmp	.+1418   	; 0x5c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	50 c3       	rjmp	.+1696   	; 0x6da <__vector_14>
      3a:	00 00       	nop
      3c:	c1 c2       	rjmp	.+1410   	; 0x5c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bf c2       	rjmp	.+1406   	; 0x5c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	bd c2       	rjmp	.+1402   	; 0x5c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__vector_18>
      4c:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <__vector_19>
      50:	b7 c2       	rjmp	.+1390   	; 0x5c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	b5 c2       	rjmp	.+1386   	; 0x5c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	b3 c2       	rjmp	.+1382   	; 0x5c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b1 c2       	rjmp	.+1378   	; 0x5c0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	af c2       	rjmp	.+1374   	; 0x5c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	ad c2       	rjmp	.+1370   	; 0x5c0 <__bad_interrupt>
	...

00000068 <_ZL16icon_led_numbers>:
      68:	0c 0b 0a 0f 0e 0d 07 08 09 02 01 00                 ............

00000074 <_ZL22sound_pattern_doorbell>:
      74:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      84:	b0 04 00 00 f4 01 00 00 00 00 00 00 e8 03 00 00     ................
      94:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      a4:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000000b4 <_ZL19sound_pattern_phone>:
      b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     104:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     114:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     124:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     134:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     144:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     154:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     164:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     174:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     184:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     194:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     1a4:	00 00 00 00 e8 03 00 00 e8 03 00 00 28 00 00 00     ............(...
     1b4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1c4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1d4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1e4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1f4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     204:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     214:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     224:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     234:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     244:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     254:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     264:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     274:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     284:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     294:	ee 02 00 00 28 00 00 00 00 00 00 00 e8 03 00 00     ....(...........
     2a4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     304:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     314:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     324:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     334:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     344:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     354:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     364:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     374:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     384:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     394:	00 00 00 00 e8 03 00 00 00 00 00 00 00 00 00 00     ................
	...

000003b4 <_ZL18sound_pattern_fire>:
     3b4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3c4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3d4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3e4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3f4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     404:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     414:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     424:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...

00000434 <_ZL18sound_pattern_help>:
     434:	bf 04 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     444:	1c 07 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     454:	bf 04 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     464:	1c 07 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     474:	00 00 00 00 e8 03 00 00                             ........

0000047c <_ZL13flash_pattern>:
     47c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     48c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     49c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4ac:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4bc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4cc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4dc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4ec:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4fc:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     50c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     51c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     52c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     53c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     54c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     55c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     56c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...

0000057c <_ZL11icon_colors>:
     57c:	3d f5 00 00 b8 f5 ff 00 00 ff ff 00                 =...........

00000588 <__ctors_end>:
     588:	11 24       	eor	r1, r1
     58a:	1f be       	out	0x3f, r1	; 63
     58c:	cf ef       	ldi	r28, 0xFF	; 255
     58e:	d8 e0       	ldi	r29, 0x08	; 8
     590:	de bf       	out	0x3e, r29	; 62
     592:	cd bf       	out	0x3d, r28	; 61

00000594 <__do_copy_data>:
     594:	11 e0       	ldi	r17, 0x01	; 1
     596:	a0 e0       	ldi	r26, 0x00	; 0
     598:	b1 e0       	ldi	r27, 0x01	; 1
     59a:	ee e3       	ldi	r30, 0x3E	; 62
     59c:	fb e1       	ldi	r31, 0x1B	; 27
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__do_copy_data+0x10>
     5a0:	05 90       	lpm	r0, Z+
     5a2:	0d 92       	st	X+, r0
     5a4:	ac 32       	cpi	r26, 0x2C	; 44
     5a6:	b1 07       	cpc	r27, r17
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <__do_copy_data+0xc>

000005aa <__do_clear_bss>:
     5aa:	22 e0       	ldi	r18, 0x02	; 2
     5ac:	ac e2       	ldi	r26, 0x2C	; 44
     5ae:	b1 e0       	ldi	r27, 0x01	; 1
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <.do_clear_bss_start>

000005b2 <.do_clear_bss_loop>:
     5b2:	1d 92       	st	X+, r1

000005b4 <.do_clear_bss_start>:
     5b4:	a8 3a       	cpi	r26, 0xA8	; 168
     5b6:	b2 07       	cpc	r27, r18
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <.do_clear_bss_loop>
     5ba:	b4 d0       	rcall	.+360    	; 0x724 <main>
     5bc:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <_exit>

000005c0 <__bad_interrupt>:
     5c0:	1f cd       	rjmp	.-1474   	; 0x0 <__vectors>

000005c2 <I2C_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
     5c2:	88 e4       	ldi	r24, 0x48	; 72
     5c4:	80 93 b8 00 	sts	0x00B8, r24
     5c8:	08 95       	ret

000005ca <I2C_start>:
     5ca:	ec eb       	ldi	r30, 0xBC	; 188
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	10 82       	st	Z, r1
     5d0:	94 ea       	ldi	r25, 0xA4	; 164
     5d2:	90 83       	st	Z, r25
     5d4:	90 81       	ld	r25, Z
     5d6:	99 23       	and	r25, r25
     5d8:	ec f7       	brge	.-6      	; 0x5d4 <I2C_start+0xa>
     5da:	90 91 b9 00 	lds	r25, 0x00B9
     5de:	98 7f       	andi	r25, 0xF8	; 248
     5e0:	98 30       	cpi	r25, 0x08	; 8
     5e2:	a1 f4       	brne	.+40     	; 0x60c <I2C_start+0x42>
     5e4:	80 93 bb 00 	sts	0x00BB, r24
     5e8:	84 e8       	ldi	r24, 0x84	; 132
     5ea:	80 93 bc 00 	sts	0x00BC, r24
     5ee:	ec eb       	ldi	r30, 0xBC	; 188
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	88 23       	and	r24, r24
     5f6:	ec f7       	brge	.-6      	; 0x5f2 <I2C_start+0x28>
     5f8:	90 91 b9 00 	lds	r25, 0x00B9
     5fc:	98 7f       	andi	r25, 0xF8	; 248
     5fe:	98 31       	cpi	r25, 0x18	; 24
     600:	39 f0       	breq	.+14     	; 0x610 <I2C_start+0x46>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 34       	cpi	r25, 0x40	; 64
     606:	29 f4       	brne	.+10     	; 0x612 <I2C_start+0x48>
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	08 95       	ret
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	08 95       	ret
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	08 95       	ret

00000614 <I2C_write>:
     614:	80 93 bb 00 	sts	0x00BB, r24
     618:	84 e8       	ldi	r24, 0x84	; 132
     61a:	80 93 bc 00 	sts	0x00BC, r24
     61e:	ec eb       	ldi	r30, 0xBC	; 188
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	88 23       	and	r24, r24
     626:	ec f7       	brge	.-6      	; 0x622 <I2C_write+0xe>
     628:	90 91 b9 00 	lds	r25, 0x00B9
     62c:	98 7f       	andi	r25, 0xF8	; 248
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	98 32       	cpi	r25, 0x28	; 40
     632:	09 f4       	brne	.+2      	; 0x636 <I2C_write+0x22>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	08 95       	ret

00000638 <I2C_read_ack>:
     638:	84 ec       	ldi	r24, 0xC4	; 196
     63a:	80 93 bc 00 	sts	0x00BC, r24
     63e:	ec eb       	ldi	r30, 0xBC	; 188
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	88 23       	and	r24, r24
     646:	ec f7       	brge	.-6      	; 0x642 <I2C_read_ack+0xa>
     648:	80 91 bb 00 	lds	r24, 0x00BB
     64c:	08 95       	ret

0000064e <I2C_stop>:

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     64e:	84 e9       	ldi	r24, 0x94	; 148
     650:	80 93 bc 00 	sts	0x00BC, r24
     654:	08 95       	ret

00000656 <log_s>:
 *
 * @param s The specified string
 */
void log_s(const char *s) {
#ifdef LOG_AVAILABLE
    uart0_puts(s);
     656:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <uart0_puts>
     65a:	08 95       	ret

0000065c <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	84 bd       	out	0x24, r24	; 36
     660:	93 e0       	ldi	r25, 0x03	; 3
     662:	95 bd       	out	0x25, r25	; 37
     664:	80 93 6e 00 	sts	0x006E, r24
     668:	8a ef       	ldi	r24, 0xFA	; 250
     66a:	87 bd       	out	0x27, r24	; 39
     66c:	08 95       	ret

0000066e <millis_get>:
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	8f b7       	in	r24, 0x3f	; 63
     674:	f8 94       	cli
     676:	00 91 2c 01 	lds	r16, 0x012C
     67a:	10 91 2d 01 	lds	r17, 0x012D
     67e:	20 91 2e 01 	lds	r18, 0x012E
     682:	30 91 2f 01 	lds	r19, 0x012F
     686:	8f bf       	out	0x3f, r24	; 63
     688:	60 2f       	mov	r22, r16
     68a:	71 2f       	mov	r23, r17
     68c:	82 2f       	mov	r24, r18
     68e:	93 2f       	mov	r25, r19
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	08 95       	ret

00000696 <millis_resume>:
     696:	e4 e6       	ldi	r30, 0x64	; 100
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	8f 7d       	andi	r24, 0xDF	; 223
     69e:	80 83       	st	Z, r24
     6a0:	ee e6       	ldi	r30, 0x6E	; 110
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	82 60       	ori	r24, 0x02	; 2
     6a8:	80 83       	st	Z, r24
     6aa:	08 95       	ret

000006ac <millis_pause>:
     6ac:	ee e6       	ldi	r30, 0x6E	; 110
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 81       	ld	r24, Z
     6b2:	8d 7f       	andi	r24, 0xFD	; 253
     6b4:	80 83       	st	Z, r24
     6b6:	e4 e6       	ldi	r30, 0x64	; 100
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	80 81       	ld	r24, Z
     6bc:	80 62       	ori	r24, 0x20	; 32
     6be:	80 83       	st	Z, r24
     6c0:	08 95       	ret

000006c2 <millis_reset>:
     6c2:	8f b7       	in	r24, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	10 92 2c 01 	sts	0x012C, r1
     6ca:	10 92 2d 01 	sts	0x012D, r1
     6ce:	10 92 2e 01 	sts	0x012E, r1
     6d2:	10 92 2f 01 	sts	0x012F, r1
     6d6:	8f bf       	out	0x3f, r24	; 63
     6d8:	08 95       	ret

000006da <__vector_14>:

ISR(ISR_VECT)
{
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	8f 93       	push	r24
     6e6:	9f 93       	push	r25
     6e8:	af 93       	push	r26
     6ea:	bf 93       	push	r27
	++milliseconds;
     6ec:	80 91 2c 01 	lds	r24, 0x012C
     6f0:	90 91 2d 01 	lds	r25, 0x012D
     6f4:	a0 91 2e 01 	lds	r26, 0x012E
     6f8:	b0 91 2f 01 	lds	r27, 0x012F
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	a1 1d       	adc	r26, r1
     700:	b1 1d       	adc	r27, r1
     702:	80 93 2c 01 	sts	0x012C, r24
     706:	90 93 2d 01 	sts	0x012D, r25
     70a:	a0 93 2e 01 	sts	0x012E, r26
     70e:	b0 93 2f 01 	sts	0x012F, r27
}
     712:	bf 91       	pop	r27
     714:	af 91       	pop	r26
     716:	9f 91       	pop	r25
     718:	8f 91       	pop	r24
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <main>:



			 
	
int main() {	
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	00 d0       	rcall	.+0      	; 0x72a <main+0x6>
     72a:	00 d0       	rcall	.+0      	; 0x72c <main+0x8>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62

DDRB |= _BV(0); // pb0 output
     730:	20 9a       	sbi	0x04, 0	; 4
PORTB |= _BV(0); // pb0 aan
     732:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     734:	2f ef       	ldi	r18, 0xFF	; 255
     736:	89 e6       	ldi	r24, 0x69	; 105
     738:	98 e1       	ldi	r25, 0x18	; 24
     73a:	21 50       	subi	r18, 0x01	; 1
     73c:	80 40       	sbci	r24, 0x00	; 0
     73e:	90 40       	sbci	r25, 0x00	; 0
     740:	e1 f7       	brne	.-8      	; 0x73a <main+0x16>
     742:	00 c0       	rjmp	.+0      	; 0x744 <main+0x20>
     744:	00 00       	nop
_delay_ms(500);
 PORTB &= ~_BV(0); // pb0 uit
     746:	28 98       	cbi	0x05, 0	; 5



// disable ADC for less power 
	ADCSRA &= ~_BV(ADEN); // ADC off 
     748:	ea e7       	ldi	r30, 0x7A	; 122
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	8f 77       	andi	r24, 0x7F	; 127
     750:	80 83       	st	Z, r24
	sei();
     752:	78 94       	sei
			/* Initialize MILLIS */
	        millis_init();
     754:	83 df       	rcall	.-250    	; 0x65c <millis_init>
     756:	ef ef       	ldi	r30, 0xFF	; 255
     758:	fb e7       	ldi	r31, 0x7B	; 123
     75a:	22 e9       	ldi	r18, 0x92	; 146
     75c:	e1 50       	subi	r30, 0x01	; 1
     75e:	f0 40       	sbci	r31, 0x00	; 0
     760:	20 40       	sbci	r18, 0x00	; 0
     762:	e1 f7       	brne	.-8      	; 0x75c <main+0x38>
     764:	00 c0       	rjmp	.+0      	; 0x766 <main+0x42>
     766:	00 00       	nop
			_delay_ms(3000);
			/* Initialize MILLIS */

			/* Initialize TONE */						
			tone_init();		
     768:	0e 94 3a 0c 	call	0x1874	; 0x1874 <tone_init>
			/* Initialize TONE */						
						
			/* Initialize TIMER 2 */
			// Timer settings
			TCCR2A = _BV(WGM21); // prescaler 128
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	80 93 b0 00 	sts	0x00B0, r24
			TCCR2B = _BV(CS22)|_BV(CS20);
     772:	85 e0       	ldi	r24, 0x05	; 5
     774:	80 93 b1 00 	sts	0x00B1, r24
							 	
			// TIMSK2 = _BV(OCIE2A); // DO NOT ENABLE TIMER2 BY DEFAULT!
			OCR2A = ((F_CPU / 128) / 1000);
     778:	8d e7       	ldi	r24, 0x7D	; 125
     77a:	80 93 b3 00 	sts	0x00B3, r24
			power_timer2_disable(); // power timer2 down!
     77e:	e4 e6       	ldi	r30, 0x64	; 100
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	80 64       	ori	r24, 0x40	; 64
     786:	80 83       	st	Z, r24
			/* Initialize TIMER 2 */			
			

			/* Initialize UART */
			uart_init( ((F_CPU)/((UART_BAUD_RATE)*16l)-1)) ;
     788:	80 e1       	ldi	r24, 0x10	; 16
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <uart0_init>
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	93 ed       	ldi	r25, 0xD3	; 211
     794:	e0 e3       	ldi	r30, 0x30	; 48
     796:	81 50       	subi	r24, 0x01	; 1
     798:	90 40       	sbci	r25, 0x00	; 0
     79a:	e0 40       	sbci	r30, 0x00	; 0
     79c:	e1 f7       	brne	.-8      	; 0x796 <main+0x72>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <main+0x7c>
     7a0:	00 00       	nop
			//uart0_puts("kak");
			_delay_ms(1000);
			/* Initialize UART */
		
			/* Initialize I2C */
			I2C_init();	
     7a2:	0f df       	rcall	.-482    	; 0x5c2 <I2C_init>
			/* Initialize I2C */
			
			/* Initialize PCA9634 */
			pca9635_init();
     7a4:	cc d3       	rcall	.+1944   	; 0xf3e <pca9635_init>
			pca9635_set_all_led_pwm(255);
     7a6:	8f ef       	ldi	r24, 0xFF	; 255
     7a8:	10 d4       	rcall	.+2080   	; 0xfca <pca9635_set_all_led_pwm>
     7aa:	ff ef       	ldi	r31, 0xFF	; 255
     7ac:	23 ed       	ldi	r18, 0xD3	; 211
     7ae:	80 e3       	ldi	r24, 0x30	; 48
     7b0:	f1 50       	subi	r31, 0x01	; 1
     7b2:	20 40       	sbci	r18, 0x00	; 0
     7b4:	80 40       	sbci	r24, 0x00	; 0
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <main+0x8c>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <main+0x96>
     7ba:	00 00       	nop
			_delay_ms(1000);
			pca9635_set_all_led_pwm(0);
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	05 d4       	rcall	.+2058   	; 0xfca <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1);
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	13 d4       	rcall	.+2086   	; 0xfea <pca9635_set_sleep>
     7c4:	9f ef       	ldi	r25, 0xFF	; 255
     7c6:	e3 ed       	ldi	r30, 0xD3	; 211
     7c8:	f0 e3       	ldi	r31, 0x30	; 48
     7ca:	91 50       	subi	r25, 0x01	; 1
     7cc:	e0 40       	sbci	r30, 0x00	; 0
     7ce:	f0 40       	sbci	r31, 0x00	; 0
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <main+0xa6>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <main+0xb0>
     7d4:	00 00       	nop
		//	log_s("PCA ok");
			_delay_ms(1000);
			
			
  // node id, rfband, group id
			rf12_initialize(2, RF12_868MHZ, 14);
     7d6:	4e e0       	ldi	r20, 0x0E	; 14
     7d8:	62 e0       	ldi	r22, 0x02	; 2
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	36 d6       	rcall	.+3180   	; 0x144a <_Z15rf12_initializehhh>
    // see http://tools.jeelabs.org/rfm12b
  //  rf12_control(0xC040); // set low-battery level to 2.2V i.s.o. 3.1V


			deep_sleep_ok = 1; // put device in deep sleep after initializing
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 46 01 	sts	0x0146, r24

log_s("initialized!");
     7e4:	8e e0       	ldi	r24, 0x0E	; 14
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	36 df       	rcall	.-404    	; 0x656 <log_s>
     7ea:	2f ef       	ldi	r18, 0xFF	; 255
     7ec:	83 ed       	ldi	r24, 0xD3	; 211
     7ee:	90 e3       	ldi	r25, 0x30	; 48
     7f0:	21 50       	subi	r18, 0x01	; 1
     7f2:	80 40       	sbci	r24, 0x00	; 0
     7f4:	90 40       	sbci	r25, 0x00	; 0
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <main+0xcc>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <main+0xd6>
     7fa:	00 00       	nop
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
						
			if (RF12_WANTS_ACK) {
     7fc:	0f 2e       	mov	r0, r31
     7fe:	fe e4       	ldi	r31, 0x4E	; 78
     800:	ef 2e       	mov	r14, r31
     802:	f1 e0       	ldi	r31, 0x01	; 1
     804:	ff 2e       	mov	r15, r31
     806:	f0 2d       	mov	r31, r0
		//		}
				
				
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[0]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     808:	0f 2e       	mov	r0, r31
     80a:	f0 e5       	ldi	r31, 0x50	; 80
     80c:	af 2e       	mov	r10, r31
     80e:	f1 e0       	ldi	r31, 0x01	; 1
     810:	bf 2e       	mov	r11, r31
     812:	f0 2d       	mov	r31, r0
							pca9635_set_sleep(0);
						//	pca9635_set_led_mode(2);
							
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     814:	61 2c       	mov	r6, r1
     816:	71 2c       	mov	r7, r1
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     818:	69 82       	std	Y+1, r6	; 0x01
     81a:	7a 82       	std	Y+2, r7	; 0x02
							// 2. timer 0 - millis starten
							millis_reset();
							millis_resume();
				 
							// 3. timer 2 - alarm timer starten
							power_timer2_enable();
     81c:	0f 2e       	mov	r0, r31
     81e:	f4 e6       	ldi	r31, 0x64	; 100
     820:	4f 2e       	mov	r4, r31
     822:	51 2c       	mov	r5, r1
     824:	f0 2d       	mov	r31, r0
							// Geen alarm actief

							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     826:	22 24       	eor	r2, r2
     828:	23 94       	inc	r2

	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
     82a:	36 d4       	rcall	.+2156   	; 0x1098 <_Z13rf12_recvDonev>
     82c:	88 23       	and	r24, r24
     82e:	09 f4       	brne	.+2      	; 0x832 <main+0x10e>
     830:	d7 c0       	rjmp	.+430    	; 0x9e0 <__stack+0xe1>
     832:	80 91 94 01 	lds	r24, 0x0194
     836:	90 91 95 01 	lds	r25, 0x0195
     83a:	89 2b       	or	r24, r25
     83c:	09 f4       	brne	.+2      	; 0x840 <main+0x11c>
     83e:	d5 c0       	rjmp	.+426    	; 0x9ea <__stack+0xeb>
     840:	cf c0       	rjmp	.+414    	; 0x9e0 <__stack+0xe1>
		// process incoming data here
						
			if (RF12_WANTS_ACK) {
     842:	f7 01       	movw	r30, r14
     844:	80 81       	ld	r24, Z
     846:	88 23       	and	r24, r24
     848:	0c f0       	brlt	.+2      	; 0x84c <main+0x128>
     84a:	d4 c0       	rjmp	.+424    	; 0x9f4 <__stack+0xf5>
     84c:	09 c0       	rjmp	.+18     	; 0x860 <main+0x13c>
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     84e:	f7 01       	movw	r30, r14
     850:	80 81       	ld	r24, Z
     852:	8f 71       	andi	r24, 0x1F	; 31
     854:	80 6c       	ori	r24, 0xC0	; 192
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	b3 01       	movw	r22, r6
     85a:	74 d5       	rcall	.+2792   	; 0x1344 <_Z14rf12_sendStarthPKvh>
				rf12_sendWait(1); // don't power down too soon
     85c:	82 2d       	mov	r24, r2
     85e:	80 d5       	rcall	.+2816   	; 0x1360 <_Z13rf12_sendWaith>
			//	uart0_puts("ACK-OK");
				//_delay_ms(10);
			}
			
			
		uart0_puts("DATA");
     860:	8b e1       	ldi	r24, 0x1B	; 27
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <uart0_puts>
     868:	8f e3       	ldi	r24, 0x3F	; 63
     86a:	9c e9       	ldi	r25, 0x9C	; 156
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <main+0x148>
     870:	00 c0       	rjmp	.+0      	; 0x872 <main+0x14e>
     872:	00 00       	nop
		//		}
				
				
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[0]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     874:	f5 01       	movw	r30, r10
     876:	30 80       	ld	r3, Z
				uart0_putc(data);
     878:	83 2d       	mov	r24, r3
     87a:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <uart0_putc>
     87e:	8f e3       	ldi	r24, 0x3F	; 63
     880:	9c e9       	ldi	r25, 0x9C	; 156
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <main+0x15e>
     886:	00 c0       	rjmp	.+0      	; 0x888 <main+0x164>
     888:	00 00       	nop
				_delay_ms(10);
				 if(data & 0x10){
     88a:	13 2d       	mov	r17, r3
     88c:	10 71       	andi	r17, 0x10	; 16
     88e:	34 fe       	sbrs	r3, 4
     890:	06 c0       	rjmp	.+12     	; 0x89e <main+0x17a>
					 // start alarm	 
					// uart0_puts("START");
					 active_alarm = active_alarm | data; // 00001111 
     892:	80 91 45 01 	lds	r24, 0x0145
     896:	83 29       	or	r24, r3
     898:	80 93 45 01 	sts	0x0145, r24
     89c:	07 c0       	rjmp	.+14     	; 0x8ac <main+0x188>
				 }else{
					 // stop alarm
					//  uart0_puts("STOP");
					 active_alarm =  active_alarm & (~data); /* invert data, compare with active alarm array to clear the right alarm bit */		 
     89e:	83 2d       	mov	r24, r3
     8a0:	80 95       	com	r24
     8a2:	90 91 45 01 	lds	r25, 0x0145
     8a6:	89 23       	and	r24, r25
     8a8:	80 93 45 01 	sts	0x0145, r24
				 }
				 
				////////////////		Fill alarm array		 ////////////////				 
				
			 // IS ER EEN ALARM ACTIEF in array active_alarm?
				 if(active_alarm & 0x0F){
     8ac:	20 91 45 01 	lds	r18, 0x0145
     8b0:	82 2f       	mov	r24, r18
     8b2:	8f 70       	andi	r24, 0x0F	; 15
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <main+0x194>
     8b6:	7b c0       	rjmp	.+246    	; 0x9ae <__stack+0xaf>
			  	
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
     8b8:	80 91 41 01 	lds	r24, 0x0141
     8bc:	90 91 42 01 	lds	r25, 0x0142
     8c0:	a0 91 43 01 	lds	r26, 0x0143
     8c4:	b0 91 44 01 	lds	r27, 0x0144
     8c8:	89 2b       	or	r24, r25
     8ca:	8a 2b       	or	r24, r26
     8cc:	8b 2b       	or	r24, r27
     8ce:	31 f5       	brne	.+76     	; 0x91c <__stack+0x1d>
							// Geen alarm actief

							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
     8d0:	10 92 46 01 	sts	0x0146, r1
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     8d4:	23 fd       	sbrc	r18, 3
     8d6:	0c c0       	rjmp	.+24     	; 0x8f0 <main+0x1cc>
     8d8:	22 fd       	sbrc	r18, 2
     8da:	06 c0       	rjmp	.+12     	; 0x8e8 <main+0x1c4>
     8dc:	21 fd       	sbrc	r18, 1
     8de:	06 c0       	rjmp	.+12     	; 0x8ec <main+0x1c8>
     8e0:	20 ff       	sbrs	r18, 0
     8e2:	0b c0       	rjmp	.+22     	; 0x8fa <main+0x1d6>
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <main+0x1ce>
							// Geen alarm actief

							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     8e8:	82 2d       	mov	r24, r2
     8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <main+0x1ce>
     8ec:	82 e0       	ldi	r24, 0x02	; 2
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <main+0x1ce>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
									sound_current_alarm = i;
     8f2:	80 93 40 01 	sts	0x0140, r24
									icon_current_alarm  = i;
     8f6:	80 93 35 01 	sts	0x0135, r24
									break;
								} 
							 }

							// 2. timer 0 - millis starten
							millis_reset();
     8fa:	e3 de       	rcall	.-570    	; 0x6c2 <millis_reset>
							millis_resume();
     8fc:	cc de       	rcall	.-616    	; 0x696 <millis_resume>
				 
							// 3. timer 2 - alarm timer starten
							power_timer2_enable();
     8fe:	f2 01       	movw	r30, r4
     900:	80 81       	ld	r24, Z
     902:	8f 7b       	andi	r24, 0xBF	; 191
     904:	80 83       	st	Z, r24
							TIMSK2 |= _BV(OCIE2A);
     906:	e0 e7       	ldi	r30, 0x70	; 112
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	82 60       	ori	r24, 0x02	; 2
     90e:	80 83       	st	Z, r24
			 
							// wake up pca9635!
							pca9635_set_sleep(0);
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	6b d3       	rcall	.+1750   	; 0xfea <pca9635_set_sleep>
						 } //  if(active_alarm_time == 0) {
				 

				 		// Only reset active alarm timer if there is a new alarm...
						// 0x10 = activate bit 0x0F are bits of the alarms
						if( (data & 0x10) && (data & 0x0F)){
     914:	11 23       	and	r17, r17
     916:	09 f4       	brne	.+2      	; 0x91a <__stack+0x1b>
     918:	88 cf       	rjmp	.-240    	; 0x82a <main+0x106>
     91a:	2d c0       	rjmp	.+90     	; 0x976 <__stack+0x77>
							pca9635_set_sleep(0);
						//	pca9635_set_led_mode(2);
							
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     91c:	11 11       	cpse	r17, r1
     91e:	2b c0       	rjmp	.+86     	; 0x976 <__stack+0x77>
     920:	0f 2e       	mov	r0, r31
     922:	f0 e2       	ldi	r31, 0x20	; 32
     924:	cf 2e       	mov	r12, r31
     926:	f1 e0       	ldi	r31, 0x01	; 1
     928:	df 2e       	mov	r13, r31
     92a:	f0 2d       	mov	r31, r0
     92c:	83 01       	movw	r16, r6
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     92e:	f6 01       	movw	r30, r12
     930:	21 91       	ld	r18, Z+
     932:	6f 01       	movw	r12, r30
     934:	23 21       	and	r18, r3
     936:	c9 f0       	breq	.+50     	; 0x96a <__stack+0x6b>
     938:	f9 81       	ldd	r31, Y+1	; 0x01
     93a:	fb 83       	std	Y+3, r31	; 0x03
     93c:	2a 81       	ldd	r18, Y+2	; 0x02
     93e:	2c 83       	std	Y+4, r18	; 0x04
											for (byte j = 0; j <= 2; j++){
												pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[i].lednr[j])), 0); // leds off!
     940:	48 01       	movw	r8, r16
     942:	88 0c       	add	r8, r8
     944:	99 1c       	adc	r9, r9
     946:	80 0e       	add	r8, r16
     948:	91 1e       	adc	r9, r17
     94a:	eb 81       	ldd	r30, Y+3	; 0x03
     94c:	fc 81       	ldd	r31, Y+4	; 0x04
     94e:	e8 0d       	add	r30, r8
     950:	f9 1d       	adc	r31, r9
     952:	e8 59       	subi	r30, 0x98	; 152
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	84 91       	lpm	r24, Z
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	26 d3       	rcall	.+1612   	; 0xfa8 <pca9635_set_led_pwm>
     95c:	8b 81       	ldd	r24, Y+3	; 0x03
     95e:	9c 81       	ldd	r25, Y+4	; 0x04
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	9c 83       	std	Y+4, r25	; 0x04
     964:	8b 83       	std	Y+3, r24	; 0x03
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
											for (byte j = 0; j <= 2; j++){
     966:	03 97       	sbiw	r24, 0x03	; 3
     968:	81 f7       	brne	.-32     	; 0x94a <__stack+0x4b>
     96a:	0f 5f       	subi	r16, 0xFF	; 255
     96c:	1f 4f       	sbci	r17, 0xFF	; 255
							
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
     96e:	04 30       	cpi	r16, 0x04	; 4
     970:	11 05       	cpc	r17, r1
     972:	e9 f6       	brne	.-70     	; 0x92e <__stack+0x2f>
     974:	5a cf       	rjmp	.-332    	; 0x82a <main+0x106>
						 } //  if(active_alarm_time == 0) {
				 

				 		// Only reset active alarm timer if there is a new alarm...
						// 0x10 = activate bit 0x0F are bits of the alarms
						if( (data & 0x10) && (data & 0x0F)){
     976:	83 2d       	mov	r24, r3
     978:	8f 70       	andi	r24, 0x0F	; 15
     97a:	09 f4       	brne	.+2      	; 0x97e <__stack+0x7f>
     97c:	56 cf       	rjmp	.-340    	; 0x82a <main+0x106>
				 			active_alarm_time = millis_get() + alarm_duration; 		 
     97e:	77 de       	rcall	.-786    	; 0x66e <millis_get>
     980:	00 91 00 01 	lds	r16, 0x0100
     984:	10 91 01 01 	lds	r17, 0x0101
     988:	20 91 02 01 	lds	r18, 0x0102
     98c:	30 91 03 01 	lds	r19, 0x0103
     990:	dc 01       	movw	r26, r24
     992:	cb 01       	movw	r24, r22
     994:	80 0f       	add	r24, r16
     996:	91 1f       	adc	r25, r17
     998:	a2 1f       	adc	r26, r18
     99a:	b3 1f       	adc	r27, r19
     99c:	80 93 41 01 	sts	0x0141, r24
     9a0:	90 93 42 01 	sts	0x0142, r25
     9a4:	a0 93 43 01 	sts	0x0143, r26
     9a8:	b0 93 44 01 	sts	0x0144, r27
     9ac:	3e cf       	rjmp	.-388    	; 0x82a <main+0x106>
						 }

				}else{ //  if(active_alarm & 0x0F){ // IS ER EEN ALARM ACTIEF in active_alarm?
						// no active alarm in array
												
						active_alarm_time = 0; // set alarm time to zero, timers will be disabled in next timer 2 interrupt
     9ae:	10 92 41 01 	sts	0x0141, r1
     9b2:	10 92 42 01 	sts	0x0142, r1
     9b6:	10 92 43 01 	sts	0x0143, r1
     9ba:	10 92 44 01 	sts	0x0144, r1
     9be:	35 cf       	rjmp	.-406    	; 0x82a <main+0x106>
	} else {
		
		// switch into idle mode until the next interrupt - Choose our preferred sleep mode:
		if(deep_sleep_ok == 1){
		//	set_sleep_mode(SLEEP_MODE_STANDBY); // if active alarm, go in pwr save mode to keep timer 2 running
			set_sleep_mode(SLEEP_MODE_PWR_DOWN); // if active alarm, go in pwr save mode to keep timer 2 running
     9c0:	83 b7       	in	r24, 0x33	; 51
     9c2:	81 7f       	andi	r24, 0xF1	; 241
     9c4:	84 60       	ori	r24, 0x04	; 4
     9c6:	83 bf       	out	0x33, r24	; 51
     9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <__stack+0xd1>
		}else{
			set_sleep_mode(SLEEP_MODE_IDLE);
     9ca:	83 b7       	in	r24, 0x33	; 51
     9cc:	81 7f       	andi	r24, 0xF1	; 241
     9ce:	83 bf       	out	0x33, r24	; 51
		}
  //   _delay_ms(15);
	
    // Set sleep enable (SE) bit:
    sleep_enable();
     9d0:	83 b7       	in	r24, 0x33	; 51
     9d2:	81 60       	ori	r24, 0x01	; 1
     9d4:	83 bf       	out	0x33, r24	; 51
    
    // Put the device to sleep:
    sleep_cpu();
     9d6:	88 95       	sleep
	
	// Clear sleep enable (SE) bit:
	sleep_disable();
     9d8:	83 b7       	in	r24, 0x33	; 51
     9da:	8e 7f       	andi	r24, 0xFE	; 254
     9dc:	83 bf       	out	0x33, r24	; 51
     9de:	25 cf       	rjmp	.-438    	; 0x82a <main+0x106>
					 
									
	} else {
		
		// switch into idle mode until the next interrupt - Choose our preferred sleep mode:
		if(deep_sleep_ok == 1){
     9e0:	80 91 46 01 	lds	r24, 0x0146
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	89 f7       	brne	.-30     	; 0x9ca <__stack+0xcb>
     9e8:	eb cf       	rjmp	.-42     	; 0x9c0 <__stack+0xc1>
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
						
			if (RF12_WANTS_ACK) {
     9ea:	f7 01       	movw	r30, r14
     9ec:	80 81       	ld	r24, Z
     9ee:	85 fd       	sbrc	r24, 5
     9f0:	28 cf       	rjmp	.-432    	; 0x842 <main+0x11e>
     9f2:	36 cf       	rjmp	.-404    	; 0x860 <main+0x13c>
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     9f4:	f7 01       	movw	r30, r14
     9f6:	80 81       	ld	r24, Z
     9f8:	86 ff       	sbrs	r24, 6
     9fa:	29 cf       	rjmp	.-430    	; 0x84e <main+0x12a>
     9fc:	80 e8       	ldi	r24, 0x80	; 128
     9fe:	2b cf       	rjmp	.-426    	; 0x856 <main+0x132>

00000a00 <_Z9isr_soundv>:
	}
						
}


	void isr_sound(){
     a00:	ef 92       	push	r14
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
		//	uart0_putc(sound_current_step);
		//	uart0_putc(millis_get());
		//	uart0_putc(_sound_note_time);
			// Stop note if necessary 
			if(_sound_note_time != 0){ // sound already playing?		
     a06:	80 91 3b 01 	lds	r24, 0x013B
     a0a:	90 91 3c 01 	lds	r25, 0x013C
     a0e:	a0 91 3d 01 	lds	r26, 0x013D
     a12:	b0 91 3e 01 	lds	r27, 0x013E
     a16:	89 2b       	or	r24, r25
     a18:	8a 2b       	or	r24, r26
     a1a:	8b 2b       	or	r24, r27
     a1c:	81 f0       	breq	.+32     	; 0xa3e <_Z9isr_soundv+0x3e>
				//	uart0_puts("GS");
				if(millis_get() < _sound_note_time ){ // Do we need to stop the current note?
     a1e:	27 de       	rcall	.-946    	; 0x66e <millis_get>
     a20:	00 91 3b 01 	lds	r16, 0x013B
     a24:	10 91 3c 01 	lds	r17, 0x013C
     a28:	20 91 3d 01 	lds	r18, 0x013D
     a2c:	30 91 3e 01 	lds	r19, 0x013E
     a30:	60 17       	cp	r22, r16
     a32:	71 07       	cpc	r23, r17
     a34:	82 07       	cpc	r24, r18
     a36:	93 07       	cpc	r25, r19
     a38:	08 f4       	brcc	.+2      	; 0xa3c <_Z9isr_soundv+0x3c>
     a3a:	ff c0       	rjmp	.+510    	; 0xc3a <_Z9isr_soundv+0x23a>
					//uart0_puts("DS");
					return; // dont stop current note
					
				}else{
					noTone(); // stop current note
     a3c:	1d d7       	rcall	.+3642   	; 0x1878 <noTone>
			
			// play next tone
		//	uart0_puts("PN");
		//	tone(unsigned long frequency, uint8_t volume);
		//uart0_putc(sound_current_alarm);
			if(sound_current_alarm == 0 ){
     a3e:	80 91 40 01 	lds	r24, 0x0140
     a42:	81 11       	cpse	r24, r1
     a44:	32 c0       	rjmp	.+100    	; 0xaaa <_Z9isr_soundv+0xaa>
				tone(pgm_read_word(&(sound_pattern_doorbell[sound_current_step].frequency)), 10); // freq, volume
     a46:	e0 91 3f 01 	lds	r30, 0x013F
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	ee 0f       	add	r30, r30
     a4e:	ff 1f       	adc	r31, r31
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	ee 0f       	add	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	ec 58       	subi	r30, 0x8C	; 140
     a5a:	ff 4f       	sbci	r31, 0xFF	; 255
     a5c:	65 91       	lpm	r22, Z+
     a5e:	74 91       	lpm	r23, Z
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	e1 2c       	mov	r14, r1
     a66:	00 e0       	ldi	r16, 0x00	; 0
     a68:	10 e0       	ldi	r17, 0x00	; 0
     a6a:	98 01       	movw	r18, r16
     a6c:	4a e0       	ldi	r20, 0x0A	; 10
     a6e:	0c d7       	rcall	.+3608   	; 0x1888 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_doorbell[sound_current_step].time)));
     a70:	fe dd       	rcall	.-1028   	; 0x66e <millis_get>
     a72:	e0 91 3f 01 	lds	r30, 0x013F
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	ee 0f       	add	r30, r30
     a7a:	ff 1f       	adc	r31, r31
     a7c:	ee 0f       	add	r30, r30
     a7e:	ff 1f       	adc	r31, r31
     a80:	ee 0f       	add	r30, r30
     a82:	ff 1f       	adc	r31, r31
     a84:	e8 58       	subi	r30, 0x88	; 136
     a86:	ff 4f       	sbci	r31, 0xFF	; 255
     a88:	25 91       	lpm	r18, Z+
     a8a:	34 91       	lpm	r19, Z
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	82 0f       	add	r24, r18
     a92:	93 1f       	adc	r25, r19
     a94:	a1 1d       	adc	r26, r1
     a96:	b1 1d       	adc	r27, r1
     a98:	80 93 3b 01 	sts	0x013B, r24
     a9c:	90 93 3c 01 	sts	0x013C, r25
     aa0:	a0 93 3d 01 	sts	0x013D, r26
     aa4:	b0 93 3e 01 	sts	0x013E, r27
     aa8:	9b c0       	rjmp	.+310    	; 0xbe0 <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 1 ){
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	91 f5       	brne	.+100    	; 0xb12 <_Z9isr_soundv+0x112>
				tone(pgm_read_word(&(sound_pattern_phone[sound_current_step].frequency)), 10);
     aae:	e0 91 3f 01 	lds	r30, 0x013F
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	ee 0f       	add	r30, r30
     ab6:	ff 1f       	adc	r31, r31
     ab8:	ee 0f       	add	r30, r30
     aba:	ff 1f       	adc	r31, r31
     abc:	ee 0f       	add	r30, r30
     abe:	ff 1f       	adc	r31, r31
     ac0:	ec 54       	subi	r30, 0x4C	; 76
     ac2:	ff 4f       	sbci	r31, 0xFF	; 255
     ac4:	65 91       	lpm	r22, Z+
     ac6:	74 91       	lpm	r23, Z
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	e1 2c       	mov	r14, r1
     ace:	00 e0       	ldi	r16, 0x00	; 0
     ad0:	10 e0       	ldi	r17, 0x00	; 0
     ad2:	98 01       	movw	r18, r16
     ad4:	4a e0       	ldi	r20, 0x0A	; 10
     ad6:	d8 d6       	rcall	.+3504   	; 0x1888 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_phone[sound_current_step].time)));
     ad8:	ca dd       	rcall	.-1132   	; 0x66e <millis_get>
     ada:	e0 91 3f 01 	lds	r30, 0x013F
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	e8 54       	subi	r30, 0x48	; 72
     aee:	ff 4f       	sbci	r31, 0xFF	; 255
     af0:	25 91       	lpm	r18, Z+
     af2:	34 91       	lpm	r19, Z
     af4:	dc 01       	movw	r26, r24
     af6:	cb 01       	movw	r24, r22
     af8:	82 0f       	add	r24, r18
     afa:	93 1f       	adc	r25, r19
     afc:	a1 1d       	adc	r26, r1
     afe:	b1 1d       	adc	r27, r1
     b00:	80 93 3b 01 	sts	0x013B, r24
     b04:	90 93 3c 01 	sts	0x013C, r25
     b08:	a0 93 3d 01 	sts	0x013D, r26
     b0c:	b0 93 3e 01 	sts	0x013E, r27
     b10:	67 c0       	rjmp	.+206    	; 0xbe0 <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 2 ){
     b12:	82 30       	cpi	r24, 0x02	; 2
     b14:	91 f5       	brne	.+100    	; 0xb7a <_Z9isr_soundv+0x17a>
				tone(pgm_read_word(&(sound_pattern_fire[sound_current_step].frequency)), 10);
     b16:	e0 91 3f 01 	lds	r30, 0x013F
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	ee 0f       	add	r30, r30
     b1e:	ff 1f       	adc	r31, r31
     b20:	ee 0f       	add	r30, r30
     b22:	ff 1f       	adc	r31, r31
     b24:	ee 0f       	add	r30, r30
     b26:	ff 1f       	adc	r31, r31
     b28:	ec 54       	subi	r30, 0x4C	; 76
     b2a:	fc 4f       	sbci	r31, 0xFC	; 252
     b2c:	65 91       	lpm	r22, Z+
     b2e:	74 91       	lpm	r23, Z
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	e1 2c       	mov	r14, r1
     b36:	00 e0       	ldi	r16, 0x00	; 0
     b38:	10 e0       	ldi	r17, 0x00	; 0
     b3a:	98 01       	movw	r18, r16
     b3c:	4a e0       	ldi	r20, 0x0A	; 10
     b3e:	a4 d6       	rcall	.+3400   	; 0x1888 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_fire[sound_current_step].time)));
     b40:	96 dd       	rcall	.-1236   	; 0x66e <millis_get>
     b42:	e0 91 3f 01 	lds	r30, 0x013F
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	ee 0f       	add	r30, r30
     b4e:	ff 1f       	adc	r31, r31
     b50:	ee 0f       	add	r30, r30
     b52:	ff 1f       	adc	r31, r31
     b54:	e8 54       	subi	r30, 0x48	; 72
     b56:	fc 4f       	sbci	r31, 0xFC	; 252
     b58:	25 91       	lpm	r18, Z+
     b5a:	34 91       	lpm	r19, Z
     b5c:	dc 01       	movw	r26, r24
     b5e:	cb 01       	movw	r24, r22
     b60:	82 0f       	add	r24, r18
     b62:	93 1f       	adc	r25, r19
     b64:	a1 1d       	adc	r26, r1
     b66:	b1 1d       	adc	r27, r1
     b68:	80 93 3b 01 	sts	0x013B, r24
     b6c:	90 93 3c 01 	sts	0x013C, r25
     b70:	a0 93 3d 01 	sts	0x013D, r26
     b74:	b0 93 3e 01 	sts	0x013E, r27
     b78:	33 c0       	rjmp	.+102    	; 0xbe0 <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 3 ){
     b7a:	83 30       	cpi	r24, 0x03	; 3
     b7c:	89 f5       	brne	.+98     	; 0xbe0 <_Z9isr_soundv+0x1e0>
				tone(pgm_read_word(&(sound_pattern_help[sound_current_step].frequency)),10);
     b7e:	e0 91 3f 01 	lds	r30, 0x013F
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	ec 5c       	subi	r30, 0xCC	; 204
     b92:	fb 4f       	sbci	r31, 0xFB	; 251
     b94:	65 91       	lpm	r22, Z+
     b96:	74 91       	lpm	r23, Z
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	e1 2c       	mov	r14, r1
     b9e:	00 e0       	ldi	r16, 0x00	; 0
     ba0:	10 e0       	ldi	r17, 0x00	; 0
     ba2:	98 01       	movw	r18, r16
     ba4:	4a e0       	ldi	r20, 0x0A	; 10
     ba6:	70 d6       	rcall	.+3296   	; 0x1888 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_help[sound_current_step].time)));
     ba8:	62 dd       	rcall	.-1340   	; 0x66e <millis_get>
     baa:	e0 91 3f 01 	lds	r30, 0x013F
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	ee 0f       	add	r30, r30
     bb2:	ff 1f       	adc	r31, r31
     bb4:	ee 0f       	add	r30, r30
     bb6:	ff 1f       	adc	r31, r31
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	e8 5c       	subi	r30, 0xC8	; 200
     bbe:	fb 4f       	sbci	r31, 0xFB	; 251
     bc0:	25 91       	lpm	r18, Z+
     bc2:	34 91       	lpm	r19, Z
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	82 0f       	add	r24, r18
     bca:	93 1f       	adc	r25, r19
     bcc:	a1 1d       	adc	r26, r1
     bce:	b1 1d       	adc	r27, r1
     bd0:	80 93 3b 01 	sts	0x013B, r24
     bd4:	90 93 3c 01 	sts	0x013C, r25
     bd8:	a0 93 3d 01 	sts	0x013D, r26
     bdc:	b0 93 3e 01 	sts	0x013E, r27
			}
			
		//_sound_note_time = millis_get() + 1000;
			
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
     be0:	50 91 3f 01 	lds	r21, 0x013F
     be4:	40 91 40 01 	lds	r20, 0x0140
     be8:	25 2f       	mov	r18, r21
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	e4 2f       	mov	r30, r20
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	ec 5d       	subi	r30, 0xDC	; 220
     bf2:	fe 4f       	sbci	r31, 0xFE	; 254
     bf4:	80 81       	ld	r24, Z
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	01 97       	sbiw	r24, 0x01	; 1
     bfa:	28 17       	cp	r18, r24
     bfc:	39 07       	cpc	r19, r25
     bfe:	d4 f0       	brlt	.+52     	; 0xc34 <_Z9isr_soundv+0x234>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c00:	20 91 45 01 	lds	r18, 0x0145
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     c04:	92 2f       	mov	r25, r18
     c06:	9f 70       	andi	r25, 0x0F	; 15
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
     c0a:	4f 5f       	subi	r20, 0xFF	; 255
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     c0c:	44 30       	cpi	r20, 0x04	; 4
     c0e:	09 f4       	brne	.+2      	; 0xc12 <_Z9isr_soundv+0x212>
     c10:	43 2f       	mov	r20, r19
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c12:	e4 2f       	mov	r30, r20
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	e0 5e       	subi	r30, 0xE0	; 224
     c18:	fe 4f       	sbci	r31, 0xFE	; 254
     c1a:	80 81       	ld	r24, Z
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     c1c:	91 11       	cpse	r25, r1
     c1e:	03 c0       	rjmp	.+6      	; 0xc26 <_Z9isr_soundv+0x226>
     c20:	40 93 40 01 	sts	0x0140, r20
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <_Z9isr_soundv+0x22e>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c26:	82 23       	and	r24, r18
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
     c28:	81 f3       	breq	.-32     	; 0xc0a <_Z9isr_soundv+0x20a>
     c2a:	40 93 40 01 	sts	0x0140, r20
						done = 1; // in case there is no active alarm anymore, just breakout while
					}

				} // while
				
				sound_current_step = 0; // reset sound_current_step to zero to start the next sound	
     c2e:	10 92 3f 01 	sts	0x013F, r1
     c32:	03 c0       	rjmp	.+6      	; 0xc3a <_Z9isr_soundv+0x23a>
				
			}else{
				// set sound_current_step plus one
				sound_current_step++;
     c34:	5f 5f       	subi	r21, 0xFF	; 255
     c36:	50 93 3f 01 	sts	0x013F, r21
			}
	
				
		} //void isr_sound()
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ef 90       	pop	r14
     c40:	08 95       	ret

00000c42 <_Z15isr_light_flashv>:
		
	void isr_light_flash(){
     c42:	0f 93       	push	r16
     c44:	1f 93       	push	r17
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
			
		// Do we need to go to the next flash?
		if(_flash_time != 0){ // is there already a flash ?
     c4a:	80 91 36 01 	lds	r24, 0x0136
     c4e:	90 91 37 01 	lds	r25, 0x0137
     c52:	a0 91 38 01 	lds	r26, 0x0138
     c56:	b0 91 39 01 	lds	r27, 0x0139
     c5a:	89 2b       	or	r24, r25
     c5c:	8a 2b       	or	r24, r26
     c5e:	8b 2b       	or	r24, r27
     c60:	09 f4       	brne	.+2      	; 0xc64 <_Z15isr_light_flashv+0x22>
     c62:	48 c0       	rjmp	.+144    	; 0xcf4 <_Z15isr_light_flashv+0xb2>
			if(millis_get() < _flash_time ){ // Do we need to stop the current note?
     c64:	04 dd       	rcall	.-1528   	; 0x66e <millis_get>
     c66:	00 91 36 01 	lds	r16, 0x0136
     c6a:	10 91 37 01 	lds	r17, 0x0137
     c6e:	20 91 38 01 	lds	r18, 0x0138
     c72:	30 91 39 01 	lds	r19, 0x0139
     c76:	60 17       	cp	r22, r16
     c78:	71 07       	cpc	r23, r17
     c7a:	82 07       	cpc	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	08 f0       	brcs	.+2      	; 0xc82 <_Z15isr_light_flashv+0x40>
     c80:	39 c0       	rjmp	.+114    	; 0xcf4 <_Z15isr_light_flashv+0xb2>
     c82:	3b c0       	rjmp	.+118    	; 0xcfa <_Z15isr_light_flashv+0xb8>
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
     c84:	80 91 3a 01 	lds	r24, 0x013A
     c88:	fe 01       	movw	r30, r28
     c8a:	98 e0       	ldi	r25, 0x08	; 8
     c8c:	89 9f       	mul	r24, r25
     c8e:	e0 0d       	add	r30, r0
     c90:	f1 1d       	adc	r31, r1
     c92:	11 24       	eor	r1, r1
     c94:	e4 58       	subi	r30, 0x84	; 132
     c96:	fb 4f       	sbci	r31, 0xFB	; 251
     c98:	64 91       	lpm	r22, Z
     c9a:	8c 2f       	mov	r24, r28
     c9c:	8d 5f       	subi	r24, 0xFD	; 253
     c9e:	84 d1       	rcall	.+776    	; 0xfa8 <pca9635_set_led_pwm>
     ca0:	21 96       	adiw	r28, 0x01	; 1
			}						
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
     ca2:	c4 30       	cpi	r28, 0x04	; 4
     ca4:	d1 05       	cpc	r29, r1
     ca6:	71 f7       	brne	.-36     	; 0xc84 <_Z15isr_light_flashv+0x42>
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
		}
		//pca9635_set_led_pwm_flash(3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[0])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[1])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[2])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[3])) );
		
		_flash_time = millis_get() + pgm_read_word(&(flash_pattern[_flash_current_step].time));
     ca8:	e2 dc       	rcall	.-1596   	; 0x66e <millis_get>
     caa:	40 91 3a 01 	lds	r20, 0x013A
     cae:	e4 2f       	mov	r30, r20
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	ee 0f       	add	r30, r30
     cbc:	ff 1f       	adc	r31, r31
     cbe:	e0 58       	subi	r30, 0x80	; 128
     cc0:	fb 4f       	sbci	r31, 0xFB	; 251
     cc2:	25 91       	lpm	r18, Z+
     cc4:	34 91       	lpm	r19, Z
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	82 0f       	add	r24, r18
     ccc:	93 1f       	adc	r25, r19
     cce:	a1 1d       	adc	r26, r1
     cd0:	b1 1d       	adc	r27, r1
     cd2:	80 93 36 01 	sts	0x0136, r24
     cd6:	90 93 37 01 	sts	0x0137, r25
     cda:	a0 93 38 01 	sts	0x0138, r26
     cde:	b0 93 39 01 	sts	0x0139, r27
			
		// is variable _flash_current_step equal to total steps?
		if(_flash_current_step == (flash_keys -1 )) {
     ce2:	4f 31       	cpi	r20, 0x1F	; 31
     ce4:	19 f4       	brne	.+6      	; 0xcec <_Z15isr_light_flashv+0xaa>
			//reset _flash_current_step to 0
			_flash_current_step = 0;				
     ce6:	10 92 3a 01 	sts	0x013A, r1
     cea:	07 c0       	rjmp	.+14     	; 0xcfa <_Z15isr_light_flashv+0xb8>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
     cec:	4f 5f       	subi	r20, 0xFF	; 255
     cee:	40 93 3a 01 	sts	0x013A, r20
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <_Z15isr_light_flashv+0xb8>
			}
	
				
		} //void isr_sound()
		
	void isr_light_flash(){
     cf4:	c0 e0       	ldi	r28, 0x00	; 0
     cf6:	d0 e0       	ldi	r29, 0x00	; 0
     cf8:	c5 cf       	rjmp	.-118    	; 0xc84 <_Z15isr_light_flashv+0x42>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
		}
		
	} // END isr_light_flash
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	08 95       	ret

00000d04 <_Z14isr_light_iconv>:
		
		
		
		
		
	void isr_light_icon(){
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
		
		// Do we need to go to the next flash?
		if(_icon_time != 0){ // is there already a flash ?
     d0c:	80 91 30 01 	lds	r24, 0x0130
     d10:	90 91 31 01 	lds	r25, 0x0131
     d14:	a0 91 32 01 	lds	r26, 0x0132
     d18:	b0 91 33 01 	lds	r27, 0x0133
     d1c:	89 2b       	or	r24, r25
     d1e:	8a 2b       	or	r24, r26
     d20:	8b 2b       	or	r24, r27
     d22:	79 f0       	breq	.+30     	; 0xd42 <_Z14isr_light_iconv+0x3e>
			if(millis_get() < _icon_time ){ // Do we need to stop the current note?
     d24:	a4 dc       	rcall	.-1720   	; 0x66e <millis_get>
     d26:	00 91 30 01 	lds	r16, 0x0130
     d2a:	10 91 31 01 	lds	r17, 0x0131
     d2e:	20 91 32 01 	lds	r18, 0x0132
     d32:	30 91 33 01 	lds	r19, 0x0133
     d36:	60 17       	cp	r22, r16
     d38:	71 07       	cpc	r23, r17
     d3a:	82 07       	cpc	r24, r18
     d3c:	93 07       	cpc	r25, r19
     d3e:	08 f4       	brcc	.+2      	; 0xd42 <_Z14isr_light_iconv+0x3e>
     d40:	81 c0       	rjmp	.+258    	; 0xe44 <_Z14isr_light_iconv+0x140>
	// step 2 = 250 - (2 x 25)  = 200
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
     d42:	20 91 34 01 	lds	r18, 0x0134
     d46:	22 23       	and	r18, r18
     d48:	19 f0       	breq	.+6      	; 0xd50 <_Z14isr_light_iconv+0x4c>
     d4a:	2b 30       	cpi	r18, 0x0B	; 11
     d4c:	21 f5       	brne	.+72     	; 0xd96 <_Z14isr_light_iconv+0x92>
     d4e:	12 c0       	rjmp	.+36     	; 0xd74 <_Z14isr_light_iconv+0x70>
		intensity = 255;
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 1000;
     d50:	8e dc       	rcall	.-1764   	; 0x66e <millis_get>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	88 51       	subi	r24, 0x18	; 24
     d58:	9c 4f       	sbci	r25, 0xFC	; 252
     d5a:	af 4f       	sbci	r26, 0xFF	; 255
     d5c:	bf 4f       	sbci	r27, 0xFF	; 255
     d5e:	80 93 30 01 	sts	0x0130, r24
     d62:	90 93 31 01 	sts	0x0131, r25
     d66:	a0 93 32 01 	sts	0x0132, r26
     d6a:	b0 93 33 01 	sts	0x0133, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     d6e:	cf ef       	ldi	r28, 0xFF	; 255
     d70:	d0 e0       	ldi	r29, 0x00	; 0
     d72:	25 c0       	rjmp	.+74     	; 0xdbe <_Z14isr_light_iconv+0xba>
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 1000;
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
     d74:	7c dc       	rcall	.-1800   	; 0x66e <millis_get>
     d76:	dc 01       	movw	r26, r24
     d78:	cb 01       	movw	r24, r22
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	a1 1d       	adc	r26, r1
     d7e:	b1 1d       	adc	r27, r1
     d80:	80 93 30 01 	sts	0x0130, r24
     d84:	90 93 31 01 	sts	0x0131, r25
     d88:	a0 93 32 01 	sts	0x0132, r26
     d8c:	b0 93 33 01 	sts	0x0133, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     d90:	cf ef       	ldi	r28, 0xFF	; 255
     d92:	d0 e0       	ldi	r29, 0x00	; 0
     d94:	14 c0       	rjmp	.+40     	; 0xdbe <_Z14isr_light_iconv+0xba>
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
		}
			
	}else{
		intensity = (250 - (icon_current_step * 25)); // step 1 to 10, 
     d96:	37 ee       	ldi	r19, 0xE7	; 231
     d98:	32 03       	mulsu	r19, r18
     d9a:	e0 01       	movw	r28, r0
     d9c:	11 24       	eor	r1, r1
     d9e:	c6 50       	subi	r28, 0x06	; 6
     da0:	df 4f       	sbci	r29, 0xFF	; 255
		_icon_time = millis_get() + 30;
     da2:	65 dc       	rcall	.-1846   	; 0x66e <millis_get>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	4e 96       	adiw	r24, 0x1e	; 30
     daa:	a1 1d       	adc	r26, r1
     dac:	b1 1d       	adc	r27, r1
     dae:	80 93 30 01 	sts	0x0130, r24
     db2:	90 93 31 01 	sts	0x0131, r25
     db6:	a0 93 32 01 	sts	0x0132, r26
     dba:	b0 93 33 01 	sts	0x0133, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     dbe:	00 e0       	ldi	r16, 0x00	; 0
     dc0:	10 e0       	ldi	r17, 0x00	; 0
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     dc2:	80 91 35 01 	lds	r24, 0x0135
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	9c 01       	movw	r18, r24
     dca:	22 0f       	add	r18, r18
     dcc:	33 1f       	adc	r19, r19
     dce:	82 0f       	add	r24, r18
     dd0:	93 1f       	adc	r25, r19
     dd2:	80 0f       	add	r24, r16
     dd4:	91 1f       	adc	r25, r17
     dd6:	fc 01       	movw	r30, r24
     dd8:	e4 58       	subi	r30, 0x84	; 132
     dda:	fa 4f       	sbci	r31, 0xFA	; 250
     ddc:	44 91       	lpm	r20, Z
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     dde:	fc 01       	movw	r30, r24
     de0:	e8 59       	subi	r30, 0x98	; 152
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	84 91       	lpm	r24, Z
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     de6:	4c 9f       	mul	r20, r28
     de8:	90 01       	movw	r18, r0
     dea:	4d 9f       	mul	r20, r29
     dec:	30 0d       	add	r19, r0
     dee:	11 24       	eor	r1, r1
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     df0:	63 2f       	mov	r22, r19
     df2:	da d0       	rcall	.+436    	; 0xfa8 <pca9635_set_led_pwm>
     df4:	0f 5f       	subi	r16, 0xFF	; 255
     df6:	1f 4f       	sbci	r17, 0xFF	; 255
		_icon_time = millis_get() + 30;
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
     df8:	03 30       	cpi	r16, 0x03	; 3
     dfa:	11 05       	cpc	r17, r1
     dfc:	11 f7       	brne	.-60     	; 0xdc2 <_Z14isr_light_iconv+0xbe>
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
	}
	

	// is variable _flash_current_step equal to total steps?
	if(icon_current_step == 11) {
     dfe:	80 91 34 01 	lds	r24, 0x0134
     e02:	8b 30       	cpi	r24, 0x0B	; 11
     e04:	e1 f4       	brne	.+56     	; 0xe3e <_Z14isr_light_iconv+0x13a>
		//reset _flash_current_step to 0
		icon_current_step = 0;
     e06:	10 92 34 01 	sts	0x0134, r1
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e0a:	30 91 45 01 	lds	r19, 0x0145
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     e0e:	23 2f       	mov	r18, r19
     e10:	2f 70       	andi	r18, 0x0F	; 15
     e12:	80 91 35 01 	lds	r24, 0x0135
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     e16:	40 e0       	ldi	r20, 0x00	; 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
     e18:	8f 5f       	subi	r24, 0xFF	; 255
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     e1a:	84 30       	cpi	r24, 0x04	; 4
     e1c:	09 f4       	brne	.+2      	; 0xe20 <_Z14isr_light_iconv+0x11c>
     e1e:	84 2f       	mov	r24, r20
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e20:	e8 2f       	mov	r30, r24
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	e0 5e       	subi	r30, 0xE0	; 224
     e26:	fe 4f       	sbci	r31, 0xFE	; 254
     e28:	90 81       	ld	r25, Z
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     e2a:	21 11       	cpse	r18, r1
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <_Z14isr_light_iconv+0x130>
     e2e:	80 93 35 01 	sts	0x0135, r24
     e32:	08 c0       	rjmp	.+16     	; 0xe44 <_Z14isr_light_iconv+0x140>
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e34:	93 23       	and	r25, r19
		//reset _flash_current_step to 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
     e36:	81 f3       	breq	.-32     	; 0xe18 <_Z14isr_light_iconv+0x114>
     e38:	80 93 35 01 	sts	0x0135, r24
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <_Z14isr_light_iconv+0x140>
			} // while
			
			
		}else{
		// set _flash_current_step +1
		icon_current_step++;
     e3e:	8f 5f       	subi	r24, 0xFF	; 255
     e40:	80 93 34 01 	sts	0x0134, r24
	}
	
} // END isr_light_icon
     e44:	df 91       	pop	r29
     e46:	cf 91       	pop	r28
     e48:	1f 91       	pop	r17
     e4a:	0f 91       	pop	r16
     e4c:	08 95       	ret

00000e4e <__vector_7>:

	
	
	
	
ISR (TIMER2_COMPA_vect) {
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	2f 93       	push	r18
     e5e:	3f 93       	push	r19
     e60:	4f 93       	push	r20
     e62:	5f 93       	push	r21
     e64:	6f 93       	push	r22
     e66:	7f 93       	push	r23
     e68:	8f 93       	push	r24
     e6a:	9f 93       	push	r25
     e6c:	af 93       	push	r26
     e6e:	bf 93       	push	r27
     e70:	ef 93       	push	r30
     e72:	ff 93       	push	r31
//uart0_puts("I");

	// check if the alarm needs to be stopped
	if(millis_get() >= active_alarm_time || active_alarm_time == 0){
     e74:	fc db       	rcall	.-2056   	; 0x66e <millis_get>
     e76:	00 91 41 01 	lds	r16, 0x0141
     e7a:	10 91 42 01 	lds	r17, 0x0142
     e7e:	20 91 43 01 	lds	r18, 0x0143
     e82:	30 91 44 01 	lds	r19, 0x0144
     e86:	60 17       	cp	r22, r16
     e88:	71 07       	cpc	r23, r17
     e8a:	82 07       	cpc	r24, r18
     e8c:	93 07       	cpc	r25, r19
     e8e:	28 f4       	brcc	.+10     	; 0xe9a <__vector_7+0x4c>
     e90:	01 2b       	or	r16, r17
     e92:	02 2b       	or	r16, r18
     e94:	03 2b       	or	r16, r19
     e96:	09 f0       	breq	.+2      	; 0xe9a <__vector_7+0x4c>
     e98:	3c c0       	rjmp	.+120    	; 0xf12 <__vector_7+0xc4>
		// stop alarm
			
			//uart0_puts("STOPINT");			
			// stop timer 0
			millis_pause();
     e9a:	08 dc       	rcall	.-2032   	; 0x6ac <millis_pause>
			
			// stop sound
			noTone();
     e9c:	ed d4       	rcall	.+2522   	; 0x1878 <noTone>
			
			// stop timer 2
			TIMSK2 &= ~_BV(OCIE2A);
     e9e:	e0 e7       	ldi	r30, 0x70	; 112
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	8d 7f       	andi	r24, 0xFD	; 253
     ea6:	80 83       	st	Z, r24
			power_timer2_disable();
     ea8:	e4 e6       	ldi	r30, 0x64	; 100
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 64       	ori	r24, 0x40	; 64
     eb0:	80 83       	st	Z, r24
			
			// reset steps of sound, flash and icon
			sound_current_step		= 0;
     eb2:	10 92 3f 01 	sts	0x013F, r1
			_sound_note_time		= 0;
     eb6:	10 92 3b 01 	sts	0x013B, r1
     eba:	10 92 3c 01 	sts	0x013C, r1
     ebe:	10 92 3d 01 	sts	0x013D, r1
     ec2:	10 92 3e 01 	sts	0x013E, r1
										
			_flash_current_step		= 0;
     ec6:	10 92 3a 01 	sts	0x013A, r1
			_flash_time				= 0;
     eca:	10 92 36 01 	sts	0x0136, r1
     ece:	10 92 37 01 	sts	0x0137, r1
     ed2:	10 92 38 01 	sts	0x0138, r1
     ed6:	10 92 39 01 	sts	0x0139, r1
										
			icon_current_step		= 0;
     eda:	10 92 34 01 	sts	0x0134, r1
			_icon_time				= 0;
     ede:	10 92 30 01 	sts	0x0130, r1
     ee2:	10 92 31 01 	sts	0x0131, r1
     ee6:	10 92 32 01 	sts	0x0132, r1
     eea:	10 92 33 01 	sts	0x0133, r1
										
			// empty alarm arrray
			active_alarm = 0x00; 
     eee:	10 92 45 01 	sts	0x0145, r1
			active_alarm_time = 0;
     ef2:	10 92 41 01 	sts	0x0141, r1
     ef6:	10 92 42 01 	sts	0x0142, r1
     efa:	10 92 43 01 	sts	0x0143, r1
     efe:	10 92 44 01 	sts	0x0144, r1
					
			// alle leds uit, pca in slaapstand
			pca9635_set_all_led_pwm(0); // dimm all leds to zero
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	62 d0       	rcall	.+196    	; 0xfca <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1); // put pca9635 in sleep
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	70 d0       	rcall	.+224    	; 0xfea <pca9635_set_sleep>
			// automatisch slapen in loop.

			deep_sleep_ok = 1;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	80 93 46 01 	sts	0x0146, r24
     f10:	03 c0       	rjmp	.+6      	; 0xf18 <__vector_7+0xca>
					
	}else{
		// continue alarm
		isr_sound();
     f12:	76 dd       	rcall	.-1300   	; 0xa00 <_Z9isr_soundv>
	    isr_light_flash();
     f14:	96 de       	rcall	.-724    	; 0xc42 <_Z15isr_light_flashv>
		isr_light_icon();		
     f16:	f6 de       	rcall	.-532    	; 0xd04 <_Z14isr_light_iconv>
	}
						
}
     f18:	ff 91       	pop	r31
     f1a:	ef 91       	pop	r30
     f1c:	bf 91       	pop	r27
     f1e:	af 91       	pop	r26
     f20:	9f 91       	pop	r25
     f22:	8f 91       	pop	r24
     f24:	7f 91       	pop	r23
     f26:	6f 91       	pop	r22
     f28:	5f 91       	pop	r21
     f2a:	4f 91       	pop	r20
     f2c:	3f 91       	pop	r19
     f2e:	2f 91       	pop	r18
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	0f 90       	pop	r0
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	0f 90       	pop	r0
     f3a:	1f 90       	pop	r1
     f3c:	18 95       	reti

00000f3e <pca9635_init>:
	   I2C_write(value);	
  	}
			  
  	I2C_stop();
		  
}
     f3e:	80 e8       	ldi	r24, 0x80	; 128
     f40:	44 db       	rcall	.-2424   	; 0x5ca <I2C_start>
     f42:	80 e8       	ldi	r24, 0x80	; 128
     f44:	67 db       	rcall	.-2354   	; 0x614 <I2C_write>
     f46:	80 e8       	ldi	r24, 0x80	; 128
     f48:	65 db       	rcall	.-2358   	; 0x614 <I2C_write>
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	63 db       	rcall	.-2362   	; 0x614 <I2C_write>
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	61 db       	rcall	.-2366   	; 0x614 <I2C_write>
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	5f db       	rcall	.-2370   	; 0x614 <I2C_write>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	5d db       	rcall	.-2374   	; 0x614 <I2C_write>
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	5b db       	rcall	.-2378   	; 0x614 <I2C_write>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	59 db       	rcall	.-2382   	; 0x614 <I2C_write>
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	57 db       	rcall	.-2386   	; 0x614 <I2C_write>
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	55 db       	rcall	.-2390   	; 0x614 <I2C_write>
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	53 db       	rcall	.-2394   	; 0x614 <I2C_write>
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	51 db       	rcall	.-2398   	; 0x614 <I2C_write>
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	4f db       	rcall	.-2402   	; 0x614 <I2C_write>
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	4d db       	rcall	.-2406   	; 0x614 <I2C_write>
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	4b db       	rcall	.-2410   	; 0x614 <I2C_write>
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	49 db       	rcall	.-2414   	; 0x614 <I2C_write>
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	47 db       	rcall	.-2418   	; 0x614 <I2C_write>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	45 db       	rcall	.-2422   	; 0x614 <I2C_write>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	43 db       	rcall	.-2426   	; 0x614 <I2C_write>
     f8e:	8f ef       	ldi	r24, 0xFF	; 255
     f90:	41 db       	rcall	.-2430   	; 0x614 <I2C_write>
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	3f db       	rcall	.-2434   	; 0x614 <I2C_write>
     f96:	8a ea       	ldi	r24, 0xAA	; 170
     f98:	3d db       	rcall	.-2438   	; 0x614 <I2C_write>
     f9a:	8a ea       	ldi	r24, 0xAA	; 170
     f9c:	3b db       	rcall	.-2442   	; 0x614 <I2C_write>
     f9e:	8a ea       	ldi	r24, 0xAA	; 170
     fa0:	39 db       	rcall	.-2446   	; 0x614 <I2C_write>
     fa2:	8a ea       	ldi	r24, 0xAA	; 170
     fa4:	37 db       	rcall	.-2450   	; 0x614 <I2C_write>
     fa6:	53 cb       	rjmp	.-2394   	; 0x64e <I2C_stop>

00000fa8 <pca9635_set_led_pwm>:
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	d8 2f       	mov	r29, r24
     fae:	c6 2f       	mov	r28, r22
     fb0:	80 e8       	ldi	r24, 0x80	; 128
     fb2:	0b db       	rcall	.-2538   	; 0x5ca <I2C_start>
     fb4:	8d 2f       	mov	r24, r29
     fb6:	8e 5f       	subi	r24, 0xFE	; 254
     fb8:	80 68       	ori	r24, 0x80	; 128
     fba:	2c db       	rcall	.-2472   	; 0x614 <I2C_write>
     fbc:	8c 2f       	mov	r24, r28
     fbe:	2a db       	rcall	.-2476   	; 0x614 <I2C_write>
     fc0:	46 db       	rcall	.-2420   	; 0x64e <I2C_stop>
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <pca9635_set_all_led_pwm>:
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	d8 2f       	mov	r29, r24
     fd0:	80 e8       	ldi	r24, 0x80	; 128
     fd2:	fb da       	rcall	.-2570   	; 0x5ca <I2C_start>
     fd4:	82 e8       	ldi	r24, 0x82	; 130
     fd6:	1e db       	rcall	.-2500   	; 0x614 <I2C_write>
     fd8:	c0 e1       	ldi	r28, 0x10	; 16
     fda:	8d 2f       	mov	r24, r29
     fdc:	1b db       	rcall	.-2506   	; 0x614 <I2C_write>
     fde:	c1 50       	subi	r28, 0x01	; 1
     fe0:	e1 f7       	brne	.-8      	; 0xfda <pca9635_set_all_led_pwm+0x10>
     fe2:	35 db       	rcall	.-2454   	; 0x64e <I2C_stop>
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret

00000fea <pca9635_set_sleep>:

/**
* Changes the oscillator mode between sleep (1) and active (0)
*/
uint8_t pca9635_set_sleep(uint8_t sleep)
{
     fea:	cf 93       	push	r28
     fec:	c8 2f       	mov	r28, r24
	I2C_start((0x40<<1)+I2C_READ);
     fee:	81 e8       	ldi	r24, 0x81	; 129
     ff0:	ec da       	rcall	.-2600   	; 0x5ca <I2C_start>
	I2C_write(0x80); // autoincrement, mode 0,
     ff2:	80 e8       	ldi	r24, 0x80	; 128
     ff4:	0f db       	rcall	.-2530   	; 0x614 <I2C_write>
	// I2C_stop(); ???nodig?
	uint8_t data = I2C_read_ack();
     ff6:	20 db       	rcall	.-2496   	; 0x638 <I2C_read_ack>
	
	if(sleep){		// set or unset bit 4
     ff8:	cc 23       	and	r28, r28
     ffa:	11 f0       	breq	.+4      	; 0x1000 <pca9635_set_sleep+0x16>
		data |= (1<<4);
     ffc:	80 61       	ori	r24, 0x10	; 16
     ffe:	01 c0       	rjmp	.+2      	; 0x1002 <pca9635_set_sleep+0x18>
	}else{
		data &= ~(1<<4);
    1000:	8f 7e       	andi	r24, 0xEF	; 239
	}
	
	uint8_t ack = I2C_write(data);  
    1002:	08 db       	rcall	.-2544   	; 0x614 <I2C_write>
    1004:	c8 2f       	mov	r28, r24
	I2C_stop();
    1006:	23 db       	rcall	.-2490   	; 0x64e <I2C_stop>
	return ack;
}
    1008:	8c 2f       	mov	r24, r28
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <_ZL15blockInterruptsv>:
	rf12_idle();
	else {
		rfmstate &= ~B11111000; // make sure everything is switched off (except bod, wkup, clk)
		rf12_xfer(rfmstate);
	}
	rxstate = TXIDLE;
    100e:	e8 98       	cbi	0x1d, 0	; 29
    1010:	08 95       	ret

00001012 <_ZL15allowInterruptsv>:
    1012:	e8 9a       	sbi	0x1d, 0	; 29
    1014:	08 95       	ret

00001016 <_ZL9rf12_byteh>:
    1016:	8e bd       	out	0x2e, r24	; 46
    1018:	0d b4       	in	r0, 0x2d	; 45
    101a:	07 fe       	sbrs	r0, 7
    101c:	fd cf       	rjmp	.-6      	; 0x1018 <_ZL9rf12_byteh+0x2>
    101e:	8e b5       	in	r24, 0x2e	; 46
    1020:	08 95       	ret

00001022 <_ZL9rf12_xferj>:
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	18 2f       	mov	r17, r24
    102a:	c9 2f       	mov	r28, r25
    102c:	f0 df       	rcall	.-32     	; 0x100e <_ZL15blockInterruptsv>
    102e:	2a 98       	cbi	0x05, 2	; 5
    1030:	8c 2f       	mov	r24, r28
    1032:	f1 df       	rcall	.-30     	; 0x1016 <_ZL9rf12_byteh>
    1034:	d8 2f       	mov	r29, r24
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	c8 2f       	mov	r28, r24
    103a:	81 2f       	mov	r24, r17
    103c:	ec df       	rcall	.-40     	; 0x1016 <_ZL9rf12_byteh>
    103e:	c8 2b       	or	r28, r24
    1040:	2a 9a       	sbi	0x05, 2	; 5
    1042:	e7 df       	rcall	.-50     	; 0x1012 <_ZL15allowInterruptsv>
    1044:	8c 2f       	mov	r24, r28
    1046:	9d 2f       	mov	r25, r29
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	08 95       	ret

00001050 <_ZL9rf12_idlev>:
    1050:	80 91 9b 01 	lds	r24, 0x019B
    1054:	90 91 9c 01 	lds	r25, 0x019C
    1058:	8f 70       	andi	r24, 0x0F	; 15
    105a:	90 93 9c 01 	sts	0x019C, r25
    105e:	80 93 9b 01 	sts	0x019B, r24
    1062:	80 91 9b 01 	lds	r24, 0x019B
    1066:	90 91 9c 01 	lds	r25, 0x019C
    106a:	88 60       	ori	r24, 0x08	; 8
    106c:	90 93 9c 01 	sts	0x019C, r25
    1070:	80 93 9b 01 	sts	0x019B, r24
    1074:	80 91 9b 01 	lds	r24, 0x019B
    1078:	90 91 9c 01 	lds	r25, 0x019C
    107c:	d2 cf       	rjmp	.-92     	; 0x1022 <_ZL9rf12_xferj>

0000107e <_Z12rf12_spiInitv>:
    107e:	84 b1       	in	r24, 0x04	; 4
    1080:	8c 62       	ori	r24, 0x2C	; 44
    1082:	84 b9       	out	0x04, r24	; 4
    1084:	2a 9a       	sbi	0x05, 2	; 5
    1086:	24 98       	cbi	0x04, 4	; 4
    1088:	80 e5       	ldi	r24, 0x50	; 80
    108a:	8c bd       	out	0x2c, r24	; 44
    108c:	8d b5       	in	r24, 0x2d	; 45
    108e:	81 60       	ori	r24, 0x01	; 1
    1090:	8d bd       	out	0x2d, r24	; 45
    1092:	52 98       	cbi	0x0a, 2	; 10
    1094:	5a 9a       	sbi	0x0b, 2	; 11
    1096:	08 95       	ret

00001098 <_Z13rf12_recvDonev>:
    1098:	80 91 9d 01 	lds	r24, 0x019D
    109c:	87 30       	cpi	r24, 0x07	; 7
    109e:	09 f0       	breq	.+2      	; 0x10a2 <_Z13rf12_recvDonev+0xa>
    10a0:	51 c0       	rjmp	.+162    	; 0x1144 <_Z13rf12_recvDonev+0xac>
    10a2:	80 91 a0 01 	lds	r24, 0x01A0
    10a6:	88 23       	and	r24, r24
    10a8:	a1 f0       	breq	.+40     	; 0x10d2 <_Z13rf12_recvDonev+0x3a>
    10aa:	90 91 9e 01 	lds	r25, 0x019E
    10ae:	98 17       	cp	r25, r24
    10b0:	28 f4       	brcc	.+10     	; 0x10bc <_Z13rf12_recvDonev+0x24>
    10b2:	80 91 9e 01 	lds	r24, 0x019E
    10b6:	87 34       	cpi	r24, 0x47	; 71
    10b8:	08 f4       	brcc	.+2      	; 0x10bc <_Z13rf12_recvDonev+0x24>
    10ba:	44 c0       	rjmp	.+136    	; 0x1144 <_Z13rf12_recvDonev+0xac>
    10bc:	84 e0       	ldi	r24, 0x04	; 4
    10be:	80 93 9d 01 	sts	0x019D, r24
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	90 93 95 01 	sts	0x0195, r25
    10ca:	80 93 94 01 	sts	0x0194, r24
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	08 95       	ret
    10d2:	20 91 9e 01 	lds	r18, 0x019E
    10d6:	80 91 4f 01 	lds	r24, 0x014F
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	05 96       	adiw	r24, 0x05	; 5
    10e0:	28 17       	cp	r18, r24
    10e2:	39 07       	cpc	r19, r25
    10e4:	24 f4       	brge	.+8      	; 0x10ee <_Z13rf12_recvDonev+0x56>
    10e6:	80 91 9e 01 	lds	r24, 0x019E
    10ea:	87 34       	cpi	r24, 0x47	; 71
    10ec:	58 f1       	brcs	.+86     	; 0x1144 <_Z13rf12_recvDonev+0xac>
    10ee:	84 e0       	ldi	r24, 0x04	; 4
    10f0:	80 93 9d 01 	sts	0x019D, r24
    10f4:	80 91 4f 01 	lds	r24, 0x014F
    10f8:	83 34       	cpi	r24, 0x43	; 67
    10fa:	30 f0       	brcs	.+12     	; 0x1108 <_Z13rf12_recvDonev+0x70>
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	90 93 95 01 	sts	0x0195, r25
    1104:	80 93 94 01 	sts	0x0194, r24
    1108:	80 91 4e 01 	lds	r24, 0x014E
    110c:	86 ff       	sbrs	r24, 6
    110e:	0b c0       	rjmp	.+22     	; 0x1126 <_Z13rf12_recvDonev+0x8e>
    1110:	80 91 a1 01 	lds	r24, 0x01A1
    1114:	98 2f       	mov	r25, r24
    1116:	9f 71       	andi	r25, 0x1F	; 31
    1118:	9f 31       	cpi	r25, 0x1F	; 31
    111a:	29 f0       	breq	.+10     	; 0x1126 <_Z13rf12_recvDonev+0x8e>
    111c:	90 91 4e 01 	lds	r25, 0x014E
    1120:	89 27       	eor	r24, r25
    1122:	8f 71       	andi	r24, 0x1F	; 31
    1124:	79 f4       	brne	.+30     	; 0x1144 <_Z13rf12_recvDonev+0xac>
    1126:	80 91 94 01 	lds	r24, 0x0194
    112a:	90 91 95 01 	lds	r25, 0x0195
    112e:	89 2b       	or	r24, r25
    1130:	09 f0       	breq	.+2      	; 0x1134 <_Z13rf12_recvDonev+0x9c>
    1132:	55 c0       	rjmp	.+170    	; 0x11de <_Z13rf12_recvDonev+0x146>
    1134:	e0 91 47 01 	lds	r30, 0x0147
    1138:	f0 91 48 01 	lds	r31, 0x0148
    113c:	30 97       	sbiw	r30, 0x00	; 0
    113e:	09 f0       	breq	.+2      	; 0x1142 <_Z13rf12_recvDonev+0xaa>
    1140:	4a c0       	rjmp	.+148    	; 0x11d6 <_Z13rf12_recvDonev+0x13e>
    1142:	4d c0       	rjmp	.+154    	; 0x11de <_Z13rf12_recvDonev+0x146>
    1144:	80 91 9d 01 	lds	r24, 0x019D
    1148:	84 30       	cpi	r24, 0x04	; 4
    114a:	09 f0       	breq	.+2      	; 0x114e <_Z13rf12_recvDonev+0xb6>
    114c:	42 c0       	rjmp	.+132    	; 0x11d2 <_Z13rf12_recvDonev+0x13a>
    114e:	10 92 4f 01 	sts	0x014F, r1
    1152:	10 92 9e 01 	sts	0x019E, r1
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    1158:	9f ef       	ldi	r25, 0xFF	; 255
    115a:	90 93 95 01 	sts	0x0195, r25
    115e:	80 93 94 01 	sts	0x0194, r24
    1162:	20 91 9f 01 	lds	r18, 0x019F
    1166:	22 23       	and	r18, r18
    1168:	d9 f0       	breq	.+54     	; 0x11a0 <_Z13rf12_recvDonev+0x108>
    116a:	82 27       	eor	r24, r18
    116c:	28 2f       	mov	r18, r24
    116e:	22 95       	swap	r18
    1170:	28 27       	eor	r18, r24
    1172:	02 2e       	mov	r0, r18
    1174:	26 95       	lsr	r18
    1176:	26 95       	lsr	r18
    1178:	20 25       	eor	r18, r0
    117a:	02 2e       	mov	r0, r18
    117c:	26 95       	lsr	r18
    117e:	20 25       	eor	r18, r0
    1180:	27 70       	andi	r18, 0x07	; 7
    1182:	08 2e       	mov	r0, r24
    1184:	89 2f       	mov	r24, r25
    1186:	26 95       	lsr	r18
    1188:	07 94       	ror	r0
    118a:	27 95       	ror	r18
    118c:	90 2d       	mov	r25, r0
    118e:	82 27       	eor	r24, r18
    1190:	06 94       	lsr	r0
    1192:	27 95       	ror	r18
    1194:	90 25       	eor	r25, r0
    1196:	82 27       	eor	r24, r18
    1198:	90 93 95 01 	sts	0x0195, r25
    119c:	80 93 94 01 	sts	0x0194, r24
    11a0:	87 e0       	ldi	r24, 0x07	; 7
    11a2:	80 93 9d 01 	sts	0x019D, r24
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	80 93 97 01 	sts	0x0197, r24
    11ac:	83 ea       	ldi	r24, 0xA3	; 163
    11ae:	94 e9       	ldi	r25, 0x94	; 148
    11b0:	38 df       	rcall	.-400    	; 0x1022 <_ZL9rf12_xferj>
    11b2:	80 91 9b 01 	lds	r24, 0x019B
    11b6:	90 91 9c 01 	lds	r25, 0x019C
    11ba:	88 6d       	ori	r24, 0xD8	; 216
    11bc:	90 93 9c 01 	sts	0x019C, r25
    11c0:	80 93 9b 01 	sts	0x019B, r24
    11c4:	80 91 9b 01 	lds	r24, 0x019B
    11c8:	90 91 9c 01 	lds	r25, 0x019C
    11cc:	2a df       	rcall	.-428    	; 0x1022 <_ZL9rf12_xferj>
    11ce:	80 e0       	ldi	r24, 0x00	; 0
    11d0:	08 95       	ret
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	08 95       	ret
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	09 95       	icall
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	08 95       	ret
    11de:	8f ef       	ldi	r24, 0xFF	; 255
    11e0:	9f ef       	ldi	r25, 0xFF	; 255
    11e2:	dc 01       	movw	r26, r24
    11e4:	80 93 49 01 	sts	0x0149, r24
    11e8:	90 93 4a 01 	sts	0x014A, r25
    11ec:	a0 93 4b 01 	sts	0x014B, r26
    11f0:	b0 93 4c 01 	sts	0x014C, r27
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	08 95       	ret

000011f8 <_Z15rf12_setBitrateh>:
    11f8:	cf 92       	push	r12
    11fa:	df 92       	push	r13
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	c8 2f       	mov	r28, r24
    1208:	08 2f       	mov	r16, r24
    120a:	10 e0       	ldi	r17, 0x00	; 0
    120c:	c8 01       	movw	r24, r16
    120e:	96 6c       	ori	r25, 0xC6	; 198
    1210:	08 df       	rcall	.-496    	; 0x1022 <_ZL9rf12_xferj>
    1212:	cf 77       	andi	r28, 0x7F	; 127
    1214:	2c 2f       	mov	r18, r28
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	2f 5f       	subi	r18, 0xFF	; 255
    121a:	3f 4f       	sbci	r19, 0xFF	; 255
    121c:	44 27       	eor	r20, r20
    121e:	37 fd       	sbrc	r19, 7
    1220:	40 95       	com	r20
    1222:	54 2f       	mov	r21, r20
    1224:	6b ef       	ldi	r22, 0xFB	; 251
    1226:	72 e4       	ldi	r23, 0x42	; 66
    1228:	85 e0       	ldi	r24, 0x05	; 5
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	47 d4       	rcall	.+2190   	; 0x1abc <__udivmodsi4>
    122e:	69 01       	movw	r12, r18
    1230:	7a 01       	movw	r14, r20
    1232:	c8 01       	movw	r24, r16
    1234:	88 0f       	add	r24, r24
    1236:	89 2f       	mov	r24, r25
    1238:	88 1f       	adc	r24, r24
    123a:	99 0b       	sbc	r25, r25
    123c:	8c 01       	movw	r16, r24
    123e:	00 0f       	add	r16, r16
    1240:	11 1f       	adc	r17, r17
    1242:	00 0f       	add	r16, r16
    1244:	11 1f       	adc	r17, r17
    1246:	00 0f       	add	r16, r16
    1248:	11 1f       	adc	r17, r17
    124a:	08 1b       	sub	r16, r24
    124c:	19 0b       	sbc	r17, r25
    124e:	0f 5f       	subi	r16, 0xFF	; 255
    1250:	1f 4f       	sbci	r17, 0xFF	; 255
    1252:	98 01       	movw	r18, r16
    1254:	44 27       	eor	r20, r20
    1256:	37 fd       	sbrc	r19, 7
    1258:	40 95       	com	r20
    125a:	54 2f       	mov	r21, r20
    125c:	c7 01       	movw	r24, r14
    125e:	b6 01       	movw	r22, r12
    1260:	2d d4       	rcall	.+2138   	; 0x1abc <__udivmodsi4>
    1262:	da 01       	movw	r26, r20
    1264:	c9 01       	movw	r24, r18
    1266:	68 94       	set
    1268:	12 f8       	bld	r1, 2
    126a:	b6 95       	lsr	r27
    126c:	a7 95       	ror	r26
    126e:	97 95       	ror	r25
    1270:	87 95       	ror	r24
    1272:	16 94       	lsr	r1
    1274:	d1 f7       	brne	.-12     	; 0x126a <_Z15rf12_setBitrateh+0x72>
    1276:	bc 01       	movw	r22, r24
    1278:	cd 01       	movw	r24, r26
    127a:	6d 57       	subi	r22, 0x7D	; 125
    127c:	7c 4f       	sbci	r23, 0xFC	; 252
    127e:	8f 4f       	sbci	r24, 0xFF	; 255
    1280:	9f 4f       	sbci	r25, 0xFF	; 255
    1282:	24 e8       	ldi	r18, 0x84	; 132
    1284:	33 e0       	ldi	r19, 0x03	; 3
    1286:	40 e0       	ldi	r20, 0x00	; 0
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	18 d4       	rcall	.+2096   	; 0x1abc <__udivmodsi4>
    128c:	20 93 96 01 	sts	0x0196, r18
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	08 95       	ret

000012a0 <_Z19rf12_setFixedLengthh>:
    12a0:	81 11       	cpse	r24, r1
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <_Z19rf12_setFixedLengthh+0xa>
    12a4:	10 92 a0 01 	sts	0x01A0, r1
    12a8:	08 95       	ret
    12aa:	8f 5f       	subi	r24, 0xFF	; 255
    12ac:	80 93 a0 01 	sts	0x01A0, r24
    12b0:	08 95       	ret

000012b2 <_Z14rf12_sendStarth>:
    12b2:	86 fd       	sbrc	r24, 6
    12b4:	05 c0       	rjmp	.+10     	; 0x12c0 <_Z14rf12_sendStarth+0xe>
    12b6:	80 7e       	andi	r24, 0xE0	; 224
    12b8:	90 91 a1 01 	lds	r25, 0x01A1
    12bc:	9f 71       	andi	r25, 0x1F	; 31
    12be:	89 0f       	add	r24, r25
    12c0:	80 93 4e 01 	sts	0x014E, r24
    12c4:	e0 91 47 01 	lds	r30, 0x0147
    12c8:	f0 91 48 01 	lds	r31, 0x0148
    12cc:	30 97       	sbiw	r30, 0x00	; 0
    12ce:	11 f0       	breq	.+4      	; 0x12d4 <_Z14rf12_sendStarth+0x22>
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	09 95       	icall
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	9f ef       	ldi	r25, 0xFF	; 255
    12d8:	90 93 95 01 	sts	0x0195, r25
    12dc:	80 93 94 01 	sts	0x0194, r24
    12e0:	80 91 94 01 	lds	r24, 0x0194
    12e4:	90 91 95 01 	lds	r25, 0x0195
    12e8:	20 91 9f 01 	lds	r18, 0x019F
    12ec:	82 27       	eor	r24, r18
    12ee:	28 2f       	mov	r18, r24
    12f0:	22 95       	swap	r18
    12f2:	28 27       	eor	r18, r24
    12f4:	02 2e       	mov	r0, r18
    12f6:	26 95       	lsr	r18
    12f8:	26 95       	lsr	r18
    12fa:	20 25       	eor	r18, r0
    12fc:	02 2e       	mov	r0, r18
    12fe:	26 95       	lsr	r18
    1300:	20 25       	eor	r18, r0
    1302:	27 70       	andi	r18, 0x07	; 7
    1304:	08 2e       	mov	r0, r24
    1306:	89 2f       	mov	r24, r25
    1308:	26 95       	lsr	r18
    130a:	07 94       	ror	r0
    130c:	27 95       	ror	r18
    130e:	90 2d       	mov	r25, r0
    1310:	82 27       	eor	r24, r18
    1312:	06 94       	lsr	r0
    1314:	27 95       	ror	r18
    1316:	90 25       	eor	r25, r0
    1318:	82 27       	eor	r24, r18
    131a:	90 93 95 01 	sts	0x0195, r25
    131e:	80 93 94 01 	sts	0x0194, r24
    1322:	88 e0       	ldi	r24, 0x08	; 8
    1324:	80 93 9d 01 	sts	0x019D, r24
    1328:	80 91 9b 01 	lds	r24, 0x019B
    132c:	90 91 9c 01 	lds	r25, 0x019C
    1330:	88 63       	ori	r24, 0x38	; 56
    1332:	90 93 9c 01 	sts	0x019C, r25
    1336:	80 93 9b 01 	sts	0x019B, r24
    133a:	80 91 9b 01 	lds	r24, 0x019B
    133e:	90 91 9c 01 	lds	r25, 0x019C
    1342:	6f ce       	rjmp	.-802    	; 0x1022 <_ZL9rf12_xferj>

00001344 <_Z14rf12_sendStarthPKvh>:
    1344:	cf 93       	push	r28
    1346:	c8 2f       	mov	r28, r24
    1348:	40 93 4f 01 	sts	0x014F, r20
    134c:	20 e5       	ldi	r18, 0x50	; 80
    134e:	31 e0       	ldi	r19, 0x01	; 1
    1350:	50 e0       	ldi	r21, 0x00	; 0
    1352:	82 2f       	mov	r24, r18
    1354:	93 2f       	mov	r25, r19
    1356:	e8 d3       	rcall	.+2000   	; 0x1b28 <memcpy>
    1358:	8c 2f       	mov	r24, r28
    135a:	ab df       	rcall	.-170    	; 0x12b2 <_Z14rf12_sendStarth>
    135c:	cf 91       	pop	r28
    135e:	08 95       	ret

00001360 <_Z13rf12_sendWaith>:
    1360:	44 e0       	ldi	r20, 0x04	; 4
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	5c e0       	ldi	r21, 0x0C	; 12
    1366:	16 c0       	rjmp	.+44     	; 0x1394 <_Z13rf12_sendWaith+0x34>
    1368:	88 23       	and	r24, r24
    136a:	a1 f0       	breq	.+40     	; 0x1394 <_Z13rf12_sendWaith+0x34>
    136c:	93 b7       	in	r25, 0x33	; 51
    136e:	91 7f       	andi	r25, 0xF1	; 241
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	21 f0       	breq	.+8      	; 0x137c <_Z13rf12_sendWaith+0x1c>
    1374:	82 30       	cpi	r24, 0x02	; 2
    1376:	21 f4       	brne	.+8      	; 0x1380 <_Z13rf12_sendWaith+0x20>
    1378:	25 2f       	mov	r18, r21
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <_Z13rf12_sendWaith+0x22>
    137c:	24 2f       	mov	r18, r20
    137e:	01 c0       	rjmp	.+2      	; 0x1382 <_Z13rf12_sendWaith+0x22>
    1380:	23 2f       	mov	r18, r19
    1382:	92 2b       	or	r25, r18
    1384:	93 bf       	out	0x33, r25	; 51
    1386:	93 b7       	in	r25, 0x33	; 51
    1388:	91 60       	ori	r25, 0x01	; 1
    138a:	93 bf       	out	0x33, r25	; 51
    138c:	88 95       	sleep
    138e:	93 b7       	in	r25, 0x33	; 51
    1390:	9e 7f       	andi	r25, 0xFE	; 254
    1392:	93 bf       	out	0x33, r25	; 51
    1394:	90 91 9d 01 	lds	r25, 0x019D
    1398:	94 30       	cpi	r25, 0x04	; 4
    139a:	31 f7       	brne	.-52     	; 0x1368 <_Z13rf12_sendWaith+0x8>
    139c:	08 95       	ret

0000139e <_Z21rf12_interruptcontrolv>:
    139e:	e8 9a       	sbi	0x1d, 0	; 29
    13a0:	08 95       	ret

000013a2 <_Z12rf12_restorehhh>:
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	d6 2f       	mov	r29, r22
    13a8:	c4 2f       	mov	r28, r20
    13aa:	80 93 a1 01 	sts	0x01A1, r24
    13ae:	40 93 9f 01 	sts	0x019F, r20
    13b2:	60 93 a2 01 	sts	0x01A2, r22
    13b6:	f3 df       	rcall	.-26     	; 0x139e <_Z21rf12_interruptcontrolv>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	72 df       	rcall	.-284    	; 0x12a0 <_Z19rf12_setFixedLengthh>
    13bc:	28 de       	rcall	.-944    	; 0x100e <_ZL15blockInterruptsv>
    13be:	25 e0       	ldi	r18, 0x05	; 5
    13c0:	32 e8       	ldi	r19, 0x82	; 130
    13c2:	30 93 9c 01 	sts	0x019C, r19
    13c6:	20 93 9b 01 	sts	0x019B, r18
    13ca:	80 91 9b 01 	lds	r24, 0x019B
    13ce:	90 91 9c 01 	lds	r25, 0x019C
    13d2:	27 de       	rcall	.-946    	; 0x1022 <_ZL9rf12_xferj>
    13d4:	20 e1       	ldi	r18, 0x10	; 16
    13d6:	d2 9f       	mul	r29, r18
    13d8:	c0 01       	movw	r24, r0
    13da:	11 24       	eor	r1, r1
    13dc:	87 6c       	ori	r24, 0xC7	; 199
    13de:	90 68       	ori	r25, 0x80	; 128
    13e0:	20 de       	rcall	.-960    	; 0x1022 <_ZL9rf12_xferj>
    13e2:	80 e4       	ldi	r24, 0x40	; 64
    13e4:	96 ea       	ldi	r25, 0xA6	; 166
    13e6:	1d de       	rcall	.-966    	; 0x1022 <_ZL9rf12_xferj>
    13e8:	86 e0       	ldi	r24, 0x06	; 6
    13ea:	06 df       	rcall	.-500    	; 0x11f8 <_Z15rf12_setBitrateh>
    13ec:	82 ea       	ldi	r24, 0xA2	; 162
    13ee:	94 e9       	ldi	r25, 0x94	; 148
    13f0:	18 de       	rcall	.-976    	; 0x1022 <_ZL9rf12_xferj>
    13f2:	8c ea       	ldi	r24, 0xAC	; 172
    13f4:	92 ec       	ldi	r25, 0xC2	; 194
    13f6:	15 de       	rcall	.-982    	; 0x1022 <_ZL9rf12_xferj>
    13f8:	cc 23       	and	r28, r28
    13fa:	41 f0       	breq	.+16     	; 0x140c <_Z12rf12_restorehhh+0x6a>
    13fc:	83 e8       	ldi	r24, 0x83	; 131
    13fe:	9a ec       	ldi	r25, 0xCA	; 202
    1400:	10 de       	rcall	.-992    	; 0x1022 <_ZL9rf12_xferj>
    1402:	8c 2f       	mov	r24, r28
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9e 6c       	ori	r25, 0xCE	; 206
    1408:	0c de       	rcall	.-1000   	; 0x1022 <_ZL9rf12_xferj>
    140a:	06 c0       	rjmp	.+12     	; 0x1418 <_Z12rf12_restorehhh+0x76>
    140c:	8b e8       	ldi	r24, 0x8B	; 139
    140e:	9a ec       	ldi	r25, 0xCA	; 202
    1410:	08 de       	rcall	.-1008   	; 0x1022 <_ZL9rf12_xferj>
    1412:	8d e2       	ldi	r24, 0x2D	; 45
    1414:	9e ec       	ldi	r25, 0xCE	; 206
    1416:	05 de       	rcall	.-1014   	; 0x1022 <_ZL9rf12_xferj>
    1418:	83 e8       	ldi	r24, 0x83	; 131
    141a:	94 ec       	ldi	r25, 0xC4	; 196
    141c:	02 de       	rcall	.-1020   	; 0x1022 <_ZL9rf12_xferj>
    141e:	80 e5       	ldi	r24, 0x50	; 80
    1420:	98 e9       	ldi	r25, 0x98	; 152
    1422:	ff dd       	rcall	.-1026   	; 0x1022 <_ZL9rf12_xferj>
    1424:	87 e7       	ldi	r24, 0x77	; 119
    1426:	9c ec       	ldi	r25, 0xCC	; 204
    1428:	fc dd       	rcall	.-1032   	; 0x1022 <_ZL9rf12_xferj>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	90 ee       	ldi	r25, 0xE0	; 224
    142e:	f9 dd       	rcall	.-1038   	; 0x1022 <_ZL9rf12_xferj>
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	98 ec       	ldi	r25, 0xC8	; 200
    1434:	f6 dd       	rcall	.-1044   	; 0x1022 <_ZL9rf12_xferj>
    1436:	89 e4       	ldi	r24, 0x49	; 73
    1438:	90 ec       	ldi	r25, 0xC0	; 192
    143a:	f3 dd       	rcall	.-1050   	; 0x1022 <_ZL9rf12_xferj>
    143c:	84 e0       	ldi	r24, 0x04	; 4
    143e:	80 93 9d 01 	sts	0x019D, r24
    1442:	e7 dd       	rcall	.-1074   	; 0x1012 <_ZL15allowInterruptsv>
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <_Z15rf12_initializehhh>:
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	c8 2f       	mov	r28, r24
    1452:	d6 2f       	mov	r29, r22
    1454:	14 2f       	mov	r17, r20
    1456:	80 93 a1 01 	sts	0x01A1, r24
    145a:	40 93 9f 01 	sts	0x019F, r20
    145e:	60 93 a2 01 	sts	0x01A2, r22
    1462:	0d de       	rcall	.-998    	; 0x107e <_Z12rf12_spiInitv>
    1464:	9c df       	rcall	.-200    	; 0x139e <_Z21rf12_interruptcontrolv>
    1466:	82 e8       	ldi	r24, 0x82	; 130
    1468:	9a ec       	ldi	r25, 0xCA	; 202
    146a:	db dd       	rcall	.-1098   	; 0x1022 <_ZL9rf12_xferj>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	9e ef       	ldi	r25, 0xFE	; 254
    1470:	d8 dd       	rcall	.-1104   	; 0x1022 <_ZL9rf12_xferj>
    1472:	85 e0       	ldi	r24, 0x05	; 5
    1474:	80 93 9d 01 	sts	0x019D, r24
    1478:	83 b7       	in	r24, 0x33	; 51
    147a:	81 7f       	andi	r24, 0xF1	; 241
    147c:	83 bf       	out	0x33, r24	; 51
    147e:	80 91 9d 01 	lds	r24, 0x019D
    1482:	85 30       	cpi	r24, 0x05	; 5
    1484:	59 f4       	brne	.+22     	; 0x149c <_Z15rf12_initializehhh+0x52>
    1486:	93 b7       	in	r25, 0x33	; 51
    1488:	91 60       	ori	r25, 0x01	; 1
    148a:	93 bf       	out	0x33, r25	; 51
    148c:	88 95       	sleep
    148e:	93 b7       	in	r25, 0x33	; 51
    1490:	9e 7f       	andi	r25, 0xFE	; 254
    1492:	93 bf       	out	0x33, r25	; 51
    1494:	90 91 9d 01 	lds	r25, 0x019D
    1498:	95 30       	cpi	r25, 0x05	; 5
    149a:	a9 f3       	breq	.-22     	; 0x1486 <_Z15rf12_initializehhh+0x3c>
    149c:	41 2f       	mov	r20, r17
    149e:	6d 2f       	mov	r22, r29
    14a0:	8c 2f       	mov	r24, r28
    14a2:	7f df       	rcall	.-258    	; 0x13a2 <_Z12rf12_restorehhh>
    14a4:	80 91 a1 01 	lds	r24, 0x01A1
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	08 95       	ret

000014b0 <_Z16rf12_setWatchdogm>:
/// interrupt in the RFM12 module. Use rf12_wakeup() to check if the wakeup-interrupt
/// fired. This allows very deep sleep states (timer off) while still being able to wakeup
/// because of the external interrupt. The RFM12b wakeup-timer only needs about 1.5µA.
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
    14b0:	cf 92       	push	r12
    14b2:	df 92       	push	r13
    14b4:	ef 92       	push	r14
    14b6:	ff 92       	push	r15
    14b8:	cf 93       	push	r28
    14ba:	6b 01       	movw	r12, r22
    14bc:	7c 01       	movw	r14, r24
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    14be:	8f ef       	ldi	r24, 0xFF	; 255
    14c0:	c8 16       	cp	r12, r24
    14c2:	d1 04       	cpc	r13, r1
    14c4:	e1 04       	cpc	r14, r1
    14c6:	f1 04       	cpc	r15, r1
    14c8:	79 f0       	breq	.+30     	; 0x14e8 <_Z16rf12_setWatchdogm+0x38>
    14ca:	70 f0       	brcs	.+28     	; 0x14e8 <_Z16rf12_setWatchdogm+0x38>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    14cc:	c0 e0       	ldi	r28, 0x00	; 0
	while (m > 255) {
		r  += 1;
    14ce:	cf 5f       	subi	r28, 0xFF	; 255
		m >>= 1;
    14d0:	f6 94       	lsr	r15
    14d2:	e7 94       	ror	r14
    14d4:	d7 94       	ror	r13
    14d6:	c7 94       	ror	r12
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    14d8:	8f ef       	ldi	r24, 0xFF	; 255
    14da:	c8 16       	cp	r12, r24
    14dc:	d1 04       	cpc	r13, r1
    14de:	e1 04       	cpc	r14, r1
    14e0:	f1 04       	cpc	r15, r1
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <_Z16rf12_setWatchdogm+0x36>
    14e4:	a0 f7       	brcc	.-24     	; 0x14ce <_Z16rf12_setWatchdogm+0x1e>
    14e6:	01 c0       	rjmp	.+2      	; 0x14ea <_Z16rf12_setWatchdogm+0x3a>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    14e8:	c0 e0       	ldi	r28, 0x00	; 0
		m >>= 1;
	}
	
	// Disable old wakeup-timer if enabled
//	if (bitRead(rfmstate,1)) {
	if ((rfmstate>>1)&0x01){
    14ea:	80 91 9b 01 	lds	r24, 0x019B
    14ee:	90 91 9c 01 	lds	r25, 0x019C
    14f2:	81 ff       	sbrs	r24, 1
    14f4:	0e c0       	rjmp	.+28     	; 0x1512 <_Z16rf12_setWatchdogm+0x62>
		//bitClear(rfmstate,1);
		rfmstate &= ~(1 << 1);
    14f6:	80 91 9b 01 	lds	r24, 0x019B
    14fa:	90 91 9c 01 	lds	r25, 0x019C
    14fe:	8d 7f       	andi	r24, 0xFD	; 253
    1500:	90 93 9c 01 	sts	0x019C, r25
    1504:	80 93 9b 01 	sts	0x019B, r24
		rf12_xfer(rfmstate);
    1508:	80 91 9b 01 	lds	r24, 0x019B
    150c:	90 91 9c 01 	lds	r25, 0x019C
    1510:	88 dd       	rcall	.-1264   	; 0x1022 <_ZL9rf12_xferj>
	}
	
	// enable wakeup call if we have to
	if (m>0) {
    1512:	c1 14       	cp	r12, r1
    1514:	d1 04       	cpc	r13, r1
    1516:	e1 04       	cpc	r14, r1
    1518:	f1 04       	cpc	r15, r1
    151a:	b1 f0       	breq	.+44     	; 0x1548 <_Z16rf12_setWatchdogm+0x98>
		// write time to wakeup-register
		rf12_xfer(RF_WAKEUP_TIMER | (r<<8) | m);
    151c:	3c 2f       	mov	r19, r28
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	d7 01       	movw	r26, r14
    1522:	c6 01       	movw	r24, r12
    1524:	90 6e       	ori	r25, 0xE0	; 224
    1526:	82 2b       	or	r24, r18
    1528:	93 2b       	or	r25, r19
    152a:	7b dd       	rcall	.-1290   	; 0x1022 <_ZL9rf12_xferj>
		// enable wakeup
		//bitSet(rfmstate,1);
		rfmstate |= (1 << 1);
    152c:	80 91 9b 01 	lds	r24, 0x019B
    1530:	90 91 9c 01 	lds	r25, 0x019C
    1534:	82 60       	ori	r24, 0x02	; 2
    1536:	90 93 9c 01 	sts	0x019C, r25
    153a:	80 93 9b 01 	sts	0x019B, r24
		rf12_xfer(rfmstate);
    153e:	80 91 9b 01 	lds	r24, 0x019B
    1542:	90 91 9c 01 	lds	r25, 0x019C
    1546:	6d dd       	rcall	.-1318   	; 0x1022 <_ZL9rf12_xferj>
	}
}
    1548:	cf 91       	pop	r28
    154a:	ff 90       	pop	r15
    154c:	ef 90       	pop	r14
    154e:	df 90       	pop	r13
    1550:	cf 90       	pop	r12
    1552:	08 95       	ret

00001554 <__vector_1>:
	while (!bitRead(PINB, RFM_IRQ - 8))
	rf12_interrupt();
}
#else
*/
ISR(INT0_vect) {
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	8f 92       	push	r8
    1560:	9f 92       	push	r9
    1562:	af 92       	push	r10
    1564:	bf 92       	push	r11
    1566:	cf 92       	push	r12
    1568:	df 92       	push	r13
    156a:	ef 92       	push	r14
    156c:	ff 92       	push	r15
    156e:	0f 93       	push	r16
    1570:	1f 93       	push	r17
    1572:	2f 93       	push	r18
    1574:	3f 93       	push	r19
    1576:	4f 93       	push	r20
    1578:	5f 93       	push	r21
    157a:	6f 93       	push	r22
    157c:	7f 93       	push	r23
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
    1582:	af 93       	push	r26
    1584:	bf 93       	push	r27
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	ef 93       	push	r30
    158c:	ff 93       	push	r31


	//_delay_ms(15);
	while(!(PIN_RFM_IRQ & (1<<BIT_RFM_IRQ))){
		PORTB ^= _BV(0); // pb0 aan
    158e:	dd 24       	eor	r13, r13
    1590:	d3 94       	inc	r13
				case TXSYN1: out = 0x2D; break;
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
				case TXCRC1: out = rf12_crc; break;
				case TXCRC2: out = rf12_crc >> 8; break;
				case TXDONE: rf12_idle(); // fall through
				default:     out = 0xAA;
    1592:	0f 2e       	mov	r0, r31
    1594:	fa ea       	ldi	r31, 0xAA	; 170
    1596:	9f 2e       	mov	r9, r31
    1598:	f0 2d       	mov	r31, r0
				out = rf12_buf[pos];
				rf12_crc = _crc16_update(rf12_crc, out);
			} else
			switch (rxstate++) {
				case TXSYN1: out = 0x2D; break;
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
    159a:	0f 2e       	mov	r0, r31
    159c:	ff e4       	ldi	r31, 0x4F	; 79
    159e:	ef 2e       	mov	r14, r31
    15a0:	f1 e0       	ldi	r31, 0x01	; 1
    15a2:	ff 2e       	mov	r15, r31
    15a4:	f0 2d       	mov	r31, r0
    15a6:	0f 2e       	mov	r0, r31
    15a8:	fe ef       	ldi	r31, 0xFE	; 254
    15aa:	8f 2e       	mov	r8, r31
    15ac:	f0 2d       	mov	r31, r0
		}
	}
	
	// power-on reset
	if (state & RF_POR_BIT) {
		rxstate = POR_RECEIVED;
    15ae:	0f 2e       	mov	r0, r31
    15b0:	f6 e0       	ldi	r31, 0x06	; 6
    15b2:	cf 2e       	mov	r12, r31
    15b4:	f0 2d       	mov	r31, r0
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
		rf12_idle();
		rxstate = TXIDLE;
    15b6:	68 94       	set
    15b8:	bb 24       	eor	r11, r11
    15ba:	b2 f8       	bld	r11, 2
*/
ISR(INT0_vect) {


	//_delay_ms(15);
	while(!(PIN_RFM_IRQ & (1<<BIT_RFM_IRQ))){
    15bc:	1f c1       	rjmp	.+574    	; 0x17fc <__vector_1+0x2a8>
		PORTB ^= _BV(0); // pb0 aan
    15be:	85 b1       	in	r24, 0x05	; 5
    15c0:	8d 25       	eor	r24, r13
    15c2:	85 b9       	out	0x05, r24	; 5
/// Requests RFM12 state from RF module and reads back a waiting data byte if there is
/// any.
/// One of two commands accessing SPI, so interrupts disabled in here
/// @param *data Pointer to  byte where to write the received data to (if any)
static uint16_t rf12_xferState (uint8_t *data) {
	blockInterrupts();
    15c4:	24 dd       	rcall	.-1464   	; 0x100e <_ZL15blockInterruptsv>

	// writing can take place at full speed, even 8 MHz works
	//bitClear(SS_PORT, cs_pin);
	PORT_RFM_CS &= ~(1<<BIT_RFM_CS); //clear CS
    15c6:	2a 98       	cbi	0x05, 2	; 5
	uint16_t res = rf12_byte(0x00) << 8;
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	25 dd       	rcall	.-1462   	; 0x1016 <_ZL9rf12_byteh>
    15cc:	d8 2f       	mov	r29, r24
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	c2 2f       	mov	r28, r18
	res |= rf12_byte(0x00);
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	20 dd       	rcall	.-1472   	; 0x1016 <_ZL9rf12_byteh>
    15d6:	8e 01       	movw	r16, r28
    15d8:	08 2b       	or	r16, r24
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
    15da:	11 23       	and	r17, r17
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <__vector_1+0x94>
    15de:	80 91 9d 01 	lds	r24, 0x019D
    15e2:	87 30       	cpi	r24, 0x07	; 7
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <__vector_1+0x94>
    15e6:	0d c1       	rjmp	.+538    	; 0x1802 <__vector_1+0x2ae>
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
		#endif
	}
	
	//bitSet(SS_PORT, cs_pin);
	PORT_RFM_CS |= (1 << BIT_RFM_CS); //  bitSet(SS_PORT, cs_pin);
    15e8:	2a 9a       	sbi	0x05, 2	; 5

	allowInterrupts();
    15ea:	13 dd       	rcall	.-1498   	; 0x1012 <_ZL15allowInterruptsv>
/// @details
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uint8_t in;
	state = rf12_xferState(&in);
    15ec:	10 93 9a 01 	sts	0x019A, r17
    15f0:	00 93 99 01 	sts	0x0199, r16

	// data received or byte needed for sending
	if (state & RF_FIFO_BIT) {
    15f4:	80 91 99 01 	lds	r24, 0x0199
    15f8:	90 91 9a 01 	lds	r25, 0x019A
    15fc:	99 23       	and	r25, r25
    15fe:	0c f0       	brlt	.+2      	; 0x1602 <__vector_1+0xae>
    1600:	e1 c0       	rjmp	.+450    	; 0x17c4 <__vector_1+0x270>
		
		if (rxstate == TXRECV) {  // we are receiving
    1602:	80 91 9d 01 	lds	r24, 0x019D
    1606:	87 30       	cpi	r24, 0x07	; 7
    1608:	09 f0       	breq	.+2      	; 0x160c <__vector_1+0xb8>
    160a:	78 c0       	rjmp	.+240    	; 0x16fc <__vector_1+0x1a8>

			if (rxfill == 0 && group != 0)
    160c:	80 91 9e 01 	lds	r24, 0x019E
    1610:	81 11       	cpse	r24, r1
    1612:	04 c0       	rjmp	.+8      	; 0x161c <__vector_1+0xc8>
    1614:	80 91 9f 01 	lds	r24, 0x019F
    1618:	81 11       	cpse	r24, r1
    161a:	fd c0       	rjmp	.+506    	; 0x1816 <__vector_1+0x2c2>
			rf12_buf[rxfill++] = group;

			rf12_buf[rxfill++] = in;
    161c:	80 91 9e 01 	lds	r24, 0x019E
    1620:	e8 2f       	mov	r30, r24
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	e3 5b       	subi	r30, 0xB3	; 179
    1626:	fe 4f       	sbci	r31, 0xFE	; 254
    1628:	a0 82       	st	Z, r10
    162a:	8f 5f       	subi	r24, 0xFF	; 255
    162c:	80 93 9e 01 	sts	0x019E, r24
			rf12_crc = _crc16_update(rf12_crc, in);
    1630:	80 91 94 01 	lds	r24, 0x0194
    1634:	90 91 95 01 	lds	r25, 0x0195
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    1638:	8a 25       	eor	r24, r10
    163a:	28 2f       	mov	r18, r24
    163c:	22 95       	swap	r18
    163e:	28 27       	eor	r18, r24
    1640:	02 2e       	mov	r0, r18
    1642:	26 95       	lsr	r18
    1644:	26 95       	lsr	r18
    1646:	20 25       	eor	r18, r0
    1648:	02 2e       	mov	r0, r18
    164a:	26 95       	lsr	r18
    164c:	20 25       	eor	r18, r0
    164e:	27 70       	andi	r18, 0x07	; 7
    1650:	08 2e       	mov	r0, r24
    1652:	89 2f       	mov	r24, r25
    1654:	26 95       	lsr	r18
    1656:	07 94       	ror	r0
    1658:	27 95       	ror	r18
    165a:	90 2d       	mov	r25, r0
    165c:	82 27       	eor	r24, r18
    165e:	06 94       	lsr	r0
    1660:	27 95       	ror	r18
    1662:	90 25       	eor	r25, r0
    1664:	82 27       	eor	r24, r18
    1666:	90 93 95 01 	sts	0x0195, r25
    166a:	80 93 94 01 	sts	0x0194, r24

			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
    166e:	e0 91 97 01 	lds	r30, 0x0197
    1672:	e3 30       	cpi	r30, 0x03	; 3
    1674:	18 f5       	brcc	.+70     	; 0x16bc <__vector_1+0x168>
    1676:	80 91 9e 01 	lds	r24, 0x019E
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	02 97       	sbiw	r24, 0x02	; 2
    167e:	60 91 96 01 	lds	r22, 0x0196
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	08 d2       	rcall	.+1040   	; 0x1a96 <__divmodhi4>
    1686:	89 2b       	or	r24, r25
    1688:	09 f4       	brne	.+2      	; 0x168c <__vector_1+0x138>
    168a:	d0 c0       	rjmp	.+416    	; 0x182c <__vector_1+0x2d8>
    168c:	17 c0       	rjmp	.+46     	; 0x16bc <__vector_1+0x168>
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    168e:	f0 e0       	ldi	r31, 0x00	; 0
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
    1690:	e8 5d       	subi	r30, 0xD8	; 216
    1692:	fe 4f       	sbci	r31, 0xFE	; 254
				: (drssi_dec_tree[drssi] >> 4);
    1694:	80 81       	ld	r24, Z
    1696:	8f 70       	andi	r24, 0x0F	; 15
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <__vector_1+0x152>
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	e8 5d       	subi	r30, 0xD8	; 216
    169e:	fe 4f       	sbci	r31, 0xFE	; 254
    16a0:	80 81       	ld	r24, Z
    16a2:	82 95       	swap	r24
    16a4:	8f 70       	andi	r24, 0x0F	; 15
    16a6:	80 93 97 01 	sts	0x0197, r24
				if ( drssi < 3 ) {     // not yet final destination, set new threshold
    16aa:	83 30       	cpi	r24, 0x03	; 3
    16ac:	38 f4       	brcc	.+14     	; 0x16bc <__vector_1+0x168>
					rf12_xfer(RF_RECV_CONTROL | drssi*2+1);
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	01 96       	adiw	r24, 0x01	; 1
    16b6:	80 6a       	ori	r24, 0xA0	; 160
    16b8:	94 69       	ori	r25, 0x94	; 148
    16ba:	b3 dc       	rcall	.-1690   	; 0x1022 <_ZL9rf12_xferj>
				}
			}

			// check if we got all the bytes (or maximum packet length was reached)
			if (fixedLength) {
    16bc:	80 91 a0 01 	lds	r24, 0x01A0
    16c0:	88 23       	and	r24, r24
    16c2:	59 f0       	breq	.+22     	; 0x16da <__vector_1+0x186>
				if (rxfill >= fixedLength || rxfill >= RF_MAX) {
    16c4:	90 91 9e 01 	lds	r25, 0x019E
    16c8:	98 17       	cp	r25, r24
    16ca:	28 f4       	brcc	.+10     	; 0x16d6 <__vector_1+0x182>
    16cc:	80 91 9e 01 	lds	r24, 0x019E
    16d0:	87 34       	cpi	r24, 0x47	; 71
    16d2:	08 f4       	brcc	.+2      	; 0x16d6 <__vector_1+0x182>
    16d4:	77 c0       	rjmp	.+238    	; 0x17c4 <__vector_1+0x270>
					rf12_idle();
    16d6:	bc dc       	rcall	.-1672   	; 0x1050 <_ZL9rf12_idlev>
    16d8:	75 c0       	rjmp	.+234    	; 0x17c4 <__vector_1+0x270>
				}
				} else if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX) {
    16da:	20 91 9e 01 	lds	r18, 0x019E
    16de:	d7 01       	movw	r26, r14
    16e0:	8c 91       	ld	r24, X
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	05 96       	adiw	r24, 0x05	; 5
    16e8:	28 17       	cp	r18, r24
    16ea:	39 07       	cpc	r19, r25
    16ec:	2c f4       	brge	.+10     	; 0x16f8 <__vector_1+0x1a4>
    16ee:	80 91 9e 01 	lds	r24, 0x019E
    16f2:	87 34       	cpi	r24, 0x47	; 71
    16f4:	08 f4       	brcc	.+2      	; 0x16f8 <__vector_1+0x1a4>
    16f6:	66 c0       	rjmp	.+204    	; 0x17c4 <__vector_1+0x270>
				rf12_idle();
    16f8:	ab dc       	rcall	.-1706   	; 0x1050 <_ZL9rf12_idlev>
    16fa:	64 c0       	rjmp	.+200    	; 0x17c4 <__vector_1+0x270>
			}
			} else {                  // we are sending
			uint8_t out;

			if (rxstate < 0) {
    16fc:	80 91 9d 01 	lds	r24, 0x019D
    1700:	88 23       	and	r24, r24
    1702:	0c f0       	brlt	.+2      	; 0x1706 <__vector_1+0x1b2>
    1704:	2f c0       	rjmp	.+94     	; 0x1764 <__vector_1+0x210>
				uint8_t pos = 3 + rf12_len + rxstate++;
    1706:	d7 01       	movw	r26, r14
    1708:	ec 91       	ld	r30, X
    170a:	80 91 9d 01 	lds	r24, 0x019D
    170e:	98 2f       	mov	r25, r24
    1710:	9f 5f       	subi	r25, 0xFF	; 255
    1712:	90 93 9d 01 	sts	0x019D, r25
    1716:	ed 5f       	subi	r30, 0xFD	; 253
    1718:	8e 0f       	add	r24, r30
				out = rf12_buf[pos];
    171a:	e8 2f       	mov	r30, r24
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	e3 5b       	subi	r30, 0xB3	; 179
    1720:	fe 4f       	sbci	r31, 0xFE	; 254
    1722:	80 81       	ld	r24, Z
				rf12_crc = _crc16_update(rf12_crc, out);
    1724:	20 91 94 01 	lds	r18, 0x0194
    1728:	30 91 95 01 	lds	r19, 0x0195
    172c:	28 27       	eor	r18, r24
    172e:	92 2f       	mov	r25, r18
    1730:	92 95       	swap	r25
    1732:	92 27       	eor	r25, r18
    1734:	09 2e       	mov	r0, r25
    1736:	96 95       	lsr	r25
    1738:	96 95       	lsr	r25
    173a:	90 25       	eor	r25, r0
    173c:	09 2e       	mov	r0, r25
    173e:	96 95       	lsr	r25
    1740:	90 25       	eor	r25, r0
    1742:	97 70       	andi	r25, 0x07	; 7
    1744:	02 2e       	mov	r0, r18
    1746:	23 2f       	mov	r18, r19
    1748:	96 95       	lsr	r25
    174a:	07 94       	ror	r0
    174c:	97 95       	ror	r25
    174e:	30 2d       	mov	r19, r0
    1750:	29 27       	eor	r18, r25
    1752:	06 94       	lsr	r0
    1754:	97 95       	ror	r25
    1756:	30 25       	eor	r19, r0
    1758:	29 27       	eor	r18, r25
    175a:	30 93 95 01 	sts	0x0195, r19
    175e:	20 93 94 01 	sts	0x0194, r18
    1762:	2d c0       	rjmp	.+90     	; 0x17be <__vector_1+0x26a>
			} else
			switch (rxstate++) {
    1764:	80 91 9d 01 	lds	r24, 0x019D
    1768:	98 2f       	mov	r25, r24
    176a:	9f 5f       	subi	r25, 0xFF	; 255
    176c:	90 93 9d 01 	sts	0x019D, r25
    1770:	83 30       	cpi	r24, 0x03	; 3
    1772:	09 f1       	breq	.+66     	; 0x17b6 <__vector_1+0x262>
    1774:	2c f4       	brge	.+10     	; 0x1780 <__vector_1+0x22c>
    1776:	88 23       	and	r24, r24
    1778:	99 f0       	breq	.+38     	; 0x17a0 <__vector_1+0x24c>
    177a:	81 30       	cpi	r24, 0x01	; 1
    177c:	f9 f4       	brne	.+62     	; 0x17bc <__vector_1+0x268>
    177e:	15 c0       	rjmp	.+42     	; 0x17aa <__vector_1+0x256>
    1780:	8b 30       	cpi	r24, 0x0B	; 11
    1782:	19 f0       	breq	.+6      	; 0x178a <__vector_1+0x236>
    1784:	8c 30       	cpi	r24, 0x0C	; 12
    1786:	d1 f4       	brne	.+52     	; 0x17bc <__vector_1+0x268>
    1788:	02 c0       	rjmp	.+4      	; 0x178e <__vector_1+0x23a>
				case TXSYN1: out = 0x2D; break;
    178a:	8d e2       	ldi	r24, 0x2D	; 45
    178c:	18 c0       	rjmp	.+48     	; 0x17be <__vector_1+0x26a>
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
    178e:	80 91 9f 01 	lds	r24, 0x019F
    1792:	f7 01       	movw	r30, r14
    1794:	90 81       	ld	r25, Z
    1796:	f8 2d       	mov	r31, r8
    1798:	f9 1b       	sub	r31, r25
    179a:	f0 93 9d 01 	sts	0x019D, r31
    179e:	0f c0       	rjmp	.+30     	; 0x17be <__vector_1+0x26a>
				case TXCRC1: out = rf12_crc; break;
    17a0:	80 91 94 01 	lds	r24, 0x0194
    17a4:	90 91 95 01 	lds	r25, 0x0195
    17a8:	0a c0       	rjmp	.+20     	; 0x17be <__vector_1+0x26a>
				case TXCRC2: out = rf12_crc >> 8; break;
    17aa:	80 91 94 01 	lds	r24, 0x0194
    17ae:	90 91 95 01 	lds	r25, 0x0195
    17b2:	89 2f       	mov	r24, r25
    17b4:	04 c0       	rjmp	.+8      	; 0x17be <__vector_1+0x26a>
				case TXDONE: rf12_idle(); // fall through
    17b6:	4c dc       	rcall	.-1896   	; 0x1050 <_ZL9rf12_idlev>
				default:     out = 0xAA;
    17b8:	89 2d       	mov	r24, r9
    17ba:	01 c0       	rjmp	.+2      	; 0x17be <__vector_1+0x26a>
    17bc:	89 2d       	mov	r24, r9
			}

			rf12_xfer(RF_TXREG_WRITE | out);
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	98 6b       	ori	r25, 0xB8	; 184
    17c2:	2f dc       	rcall	.-1954   	; 0x1022 <_ZL9rf12_xferj>
		}
	}
	
	// power-on reset
	if (state & RF_POR_BIT) {
    17c4:	20 91 99 01 	lds	r18, 0x0199
    17c8:	30 91 9a 01 	lds	r19, 0x019A
    17cc:	36 fd       	sbrc	r19, 6
		rxstate = POR_RECEIVED;
    17ce:	c0 92 9d 01 	sts	0x019D, r12
	}

	// got wakeup call
	if (state & RF_WDG_BIT) {
    17d2:	20 91 99 01 	lds	r18, 0x0199
    17d6:	30 91 9a 01 	lds	r19, 0x019A
    17da:	34 ff       	sbrs	r19, 4
    17dc:	06 c0       	rjmp	.+12     	; 0x17ea <__vector_1+0x296>
		rf12_setWatchdog(0);
    17de:	60 e0       	ldi	r22, 0x00	; 0
    17e0:	70 e0       	ldi	r23, 0x00	; 0
    17e2:	cb 01       	movw	r24, r22
    17e4:	65 de       	rcall	.-822    	; 0x14b0 <_Z16rf12_setWatchdogm>
		rf12_gotwakeup = 1;
    17e6:	d0 92 98 01 	sts	0x0198, r13
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
    17ea:	20 91 99 01 	lds	r18, 0x0199
    17ee:	30 91 9a 01 	lds	r19, 0x019A
    17f2:	35 ff       	sbrs	r19, 5
    17f4:	03 c0       	rjmp	.+6      	; 0x17fc <__vector_1+0x2a8>
		rf12_idle();
    17f6:	2c dc       	rcall	.-1960   	; 0x1050 <_ZL9rf12_idlev>
		rxstate = TXIDLE;
    17f8:	b0 92 9d 01 	sts	0x019D, r11
*/
ISR(INT0_vect) {


	//_delay_ms(15);
	while(!(PIN_RFM_IRQ & (1<<BIT_RFM_IRQ))){
    17fc:	4a 9b       	sbis	0x09, 2	; 9
    17fe:	df ce       	rjmp	.-578    	; 0x15be <__vector_1+0x6a>
    1800:	1c c0       	rjmp	.+56     	; 0x183a <__vector_1+0x2e6>
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
		// slow down to under 2.5 MHz
		#if F_CPU > 10000000
		//bitSet(SPCR, SPR0);
		SPCR |= (1 << SPR0); //  bitSet(SPCR, SPR0);
    1802:	8c b5       	in	r24, 0x2c	; 44
    1804:	81 60       	ori	r24, 0x01	; 1
    1806:	8c bd       	out	0x2c, r24	; 44
		#endif
		*data = rf12_byte(0x00);
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	05 dc       	rcall	.-2038   	; 0x1016 <_ZL9rf12_byteh>
    180c:	a8 2e       	mov	r10, r24
		#if F_CPU > 10000000
		//bitClear(SPCR, SPR0);
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
    180e:	8c b5       	in	r24, 0x2c	; 44
    1810:	8e 7f       	andi	r24, 0xFE	; 254
    1812:	8c bd       	out	0x2c, r24	; 44
    1814:	e9 ce       	rjmp	.-558    	; 0x15e8 <__vector_1+0x94>
	if (state & RF_FIFO_BIT) {
		
		if (rxstate == TXRECV) {  // we are receiving

			if (rxfill == 0 && group != 0)
			rf12_buf[rxfill++] = group;
    1816:	90 91 9e 01 	lds	r25, 0x019E
    181a:	e9 2f       	mov	r30, r25
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	e3 5b       	subi	r30, 0xB3	; 179
    1820:	fe 4f       	sbci	r31, 0xFE	; 254
    1822:	80 83       	st	Z, r24
    1824:	9f 5f       	subi	r25, 0xFF	; 255
    1826:	90 93 9e 01 	sts	0x019E, r25
    182a:	f8 ce       	rjmp	.-528    	; 0x161c <__vector_1+0xc8>
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    182c:	80 91 99 01 	lds	r24, 0x0199
    1830:	90 91 9a 01 	lds	r25, 0x019A
    1834:	90 fd       	sbrc	r25, 0
    1836:	2b cf       	rjmp	.-426    	; 0x168e <__vector_1+0x13a>
    1838:	30 cf       	rjmp	.-416    	; 0x169a <__vector_1+0x146>
		rf12_interrupt();
		}
		
	//PORTB &= ~_BV(0); // pb0 uit
	
}
    183a:	ff 91       	pop	r31
    183c:	ef 91       	pop	r30
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	bf 91       	pop	r27
    1844:	af 91       	pop	r26
    1846:	9f 91       	pop	r25
    1848:	8f 91       	pop	r24
    184a:	7f 91       	pop	r23
    184c:	6f 91       	pop	r22
    184e:	5f 91       	pop	r21
    1850:	4f 91       	pop	r20
    1852:	3f 91       	pop	r19
    1854:	2f 91       	pop	r18
    1856:	1f 91       	pop	r17
    1858:	0f 91       	pop	r16
    185a:	ff 90       	pop	r15
    185c:	ef 90       	pop	r14
    185e:	df 90       	pop	r13
    1860:	cf 90       	pop	r12
    1862:	bf 90       	pop	r11
    1864:	af 90       	pop	r10
    1866:	9f 90       	pop	r9
    1868:	8f 90       	pop	r8
    186a:	0f 90       	pop	r0
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	0f 90       	pop	r0
    1870:	1f 90       	pop	r1
    1872:	18 95       	reti

00001874 <tone_init>:
#include <avr/io.h>

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume counsigned long _tAC_time;ntrol.

void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
    1874:	21 9a       	sbi	0x04, 1	; 4
    1876:	08 95       	ret

00001878 <noTone>:


	void noTone() {
	//	uart0_puts("STOP");
	//	TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
		 TCCR1B  &= ~(1<<0) | ~(1<<1) | ~(1<<2) ;        // No clock source (Timer/Counter stopped).
    1878:	e1 e8       	ldi	r30, 0x81	; 129
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	80 83       	st	Z, r24
		 TCCR1A  = 0x00;       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
    1880:	10 92 80 00 	sts	0x0080, r1
		PORTB &= ~(1 << 1); // Set pin PB1 to LOW.
    1884:	29 98       	cbi	0x05, 1	; 5
    1886:	08 95       	ret

00001888 <tone>:
void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
	
}

void tone(unsigned long frequency, uint8_t volume) {
    1888:	cf 92       	push	r12
    188a:	df 92       	push	r13
    188c:	ef 92       	push	r14
    188e:	ff 92       	push	r15
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	6b 01       	movw	r12, r22
    1896:	7c 01       	movw	r14, r24
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
    1898:	61 15       	cp	r22, r1
    189a:	71 05       	cpc	r23, r1
    189c:	81 05       	cpc	r24, r1
    189e:	91 05       	cpc	r25, r1
    18a0:	11 f0       	breq	.+4      	; 0x18a6 <tone+0x1e>
    18a2:	41 11       	cpse	r20, r1
    18a4:	02 c0       	rjmp	.+4      	; 0x18aa <tone+0x22>
    18a6:	e8 df       	rcall	.-48     	; 0x1878 <noTone>
    18a8:	4d c0       	rjmp	.+154    	; 0x1944 <tone+0xbc>
    18aa:	d4 2f       	mov	r29, r20
    18ac:	4b 30       	cpi	r20, 0x0B	; 11
    18ae:	08 f0       	brcs	.+2      	; 0x18b2 <tone+0x2a>
    18b0:	da e0       	ldi	r29, 0x0A	; 10
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	72 e1       	ldi	r23, 0x12	; 18
    18b6:	8a e7       	ldi	r24, 0x7A	; 122
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	a7 01       	movw	r20, r14
    18bc:	96 01       	movw	r18, r12
    18be:	fe d0       	rcall	.+508    	; 0x1abc <__udivmodsi4>
    18c0:	cc 24       	eor	r12, r12
    18c2:	ca 94       	dec	r12
    18c4:	dc 2c       	mov	r13, r12
    18c6:	76 01       	movw	r14, r12
    18c8:	c2 0e       	add	r12, r18
    18ca:	d3 1e       	adc	r13, r19
    18cc:	e4 1e       	adc	r14, r20
    18ce:	f5 1e       	adc	r15, r21
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    18d0:	c1 14       	cp	r12, r1
    18d2:	d1 04       	cpc	r13, r1
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	e8 06       	cpc	r14, r24
    18d8:	f1 04       	cpc	r15, r1
    18da:	58 f0       	brcs	.+22     	; 0x18f2 <tone+0x6a>
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
    18dc:	cd 2c       	mov	r12, r13
    18de:	de 2c       	mov	r13, r14
    18e0:	ef 2c       	mov	r14, r15
    18e2:	ff 24       	eor	r15, r15
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	c8 1a       	sub	r12, r24
    18e8:	d1 08       	sbc	r13, r1
    18ea:	e1 08       	sbc	r14, r1
    18ec:	f1 08       	sbc	r15, r1
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    18ee:	c4 e0       	ldi	r28, 0x04	; 4
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <tone+0x6c>
void tone(unsigned long frequency, uint8_t volume) {
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
    18f2:	c1 e0       	ldi	r28, 0x01	; 1
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
		}
	
		unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
    18f4:	ed 2f       	mov	r30, r29
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	ed 5f       	subi	r30, 0xFD	; 253
    18fa:	fe 4f       	sbci	r31, 0xFE	; 254
    18fc:	20 81       	ld	r18, Z
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	c7 01       	movw	r24, r14
    1906:	b6 01       	movw	r22, r12
    1908:	d9 d0       	rcall	.+434    	; 0x1abc <__udivmodsi4>
		
		ICR1   = top;							// Set the top.
    190a:	d0 92 87 00 	sts	0x0087, r13
    190e:	c0 92 86 00 	sts	0x0086, r12
		if (TCNT1 > top) TCNT1 = top;			// Counter over the top, put within range.
    1912:	80 91 84 00 	lds	r24, 0x0084
    1916:	90 91 85 00 	lds	r25, 0x0085
    191a:	a0 e0       	ldi	r26, 0x00	; 0
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	c8 16       	cp	r12, r24
    1920:	d9 06       	cpc	r13, r25
    1922:	ea 06       	cpc	r14, r26
    1924:	fb 06       	cpc	r15, r27
    1926:	20 f4       	brcc	.+8      	; 0x1930 <tone+0xa8>
    1928:	d0 92 85 00 	sts	0x0085, r13
    192c:	c0 92 84 00 	sts	0x0084, r12
			TCCR1B = _BV(WGM13)  | prescaler;   // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
    1930:	c0 61       	ori	r28, 0x10	; 16
    1932:	c0 93 81 00 	sts	0x0081, r28
			OCR1A  = duty;						// Set the duty cycle (volume).
    1936:	30 93 89 00 	sts	0x0089, r19
    193a:	20 93 88 00 	sts	0x0088, r18
			TCCR1A = _BV(COM1A1);				// Clear OC1A/OC1B on Compare Match (Set output to low level).
    193e:	80 e8       	ldi	r24, 0x80	; 128
    1940:	80 93 80 00 	sts	0x0080, r24

}
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	ff 90       	pop	r15
    194a:	ef 90       	pop	r14
    194c:	df 90       	pop	r13
    194e:	cf 90       	pop	r12
    1950:	08 95       	ret

00001952 <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    1952:	1f 92       	push	r1
    1954:	0f 92       	push	r0
    1956:	0f b6       	in	r0, 0x3f	; 63
    1958:	0f 92       	push	r0
    195a:	11 24       	eor	r1, r1
    195c:	2f 93       	push	r18
    195e:	3f 93       	push	r19
    1960:	4f 93       	push	r20
    1962:	5f 93       	push	r21
    1964:	8f 93       	push	r24
    1966:	9f 93       	push	r25
    1968:	ef 93       	push	r30
    196a:	ff 93       	push	r31
    196c:	40 91 c0 00 	lds	r20, 0x00C0
    1970:	50 91 c6 00 	lds	r21, 0x00C6
    1974:	48 71       	andi	r20, 0x18	; 24
    1976:	80 91 a5 01 	lds	r24, 0x01A5
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	8f 77       	andi	r24, 0x7F	; 127
    1980:	99 27       	eor	r25, r25
    1982:	20 91 a4 01 	lds	r18, 0x01A4
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	28 17       	cp	r18, r24
    198a:	39 07       	cpc	r19, r25
    198c:	39 f0       	breq	.+14     	; 0x199c <__vector_18+0x4a>
    198e:	80 93 a5 01 	sts	0x01A5, r24
    1992:	fc 01       	movw	r30, r24
    1994:	e8 55       	subi	r30, 0x58	; 88
    1996:	fe 4f       	sbci	r31, 0xFE	; 254
    1998:	50 83       	st	Z, r21
    199a:	01 c0       	rjmp	.+2      	; 0x199e <__vector_18+0x4c>
    199c:	42 e0       	ldi	r20, 0x02	; 2
    199e:	40 93 a3 01 	sts	0x01A3, r20
    19a2:	ff 91       	pop	r31
    19a4:	ef 91       	pop	r30
    19a6:	9f 91       	pop	r25
    19a8:	8f 91       	pop	r24
    19aa:	5f 91       	pop	r21
    19ac:	4f 91       	pop	r20
    19ae:	3f 91       	pop	r19
    19b0:	2f 91       	pop	r18
    19b2:	0f 90       	pop	r0
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	0f 90       	pop	r0
    19b8:	1f 90       	pop	r1
    19ba:	18 95       	reti

000019bc <__vector_19>:
    19bc:	1f 92       	push	r1
    19be:	0f 92       	push	r0
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	0f 92       	push	r0
    19c4:	11 24       	eor	r1, r1
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	ef 93       	push	r30
    19cc:	ff 93       	push	r31
    19ce:	90 91 a7 01 	lds	r25, 0x01A7
    19d2:	80 91 a6 01 	lds	r24, 0x01A6
    19d6:	98 17       	cp	r25, r24
    19d8:	79 f0       	breq	.+30     	; 0x19f8 <__vector_19+0x3c>
    19da:	80 91 a6 01 	lds	r24, 0x01A6
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	01 96       	adiw	r24, 0x01	; 1
    19e2:	8f 77       	andi	r24, 0x7F	; 127
    19e4:	99 27       	eor	r25, r25
    19e6:	80 93 a6 01 	sts	0x01A6, r24
    19ea:	fc 01       	movw	r30, r24
    19ec:	e8 5d       	subi	r30, 0xD8	; 216
    19ee:	fd 4f       	sbci	r31, 0xFD	; 253
    19f0:	80 81       	ld	r24, Z
    19f2:	80 93 c6 00 	sts	0x00C6, r24
    19f6:	05 c0       	rjmp	.+10     	; 0x1a02 <__vector_19+0x46>
    19f8:	e1 ec       	ldi	r30, 0xC1	; 193
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	8f 7d       	andi	r24, 0xDF	; 223
    1a00:	80 83       	st	Z, r24
    1a02:	ff 91       	pop	r31
    1a04:	ef 91       	pop	r30
    1a06:	9f 91       	pop	r25
    1a08:	8f 91       	pop	r24
    1a0a:	0f 90       	pop	r0
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	0f 90       	pop	r0
    1a10:	1f 90       	pop	r1
    1a12:	18 95       	reti

00001a14 <uart0_init>:
    1a14:	10 92 a7 01 	sts	0x01A7, r1
    1a18:	10 92 a6 01 	sts	0x01A6, r1
    1a1c:	10 92 a5 01 	sts	0x01A5, r1
    1a20:	10 92 a4 01 	sts	0x01A4, r1
    1a24:	99 23       	and	r25, r25
    1a26:	24 f4       	brge	.+8      	; 0x1a30 <uart0_init+0x1c>
    1a28:	22 e0       	ldi	r18, 0x02	; 2
    1a2a:	20 93 c0 00 	sts	0x00C0, r18
    1a2e:	9f 77       	andi	r25, 0x7F	; 127
    1a30:	90 93 c5 00 	sts	0x00C5, r25
    1a34:	80 93 c4 00 	sts	0x00C4, r24
    1a38:	88 e9       	ldi	r24, 0x98	; 152
    1a3a:	80 93 c1 00 	sts	0x00C1, r24
    1a3e:	86 e0       	ldi	r24, 0x06	; 6
    1a40:	80 93 c2 00 	sts	0x00C2, r24
    1a44:	08 95       	ret

00001a46 <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    1a46:	60 91 a7 01 	lds	r22, 0x01A7
    1a4a:	70 e0       	ldi	r23, 0x00	; 0
    1a4c:	6f 5f       	subi	r22, 0xFF	; 255
    1a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a50:	6f 77       	andi	r22, 0x7F	; 127
    1a52:	77 27       	eor	r23, r23
    1a54:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
    1a56:	20 91 a6 01 	lds	r18, 0x01A6
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	24 17       	cp	r18, r20
    1a5e:	35 07       	cpc	r19, r21
    1a60:	d1 f3       	breq	.-12     	; 0x1a56 <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    1a62:	fb 01       	movw	r30, r22
    1a64:	e8 5d       	subi	r30, 0xD8	; 216
    1a66:	fd 4f       	sbci	r31, 0xFD	; 253
    1a68:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    1a6a:	60 93 a7 01 	sts	0x01A7, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
    1a6e:	e1 ec       	ldi	r30, 0xC1	; 193
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	80 62       	ori	r24, 0x20	; 32
    1a76:	80 83       	st	Z, r24
    1a78:	08 95       	ret

00001a7a <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	ec 01       	movw	r28, r24
	while (*s) {
    1a80:	88 81       	ld	r24, Y
    1a82:	88 23       	and	r24, r24
    1a84:	29 f0       	breq	.+10     	; 0x1a90 <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
    1a86:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
    1a88:	de df       	rcall	.-68     	; 0x1a46 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
    1a8a:	89 91       	ld	r24, Y+
    1a8c:	81 11       	cpse	r24, r1
    1a8e:	fc cf       	rjmp	.-8      	; 0x1a88 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	08 95       	ret

00001a96 <__divmodhi4>:
    1a96:	97 fb       	bst	r25, 7
    1a98:	07 2e       	mov	r0, r23
    1a9a:	16 f4       	brtc	.+4      	; 0x1aa0 <__divmodhi4+0xa>
    1a9c:	00 94       	com	r0
    1a9e:	06 d0       	rcall	.+12     	; 0x1aac <__divmodhi4_neg1>
    1aa0:	77 fd       	sbrc	r23, 7
    1aa2:	08 d0       	rcall	.+16     	; 0x1ab4 <__divmodhi4_neg2>
    1aa4:	2d d0       	rcall	.+90     	; 0x1b00 <__udivmodhi4>
    1aa6:	07 fc       	sbrc	r0, 7
    1aa8:	05 d0       	rcall	.+10     	; 0x1ab4 <__divmodhi4_neg2>
    1aaa:	3e f4       	brtc	.+14     	; 0x1aba <__divmodhi4_exit>

00001aac <__divmodhi4_neg1>:
    1aac:	90 95       	com	r25
    1aae:	81 95       	neg	r24
    1ab0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab2:	08 95       	ret

00001ab4 <__divmodhi4_neg2>:
    1ab4:	70 95       	com	r23
    1ab6:	61 95       	neg	r22
    1ab8:	7f 4f       	sbci	r23, 0xFF	; 255

00001aba <__divmodhi4_exit>:
    1aba:	08 95       	ret

00001abc <__udivmodsi4>:
    1abc:	a1 e2       	ldi	r26, 0x21	; 33
    1abe:	1a 2e       	mov	r1, r26
    1ac0:	aa 1b       	sub	r26, r26
    1ac2:	bb 1b       	sub	r27, r27
    1ac4:	fd 01       	movw	r30, r26
    1ac6:	0d c0       	rjmp	.+26     	; 0x1ae2 <__udivmodsi4_ep>

00001ac8 <__udivmodsi4_loop>:
    1ac8:	aa 1f       	adc	r26, r26
    1aca:	bb 1f       	adc	r27, r27
    1acc:	ee 1f       	adc	r30, r30
    1ace:	ff 1f       	adc	r31, r31
    1ad0:	a2 17       	cp	r26, r18
    1ad2:	b3 07       	cpc	r27, r19
    1ad4:	e4 07       	cpc	r30, r20
    1ad6:	f5 07       	cpc	r31, r21
    1ad8:	20 f0       	brcs	.+8      	; 0x1ae2 <__udivmodsi4_ep>
    1ada:	a2 1b       	sub	r26, r18
    1adc:	b3 0b       	sbc	r27, r19
    1ade:	e4 0b       	sbc	r30, r20
    1ae0:	f5 0b       	sbc	r31, r21

00001ae2 <__udivmodsi4_ep>:
    1ae2:	66 1f       	adc	r22, r22
    1ae4:	77 1f       	adc	r23, r23
    1ae6:	88 1f       	adc	r24, r24
    1ae8:	99 1f       	adc	r25, r25
    1aea:	1a 94       	dec	r1
    1aec:	69 f7       	brne	.-38     	; 0x1ac8 <__udivmodsi4_loop>
    1aee:	60 95       	com	r22
    1af0:	70 95       	com	r23
    1af2:	80 95       	com	r24
    1af4:	90 95       	com	r25
    1af6:	9b 01       	movw	r18, r22
    1af8:	ac 01       	movw	r20, r24
    1afa:	bd 01       	movw	r22, r26
    1afc:	cf 01       	movw	r24, r30
    1afe:	08 95       	ret

00001b00 <__udivmodhi4>:
    1b00:	aa 1b       	sub	r26, r26
    1b02:	bb 1b       	sub	r27, r27
    1b04:	51 e1       	ldi	r21, 0x11	; 17
    1b06:	07 c0       	rjmp	.+14     	; 0x1b16 <__udivmodhi4_ep>

00001b08 <__udivmodhi4_loop>:
    1b08:	aa 1f       	adc	r26, r26
    1b0a:	bb 1f       	adc	r27, r27
    1b0c:	a6 17       	cp	r26, r22
    1b0e:	b7 07       	cpc	r27, r23
    1b10:	10 f0       	brcs	.+4      	; 0x1b16 <__udivmodhi4_ep>
    1b12:	a6 1b       	sub	r26, r22
    1b14:	b7 0b       	sbc	r27, r23

00001b16 <__udivmodhi4_ep>:
    1b16:	88 1f       	adc	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	5a 95       	dec	r21
    1b1c:	a9 f7       	brne	.-22     	; 0x1b08 <__udivmodhi4_loop>
    1b1e:	80 95       	com	r24
    1b20:	90 95       	com	r25
    1b22:	bc 01       	movw	r22, r24
    1b24:	cd 01       	movw	r24, r26
    1b26:	08 95       	ret

00001b28 <memcpy>:
    1b28:	fb 01       	movw	r30, r22
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <memcpy+0xa>
    1b2e:	01 90       	ld	r0, Z+
    1b30:	0d 92       	st	X+, r0
    1b32:	41 50       	subi	r20, 0x01	; 1
    1b34:	50 40       	sbci	r21, 0x00	; 0
    1b36:	d8 f7       	brcc	.-10     	; 0x1b2e <memcpy+0x6>
    1b38:	08 95       	ret

00001b3a <_exit>:
    1b3a:	f8 94       	cli

00001b3c <__stop_program>:
    1b3c:	ff cf       	rjmp	.-2      	; 0x1b3c <__stop_program>
