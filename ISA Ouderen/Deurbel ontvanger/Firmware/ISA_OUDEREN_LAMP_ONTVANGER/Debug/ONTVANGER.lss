
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000057e  00000612  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000057e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080010a  0080010a  0000061c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000d7f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000110  00000000  00000000  00000dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001143  00000000  00000000  00000ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000067e  00000000  00000000  00002001  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000af4  00000000  00000000  0000267f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000294  00000000  00000000  00003174  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000380  00000000  00000000  00003408  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000859  00000000  00000000  00003788  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000160  00000000  00000000  00003fe1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	61 c0       	rjmp	.+194    	; 0xe0 <__vector_7>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	28 c2       	rjmp	.+1104   	; 0x47e <__vector_11>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	47 d0       	rcall	.+142    	; 0x12a <main>
  9c:	6e c2       	rjmp	.+1244   	; 0x57a <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	80 93 b0 00 	sts	0x00B0, r24
  a6:	94 e0       	ldi	r25, 0x04	; 4
  a8:	90 93 b1 00 	sts	0x00B1, r25
  ac:	80 93 70 00 	sts	0x0070, r24
  b0:	8a ef       	ldi	r24, 0xFA	; 250
  b2:	80 93 b3 00 	sts	0x00B3, r24
  b6:	08 95       	ret

000000b8 <millis_get>:
  b8:	0f 93       	push	r16
  ba:	1f 93       	push	r17
  bc:	8f b7       	in	r24, 0x3f	; 63
  be:	f8 94       	cli
  c0:	00 91 0a 01 	lds	r16, 0x010A
  c4:	10 91 0b 01 	lds	r17, 0x010B
  c8:	20 91 0c 01 	lds	r18, 0x010C
  cc:	30 91 0d 01 	lds	r19, 0x010D
  d0:	8f bf       	out	0x3f, r24	; 63
  d2:	60 2f       	mov	r22, r16
  d4:	71 2f       	mov	r23, r17
  d6:	82 2f       	mov	r24, r18
  d8:	93 2f       	mov	r25, r19
  da:	1f 91       	pop	r17
  dc:	0f 91       	pop	r16
  de:	08 95       	ret

000000e0 <__vector_7>:

ISR(ISR_VECT)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	8f 93       	push	r24
  ec:	9f 93       	push	r25
  ee:	af 93       	push	r26
  f0:	bf 93       	push	r27
	++milliseconds;
  f2:	80 91 0a 01 	lds	r24, 0x010A
  f6:	90 91 0b 01 	lds	r25, 0x010B
  fa:	a0 91 0c 01 	lds	r26, 0x010C
  fe:	b0 91 0d 01 	lds	r27, 0x010D
 102:	01 96       	adiw	r24, 0x01	; 1
 104:	a1 1d       	adc	r26, r1
 106:	b1 1d       	adc	r27, r1
 108:	80 93 0a 01 	sts	0x010A, r24
 10c:	90 93 0b 01 	sts	0x010B, r25
 110:	a0 93 0c 01 	sts	0x010C, r26
 114:	b0 93 0d 01 	sts	0x010D, r27
}
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <main>:



int main() {
	
	sei();
 12a:	78 94       	sei
	        // Initialize library
	        millis_init();
 12c:	b9 df       	rcall	.-142    	; 0xa0 <millis_init>
	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
	
// WHOOP UP
	byte x;
		for(x=50;x>0;x++){
 12e:	0f 2e       	mov	r0, r31
 130:	f2 e3       	ldi	r31, 0x32	; 50
 132:	ff 2e       	mov	r15, r31
 134:	f0 2d       	mov	r31, r0
			toneAC((250*x/20) );
 136:	0f 2e       	mov	r0, r31
 138:	fa ef       	ldi	r31, 0xFA	; 250
 13a:	7f 2e       	mov	r7, r31
 13c:	f0 2d       	mov	r31, r0
 13e:	0f 2e       	mov	r0, r31
 140:	f4 e1       	ldi	r31, 0x14	; 20
 142:	cf 2e       	mov	r12, r31
 144:	d1 2c       	mov	r13, r1
 146:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 148:	0f 2e       	mov	r0, r31
 14a:	f4 ed       	ldi	r31, 0xD4	; 212
 14c:	af 2e       	mov	r10, r31
 14e:	f0 e3       	ldi	r31, 0x30	; 48
 150:	bf 2e       	mov	r11, r31
 152:	f0 2d       	mov	r31, r0
 154:	0f 2e       	mov	r0, r31
 156:	fe ef       	ldi	r31, 0xFE	; 254
 158:	8f 2e       	mov	r8, r31
 15a:	f0 2d       	mov	r31, r0
 15c:	0f 2e       	mov	r0, r31
 15e:	f3 e0       	ldi	r31, 0x03	; 3
 160:	9f 2e       	mov	r9, r31
 162:	f0 2d       	mov	r31, r0
 164:	19 c0       	rjmp	.+50     	; 0x198 <main+0x6e>
 166:	7f 9c       	mul	r7, r15
 168:	c0 01       	movw	r24, r0
 16a:	11 24       	eor	r1, r1
 16c:	b6 01       	movw	r22, r12
 16e:	bc d1       	rcall	.+888    	; 0x4e8 <__divmodhi4>
 170:	88 27       	eor	r24, r24
 172:	77 fd       	sbrc	r23, 7
 174:	80 95       	com	r24
 176:	98 2f       	mov	r25, r24
 178:	e1 2c       	mov	r14, r1
 17a:	00 e0       	ldi	r16, 0x00	; 0
 17c:	10 e0       	ldi	r17, 0x00	; 0
 17e:	98 01       	movw	r18, r16
 180:	4a e0       	ldi	r20, 0x0A	; 10
 182:	ca d0       	rcall	.+404    	; 0x318 <_Z6toneACmhmh>
 184:	2f ef       	ldi	r18, 0xFF	; 255
 186:	36 e7       	ldi	r19, 0x76	; 118
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	21 50       	subi	r18, 0x01	; 1
 18c:	30 40       	sbci	r19, 0x00	; 0
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <main+0x60>
 192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x6a>
 194:	00 00       	nop
	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
	
// WHOOP UP
	byte x;
		for(x=50;x>0;x++){
 196:	f3 94       	inc	r15
 198:	f1 10       	cpse	r15, r1
 19a:	e5 cf       	rjmp	.-54     	; 0x166 <main+0x3c>
			toneAC((250*x/20) );
			_delay_ms(30); // Wait a second.
		}
		toneAC(); // Turn off toneAC, can also use noToneAC().
 19c:	e1 2c       	mov	r14, r1
 19e:	00 e0       	ldi	r16, 0x00	; 0
 1a0:	10 e0       	ldi	r17, 0x00	; 0
 1a2:	98 01       	movw	r18, r16
 1a4:	4a e0       	ldi	r20, 0x0A	; 10
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	cb 01       	movw	r24, r22
 1ac:	b5 d0       	rcall	.+362    	; 0x318 <_Z6toneACmhmh>
 1ae:	9f ef       	ldi	r25, 0xFF	; 255
 1b0:	29 e6       	ldi	r18, 0x69	; 105
 1b2:	38 e1       	ldi	r19, 0x18	; 24
 1b4:	91 50       	subi	r25, 0x01	; 1
 1b6:	20 40       	sbci	r18, 0x00	; 0
 1b8:	30 40       	sbci	r19, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x8a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x94>
 1be:	00 00       	nop
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	9f e4       	ldi	r25, 0x4F	; 79
 1c4:	23 ec       	ldi	r18, 0xC3	; 195
 1c6:	81 50       	subi	r24, 0x01	; 1
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	20 40       	sbci	r18, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x9c>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0xa6>
 1d0:	00 00       	nop
 1d2:	e5 01       	movw	r28, r10
_delay_ms(4000);


// WHOOP DOWN
for(x=50;x>0;x--){
	toneAC((250*x/20) );
 1d4:	ce 01       	movw	r24, r28
 1d6:	b6 01       	movw	r22, r12
 1d8:	87 d1       	rcall	.+782    	; 0x4e8 <__divmodhi4>
 1da:	88 27       	eor	r24, r24
 1dc:	77 fd       	sbrc	r23, 7
 1de:	80 95       	com	r24
 1e0:	98 2f       	mov	r25, r24
 1e2:	e1 2c       	mov	r14, r1
 1e4:	00 e0       	ldi	r16, 0x00	; 0
 1e6:	10 e0       	ldi	r17, 0x00	; 0
 1e8:	98 01       	movw	r18, r16
 1ea:	4a e0       	ldi	r20, 0x0A	; 10
 1ec:	95 d0       	rcall	.+298    	; 0x318 <_Z6toneACmhmh>
 1ee:	3f ef       	ldi	r19, 0xFF	; 255
 1f0:	86 e7       	ldi	r24, 0x76	; 118
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	31 50       	subi	r19, 0x01	; 1
 1f6:	80 40       	sbci	r24, 0x00	; 0
 1f8:	90 40       	sbci	r25, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0xca>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0xd4>
 1fe:	00 00       	nop
 200:	ca 5f       	subi	r28, 0xFA	; 250
 202:	d1 09       	sbc	r29, r1

_delay_ms(4000);


// WHOOP DOWN
for(x=50;x>0;x--){
 204:	39 f7       	brne	.-50     	; 0x1d4 <main+0xaa>
	toneAC((250*x/20) );
	_delay_ms(30); // Wait a second.
}
toneAC(); // Turn off toneAC, can also use noToneAC().
 206:	00 e0       	ldi	r16, 0x00	; 0
 208:	10 e0       	ldi	r17, 0x00	; 0
 20a:	98 01       	movw	r18, r16
 20c:	4a e0       	ldi	r20, 0x0A	; 10
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	cb 01       	movw	r24, r22
 214:	81 d0       	rcall	.+258    	; 0x318 <_Z6toneACmhmh>
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	39 e6       	ldi	r19, 0x69	; 105
 21a:	88 e1       	ldi	r24, 0x18	; 24
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	30 40       	sbci	r19, 0x00	; 0
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0xf2>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0xfc>
 226:	00 00       	nop
 228:	9f ef       	ldi	r25, 0xFF	; 255
 22a:	2f e4       	ldi	r18, 0x4F	; 79
 22c:	33 ec       	ldi	r19, 0xC3	; 195
 22e:	91 50       	subi	r25, 0x01	; 1
 230:	20 40       	sbci	r18, 0x00	; 0
 232:	30 40       	sbci	r19, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <main+0x104>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x10e>
 238:	00 00       	nop
 23a:	c8 2d       	mov	r28, r8
_delay_ms(4000);		
		
		
// DOORBELL
for(x=2;x>0;x++){
toneAC(1500, 10, 500, true); // Play thisNote at full volume for noteDuration in the background.
 23c:	ee 24       	eor	r14, r14
 23e:	e3 94       	inc	r14
 240:	04 ef       	ldi	r16, 0xF4	; 244
 242:	11 e0       	ldi	r17, 0x01	; 1
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	4a e0       	ldi	r20, 0x0A	; 10
 24a:	6c ed       	ldi	r22, 0xDC	; 220
 24c:	75 e0       	ldi	r23, 0x05	; 5
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	62 d0       	rcall	.+196    	; 0x318 <_Z6toneACmhmh>
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	99 e6       	ldi	r25, 0x69	; 105
 258:	28 e1       	ldi	r18, 0x18	; 24
 25a:	81 50       	subi	r24, 0x01	; 1
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	20 40       	sbci	r18, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <main+0x130>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x13a>
 264:	00 00       	nop
_delay_ms(500);
toneAC(1200, 10, 500, true); // Play thisNote at full volume for noteDuration in the background.
 266:	04 ef       	ldi	r16, 0xF4	; 244
 268:	11 e0       	ldi	r17, 0x01	; 1
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	4a e0       	ldi	r20, 0x0A	; 10
 270:	60 eb       	ldi	r22, 0xB0	; 176
 272:	74 e0       	ldi	r23, 0x04	; 4
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	4f d0       	rcall	.+158    	; 0x318 <_Z6toneACmhmh>
 27a:	c1 50       	subi	r28, 0x01	; 1
	
_delay_ms(4000);		
		
		
// DOORBELL
for(x=2;x>0;x++){
 27c:	f9 f6       	brne	.-66     	; 0x23c <main+0x112>
 27e:	3f ef       	ldi	r19, 0xFF	; 255
 280:	8f e4       	ldi	r24, 0x4F	; 79
 282:	93 ec       	ldi	r25, 0xC3	; 195
 284:	31 50       	subi	r19, 0x01	; 1
 286:	80 40       	sbci	r24, 0x00	; 0
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <main+0x15a>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <main+0x164>
 28e:	00 00       	nop
 290:	d9 2d       	mov	r29, r9
 292:	23 c0       	rjmp	.+70     	; 0x2da <main+0x1b0>
//byte x;
byte y;
	for(y=0;y<3;y++){
	      for(x=0;x<(15*Duration);x++)
	      {
			toneAC(1000, 10, 40); // Play thisNote at full volume for noteDuration in the background.
 294:	e1 2c       	mov	r14, r1
 296:	08 e2       	ldi	r16, 0x28	; 40
 298:	10 e0       	ldi	r17, 0x00	; 0
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	4a e0       	ldi	r20, 0x0A	; 10
 2a0:	68 ee       	ldi	r22, 0xE8	; 232
 2a2:	73 e0       	ldi	r23, 0x03	; 3
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	37 d0       	rcall	.+110    	; 0x318 <_Z6toneACmhmh>
			toneAC(750, 10, 40); // Play thisNote at full volume for noteDuration in the background.
 2aa:	08 e2       	ldi	r16, 0x28	; 40
 2ac:	10 e0       	ldi	r17, 0x00	; 0
 2ae:	20 e0       	ldi	r18, 0x00	; 0
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	4a e0       	ldi	r20, 0x0A	; 10
 2b4:	6e ee       	ldi	r22, 0xEE	; 238
 2b6:	72 e0       	ldi	r23, 0x02	; 2
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	2d d0       	rcall	.+90     	; 0x318 <_Z6toneACmhmh>
// Phone ring
byte Duration = 1;
//byte x;
byte y;
	for(y=0;y<3;y++){
	      for(x=0;x<(15*Duration);x++)
 2be:	cf 5f       	subi	r28, 0xFF	; 255
 2c0:	cf 30       	cpi	r28, 0x0F	; 15
 2c2:	41 f7       	brne	.-48     	; 0x294 <main+0x16a>
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	37 e9       	ldi	r19, 0x97	; 151
 2c8:	8a e3       	ldi	r24, 0x3A	; 58
 2ca:	21 50       	subi	r18, 0x01	; 1
 2cc:	30 40       	sbci	r19, 0x00	; 0
 2ce:	80 40       	sbci	r24, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <main+0x1a0>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <main+0x1aa>
 2d4:	00 00       	nop
 2d6:	d1 50       	subi	r29, 0x01	; 1
	
// Phone ring
byte Duration = 1;
//byte x;
byte y;
	for(y=0;y<3;y++){
 2d8:	11 f0       	breq	.+4      	; 0x2de <main+0x1b4>
 2da:	cf 2d       	mov	r28, r15
 2dc:	db cf       	rjmp	.-74     	; 0x294 <main+0x16a>
 2de:	9a ea       	ldi	r25, 0xAA	; 170
 2e0:	26 ee       	ldi	r18, 0xE6	; 230
 2e2:	36 e9       	ldi	r19, 0x96	; 150
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	91 50       	subi	r25, 0x01	; 1
 2e8:	20 40       	sbci	r18, 0x00	; 0
 2ea:	30 40       	sbci	r19, 0x00	; 0
 2ec:	80 40       	sbci	r24, 0x00	; 0
 2ee:	d9 f7       	brne	.-10     	; 0x2e6 <main+0x1bc>
 2f0:	00 00       	nop
	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
	
// WHOOP UP
	byte x;
		for(x=50;x>0;x++){
 2f2:	0f 2e       	mov	r0, r31
 2f4:	f2 e3       	ldi	r31, 0x32	; 50
 2f6:	ff 2e       	mov	r15, r31
 2f8:	f0 2d       	mov	r31, r0
 2fa:	4e cf       	rjmp	.-356    	; 0x198 <main+0x6e>

000002fc <_Z8noToneACv>:
	  } // Just a simple delay, doesn't return control till finished.

}

void noToneAC() {
  TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
 2fc:	ef e6       	ldi	r30, 0x6F	; 111
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	8d 7f       	andi	r24, 0xFD	; 253
 304:	80 83       	st	Z, r24
  TCCR1B  = _BV(CS11);        // Default clock prescaler of 8.
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	80 93 81 00 	sts	0x0081, r24
  TCCR1A  = _BV(WGM10);       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	80 93 80 00 	sts	0x0080, r24
  PWMT1PORT &= ~_BV(PWMT1AMASK); // Set timer 1 PWM pins to LOW.
 312:	29 98       	cbi	0x05, 1	; 5
  PWMT1PORT &= ~_BV(PWMT1BMASK); // Other timer 1 PWM pin also to LOW.
 314:	2a 98       	cbi	0x05, 2	; 5
 316:	08 95       	ret

00000318 <_Z6toneACmhmh>:

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume control.



void toneAC(unsigned long frequency, uint8_t volume, unsigned long length, uint8_t background) {
 318:	4f 92       	push	r4
 31a:	5f 92       	push	r5
 31c:	6f 92       	push	r6
 31e:	7f 92       	push	r7
 320:	8f 92       	push	r8
 322:	9f 92       	push	r9
 324:	af 92       	push	r10
 326:	bf 92       	push	r11
 328:	cf 92       	push	r12
 32a:	df 92       	push	r13
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	2b 01       	movw	r4, r22
 33a:	3c 01       	movw	r6, r24
 33c:	48 01       	movw	r8, r16
 33e:	59 01       	movw	r10, r18
 340:	ce 2d       	mov	r28, r14
  if (frequency == 0 || volume == 0) { noToneAC(); return; } // If frequency or volume are 0, turn off sound and return.
 342:	61 15       	cp	r22, r1
 344:	71 05       	cpc	r23, r1
 346:	81 05       	cpc	r24, r1
 348:	91 05       	cpc	r25, r1
 34a:	11 f0       	breq	.+4      	; 0x350 <_Z6toneACmhmh+0x38>
 34c:	41 11       	cpse	r20, r1
 34e:	02 c0       	rjmp	.+4      	; 0x354 <_Z6toneACmhmh+0x3c>
 350:	d5 df       	rcall	.-86     	; 0x2fc <_Z8noToneACv>
 352:	84 c0       	rjmp	.+264    	; 0x45c <_Z6toneACmhmh+0x144>
 354:	d4 2f       	mov	r29, r20
 356:	4b 30       	cpi	r20, 0x0B	; 11
 358:	08 f0       	brcs	.+2      	; 0x35c <_Z6toneACmhmh+0x44>
 35a:	da e0       	ldi	r29, 0x0A	; 10
  if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).

  
  PWMT1DREG |= _BV(PWMT1AMASK) | _BV(PWMT1BMASK); // Set timer 1 PWM pins to OUTPUT (because analogWrite does it too).
 35c:	84 b1       	in	r24, 0x04	; 4
 35e:	86 60       	ori	r24, 0x06	; 6
 360:	84 b9       	out	0x04, r24	; 4

  uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
  unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	72 e1       	ldi	r23, 0x12	; 18
 366:	8a e7       	ldi	r24, 0x7A	; 122
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	a3 01       	movw	r20, r6
 36c:	92 01       	movw	r18, r4
 36e:	cf d0       	rcall	.+414    	; 0x50e <__udivmodsi4>
 370:	cc 24       	eor	r12, r12
 372:	ca 94       	dec	r12
 374:	dc 2c       	mov	r13, r12
 376:	76 01       	movw	r14, r12
 378:	c2 0e       	add	r12, r18
 37a:	d3 1e       	adc	r13, r19
 37c:	e4 1e       	adc	r14, r20
 37e:	f5 1e       	adc	r15, r21
  if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
 380:	c1 14       	cp	r12, r1
 382:	d1 04       	cpc	r13, r1
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	e8 06       	cpc	r14, r24
 388:	f1 04       	cpc	r15, r1
 38a:	58 f0       	brcs	.+22     	; 0x3a2 <_Z6toneACmhmh+0x8a>
    prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    top = top / 256 - 1;                         // Calculate the top using prescaler 256.
 38c:	cd 2c       	mov	r12, r13
 38e:	de 2c       	mov	r13, r14
 390:	ef 2c       	mov	r14, r15
 392:	ff 24       	eor	r15, r15
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	c9 1a       	sub	r12, r25
 398:	d1 08       	sbc	r13, r1
 39a:	e1 08       	sbc	r14, r1
 39c:	f1 08       	sbc	r15, r1
  PWMT1DREG |= _BV(PWMT1AMASK) | _BV(PWMT1BMASK); // Set timer 1 PWM pins to OUTPUT (because analogWrite does it too).

  uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
  unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
  if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
 39e:	14 e0       	ldi	r17, 0x04	; 4
 3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <_Z6toneACmhmh+0x8c>
  if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).

  
  PWMT1DREG |= _BV(PWMT1AMASK) | _BV(PWMT1BMASK); // Set timer 1 PWM pins to OUTPUT (because analogWrite does it too).

  uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
 3a2:	11 e0       	ldi	r17, 0x01	; 1
  if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    top = top / 256 - 1;                         // Calculate the top using prescaler 256.
  }

  unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
 3a4:	ed 2f       	mov	r30, r29
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	e1 50       	subi	r30, 0x01	; 1
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	20 81       	ld	r18, Z
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	c7 01       	movw	r24, r14
 3b6:	b6 01       	movw	r22, r12
 3b8:	aa d0       	rcall	.+340    	; 0x50e <__udivmodsi4>
 3ba:	39 01       	movw	r6, r18



  if (length > 0 && background) {  // Background tone playing, returns control to your sketch.
 3bc:	81 14       	cp	r8, r1
 3be:	91 04       	cpc	r9, r1
 3c0:	a1 04       	cpc	r10, r1
 3c2:	b1 04       	cpc	r11, r1
 3c4:	b1 f0       	breq	.+44     	; 0x3f2 <_Z6toneACmhmh+0xda>
 3c6:	cc 23       	and	r28, r28
 3c8:	a1 f0       	breq	.+40     	; 0x3f2 <_Z6toneACmhmh+0xda>

    _tAC_time = millis() + length; // Set when the note should end.
 3ca:	76 de       	rcall	.-788    	; 0xb8 <millis_get>
 3cc:	dc 01       	movw	r26, r24
 3ce:	cb 01       	movw	r24, r22
 3d0:	88 0d       	add	r24, r8
 3d2:	99 1d       	adc	r25, r9
 3d4:	aa 1d       	adc	r26, r10
 3d6:	bb 1d       	adc	r27, r11
 3d8:	80 93 0e 01 	sts	0x010E, r24
 3dc:	90 93 0f 01 	sts	0x010F, r25
 3e0:	a0 93 10 01 	sts	0x0110, r26
 3e4:	b0 93 11 01 	sts	0x0111, r27
    TIMSK1 |= _BV(OCIE1A);         // Activate the timer interrupt.
 3e8:	ef e6       	ldi	r30, 0x6F	; 111
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	80 81       	ld	r24, Z
 3ee:	82 60       	ori	r24, 0x02	; 2
 3f0:	80 83       	st	Z, r24
  }

  ICR1   = top;                         // Set the top.
 3f2:	d0 92 87 00 	sts	0x0087, r13
 3f6:	c0 92 86 00 	sts	0x0086, r12
  if (TCNT1 > top) TCNT1 = top;         // Counter over the top, put within range.
 3fa:	80 91 84 00 	lds	r24, 0x0084
 3fe:	90 91 85 00 	lds	r25, 0x0085
 402:	a0 e0       	ldi	r26, 0x00	; 0
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	c8 16       	cp	r12, r24
 408:	d9 06       	cpc	r13, r25
 40a:	ea 06       	cpc	r14, r26
 40c:	fb 06       	cpc	r15, r27
 40e:	20 f4       	brcc	.+8      	; 0x418 <_Z6toneACmhmh+0x100>
 410:	d0 92 85 00 	sts	0x0085, r13
 414:	c0 92 84 00 	sts	0x0084, r12
  TCCR1B = _BV(WGM13)  | prescaler;     // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
 418:	10 61       	ori	r17, 0x10	; 16
 41a:	10 93 81 00 	sts	0x0081, r17
  OCR1A  = OCR1B = duty;                // Set the duty cycle (volume).
 41e:	70 92 8b 00 	sts	0x008B, r7
 422:	60 92 8a 00 	sts	0x008A, r6
 426:	70 92 89 00 	sts	0x0089, r7
 42a:	60 92 88 00 	sts	0x0088, r6
  TCCR1A = _BV(COM1A1) | _BV(COM1B1) | _BV(COM1B0); // Inverted/non-inverted mode (AC).
 42e:	80 eb       	ldi	r24, 0xB0	; 176
 430:	80 93 80 00 	sts	0x0080, r24


  if (length > 0 && !background) { 
 434:	81 14       	cp	r8, r1
 436:	91 04       	cpc	r9, r1
 438:	a1 04       	cpc	r10, r1
 43a:	b1 04       	cpc	r11, r1
 43c:	79 f0       	breq	.+30     	; 0x45c <_Z6toneACmhmh+0x144>
 43e:	c1 11       	cpse	r28, r1
 440:	0d c0       	rjmp	.+26     	; 0x45c <_Z6toneACmhmh+0x144>
 442:	8f e9       	ldi	r24, 0x9F	; 159
 444:	9f e0       	ldi	r25, 0x0F	; 15
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <_Z6toneACmhmh+0x12e>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <_Z6toneACmhmh+0x134>
 44c:	00 00       	nop
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	89 1a       	sub	r8, r25
 452:	91 08       	sbc	r9, r1
 454:	a1 08       	sbc	r10, r1
 456:	b1 08       	sbc	r11, r1
	  while(length--) {	_delay_ms(1); }
 458:	a1 f7       	brne	.-24     	; 0x442 <_Z6toneACmhmh+0x12a>
	  noToneAC(); 
 45a:	50 df       	rcall	.-352    	; 0x2fc <_Z8noToneACv>
	  } // Just a simple delay, doesn't return control till finished.

}
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	0f 91       	pop	r16
 464:	ff 90       	pop	r15
 466:	ef 90       	pop	r14
 468:	df 90       	pop	r13
 46a:	cf 90       	pop	r12
 46c:	bf 90       	pop	r11
 46e:	af 90       	pop	r10
 470:	9f 90       	pop	r9
 472:	8f 90       	pop	r8
 474:	7f 90       	pop	r7
 476:	6f 90       	pop	r6
 478:	5f 90       	pop	r5
 47a:	4f 90       	pop	r4
 47c:	08 95       	ret

0000047e <__vector_11>:
  TCCR1A  = _BV(WGM10);       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
  PWMT1PORT &= ~_BV(PWMT1AMASK); // Set timer 1 PWM pins to LOW.
  PWMT1PORT &= ~_BV(PWMT1BMASK); // Other timer 1 PWM pin also to LOW.
}

ISR(TIMER1_COMPA_vect) { // Timer interrupt vector.
 47e:	1f 92       	push	r1
 480:	0f 92       	push	r0
 482:	0f b6       	in	r0, 0x3f	; 63
 484:	0f 92       	push	r0
 486:	11 24       	eor	r1, r1
 488:	0f 93       	push	r16
 48a:	1f 93       	push	r17
 48c:	2f 93       	push	r18
 48e:	3f 93       	push	r19
 490:	4f 93       	push	r20
 492:	5f 93       	push	r21
 494:	6f 93       	push	r22
 496:	7f 93       	push	r23
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	af 93       	push	r26
 49e:	bf 93       	push	r27
 4a0:	ef 93       	push	r30
 4a2:	ff 93       	push	r31
	//noToneAC();
  if (millis() >= _tAC_time) noToneAC(); // Check to see if it's time for the note to end.
 4a4:	09 de       	rcall	.-1006   	; 0xb8 <millis_get>
 4a6:	00 91 0e 01 	lds	r16, 0x010E
 4aa:	10 91 0f 01 	lds	r17, 0x010F
 4ae:	20 91 10 01 	lds	r18, 0x0110
 4b2:	30 91 11 01 	lds	r19, 0x0111
 4b6:	60 17       	cp	r22, r16
 4b8:	71 07       	cpc	r23, r17
 4ba:	82 07       	cpc	r24, r18
 4bc:	93 07       	cpc	r25, r19
 4be:	08 f0       	brcs	.+2      	; 0x4c2 <__vector_11+0x44>
 4c0:	1d df       	rcall	.-454    	; 0x2fc <_Z8noToneACv>
 4c2:	ff 91       	pop	r31
 4c4:	ef 91       	pop	r30
 4c6:	bf 91       	pop	r27
 4c8:	af 91       	pop	r26
 4ca:	9f 91       	pop	r25
 4cc:	8f 91       	pop	r24
 4ce:	7f 91       	pop	r23
 4d0:	6f 91       	pop	r22
 4d2:	5f 91       	pop	r21
 4d4:	4f 91       	pop	r20
 4d6:	3f 91       	pop	r19
 4d8:	2f 91       	pop	r18
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	0f 90       	pop	r0
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	0f 90       	pop	r0
 4e4:	1f 90       	pop	r1
 4e6:	18 95       	reti

000004e8 <__divmodhi4>:
 4e8:	97 fb       	bst	r25, 7
 4ea:	07 2e       	mov	r0, r23
 4ec:	16 f4       	brtc	.+4      	; 0x4f2 <__divmodhi4+0xa>
 4ee:	00 94       	com	r0
 4f0:	06 d0       	rcall	.+12     	; 0x4fe <__divmodhi4_neg1>
 4f2:	77 fd       	sbrc	r23, 7
 4f4:	08 d0       	rcall	.+16     	; 0x506 <__divmodhi4_neg2>
 4f6:	2d d0       	rcall	.+90     	; 0x552 <__udivmodhi4>
 4f8:	07 fc       	sbrc	r0, 7
 4fa:	05 d0       	rcall	.+10     	; 0x506 <__divmodhi4_neg2>
 4fc:	3e f4       	brtc	.+14     	; 0x50c <__divmodhi4_exit>

000004fe <__divmodhi4_neg1>:
 4fe:	90 95       	com	r25
 500:	81 95       	neg	r24
 502:	9f 4f       	sbci	r25, 0xFF	; 255
 504:	08 95       	ret

00000506 <__divmodhi4_neg2>:
 506:	70 95       	com	r23
 508:	61 95       	neg	r22
 50a:	7f 4f       	sbci	r23, 0xFF	; 255

0000050c <__divmodhi4_exit>:
 50c:	08 95       	ret

0000050e <__udivmodsi4>:
 50e:	a1 e2       	ldi	r26, 0x21	; 33
 510:	1a 2e       	mov	r1, r26
 512:	aa 1b       	sub	r26, r26
 514:	bb 1b       	sub	r27, r27
 516:	fd 01       	movw	r30, r26
 518:	0d c0       	rjmp	.+26     	; 0x534 <__udivmodsi4_ep>

0000051a <__udivmodsi4_loop>:
 51a:	aa 1f       	adc	r26, r26
 51c:	bb 1f       	adc	r27, r27
 51e:	ee 1f       	adc	r30, r30
 520:	ff 1f       	adc	r31, r31
 522:	a2 17       	cp	r26, r18
 524:	b3 07       	cpc	r27, r19
 526:	e4 07       	cpc	r30, r20
 528:	f5 07       	cpc	r31, r21
 52a:	20 f0       	brcs	.+8      	; 0x534 <__udivmodsi4_ep>
 52c:	a2 1b       	sub	r26, r18
 52e:	b3 0b       	sbc	r27, r19
 530:	e4 0b       	sbc	r30, r20
 532:	f5 0b       	sbc	r31, r21

00000534 <__udivmodsi4_ep>:
 534:	66 1f       	adc	r22, r22
 536:	77 1f       	adc	r23, r23
 538:	88 1f       	adc	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	1a 94       	dec	r1
 53e:	69 f7       	brne	.-38     	; 0x51a <__udivmodsi4_loop>
 540:	60 95       	com	r22
 542:	70 95       	com	r23
 544:	80 95       	com	r24
 546:	90 95       	com	r25
 548:	9b 01       	movw	r18, r22
 54a:	ac 01       	movw	r20, r24
 54c:	bd 01       	movw	r22, r26
 54e:	cf 01       	movw	r24, r30
 550:	08 95       	ret

00000552 <__udivmodhi4>:
 552:	aa 1b       	sub	r26, r26
 554:	bb 1b       	sub	r27, r27
 556:	51 e1       	ldi	r21, 0x11	; 17
 558:	07 c0       	rjmp	.+14     	; 0x568 <__udivmodhi4_ep>

0000055a <__udivmodhi4_loop>:
 55a:	aa 1f       	adc	r26, r26
 55c:	bb 1f       	adc	r27, r27
 55e:	a6 17       	cp	r26, r22
 560:	b7 07       	cpc	r27, r23
 562:	10 f0       	brcs	.+4      	; 0x568 <__udivmodhi4_ep>
 564:	a6 1b       	sub	r26, r22
 566:	b7 0b       	sbc	r27, r23

00000568 <__udivmodhi4_ep>:
 568:	88 1f       	adc	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	5a 95       	dec	r21
 56e:	a9 f7       	brne	.-22     	; 0x55a <__udivmodhi4_loop>
 570:	80 95       	com	r24
 572:	90 95       	com	r25
 574:	bc 01       	movw	r22, r24
 576:	cd 01       	movw	r24, r26
 578:	08 95       	ret

0000057a <_exit>:
 57a:	f8 94       	cli

0000057c <__stop_program>:
 57c:	ff cf       	rjmp	.-2      	; 0x57c <__stop_program>
