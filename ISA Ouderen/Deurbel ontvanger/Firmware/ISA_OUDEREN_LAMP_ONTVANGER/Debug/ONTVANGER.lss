
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  000014e6  0000157a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000171  00800154  00800154  000015ce  2**0
                  ALLOC
  3 .stab         00000e4c  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002777  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000398  00000000  00000000  000027a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003c7f  00000000  00000000  00002b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000126a  00000000  00000000  000067bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002856  00000000  00000000  00007a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000990  00000000  00000000  0000a280  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e84  00000000  00000000  0000ac10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002982  00000000  00000000  0000ba94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000390  00000000  00000000  0000e416  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0f c1       	rjmp	.+542    	; 0x220 <__ctors_end>
       2:	00 00       	nop
       4:	a5 c7       	rjmp	.+3914   	; 0xf50 <__vector_1>
       6:	00 00       	nop
       8:	27 c1       	rjmp	.+590    	; 0x258 <__bad_interrupt>
       a:	00 00       	nop
       c:	25 c1       	rjmp	.+586    	; 0x258 <__bad_interrupt>
       e:	00 00       	nop
      10:	23 c1       	rjmp	.+582    	; 0x258 <__bad_interrupt>
      12:	00 00       	nop
      14:	21 c1       	rjmp	.+578    	; 0x258 <__bad_interrupt>
      16:	00 00       	nop
      18:	1f c1       	rjmp	.+574    	; 0x258 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	44 c4       	rjmp	.+2184   	; 0x8a6 <__vector_7>
      1e:	00 00       	nop
      20:	1b c1       	rjmp	.+566    	; 0x258 <__bad_interrupt>
      22:	00 00       	nop
      24:	19 c1       	rjmp	.+562    	; 0x258 <__bad_interrupt>
      26:	00 00       	nop
      28:	17 c1       	rjmp	.+558    	; 0x258 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	15 c1       	rjmp	.+554    	; 0x258 <__bad_interrupt>
      2e:	00 00       	nop
      30:	13 c1       	rjmp	.+550    	; 0x258 <__bad_interrupt>
      32:	00 00       	nop
      34:	11 c1       	rjmp	.+546    	; 0x258 <__bad_interrupt>
      36:	00 00       	nop
      38:	9c c1       	rjmp	.+824    	; 0x372 <__vector_14>
      3a:	00 00       	nop
      3c:	0d c1       	rjmp	.+538    	; 0x258 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0b c1       	rjmp	.+534    	; 0x258 <__bad_interrupt>
      42:	00 00       	nop
      44:	09 c1       	rjmp	.+530    	; 0x258 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 7d 09 	jmp	0x12fa	; 0x12fa <__vector_18>
      4c:	0c 94 b2 09 	jmp	0x1364	; 0x1364 <__vector_19>
      50:	03 c1       	rjmp	.+518    	; 0x258 <__bad_interrupt>
      52:	00 00       	nop
      54:	01 c1       	rjmp	.+514    	; 0x258 <__bad_interrupt>
      56:	00 00       	nop
      58:	ff c0       	rjmp	.+510    	; 0x258 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fd c0       	rjmp	.+506    	; 0x258 <__bad_interrupt>
      5e:	00 00       	nop
      60:	fb c0       	rjmp	.+502    	; 0x258 <__bad_interrupt>
      62:	00 00       	nop
      64:	f9 c0       	rjmp	.+498    	; 0x258 <__bad_interrupt>
	...

00000068 <_ZL22sound_pattern_doorbell>:
      68:	dc 05 00 00 e8 03 00 00 00 00 00 00 e8 03 00 00     ................
      78:	b0 04 00 00 e8 03 00 00 00 00 00 00 d0 07 00 00     ................
      88:	dc 05 00 00 e8 03 00 00 00 00 00 00 e8 03 00 00     ................
      98:	b0 04 00 00 e8 03 00 00 00 00 00 00 d0 07 00 00     ................

000000a8 <_ZL19sound_pattern_phone>:
      a8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      b8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      c8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      d8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      e8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      f8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     108:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     118:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     128:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     138:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     148:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     158:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     168:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     178:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     188:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
	...

000001a0 <_ZL18sound_pattern_help>:
     1a0:	dc 05 00 00 f4 01 00 00 00 00 00 00 f4 01 00 00     ................
     1b0:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................
     1c0:	dc 05 00 00 f4 01 00 00 00 00 00 00 f4 01 00 00     ................
     1d0:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000001e0 <_ZL18sound_pattern_fire>:
     1e0:	dc 05 00 00 f4 01 00 00 00 00 00 00 f4 01 00 00     ................
     1f0:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................
     200:	dc 05 00 00 f4 01 00 00 00 00 00 00 f4 01 00 00     ................
     210:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

00000220 <__ctors_end>:
     220:	11 24       	eor	r1, r1
     222:	1f be       	out	0x3f, r1	; 63
     224:	cf ef       	ldi	r28, 0xFF	; 255
     226:	d8 e0       	ldi	r29, 0x08	; 8
     228:	de bf       	out	0x3e, r29	; 62
     22a:	cd bf       	out	0x3d, r28	; 61

0000022c <__do_copy_data>:
     22c:	11 e0       	ldi	r17, 0x01	; 1
     22e:	a0 e0       	ldi	r26, 0x00	; 0
     230:	b1 e0       	ldi	r27, 0x01	; 1
     232:	e6 ee       	ldi	r30, 0xE6	; 230
     234:	f4 e1       	ldi	r31, 0x14	; 20
     236:	02 c0       	rjmp	.+4      	; 0x23c <__do_copy_data+0x10>
     238:	05 90       	lpm	r0, Z+
     23a:	0d 92       	st	X+, r0
     23c:	a4 35       	cpi	r26, 0x54	; 84
     23e:	b1 07       	cpc	r27, r17
     240:	d9 f7       	brne	.-10     	; 0x238 <__do_copy_data+0xc>

00000242 <__do_clear_bss>:
     242:	22 e0       	ldi	r18, 0x02	; 2
     244:	a4 e5       	ldi	r26, 0x54	; 84
     246:	b1 e0       	ldi	r27, 0x01	; 1
     248:	01 c0       	rjmp	.+2      	; 0x24c <.do_clear_bss_start>

0000024a <.do_clear_bss_loop>:
     24a:	1d 92       	st	X+, r1

0000024c <.do_clear_bss_start>:
     24c:	a5 3c       	cpi	r26, 0xC5	; 197
     24e:	b2 07       	cpc	r27, r18
     250:	e1 f7       	brne	.-8      	; 0x24a <.do_clear_bss_loop>
     252:	b4 d0       	rcall	.+360    	; 0x3bc <main>
     254:	0c 94 71 0a 	jmp	0x14e2	; 0x14e2 <_exit>

00000258 <__bad_interrupt>:
     258:	d3 ce       	rjmp	.-602    	; 0x0 <__vectors>

0000025a <I2C_init>:
     25a:	88 e4       	ldi	r24, 0x48	; 72
     25c:	80 93 b8 00 	sts	0x00B8, r24
     260:	08 95       	ret

00000262 <I2C_start>:
     262:	ec eb       	ldi	r30, 0xBC	; 188
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	10 82       	st	Z, r1
     268:	94 ea       	ldi	r25, 0xA4	; 164
     26a:	90 83       	st	Z, r25
     26c:	90 81       	ld	r25, Z
     26e:	99 23       	and	r25, r25
     270:	ec f7       	brge	.-6      	; 0x26c <I2C_start+0xa>
     272:	90 91 b9 00 	lds	r25, 0x00B9
     276:	98 7f       	andi	r25, 0xF8	; 248
     278:	98 30       	cpi	r25, 0x08	; 8
     27a:	a1 f4       	brne	.+40     	; 0x2a4 <I2C_start+0x42>
     27c:	80 93 bb 00 	sts	0x00BB, r24
     280:	84 e8       	ldi	r24, 0x84	; 132
     282:	80 93 bc 00 	sts	0x00BC, r24
     286:	ec eb       	ldi	r30, 0xBC	; 188
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	80 81       	ld	r24, Z
     28c:	88 23       	and	r24, r24
     28e:	ec f7       	brge	.-6      	; 0x28a <I2C_start+0x28>
     290:	90 91 b9 00 	lds	r25, 0x00B9
     294:	98 7f       	andi	r25, 0xF8	; 248
     296:	98 31       	cpi	r25, 0x18	; 24
     298:	39 f0       	breq	.+14     	; 0x2a8 <I2C_start+0x46>
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	90 34       	cpi	r25, 0x40	; 64
     29e:	29 f4       	brne	.+10     	; 0x2aa <I2C_start+0x48>
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	08 95       	ret
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	08 95       	ret
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	08 95       	ret

000002ac <I2C_write>:
     2ac:	80 93 bb 00 	sts	0x00BB, r24
     2b0:	84 e8       	ldi	r24, 0x84	; 132
     2b2:	80 93 bc 00 	sts	0x00BC, r24
     2b6:	ec eb       	ldi	r30, 0xBC	; 188
     2b8:	f0 e0       	ldi	r31, 0x00	; 0
     2ba:	80 81       	ld	r24, Z
     2bc:	88 23       	and	r24, r24
     2be:	ec f7       	brge	.-6      	; 0x2ba <I2C_write+0xe>
     2c0:	90 91 b9 00 	lds	r25, 0x00B9
     2c4:	98 7f       	andi	r25, 0xF8	; 248
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	98 32       	cpi	r25, 0x28	; 40
     2ca:	09 f4       	brne	.+2      	; 0x2ce <I2C_write+0x22>
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	08 95       	ret

000002d0 <I2C_read_ack>:
     2d0:	84 ec       	ldi	r24, 0xC4	; 196
     2d2:	80 93 bc 00 	sts	0x00BC, r24
     2d6:	ec eb       	ldi	r30, 0xBC	; 188
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	80 81       	ld	r24, Z
     2dc:	88 23       	and	r24, r24
     2de:	ec f7       	brge	.-6      	; 0x2da <I2C_read_ack+0xa>
     2e0:	80 91 bb 00 	lds	r24, 0x00BB
     2e4:	08 95       	ret

000002e6 <I2C_stop>:
     2e6:	84 e9       	ldi	r24, 0x94	; 148
     2e8:	80 93 bc 00 	sts	0x00BC, r24
     2ec:	08 95       	ret

000002ee <log_s>:
     2ee:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <uart0_puts>
     2f2:	08 95       	ret

000002f4 <millis_init>:
     2f4:	82 e0       	ldi	r24, 0x02	; 2
     2f6:	84 bd       	out	0x24, r24	; 36
     2f8:	93 e0       	ldi	r25, 0x03	; 3
     2fa:	95 bd       	out	0x25, r25	; 37
     2fc:	80 93 6e 00 	sts	0x006E, r24
     300:	8a ef       	ldi	r24, 0xFA	; 250
     302:	87 bd       	out	0x27, r24	; 39
     304:	08 95       	ret

00000306 <millis_get>:
     306:	0f 93       	push	r16
     308:	1f 93       	push	r17
     30a:	8f b7       	in	r24, 0x3f	; 63
     30c:	f8 94       	cli
     30e:	00 91 54 01 	lds	r16, 0x0154
     312:	10 91 55 01 	lds	r17, 0x0155
     316:	20 91 56 01 	lds	r18, 0x0156
     31a:	30 91 57 01 	lds	r19, 0x0157
     31e:	8f bf       	out	0x3f, r24	; 63
     320:	60 2f       	mov	r22, r16
     322:	71 2f       	mov	r23, r17
     324:	82 2f       	mov	r24, r18
     326:	93 2f       	mov	r25, r19
     328:	1f 91       	pop	r17
     32a:	0f 91       	pop	r16
     32c:	08 95       	ret

0000032e <millis_resume>:
     32e:	e4 e6       	ldi	r30, 0x64	; 100
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	8f 7d       	andi	r24, 0xDF	; 223
     336:	80 83       	st	Z, r24
     338:	ee e6       	ldi	r30, 0x6E	; 110
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	82 60       	ori	r24, 0x02	; 2
     340:	80 83       	st	Z, r24
     342:	08 95       	ret

00000344 <millis_pause>:
     344:	ee e6       	ldi	r30, 0x6E	; 110
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	8d 7f       	andi	r24, 0xFD	; 253
     34c:	80 83       	st	Z, r24
     34e:	e4 e6       	ldi	r30, 0x64	; 100
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	80 81       	ld	r24, Z
     354:	80 62       	ori	r24, 0x20	; 32
     356:	80 83       	st	Z, r24
     358:	08 95       	ret

0000035a <millis_reset>:
     35a:	8f b7       	in	r24, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	10 92 54 01 	sts	0x0154, r1
     362:	10 92 55 01 	sts	0x0155, r1
     366:	10 92 56 01 	sts	0x0156, r1
     36a:	10 92 57 01 	sts	0x0157, r1
     36e:	8f bf       	out	0x3f, r24	; 63
     370:	08 95       	ret

00000372 <__vector_14>:
     372:	1f 92       	push	r1
     374:	0f 92       	push	r0
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	0f 92       	push	r0
     37a:	11 24       	eor	r1, r1
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	80 91 54 01 	lds	r24, 0x0154
     388:	90 91 55 01 	lds	r25, 0x0155
     38c:	a0 91 56 01 	lds	r26, 0x0156
     390:	b0 91 57 01 	lds	r27, 0x0157
     394:	01 96       	adiw	r24, 0x01	; 1
     396:	a1 1d       	adc	r26, r1
     398:	b1 1d       	adc	r27, r1
     39a:	80 93 54 01 	sts	0x0154, r24
     39e:	90 93 55 01 	sts	0x0155, r25
     3a2:	a0 93 56 01 	sts	0x0156, r26
     3a6:	b0 93 57 01 	sts	0x0157, r27
     3aa:	bf 91       	pop	r27
     3ac:	af 91       	pop	r26
     3ae:	9f 91       	pop	r25
     3b0:	8f 91       	pop	r24
     3b2:	0f 90       	pop	r0
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	0f 90       	pop	r0
}

ISR(ISR_VECT)
{
	++milliseconds;
}
     3b8:	1f 90       	pop	r1
     3ba:	18 95       	reti

000003bc <main>:
			 
	
int main() {	

// disable ADC for less power 
  ADCSRA &= ~_BV(ADEN); // ADC off 
     3bc:	ea e7       	ldi	r30, 0x7A	; 122
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	8f 77       	andi	r24, 0x7F	; 127
     3c4:	80 83       	st	Z, r24


	sei();
     3c6:	78 94       	sei
			/* Initialize MILLIS */
	        millis_init();
     3c8:	95 df       	rcall	.-214    	; 0x2f4 <millis_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ca:	2f ef       	ldi	r18, 0xFF	; 255
     3cc:	8b e7       	ldi	r24, 0x7B	; 123
     3ce:	92 e9       	ldi	r25, 0x92	; 146
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	80 40       	sbci	r24, 0x00	; 0
     3d4:	90 40       	sbci	r25, 0x00	; 0
     3d6:	e1 f7       	brne	.-8      	; 0x3d0 <main+0x14>
     3d8:	00 c0       	rjmp	.+0      	; 0x3da <main+0x1e>
     3da:	00 00       	nop
			_delay_ms(3000);
			/* Initialize MILLIS */

			/* Initialize TONE */						
			tone_init();		
     3dc:	1c d7       	rcall	.+3640   	; 0x1216 <tone_init>
			/* Initialize TONE */						
						
			/* Initialize TIMER 2 */
			// Timer settings
			TCCR2A = _BV(WGM21); // prescaler 128
     3de:	82 e0       	ldi	r24, 0x02	; 2
     3e0:	80 93 b0 00 	sts	0x00B0, r24
			TCCR2B = _BV(CS22)|_BV(CS20);
     3e4:	85 e0       	ldi	r24, 0x05	; 5
     3e6:	80 93 b1 00 	sts	0x00B1, r24
							 	
			// TIMSK2 = _BV(OCIE2A); // DO NOT ENABLE TIMER2 BY DEFAULT!
			OCR2A = ((F_CPU / 128) / 1000);
     3ea:	8d e7       	ldi	r24, 0x7D	; 125
     3ec:	80 93 b3 00 	sts	0x00B3, r24
			power_timer2_disable(); // power timer2 down!
     3f0:	e4 e6       	ldi	r30, 0x64	; 100
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	80 64       	ori	r24, 0x40	; 64
     3f8:	80 83       	st	Z, r24
			/* Initialize TIMER 2 */			
			

			/* Initialize UART */
			uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     3fa:	80 e1       	ldi	r24, 0x10	; 16
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	de d7       	rcall	.+4028   	; 0x13bc <uart0_init>
			uart0_puts("kak");
     400:	8e e0       	ldi	r24, 0x0E	; 14
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	0e 94 11 0a 	call	0x1422	; 0x1422 <uart0_puts>
     408:	ef ef       	ldi	r30, 0xFF	; 255
     40a:	f3 ed       	ldi	r31, 0xD3	; 211
     40c:	20 e3       	ldi	r18, 0x30	; 48
     40e:	e1 50       	subi	r30, 0x01	; 1
     410:	f0 40       	sbci	r31, 0x00	; 0
     412:	20 40       	sbci	r18, 0x00	; 0
     414:	e1 f7       	brne	.-8      	; 0x40e <main+0x52>
     416:	00 c0       	rjmp	.+0      	; 0x418 <main+0x5c>
     418:	00 00       	nop
			_delay_ms(1000);
		
		
			I2C_init();	
     41a:	1f df       	rcall	.-450    	; 0x25a <I2C_init>
			pca9635_init();
     41c:	8b d2       	rcall	.+1302   	; 0x934 <pca9635_init>
			
			log_s("PCA ok");
     41e:	82 e1       	ldi	r24, 0x12	; 18
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	65 df       	rcall	.-310    	; 0x2ee <log_s>
     424:	8f ef       	ldi	r24, 0xFF	; 255
     426:	93 ed       	ldi	r25, 0xD3	; 211
     428:	e0 e3       	ldi	r30, 0x30	; 48
     42a:	81 50       	subi	r24, 0x01	; 1
     42c:	90 40       	sbci	r25, 0x00	; 0
     42e:	e0 40       	sbci	r30, 0x00	; 0
     430:	e1 f7       	brne	.-8      	; 0x42a <main+0x6e>
     432:	00 c0       	rjmp	.+0      	; 0x434 <main+0x78>
     434:	00 00       	nop
			_delay_ms(1000);
			
			
  // node id, rfband, group id
    rf12_initialize(2, RF12_868MHZ, 14);
     436:	4e e0       	ldi	r20, 0x0E	; 14
     438:	62 e0       	ldi	r22, 0x02	; 2
     43a:	82 e0       	ldi	r24, 0x02	; 2
     43c:	04 d5       	rcall	.+2568   	; 0xe46 <_Z15rf12_initializehhh>
    // see http://tools.jeelabs.org/rfm12b
  //  rf12_control(0xC040); // set low-battery level to 2.2V i.s.o. 3.1V

log_s("initialized!");
     43e:	89 e1       	ldi	r24, 0x19	; 25
     440:	91 e0       	ldi	r25, 0x01	; 1
     442:	55 df       	rcall	.-342    	; 0x2ee <log_s>
     444:	ff ef       	ldi	r31, 0xFF	; 255
     446:	23 ed       	ldi	r18, 0xD3	; 211
     448:	80 e3       	ldi	r24, 0x30	; 48
     44a:	f1 50       	subi	r31, 0x01	; 1
     44c:	20 40       	sbci	r18, 0x00	; 0
     44e:	80 40       	sbci	r24, 0x00	; 0
     450:	e1 f7       	brne	.-8      	; 0x44a <main+0x8e>
     452:	00 c0       	rjmp	.+0      	; 0x454 <main+0x98>
     454:	00 00       	nop
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
				
			if (RF12_WANTS_ACK) {
     456:	0b e6       	ldi	r16, 0x6B	; 107
     458:	11 e0       	ldi	r17, 0x01	; 1
			
			
		uart0_puts("\n\r -DATA!- ");
		_delay_ms(20);
		        
				for (byte i = 0; i < rf12_len; ++i){
     45a:	cc e6       	ldi	r28, 0x6C	; 108
     45c:	d1 e0       	ldi	r29, 0x01	; 1
				}
				
				
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[0]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     45e:	0f 2e       	mov	r0, r31
     460:	fd e6       	ldi	r31, 0x6D	; 109
     462:	ef 2e       	mov	r14, r31
     464:	f1 e0       	ldi	r31, 0x01	; 1
     466:	ff 2e       	mov	r15, r31
     468:	f0 2d       	mov	r31, r0
				 

				 		// MELDINGSDUUR RESETTEN
				 		active_alarm_time = millis_get() + alarm_duration; 
						 uart0_putc(millis_get());
						uart0_putc(active_alarm_time);
     46a:	0f 2e       	mov	r0, r31
     46c:	ff e5       	ldi	r31, 0x5F	; 95
     46e:	af 2e       	mov	r10, r31
     470:	f1 e0       	ldi	r31, 0x01	; 1
     472:	bf 2e       	mov	r11, r31
     474:	f0 2d       	mov	r31, r0
							// 2. timer 0 - millis starten
							millis_reset();
							millis_resume();
				 
							// 3. timer 2 - alarm timer starten
							power_timer2_enable();
     476:	0f 2e       	mov	r0, r31
     478:	f4 e6       	ldi	r31, 0x64	; 100
     47a:	cf 2e       	mov	r12, r31
     47c:	d1 2c       	mov	r13, r1
     47e:	f0 2d       	mov	r31, r0
							TIMSK2 |= _BV(OCIE2A);
     480:	0f 2e       	mov	r0, r31
     482:	f0 e7       	ldi	r31, 0x70	; 112
     484:	8f 2e       	mov	r8, r31
     486:	91 2c       	mov	r9, r1
     488:	f0 2d       	mov	r31, r0
						 if(active_alarm_time == 0) {
							// Geen alarm actief

							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i < 4; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     48a:	71 2c       	mov	r7, r1
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
							// Geen alarm actief

							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i < 4; ++i){
     48c:	66 24       	eor	r6, r6
     48e:	63 94       	inc	r6
     490:	68 94       	set
     492:	22 24       	eor	r2, r2
     494:	21 f8       	bld	r2, 1
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     496:	0f 2e       	mov	r0, r31
     498:	f3 e0       	ldi	r31, 0x03	; 3
     49a:	3f 2e       	mov	r3, r31
     49c:	f0 2d       	mov	r31, r0

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
				
			if (RF12_WANTS_ACK) {
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     49e:	68 94       	set
     4a0:	55 24       	eor	r5, r5
     4a2:	57 f8       	bld	r5, 7

	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
     4a4:	f2 d2       	rcall	.+1508   	; 0xa8a <_Z13rf12_recvDonev>
     4a6:	88 23       	and	r24, r24
     4a8:	09 f4       	brne	.+2      	; 0x4ac <main+0xf0>
     4aa:	be c0       	rjmp	.+380    	; 0x628 <main+0x26c>
     4ac:	80 91 b1 01 	lds	r24, 0x01B1
     4b0:	90 91 b2 01 	lds	r25, 0x01B2
     4b4:	89 2b       	or	r24, r25
     4b6:	09 f4       	brne	.+2      	; 0x4ba <main+0xfe>
     4b8:	b2 c0       	rjmp	.+356    	; 0x61e <main+0x262>
     4ba:	b6 c0       	rjmp	.+364    	; 0x628 <main+0x26c>
		// process incoming data here
				
			if (RF12_WANTS_ACK) {
     4bc:	f8 01       	movw	r30, r16
     4be:	80 81       	ld	r24, Z
     4c0:	88 23       	and	r24, r24
     4c2:	0c f0       	brlt	.+2      	; 0x4c6 <main+0x10a>
     4c4:	bc c0       	rjmp	.+376    	; 0x63e <main+0x282>
     4c6:	16 c0       	rjmp	.+44     	; 0x4f4 <main+0x138>
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     4c8:	f8 01       	movw	r30, r16
     4ca:	80 81       	ld	r24, Z
     4cc:	8f 71       	andi	r24, 0x1F	; 31
     4ce:	80 6c       	ori	r24, 0xC0	; 192
     4d0:	47 2d       	mov	r20, r7
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	2f d4       	rcall	.+2142   	; 0xd36 <_Z14rf12_sendStarthPKvh>
				rf12_sendWait(1); // don't power down too soon
     4d8:	86 2d       	mov	r24, r6
     4da:	3b d4       	rcall	.+2166   	; 0xd52 <_Z13rf12_sendWaith>
				uart0_puts("ACK-OK");
     4dc:	86 e2       	ldi	r24, 0x26	; 38
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	a0 d7       	rcall	.+3904   	; 0x1422 <uart0_puts>
     4e2:	ff ef       	ldi	r31, 0xFF	; 255
     4e4:	29 ef       	ldi	r18, 0xF9	; 249
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	f1 50       	subi	r31, 0x01	; 1
     4ea:	20 40       	sbci	r18, 0x00	; 0
     4ec:	80 40       	sbci	r24, 0x00	; 0
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <main+0x12c>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <main+0x136>
     4f2:	00 00       	nop
				_delay_ms(20);
			}
			
			
		uart0_puts("\n\r -DATA!- ");
     4f4:	8d e2       	ldi	r24, 0x2D	; 45
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	94 d7       	rcall	.+3880   	; 0x1422 <uart0_puts>
     4fa:	9f ef       	ldi	r25, 0xFF	; 255
     4fc:	e9 ef       	ldi	r30, 0xF9	; 249
     4fe:	f0 e0       	ldi	r31, 0x00	; 0
     500:	91 50       	subi	r25, 0x01	; 1
     502:	e0 40       	sbci	r30, 0x00	; 0
     504:	f0 40       	sbci	r31, 0x00	; 0
     506:	e1 f7       	brne	.-8      	; 0x500 <main+0x144>
     508:	00 c0       	rjmp	.+0      	; 0x50a <main+0x14e>
     50a:	00 00       	nop
		_delay_ms(20);
		        
				for (byte i = 0; i < rf12_len; ++i){
     50c:	88 81       	ld	r24, Y
     50e:	88 23       	and	r24, r24
     510:	59 f0       	breq	.+22     	; 0x528 <main+0x16c>
     512:	47 2c       	mov	r4, r7
		        uart0_putc(rf12_data[i]);
     514:	e4 2d       	mov	r30, r4
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	e3 59       	subi	r30, 0x93	; 147
     51a:	fe 4f       	sbci	r31, 0xFE	; 254
     51c:	80 81       	ld	r24, Z
     51e:	67 d7       	rcall	.+3790   	; 0x13ee <uart0_putc>
			
			
		uart0_puts("\n\r -DATA!- ");
		_delay_ms(20);
		        
				for (byte i = 0; i < rf12_len; ++i){
     520:	43 94       	inc	r4
     522:	88 81       	ld	r24, Y
     524:	48 16       	cp	r4, r24
     526:	b0 f3       	brcs	.-20     	; 0x514 <main+0x158>
				}
				
				
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[0]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     528:	f7 01       	movw	r30, r14
     52a:	40 80       	ld	r4, Z
				uart0_putc(data);
     52c:	84 2d       	mov	r24, r4
     52e:	5f d7       	rcall	.+3774   	; 0x13ee <uart0_putc>
     530:	8f e3       	ldi	r24, 0x3F	; 63
     532:	9c e9       	ldi	r25, 0x9C	; 156
     534:	01 97       	sbiw	r24, 0x01	; 1
     536:	f1 f7       	brne	.-4      	; 0x534 <main+0x178>
     538:	00 c0       	rjmp	.+0      	; 0x53a <main+0x17e>
     53a:	00 00       	nop
				_delay_ms(10);
				 if(data & 0x10){
     53c:	44 fe       	sbrs	r4, 4
     53e:	09 c0       	rjmp	.+18     	; 0x552 <main+0x196>
					 // start alarm	 
					 uart0_puts("START");
     540:	89 e3       	ldi	r24, 0x39	; 57
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	6e d7       	rcall	.+3804   	; 0x1422 <uart0_puts>
					 active_alarm = active_alarm | data; // 00001111 
     546:	80 91 63 01 	lds	r24, 0x0163
     54a:	48 2a       	or	r4, r24
     54c:	40 92 63 01 	sts	0x0163, r4
     550:	09 c0       	rjmp	.+18     	; 0x564 <main+0x1a8>
				 }else{
					 // stop alarm
					  uart0_puts("STOP");
     552:	8f e3       	ldi	r24, 0x3F	; 63
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	65 d7       	rcall	.+3786   	; 0x1422 <uart0_puts>
					 active_alarm =  active_alarm & (~data); /* invert data, compare with active alarm array to clear the right alarm bit */		 
     558:	40 94       	com	r4
     55a:	80 91 63 01 	lds	r24, 0x0163
     55e:	48 22       	and	r4, r24
     560:	40 92 63 01 	sts	0x0163, r4
				 }
				 
				////////////////		Fill alarm array		 ////////////////				 
				
				
					uart0_putc(active_alarm);	 
     564:	80 91 63 01 	lds	r24, 0x0163
     568:	42 d7       	rcall	.+3716   	; 0x13ee <uart0_putc>
				 // IS ER EEN ALARM ACTIEF in array active_alarm?
				 if(active_alarm & 0x0F){
     56a:	80 91 63 01 	lds	r24, 0x0163
     56e:	8f 70       	andi	r24, 0x0F	; 15
     570:	09 f4       	brne	.+2      	; 0x574 <main+0x1b8>
     572:	4c c0       	rjmp	.+152    	; 0x60c <main+0x250>
			  uart0_puts("YES");
     574:	84 e4       	ldi	r24, 0x44	; 68
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	54 d7       	rcall	.+3752   	; 0x1422 <uart0_puts>
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
     57a:	80 91 5f 01 	lds	r24, 0x015F
     57e:	90 91 60 01 	lds	r25, 0x0160
     582:	a0 91 61 01 	lds	r26, 0x0161
     586:	b0 91 62 01 	lds	r27, 0x0162
     58a:	89 2b       	or	r24, r25
     58c:	8a 2b       	or	r24, r26
     58e:	8b 2b       	or	r24, r27
     590:	f9 f4       	brne	.+62     	; 0x5d0 <main+0x214>
							// Geen alarm actief

							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i < 4; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     592:	80 91 63 01 	lds	r24, 0x0163
     596:	83 fd       	sbrc	r24, 3
     598:	0c c0       	rjmp	.+24     	; 0x5b2 <main+0x1f6>
     59a:	82 fd       	sbrc	r24, 2
     59c:	06 c0       	rjmp	.+12     	; 0x5aa <main+0x1ee>
     59e:	81 fd       	sbrc	r24, 1
     5a0:	06 c0       	rjmp	.+12     	; 0x5ae <main+0x1f2>
     5a2:	80 ff       	sbrs	r24, 0
     5a4:	0b c0       	rjmp	.+22     	; 0x5bc <main+0x200>
     5a6:	83 2d       	mov	r24, r3
     5a8:	05 c0       	rjmp	.+10     	; 0x5b4 <main+0x1f8>
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
							// Geen alarm actief

							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i < 4; ++i){
     5aa:	86 2d       	mov	r24, r6
     5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <main+0x1f8>
     5ae:	82 2d       	mov	r24, r2
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <main+0x1f8>
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     5b2:	87 2d       	mov	r24, r7
									sound_current_alarm = i;
     5b4:	80 93 5e 01 	sts	0x015E, r24
									icon_current_alarm  = i;
     5b8:	80 93 58 01 	sts	0x0158, r24
								} 
							 }

					 					
							// 2. timer 0 - millis starten
							millis_reset();
     5bc:	ce de       	rcall	.-612    	; 0x35a <millis_reset>
							millis_resume();
     5be:	b7 de       	rcall	.-658    	; 0x32e <millis_resume>
				 
							// 3. timer 2 - alarm timer starten
							power_timer2_enable();
     5c0:	f6 01       	movw	r30, r12
     5c2:	80 81       	ld	r24, Z
     5c4:	8f 7b       	andi	r24, 0xBF	; 191
     5c6:	80 83       	st	Z, r24
							TIMSK2 |= _BV(OCIE2A);
     5c8:	f4 01       	movw	r30, r8
     5ca:	80 81       	ld	r24, Z
     5cc:	82 60       	ori	r24, 0x02	; 2
     5ce:	80 83       	st	Z, r24
			 
						 }
				 

				 		// MELDINGSDUUR RESETTEN
				 		active_alarm_time = millis_get() + alarm_duration; 
     5d0:	9a de       	rcall	.-716    	; 0x306 <millis_get>
     5d2:	20 91 00 01 	lds	r18, 0x0100
     5d6:	30 91 01 01 	lds	r19, 0x0101
     5da:	40 91 02 01 	lds	r20, 0x0102
     5de:	50 91 03 01 	lds	r21, 0x0103
     5e2:	dc 01       	movw	r26, r24
     5e4:	cb 01       	movw	r24, r22
     5e6:	82 0f       	add	r24, r18
     5e8:	93 1f       	adc	r25, r19
     5ea:	a4 1f       	adc	r26, r20
     5ec:	b5 1f       	adc	r27, r21
     5ee:	80 93 5f 01 	sts	0x015F, r24
     5f2:	90 93 60 01 	sts	0x0160, r25
     5f6:	a0 93 61 01 	sts	0x0161, r26
     5fa:	b0 93 62 01 	sts	0x0162, r27
						 uart0_putc(millis_get());
     5fe:	83 de       	rcall	.-762    	; 0x306 <millis_get>
     600:	86 2f       	mov	r24, r22
     602:	f5 d6       	rcall	.+3562   	; 0x13ee <uart0_putc>
						uart0_putc(active_alarm_time);
     604:	f5 01       	movw	r30, r10
     606:	80 81       	ld	r24, Z
     608:	f2 d6       	rcall	.+3556   	; 0x13ee <uart0_putc>
     60a:	4c cf       	rjmp	.-360    	; 0x4a4 <main+0xe8>
				 
				 
					}else{ //  if(active_alarm & 0x0F){ // IS ER EEN ALARM ACTIEF in active_alarm?
						// no active alarm in array
												
						active_alarm_time = 0; // set alarm time to zero, timers will be disabled in next timer 2 interrupt
     60c:	10 92 5f 01 	sts	0x015F, r1
     610:	10 92 60 01 	sts	0x0160, r1
     614:	10 92 61 01 	sts	0x0161, r1
     618:	10 92 62 01 	sts	0x0162, r1
     61c:	43 cf       	rjmp	.-378    	; 0x4a4 <main+0xe8>
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
				
			if (RF12_WANTS_ACK) {
     61e:	f8 01       	movw	r30, r16
     620:	80 81       	ld	r24, Z
     622:	85 fd       	sbrc	r24, 5
     624:	4b cf       	rjmp	.-362    	; 0x4bc <main+0x100>
     626:	66 cf       	rjmp	.-308    	; 0x4f4 <main+0x138>
					}
						 		
		
	} else {
    // switch into idle mode until the next interrupt - Choose our preferred sleep mode:
    set_sleep_mode(SLEEP_MODE_IDLE);
     628:	83 b7       	in	r24, 0x33	; 51
     62a:	81 7f       	andi	r24, 0xF1	; 241
     62c:	83 bf       	out	0x33, r24	; 51
    
    // Set sleep enable (SE) bit:
    sleep_enable();
     62e:	83 b7       	in	r24, 0x33	; 51
     630:	81 60       	ori	r24, 0x01	; 1
     632:	83 bf       	out	0x33, r24	; 51
    
    // Put the device to sleep:
    sleep_cpu();
     634:	88 95       	sleep
	
	// Clear sleep enable (SE) bit:
	sleep_disable();
     636:	83 b7       	in	r24, 0x33	; 51
     638:	8e 7f       	andi	r24, 0xFE	; 254
     63a:	83 bf       	out	0x33, r24	; 51
     63c:	33 cf       	rjmp	.-410    	; 0x4a4 <main+0xe8>

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
				
			if (RF12_WANTS_ACK) {
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     63e:	f8 01       	movw	r30, r16
     640:	80 81       	ld	r24, Z
     642:	86 ff       	sbrs	r24, 6
     644:	41 cf       	rjmp	.-382    	; 0x4c8 <main+0x10c>
     646:	85 2d       	mov	r24, r5
     648:	43 cf       	rjmp	.-378    	; 0x4d0 <main+0x114>

0000064a <_Z9isr_soundv>:
	//	isr_light_icon();		
	}
}


	void isr_sound(){
     64a:	ef 92       	push	r14
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
		//	uart0_putc(sound_current_step);
		//	uart0_putc(millis_get());
		//	uart0_putc(_sound_note_time);
			// Stop note if necessary 
			if(_sound_note_time != 0){ // sound already playing?		
     650:	80 91 59 01 	lds	r24, 0x0159
     654:	90 91 5a 01 	lds	r25, 0x015A
     658:	a0 91 5b 01 	lds	r26, 0x015B
     65c:	b0 91 5c 01 	lds	r27, 0x015C
     660:	89 2b       	or	r24, r25
     662:	8a 2b       	or	r24, r26
     664:	8b 2b       	or	r24, r27
     666:	81 f0       	breq	.+32     	; 0x688 <_Z9isr_soundv+0x3e>
				//	uart0_puts("GS");
				if(millis_get() < _sound_note_time ){ // Do we need to stop the current note?
     668:	4e de       	rcall	.-868    	; 0x306 <millis_get>
     66a:	00 91 59 01 	lds	r16, 0x0159
     66e:	10 91 5a 01 	lds	r17, 0x015A
     672:	20 91 5b 01 	lds	r18, 0x015B
     676:	30 91 5c 01 	lds	r19, 0x015C
     67a:	60 17       	cp	r22, r16
     67c:	71 07       	cpc	r23, r17
     67e:	82 07       	cpc	r24, r18
     680:	93 07       	cpc	r25, r19
     682:	08 f4       	brcc	.+2      	; 0x686 <_Z9isr_soundv+0x3c>
     684:	0c c1       	rjmp	.+536    	; 0x89e <_Z9isr_soundv+0x254>
					//uart0_puts("DS");
					return; // dont stop current note
					
				}else{
					noTone(); // stop current note
     686:	c9 d5       	rcall	.+2962   	; 0x121a <noTone>
			}
			
			// play next tone
		//	uart0_puts("PN");
		//	tone(unsigned long frequency, uint8_t volume);
			if(sound_current_alarm == 0 ){
     688:	80 91 5e 01 	lds	r24, 0x015E
     68c:	81 11       	cpse	r24, r1
     68e:	31 c0       	rjmp	.+98     	; 0x6f2 <_Z9isr_soundv+0xa8>
				tone(pgm_read_byte(&(sound_pattern_doorbell[sound_current_step].frequency)), 1); // freq, volume
     690:	60 91 5d 01 	lds	r22, 0x015D
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	66 0f       	add	r22, r22
     698:	77 1f       	adc	r23, r23
     69a:	66 0f       	add	r22, r22
     69c:	77 1f       	adc	r23, r23
     69e:	66 0f       	add	r22, r22
     6a0:	77 1f       	adc	r23, r23
     6a2:	fb 01       	movw	r30, r22
     6a4:	e8 59       	subi	r30, 0x98	; 152
     6a6:	ff 4f       	sbci	r31, 0xFF	; 255
     6a8:	64 91       	lpm	r22, Z
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	e1 2c       	mov	r14, r1
     6b2:	00 e0       	ldi	r16, 0x00	; 0
     6b4:	10 e0       	ldi	r17, 0x00	; 0
     6b6:	98 01       	movw	r18, r16
     6b8:	41 e0       	ldi	r20, 0x01	; 1
     6ba:	ba d5       	rcall	.+2932   	; 0x1230 <tone>
				_sound_note_time = millis_get() + pgm_read_byte(&(sound_pattern_doorbell[sound_current_step].time));
     6bc:	24 de       	rcall	.-952    	; 0x306 <millis_get>
     6be:	e0 91 5d 01 	lds	r30, 0x015D
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	ee 0f       	add	r30, r30
     6ce:	ff 1f       	adc	r31, r31
     6d0:	e4 59       	subi	r30, 0x94	; 148
     6d2:	ff 4f       	sbci	r31, 0xFF	; 255
     6d4:	e4 91       	lpm	r30, Z
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	8e 0f       	add	r24, r30
     6dc:	91 1d       	adc	r25, r1
     6de:	a1 1d       	adc	r26, r1
     6e0:	b1 1d       	adc	r27, r1
     6e2:	80 93 59 01 	sts	0x0159, r24
     6e6:	90 93 5a 01 	sts	0x015A, r25
     6ea:	a0 93 5b 01 	sts	0x015B, r26
     6ee:	b0 93 5c 01 	sts	0x015C, r27
			}
			if(sound_current_alarm == 1 ){
     6f2:	80 91 5e 01 	lds	r24, 0x015E
     6f6:	81 30       	cpi	r24, 0x01	; 1
     6f8:	89 f5       	brne	.+98     	; 0x75c <_Z9isr_soundv+0x112>
				tone(pgm_read_byte(&(sound_pattern_phone[sound_current_step].frequency)), 1);
     6fa:	60 91 5d 01 	lds	r22, 0x015D
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	66 0f       	add	r22, r22
     702:	77 1f       	adc	r23, r23
     704:	66 0f       	add	r22, r22
     706:	77 1f       	adc	r23, r23
     708:	66 0f       	add	r22, r22
     70a:	77 1f       	adc	r23, r23
     70c:	fb 01       	movw	r30, r22
     70e:	e8 55       	subi	r30, 0x58	; 88
     710:	ff 4f       	sbci	r31, 0xFF	; 255
     712:	64 91       	lpm	r22, Z
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	e1 2c       	mov	r14, r1
     71c:	00 e0       	ldi	r16, 0x00	; 0
     71e:	10 e0       	ldi	r17, 0x00	; 0
     720:	98 01       	movw	r18, r16
     722:	41 e0       	ldi	r20, 0x01	; 1
     724:	85 d5       	rcall	.+2826   	; 0x1230 <tone>
				_sound_note_time = millis_get() + pgm_read_byte(&(sound_pattern_phone[sound_current_step].time));
     726:	ef dd       	rcall	.-1058   	; 0x306 <millis_get>
     728:	e0 91 5d 01 	lds	r30, 0x015D
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	ee 0f       	add	r30, r30
     730:	ff 1f       	adc	r31, r31
     732:	ee 0f       	add	r30, r30
     734:	ff 1f       	adc	r31, r31
     736:	ee 0f       	add	r30, r30
     738:	ff 1f       	adc	r31, r31
     73a:	e4 55       	subi	r30, 0x54	; 84
     73c:	ff 4f       	sbci	r31, 0xFF	; 255
     73e:	e4 91       	lpm	r30, Z
     740:	dc 01       	movw	r26, r24
     742:	cb 01       	movw	r24, r22
     744:	8e 0f       	add	r24, r30
     746:	91 1d       	adc	r25, r1
     748:	a1 1d       	adc	r26, r1
     74a:	b1 1d       	adc	r27, r1
     74c:	80 93 59 01 	sts	0x0159, r24
     750:	90 93 5a 01 	sts	0x015A, r25
     754:	a0 93 5b 01 	sts	0x015B, r26
     758:	b0 93 5c 01 	sts	0x015C, r27
			}
			if(sound_current_alarm == 2 ){
     75c:	80 91 5e 01 	lds	r24, 0x015E
     760:	82 30       	cpi	r24, 0x02	; 2
     762:	89 f5       	brne	.+98     	; 0x7c6 <_Z9isr_soundv+0x17c>
				tone(pgm_read_byte(&(sound_pattern_help[sound_current_step].frequency)), 1);
     764:	60 91 5d 01 	lds	r22, 0x015D
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	66 0f       	add	r22, r22
     76c:	77 1f       	adc	r23, r23
     76e:	66 0f       	add	r22, r22
     770:	77 1f       	adc	r23, r23
     772:	66 0f       	add	r22, r22
     774:	77 1f       	adc	r23, r23
     776:	fb 01       	movw	r30, r22
     778:	e0 56       	subi	r30, 0x60	; 96
     77a:	fe 4f       	sbci	r31, 0xFE	; 254
     77c:	64 91       	lpm	r22, Z
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	e1 2c       	mov	r14, r1
     786:	00 e0       	ldi	r16, 0x00	; 0
     788:	10 e0       	ldi	r17, 0x00	; 0
     78a:	98 01       	movw	r18, r16
     78c:	41 e0       	ldi	r20, 0x01	; 1
     78e:	50 d5       	rcall	.+2720   	; 0x1230 <tone>
				_sound_note_time = millis_get() + pgm_read_byte(&(sound_pattern_help[sound_current_step].time));
     790:	ba dd       	rcall	.-1164   	; 0x306 <millis_get>
     792:	e0 91 5d 01 	lds	r30, 0x015D
     796:	f0 e0       	ldi	r31, 0x00	; 0
     798:	ee 0f       	add	r30, r30
     79a:	ff 1f       	adc	r31, r31
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	ec 55       	subi	r30, 0x5C	; 92
     7a6:	fe 4f       	sbci	r31, 0xFE	; 254
     7a8:	e4 91       	lpm	r30, Z
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	8e 0f       	add	r24, r30
     7b0:	91 1d       	adc	r25, r1
     7b2:	a1 1d       	adc	r26, r1
     7b4:	b1 1d       	adc	r27, r1
     7b6:	80 93 59 01 	sts	0x0159, r24
     7ba:	90 93 5a 01 	sts	0x015A, r25
     7be:	a0 93 5b 01 	sts	0x015B, r26
     7c2:	b0 93 5c 01 	sts	0x015C, r27
			}
			if(sound_current_alarm == 3 ){
     7c6:	80 91 5e 01 	lds	r24, 0x015E
     7ca:	83 30       	cpi	r24, 0x03	; 3
     7cc:	89 f5       	brne	.+98     	; 0x830 <_Z9isr_soundv+0x1e6>
				tone(pgm_read_byte(&(sound_pattern_fire[sound_current_step].frequency)),1);
     7ce:	60 91 5d 01 	lds	r22, 0x015D
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	66 0f       	add	r22, r22
     7d6:	77 1f       	adc	r23, r23
     7d8:	66 0f       	add	r22, r22
     7da:	77 1f       	adc	r23, r23
     7dc:	66 0f       	add	r22, r22
     7de:	77 1f       	adc	r23, r23
     7e0:	fb 01       	movw	r30, r22
     7e2:	e0 52       	subi	r30, 0x20	; 32
     7e4:	fe 4f       	sbci	r31, 0xFE	; 254
     7e6:	64 91       	lpm	r22, Z
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	e1 2c       	mov	r14, r1
     7f0:	00 e0       	ldi	r16, 0x00	; 0
     7f2:	10 e0       	ldi	r17, 0x00	; 0
     7f4:	98 01       	movw	r18, r16
     7f6:	41 e0       	ldi	r20, 0x01	; 1
     7f8:	1b d5       	rcall	.+2614   	; 0x1230 <tone>
				_sound_note_time = millis_get() + pgm_read_byte(&(sound_pattern_fire[sound_current_step].time));
     7fa:	85 dd       	rcall	.-1270   	; 0x306 <millis_get>
     7fc:	e0 91 5d 01 	lds	r30, 0x015D
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	ee 0f       	add	r30, r30
     804:	ff 1f       	adc	r31, r31
     806:	ee 0f       	add	r30, r30
     808:	ff 1f       	adc	r31, r31
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	ec 51       	subi	r30, 0x1C	; 28
     810:	fe 4f       	sbci	r31, 0xFE	; 254
     812:	e4 91       	lpm	r30, Z
     814:	dc 01       	movw	r26, r24
     816:	cb 01       	movw	r24, r22
     818:	8e 0f       	add	r24, r30
     81a:	91 1d       	adc	r25, r1
     81c:	a1 1d       	adc	r26, r1
     81e:	b1 1d       	adc	r27, r1
     820:	80 93 59 01 	sts	0x0159, r24
     824:	90 93 5a 01 	sts	0x015A, r25
     828:	a0 93 5b 01 	sts	0x015B, r26
     82c:	b0 93 5c 01 	sts	0x015C, r27
			}
			
		_sound_note_time = millis_get() + 1000;
     830:	6a dd       	rcall	.-1324   	; 0x306 <millis_get>
     832:	dc 01       	movw	r26, r24
     834:	cb 01       	movw	r24, r22
     836:	88 51       	subi	r24, 0x18	; 24
     838:	9c 4f       	sbci	r25, 0xFC	; 252
     83a:	af 4f       	sbci	r26, 0xFF	; 255
     83c:	bf 4f       	sbci	r27, 0xFF	; 255
     83e:	80 93 59 01 	sts	0x0159, r24
     842:	90 93 5a 01 	sts	0x015A, r25
     846:	a0 93 5b 01 	sts	0x015B, r26
     84a:	b0 93 5c 01 	sts	0x015C, r27
			
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= sound_alarm_keys[sound_current_alarm]){
     84e:	80 91 5e 01 	lds	r24, 0x015E
     852:	90 91 5d 01 	lds	r25, 0x015D
     856:	e8 2f       	mov	r30, r24
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	e4 5b       	subi	r30, 0xB4	; 180
     85c:	fe 4f       	sbci	r31, 0xFE	; 254
     85e:	20 81       	ld	r18, Z
     860:	92 17       	cp	r25, r18
     862:	d0 f0       	brcs	.+52     	; 0x898 <_Z9isr_soundv+0x24e>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     864:	30 91 63 01 	lds	r19, 0x0163
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     868:	23 2f       	mov	r18, r19
     86a:	2f 70       	andi	r18, 0x0F	; 15
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     86c:	40 e0       	ldi	r20, 0x00	; 0
			if(sound_current_step >= sound_alarm_keys[sound_current_alarm]){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
     86e:	8f 5f       	subi	r24, 0xFF	; 255
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     870:	84 30       	cpi	r24, 0x04	; 4
     872:	09 f4       	brne	.+2      	; 0x876 <_Z9isr_soundv+0x22c>
     874:	84 2f       	mov	r24, r20
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     876:	e8 2f       	mov	r30, r24
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	e8 5b       	subi	r30, 0xB8	; 184
     87c:	fe 4f       	sbci	r31, 0xFE	; 254
     87e:	90 81       	ld	r25, Z
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     880:	21 11       	cpse	r18, r1
     882:	03 c0       	rjmp	.+6      	; 0x88a <_Z9isr_soundv+0x240>
     884:	80 93 5e 01 	sts	0x015E, r24
     888:	04 c0       	rjmp	.+8      	; 0x892 <_Z9isr_soundv+0x248>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     88a:	93 23       	and	r25, r19
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= sound_alarm_keys[sound_current_alarm]){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
     88c:	81 f3       	breq	.-32     	; 0x86e <_Z9isr_soundv+0x224>
     88e:	80 93 5e 01 	sts	0x015E, r24
						done = 1; // in case there is no active alarm anymore, just breakout while
					}

				} // while
				
				sound_current_step = 0; // reset sound_current_step to zero to start the next sound	
     892:	10 92 5d 01 	sts	0x015D, r1
     896:	03 c0       	rjmp	.+6      	; 0x89e <_Z9isr_soundv+0x254>
				
			}else{
				// set sound_current_step plus one
				sound_current_step++;
     898:	9f 5f       	subi	r25, 0xFF	; 255
     89a:	90 93 5d 01 	sts	0x015D, r25
			}
	
				
		} //void isr_sound()
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	ef 90       	pop	r14
     8a4:	08 95       	ret

000008a6 <__vector_7>:

	
	
	
	
ISR (TIMER2_COMPA_vect) {
     8a6:	1f 92       	push	r1
     8a8:	0f 92       	push	r0
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	0f 92       	push	r0
     8ae:	11 24       	eor	r1, r1
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	2f 93       	push	r18
     8b6:	3f 93       	push	r19
     8b8:	4f 93       	push	r20
     8ba:	5f 93       	push	r21
     8bc:	6f 93       	push	r22
     8be:	7f 93       	push	r23
     8c0:	8f 93       	push	r24
     8c2:	9f 93       	push	r25
     8c4:	af 93       	push	r26
     8c6:	bf 93       	push	r27
     8c8:	ef 93       	push	r30
     8ca:	ff 93       	push	r31
	
	// check if the alarm needs to be stopped
	if(millis_get() > active_alarm_time){
     8cc:	1c dd       	rcall	.-1480   	; 0x306 <millis_get>
     8ce:	00 91 5f 01 	lds	r16, 0x015F
     8d2:	10 91 60 01 	lds	r17, 0x0160
     8d6:	20 91 61 01 	lds	r18, 0x0161
     8da:	30 91 62 01 	lds	r19, 0x0162
     8de:	06 17       	cp	r16, r22
     8e0:	17 07       	cpc	r17, r23
     8e2:	28 07       	cpc	r18, r24
     8e4:	39 07       	cpc	r19, r25
     8e6:	90 f4       	brcc	.+36     	; 0x90c <__stack+0xd>
		// stop alarm
		
			// stop timer 1
			millis_pause();
     8e8:	2d dd       	rcall	.-1446   	; 0x344 <millis_pause>
			
			// stop timer 2
			TIMSK2 &= ~_BV(OCIE2A);
     8ea:	e0 e7       	ldi	r30, 0x70	; 112
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 81       	ld	r24, Z
     8f0:	8d 7f       	andi	r24, 0xFD	; 253
     8f2:	80 83       	st	Z, r24
			power_timer2_disable();
     8f4:	e4 e6       	ldi	r30, 0x64	; 100
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	80 64       	ori	r24, 0x40	; 64
     8fc:	80 83       	st	Z, r24
			
			// empty alarm arrray
			active_alarm = 0x00; 
     8fe:	10 92 63 01 	sts	0x0163, r1
			
			// alle leds uit, pca in slaapstand
			pca9635_set_led_mode(0); // put all leds off
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	4c d0       	rcall	.+152    	; 0x99e <pca9635_set_led_mode>
			pca9635_set_sleep(1); // put pca9635 in sleep
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	69 d0       	rcall	.+210    	; 0x9dc <pca9635_set_sleep>
     90a:	01 c0       	rjmp	.+2      	; 0x90e <__stack+0xf>
						
			// automatisch slapen in loop.
			
	}else{
		// continue alarm
		isr_sound();
     90c:	9e de       	rcall	.-708    	; 0x64a <_Z9isr_soundv>
	 //   isr_light_flash();
	//	isr_light_icon();		
	}
}
     90e:	ff 91       	pop	r31
     910:	ef 91       	pop	r30
     912:	bf 91       	pop	r27
     914:	af 91       	pop	r26
     916:	9f 91       	pop	r25
     918:	8f 91       	pop	r24
     91a:	7f 91       	pop	r23
     91c:	6f 91       	pop	r22
     91e:	5f 91       	pop	r21
     920:	4f 91       	pop	r20
     922:	3f 91       	pop	r19
     924:	2f 91       	pop	r18
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	0f 90       	pop	r0
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	0f 90       	pop	r0
     930:	1f 90       	pop	r1
     932:	18 95       	reti

00000934 <pca9635_init>:
	// 0x80 = autoincrementbits
	I2C_write((reg | 0x80) );
	I2C_write(cycle);
	 I2C_stop();
	return 1;
}
     934:	80 e8       	ldi	r24, 0x80	; 128
     936:	95 dc       	rcall	.-1750   	; 0x262 <I2C_start>
     938:	80 e8       	ldi	r24, 0x80	; 128
     93a:	b8 dc       	rcall	.-1680   	; 0x2ac <I2C_write>
     93c:	80 e8       	ldi	r24, 0x80	; 128
     93e:	b6 dc       	rcall	.-1684   	; 0x2ac <I2C_write>
     940:	82 e0       	ldi	r24, 0x02	; 2
     942:	b4 dc       	rcall	.-1688   	; 0x2ac <I2C_write>
     944:	81 e0       	ldi	r24, 0x01	; 1
     946:	b2 dc       	rcall	.-1692   	; 0x2ac <I2C_write>
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	b0 dc       	rcall	.-1696   	; 0x2ac <I2C_write>
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	ae dc       	rcall	.-1700   	; 0x2ac <I2C_write>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	ac dc       	rcall	.-1704   	; 0x2ac <I2C_write>
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	aa dc       	rcall	.-1708   	; 0x2ac <I2C_write>
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	a8 dc       	rcall	.-1712   	; 0x2ac <I2C_write>
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	a6 dc       	rcall	.-1716   	; 0x2ac <I2C_write>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	a4 dc       	rcall	.-1720   	; 0x2ac <I2C_write>
     964:	81 e0       	ldi	r24, 0x01	; 1
     966:	a2 dc       	rcall	.-1724   	; 0x2ac <I2C_write>
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	a0 dc       	rcall	.-1728   	; 0x2ac <I2C_write>
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	9e dc       	rcall	.-1732   	; 0x2ac <I2C_write>
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	9c dc       	rcall	.-1736   	; 0x2ac <I2C_write>
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	9a dc       	rcall	.-1740   	; 0x2ac <I2C_write>
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	98 dc       	rcall	.-1744   	; 0x2ac <I2C_write>
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	96 dc       	rcall	.-1748   	; 0x2ac <I2C_write>
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	94 dc       	rcall	.-1752   	; 0x2ac <I2C_write>
     984:	8f ef       	ldi	r24, 0xFF	; 255
     986:	92 dc       	rcall	.-1756   	; 0x2ac <I2C_write>
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	90 dc       	rcall	.-1760   	; 0x2ac <I2C_write>
     98c:	8a ea       	ldi	r24, 0xAA	; 170
     98e:	8e dc       	rcall	.-1764   	; 0x2ac <I2C_write>
     990:	8a ea       	ldi	r24, 0xAA	; 170
     992:	8c dc       	rcall	.-1768   	; 0x2ac <I2C_write>
     994:	8a ea       	ldi	r24, 0xAA	; 170
     996:	8a dc       	rcall	.-1772   	; 0x2ac <I2C_write>
     998:	8a ea       	ldi	r24, 0xAA	; 170
     99a:	88 dc       	rcall	.-1776   	; 0x2ac <I2C_write>
     99c:	a4 cc       	rjmp	.-1720   	; 0x2e6 <I2C_stop>

0000099e <pca9635_set_led_mode>:
* 1=fully on (no PWM)
* 2=individual PWM only
* 3=individual and group PWM
*/
void pca9635_set_led_mode(uint8_t mode)
{
     99e:	cf 93       	push	r28
	uint8_t value;
	switch (mode)
     9a0:	81 30       	cpi	r24, 0x01	; 1
     9a2:	31 f0       	breq	.+12     	; 0x9b0 <pca9635_set_led_mode+0x12>
     9a4:	58 f0       	brcs	.+22     	; 0x9bc <pca9635_set_led_mode+0x1e>
     9a6:	82 30       	cpi	r24, 0x02	; 2
     9a8:	29 f0       	breq	.+10     	; 0x9b4 <pca9635_set_led_mode+0x16>
     9aa:	83 30       	cpi	r24, 0x03	; 3
     9ac:	41 f4       	brne	.+16     	; 0x9be <pca9635_set_led_mode+0x20>
     9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <pca9635_set_led_mode+0x1a>
	{
		case 0:
		value = 0x00; // B00000000
		break;
		case 1:
		value = 0x55; //B01010101
     9b0:	c5 e5       	ldi	r28, 0x55	; 85
		break;
     9b2:	05 c0       	rjmp	.+10     	; 0x9be <pca9635_set_led_mode+0x20>
		case 2:
		value = 0xAA; //B10101010
     9b4:	ca ea       	ldi	r28, 0xAA	; 170
		break;
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <pca9635_set_led_mode+0x20>
		case 3:
		value = 0xFF; //B11111111
     9b8:	cf ef       	ldi	r28, 0xFF	; 255
		break;
     9ba:	01 c0       	rjmp	.+2      	; 0x9be <pca9635_set_led_mode+0x20>
{
	uint8_t value;
	switch (mode)
	{
		case 0:
		value = 0x00; // B00000000
     9bc:	c0 e0       	ldi	r28, 0x00	; 0
		case 3:
		value = 0xFF; //B11111111
		break;
	}
	
	I2C_start((0x40<<1)+I2C_WRITE);
     9be:	80 e8       	ldi	r24, 0x80	; 128
     9c0:	50 dc       	rcall	.-1888   	; 0x262 <I2C_start>
  	I2C_write( 0x94 ); // LEDOUT0 = 0x14 = 10100, autoinc. 0x80 = 10000000, Total= 10010100,
     9c2:	84 e9       	ldi	r24, 0x94	; 148
     9c4:	73 dc       	rcall	.-1818   	; 0x2ac <I2C_write>
  	for (uint8_t i = 0; i <= 3; ++i){
	   I2C_write(value);	
     9c6:	8c 2f       	mov	r24, r28
     9c8:	71 dc       	rcall	.-1822   	; 0x2ac <I2C_write>
     9ca:	8c 2f       	mov	r24, r28
     9cc:	6f dc       	rcall	.-1826   	; 0x2ac <I2C_write>
     9ce:	8c 2f       	mov	r24, r28
     9d0:	6d dc       	rcall	.-1830   	; 0x2ac <I2C_write>
     9d2:	8c 2f       	mov	r24, r28
     9d4:	6b dc       	rcall	.-1834   	; 0x2ac <I2C_write>
  	}
			  
  	I2C_stop();
     9d6:	87 dc       	rcall	.-1778   	; 0x2e6 <I2C_stop>
		  
}
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <pca9635_set_sleep>:

/**
* Changes the oscillator mode between sleep (1) and active (0)
*/
uint8_t pca9635_set_sleep(uint8_t sleep)
{
     9dc:	cf 93       	push	r28
     9de:	c8 2f       	mov	r28, r24
	I2C_start((0x40<<1)+I2C_READ);
     9e0:	81 e8       	ldi	r24, 0x81	; 129
     9e2:	3f dc       	rcall	.-1922   	; 0x262 <I2C_start>
	I2C_write(0x80); // autoincrement, mode 0,
     9e4:	80 e8       	ldi	r24, 0x80	; 128
     9e6:	62 dc       	rcall	.-1852   	; 0x2ac <I2C_write>
	// I2C_stop(); ???nodig?
	uint8_t data = I2C_read_ack();
     9e8:	73 dc       	rcall	.-1818   	; 0x2d0 <I2C_read_ack>
	
	if(sleep){		// set or unset bit 4
     9ea:	cc 23       	and	r28, r28
     9ec:	11 f0       	breq	.+4      	; 0x9f2 <pca9635_set_sleep+0x16>
		data |= (1<<4);
     9ee:	80 61       	ori	r24, 0x10	; 16
     9f0:	01 c0       	rjmp	.+2      	; 0x9f4 <pca9635_set_sleep+0x18>
	}else{
		data &= ~(1<<4);
     9f2:	8f 7e       	andi	r24, 0xEF	; 239
	}
	
	uint8_t ack = I2C_write(data);  
     9f4:	5b dc       	rcall	.-1866   	; 0x2ac <I2C_write>
     9f6:	c8 2f       	mov	r28, r24
	I2C_stop();
     9f8:	76 dc       	rcall	.-1812   	; 0x2e6 <I2C_stop>
	return ack;
}
     9fa:	8c 2f       	mov	r24, r28
     9fc:	cf 91       	pop	r28
     9fe:	08 95       	ret

00000a00 <_ZL15blockInterruptsv>:
	rf12_idle();
	else {
		rfmstate &= ~B11111000; // make sure everything is switched off (except bod, wkup, clk)
		rf12_xfer(rfmstate);
	}
	rxstate = TXIDLE;
     a00:	e8 98       	cbi	0x1d, 0	; 29
     a02:	08 95       	ret

00000a04 <_ZL15allowInterruptsv>:
     a04:	e8 9a       	sbi	0x1d, 0	; 29
     a06:	08 95       	ret

00000a08 <_ZL9rf12_byteh>:
     a08:	8e bd       	out	0x2e, r24	; 46
     a0a:	0d b4       	in	r0, 0x2d	; 45
     a0c:	07 fe       	sbrs	r0, 7
     a0e:	fd cf       	rjmp	.-6      	; 0xa0a <_ZL9rf12_byteh+0x2>
     a10:	8e b5       	in	r24, 0x2e	; 46
     a12:	08 95       	ret

00000a14 <_ZL9rf12_xferj>:
     a14:	1f 93       	push	r17
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	18 2f       	mov	r17, r24
     a1c:	c9 2f       	mov	r28, r25
     a1e:	f0 df       	rcall	.-32     	; 0xa00 <_ZL15blockInterruptsv>
     a20:	2a 98       	cbi	0x05, 2	; 5
     a22:	8c 2f       	mov	r24, r28
     a24:	f1 df       	rcall	.-30     	; 0xa08 <_ZL9rf12_byteh>
     a26:	d8 2f       	mov	r29, r24
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	c8 2f       	mov	r28, r24
     a2c:	81 2f       	mov	r24, r17
     a2e:	ec df       	rcall	.-40     	; 0xa08 <_ZL9rf12_byteh>
     a30:	c8 2b       	or	r28, r24
     a32:	2a 9a       	sbi	0x05, 2	; 5
     a34:	e7 df       	rcall	.-50     	; 0xa04 <_ZL15allowInterruptsv>
     a36:	8c 2f       	mov	r24, r28
     a38:	9d 2f       	mov	r25, r29
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	08 95       	ret

00000a42 <_ZL9rf12_idlev>:
     a42:	80 91 b8 01 	lds	r24, 0x01B8
     a46:	90 91 b9 01 	lds	r25, 0x01B9
     a4a:	8f 70       	andi	r24, 0x0F	; 15
     a4c:	90 93 b9 01 	sts	0x01B9, r25
     a50:	80 93 b8 01 	sts	0x01B8, r24
     a54:	80 91 b8 01 	lds	r24, 0x01B8
     a58:	90 91 b9 01 	lds	r25, 0x01B9
     a5c:	88 60       	ori	r24, 0x08	; 8
     a5e:	90 93 b9 01 	sts	0x01B9, r25
     a62:	80 93 b8 01 	sts	0x01B8, r24
     a66:	80 91 b8 01 	lds	r24, 0x01B8
     a6a:	90 91 b9 01 	lds	r25, 0x01B9
     a6e:	d2 cf       	rjmp	.-92     	; 0xa14 <_ZL9rf12_xferj>

00000a70 <_Z12rf12_spiInitv>:
     a70:	84 b1       	in	r24, 0x04	; 4
     a72:	8c 62       	ori	r24, 0x2C	; 44
     a74:	84 b9       	out	0x04, r24	; 4
     a76:	2a 9a       	sbi	0x05, 2	; 5
     a78:	24 98       	cbi	0x04, 4	; 4
     a7a:	80 e5       	ldi	r24, 0x50	; 80
     a7c:	8c bd       	out	0x2c, r24	; 44
     a7e:	8d b5       	in	r24, 0x2d	; 45
     a80:	81 60       	ori	r24, 0x01	; 1
     a82:	8d bd       	out	0x2d, r24	; 45
     a84:	52 98       	cbi	0x0a, 2	; 10
     a86:	5a 9a       	sbi	0x0b, 2	; 11
     a88:	08 95       	ret

00000a8a <_Z13rf12_recvDonev>:
     a8a:	80 91 ba 01 	lds	r24, 0x01BA
     a8e:	87 30       	cpi	r24, 0x07	; 7
     a90:	09 f0       	breq	.+2      	; 0xa94 <_Z13rf12_recvDonev+0xa>
     a92:	51 c0       	rjmp	.+162    	; 0xb36 <_Z13rf12_recvDonev+0xac>
     a94:	80 91 bd 01 	lds	r24, 0x01BD
     a98:	88 23       	and	r24, r24
     a9a:	a1 f0       	breq	.+40     	; 0xac4 <_Z13rf12_recvDonev+0x3a>
     a9c:	90 91 bb 01 	lds	r25, 0x01BB
     aa0:	98 17       	cp	r25, r24
     aa2:	28 f4       	brcc	.+10     	; 0xaae <_Z13rf12_recvDonev+0x24>
     aa4:	80 91 bb 01 	lds	r24, 0x01BB
     aa8:	87 34       	cpi	r24, 0x47	; 71
     aaa:	08 f4       	brcc	.+2      	; 0xaae <_Z13rf12_recvDonev+0x24>
     aac:	44 c0       	rjmp	.+136    	; 0xb36 <_Z13rf12_recvDonev+0xac>
     aae:	84 e0       	ldi	r24, 0x04	; 4
     ab0:	80 93 ba 01 	sts	0x01BA, r24
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	90 93 b2 01 	sts	0x01B2, r25
     abc:	80 93 b1 01 	sts	0x01B1, r24
     ac0:	81 e0       	ldi	r24, 0x01	; 1
     ac2:	08 95       	ret
     ac4:	20 91 bb 01 	lds	r18, 0x01BB
     ac8:	80 91 6c 01 	lds	r24, 0x016C
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	05 96       	adiw	r24, 0x05	; 5
     ad2:	28 17       	cp	r18, r24
     ad4:	39 07       	cpc	r19, r25
     ad6:	24 f4       	brge	.+8      	; 0xae0 <_Z13rf12_recvDonev+0x56>
     ad8:	80 91 bb 01 	lds	r24, 0x01BB
     adc:	87 34       	cpi	r24, 0x47	; 71
     ade:	58 f1       	brcs	.+86     	; 0xb36 <_Z13rf12_recvDonev+0xac>
     ae0:	84 e0       	ldi	r24, 0x04	; 4
     ae2:	80 93 ba 01 	sts	0x01BA, r24
     ae6:	80 91 6c 01 	lds	r24, 0x016C
     aea:	83 34       	cpi	r24, 0x43	; 67
     aec:	30 f0       	brcs	.+12     	; 0xafa <_Z13rf12_recvDonev+0x70>
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	90 93 b2 01 	sts	0x01B2, r25
     af6:	80 93 b1 01 	sts	0x01B1, r24
     afa:	80 91 6b 01 	lds	r24, 0x016B
     afe:	86 ff       	sbrs	r24, 6
     b00:	0b c0       	rjmp	.+22     	; 0xb18 <_Z13rf12_recvDonev+0x8e>
     b02:	80 91 be 01 	lds	r24, 0x01BE
     b06:	98 2f       	mov	r25, r24
     b08:	9f 71       	andi	r25, 0x1F	; 31
     b0a:	9f 31       	cpi	r25, 0x1F	; 31
     b0c:	29 f0       	breq	.+10     	; 0xb18 <_Z13rf12_recvDonev+0x8e>
     b0e:	90 91 6b 01 	lds	r25, 0x016B
     b12:	89 27       	eor	r24, r25
     b14:	8f 71       	andi	r24, 0x1F	; 31
     b16:	79 f4       	brne	.+30     	; 0xb36 <_Z13rf12_recvDonev+0xac>
     b18:	80 91 b1 01 	lds	r24, 0x01B1
     b1c:	90 91 b2 01 	lds	r25, 0x01B2
     b20:	89 2b       	or	r24, r25
     b22:	09 f0       	breq	.+2      	; 0xb26 <_Z13rf12_recvDonev+0x9c>
     b24:	55 c0       	rjmp	.+170    	; 0xbd0 <_Z13rf12_recvDonev+0x146>
     b26:	e0 91 64 01 	lds	r30, 0x0164
     b2a:	f0 91 65 01 	lds	r31, 0x0165
     b2e:	30 97       	sbiw	r30, 0x00	; 0
     b30:	09 f0       	breq	.+2      	; 0xb34 <_Z13rf12_recvDonev+0xaa>
     b32:	4a c0       	rjmp	.+148    	; 0xbc8 <_Z13rf12_recvDonev+0x13e>
     b34:	4d c0       	rjmp	.+154    	; 0xbd0 <_Z13rf12_recvDonev+0x146>
     b36:	80 91 ba 01 	lds	r24, 0x01BA
     b3a:	84 30       	cpi	r24, 0x04	; 4
     b3c:	09 f0       	breq	.+2      	; 0xb40 <_Z13rf12_recvDonev+0xb6>
     b3e:	42 c0       	rjmp	.+132    	; 0xbc4 <_Z13rf12_recvDonev+0x13a>
     b40:	10 92 6c 01 	sts	0x016C, r1
     b44:	10 92 bb 01 	sts	0x01BB, r1
     b48:	8f ef       	ldi	r24, 0xFF	; 255
     b4a:	9f ef       	ldi	r25, 0xFF	; 255
     b4c:	90 93 b2 01 	sts	0x01B2, r25
     b50:	80 93 b1 01 	sts	0x01B1, r24
     b54:	20 91 bc 01 	lds	r18, 0x01BC
     b58:	22 23       	and	r18, r18
     b5a:	d9 f0       	breq	.+54     	; 0xb92 <_Z13rf12_recvDonev+0x108>
     b5c:	82 27       	eor	r24, r18
     b5e:	28 2f       	mov	r18, r24
     b60:	22 95       	swap	r18
     b62:	28 27       	eor	r18, r24
     b64:	02 2e       	mov	r0, r18
     b66:	26 95       	lsr	r18
     b68:	26 95       	lsr	r18
     b6a:	20 25       	eor	r18, r0
     b6c:	02 2e       	mov	r0, r18
     b6e:	26 95       	lsr	r18
     b70:	20 25       	eor	r18, r0
     b72:	27 70       	andi	r18, 0x07	; 7
     b74:	08 2e       	mov	r0, r24
     b76:	89 2f       	mov	r24, r25
     b78:	26 95       	lsr	r18
     b7a:	07 94       	ror	r0
     b7c:	27 95       	ror	r18
     b7e:	90 2d       	mov	r25, r0
     b80:	82 27       	eor	r24, r18
     b82:	06 94       	lsr	r0
     b84:	27 95       	ror	r18
     b86:	90 25       	eor	r25, r0
     b88:	82 27       	eor	r24, r18
     b8a:	90 93 b2 01 	sts	0x01B2, r25
     b8e:	80 93 b1 01 	sts	0x01B1, r24
     b92:	87 e0       	ldi	r24, 0x07	; 7
     b94:	80 93 ba 01 	sts	0x01BA, r24
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	80 93 b4 01 	sts	0x01B4, r24
     b9e:	83 ea       	ldi	r24, 0xA3	; 163
     ba0:	94 e9       	ldi	r25, 0x94	; 148
     ba2:	38 df       	rcall	.-400    	; 0xa14 <_ZL9rf12_xferj>
     ba4:	80 91 b8 01 	lds	r24, 0x01B8
     ba8:	90 91 b9 01 	lds	r25, 0x01B9
     bac:	88 6d       	ori	r24, 0xD8	; 216
     bae:	90 93 b9 01 	sts	0x01B9, r25
     bb2:	80 93 b8 01 	sts	0x01B8, r24
     bb6:	80 91 b8 01 	lds	r24, 0x01B8
     bba:	90 91 b9 01 	lds	r25, 0x01B9
     bbe:	2a df       	rcall	.-428    	; 0xa14 <_ZL9rf12_xferj>
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	08 95       	ret
     bc4:	80 e0       	ldi	r24, 0x00	; 0
     bc6:	08 95       	ret
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	09 95       	icall
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	08 95       	ret
     bd0:	8f ef       	ldi	r24, 0xFF	; 255
     bd2:	9f ef       	ldi	r25, 0xFF	; 255
     bd4:	dc 01       	movw	r26, r24
     bd6:	80 93 66 01 	sts	0x0166, r24
     bda:	90 93 67 01 	sts	0x0167, r25
     bde:	a0 93 68 01 	sts	0x0168, r26
     be2:	b0 93 69 01 	sts	0x0169, r27
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	08 95       	ret

00000bea <_Z15rf12_setBitrateh>:
     bea:	cf 92       	push	r12
     bec:	df 92       	push	r13
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	c8 2f       	mov	r28, r24
     bfa:	08 2f       	mov	r16, r24
     bfc:	10 e0       	ldi	r17, 0x00	; 0
     bfe:	c8 01       	movw	r24, r16
     c00:	96 6c       	ori	r25, 0xC6	; 198
     c02:	08 df       	rcall	.-496    	; 0xa14 <_ZL9rf12_xferj>
     c04:	cf 77       	andi	r28, 0x7F	; 127
     c06:	2c 2f       	mov	r18, r28
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	2f 5f       	subi	r18, 0xFF	; 255
     c0c:	3f 4f       	sbci	r19, 0xFF	; 255
     c0e:	44 27       	eor	r20, r20
     c10:	37 fd       	sbrc	r19, 7
     c12:	40 95       	com	r20
     c14:	54 2f       	mov	r21, r20
     c16:	6b ef       	ldi	r22, 0xFB	; 251
     c18:	72 e4       	ldi	r23, 0x42	; 66
     c1a:	85 e0       	ldi	r24, 0x05	; 5
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	22 d4       	rcall	.+2116   	; 0x1464 <__udivmodsi4>
     c20:	69 01       	movw	r12, r18
     c22:	7a 01       	movw	r14, r20
     c24:	c8 01       	movw	r24, r16
     c26:	88 0f       	add	r24, r24
     c28:	89 2f       	mov	r24, r25
     c2a:	88 1f       	adc	r24, r24
     c2c:	99 0b       	sbc	r25, r25
     c2e:	8c 01       	movw	r16, r24
     c30:	00 0f       	add	r16, r16
     c32:	11 1f       	adc	r17, r17
     c34:	00 0f       	add	r16, r16
     c36:	11 1f       	adc	r17, r17
     c38:	00 0f       	add	r16, r16
     c3a:	11 1f       	adc	r17, r17
     c3c:	08 1b       	sub	r16, r24
     c3e:	19 0b       	sbc	r17, r25
     c40:	0f 5f       	subi	r16, 0xFF	; 255
     c42:	1f 4f       	sbci	r17, 0xFF	; 255
     c44:	98 01       	movw	r18, r16
     c46:	44 27       	eor	r20, r20
     c48:	37 fd       	sbrc	r19, 7
     c4a:	40 95       	com	r20
     c4c:	54 2f       	mov	r21, r20
     c4e:	c7 01       	movw	r24, r14
     c50:	b6 01       	movw	r22, r12
     c52:	08 d4       	rcall	.+2064   	; 0x1464 <__udivmodsi4>
     c54:	da 01       	movw	r26, r20
     c56:	c9 01       	movw	r24, r18
     c58:	68 94       	set
     c5a:	12 f8       	bld	r1, 2
     c5c:	b6 95       	lsr	r27
     c5e:	a7 95       	ror	r26
     c60:	97 95       	ror	r25
     c62:	87 95       	ror	r24
     c64:	16 94       	lsr	r1
     c66:	d1 f7       	brne	.-12     	; 0xc5c <_Z15rf12_setBitrateh+0x72>
     c68:	bc 01       	movw	r22, r24
     c6a:	cd 01       	movw	r24, r26
     c6c:	6d 57       	subi	r22, 0x7D	; 125
     c6e:	7c 4f       	sbci	r23, 0xFC	; 252
     c70:	8f 4f       	sbci	r24, 0xFF	; 255
     c72:	9f 4f       	sbci	r25, 0xFF	; 255
     c74:	24 e8       	ldi	r18, 0x84	; 132
     c76:	33 e0       	ldi	r19, 0x03	; 3
     c78:	40 e0       	ldi	r20, 0x00	; 0
     c7a:	50 e0       	ldi	r21, 0x00	; 0
     c7c:	f3 d3       	rcall	.+2022   	; 0x1464 <__udivmodsi4>
     c7e:	20 93 b3 01 	sts	0x01B3, r18
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	df 90       	pop	r13
     c8e:	cf 90       	pop	r12
     c90:	08 95       	ret

00000c92 <_Z19rf12_setFixedLengthh>:
     c92:	81 11       	cpse	r24, r1
     c94:	03 c0       	rjmp	.+6      	; 0xc9c <_Z19rf12_setFixedLengthh+0xa>
     c96:	10 92 bd 01 	sts	0x01BD, r1
     c9a:	08 95       	ret
     c9c:	8f 5f       	subi	r24, 0xFF	; 255
     c9e:	80 93 bd 01 	sts	0x01BD, r24
     ca2:	08 95       	ret

00000ca4 <_Z14rf12_sendStarth>:
     ca4:	86 fd       	sbrc	r24, 6
     ca6:	05 c0       	rjmp	.+10     	; 0xcb2 <_Z14rf12_sendStarth+0xe>
     ca8:	80 7e       	andi	r24, 0xE0	; 224
     caa:	90 91 be 01 	lds	r25, 0x01BE
     cae:	9f 71       	andi	r25, 0x1F	; 31
     cb0:	89 0f       	add	r24, r25
     cb2:	80 93 6b 01 	sts	0x016B, r24
     cb6:	e0 91 64 01 	lds	r30, 0x0164
     cba:	f0 91 65 01 	lds	r31, 0x0165
     cbe:	30 97       	sbiw	r30, 0x00	; 0
     cc0:	11 f0       	breq	.+4      	; 0xcc6 <_Z14rf12_sendStarth+0x22>
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	09 95       	icall
     cc6:	8f ef       	ldi	r24, 0xFF	; 255
     cc8:	9f ef       	ldi	r25, 0xFF	; 255
     cca:	90 93 b2 01 	sts	0x01B2, r25
     cce:	80 93 b1 01 	sts	0x01B1, r24
     cd2:	80 91 b1 01 	lds	r24, 0x01B1
     cd6:	90 91 b2 01 	lds	r25, 0x01B2
     cda:	20 91 bc 01 	lds	r18, 0x01BC
     cde:	82 27       	eor	r24, r18
     ce0:	28 2f       	mov	r18, r24
     ce2:	22 95       	swap	r18
     ce4:	28 27       	eor	r18, r24
     ce6:	02 2e       	mov	r0, r18
     ce8:	26 95       	lsr	r18
     cea:	26 95       	lsr	r18
     cec:	20 25       	eor	r18, r0
     cee:	02 2e       	mov	r0, r18
     cf0:	26 95       	lsr	r18
     cf2:	20 25       	eor	r18, r0
     cf4:	27 70       	andi	r18, 0x07	; 7
     cf6:	08 2e       	mov	r0, r24
     cf8:	89 2f       	mov	r24, r25
     cfa:	26 95       	lsr	r18
     cfc:	07 94       	ror	r0
     cfe:	27 95       	ror	r18
     d00:	90 2d       	mov	r25, r0
     d02:	82 27       	eor	r24, r18
     d04:	06 94       	lsr	r0
     d06:	27 95       	ror	r18
     d08:	90 25       	eor	r25, r0
     d0a:	82 27       	eor	r24, r18
     d0c:	90 93 b2 01 	sts	0x01B2, r25
     d10:	80 93 b1 01 	sts	0x01B1, r24
     d14:	88 e0       	ldi	r24, 0x08	; 8
     d16:	80 93 ba 01 	sts	0x01BA, r24
     d1a:	80 91 b8 01 	lds	r24, 0x01B8
     d1e:	90 91 b9 01 	lds	r25, 0x01B9
     d22:	88 63       	ori	r24, 0x38	; 56
     d24:	90 93 b9 01 	sts	0x01B9, r25
     d28:	80 93 b8 01 	sts	0x01B8, r24
     d2c:	80 91 b8 01 	lds	r24, 0x01B8
     d30:	90 91 b9 01 	lds	r25, 0x01B9
     d34:	6f ce       	rjmp	.-802    	; 0xa14 <_ZL9rf12_xferj>

00000d36 <_Z14rf12_sendStarthPKvh>:
     d36:	cf 93       	push	r28
     d38:	c8 2f       	mov	r28, r24
     d3a:	40 93 6c 01 	sts	0x016C, r20
     d3e:	2d e6       	ldi	r18, 0x6D	; 109
     d40:	31 e0       	ldi	r19, 0x01	; 1
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	82 2f       	mov	r24, r18
     d46:	93 2f       	mov	r25, r19
     d48:	c3 d3       	rcall	.+1926   	; 0x14d0 <memcpy>
     d4a:	8c 2f       	mov	r24, r28
     d4c:	ab df       	rcall	.-170    	; 0xca4 <_Z14rf12_sendStarth>
     d4e:	cf 91       	pop	r28
     d50:	08 95       	ret

00000d52 <_Z13rf12_sendWaith>:
     d52:	44 e0       	ldi	r20, 0x04	; 4
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	5c e0       	ldi	r21, 0x0C	; 12
     d58:	16 c0       	rjmp	.+44     	; 0xd86 <_Z13rf12_sendWaith+0x34>
     d5a:	88 23       	and	r24, r24
     d5c:	a1 f0       	breq	.+40     	; 0xd86 <_Z13rf12_sendWaith+0x34>
     d5e:	93 b7       	in	r25, 0x33	; 51
     d60:	91 7f       	andi	r25, 0xF1	; 241
     d62:	83 30       	cpi	r24, 0x03	; 3
     d64:	21 f0       	breq	.+8      	; 0xd6e <_Z13rf12_sendWaith+0x1c>
     d66:	82 30       	cpi	r24, 0x02	; 2
     d68:	21 f4       	brne	.+8      	; 0xd72 <_Z13rf12_sendWaith+0x20>
     d6a:	25 2f       	mov	r18, r21
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <_Z13rf12_sendWaith+0x22>
     d6e:	24 2f       	mov	r18, r20
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <_Z13rf12_sendWaith+0x22>
     d72:	23 2f       	mov	r18, r19
     d74:	92 2b       	or	r25, r18
     d76:	93 bf       	out	0x33, r25	; 51
     d78:	93 b7       	in	r25, 0x33	; 51
     d7a:	91 60       	ori	r25, 0x01	; 1
     d7c:	93 bf       	out	0x33, r25	; 51
     d7e:	88 95       	sleep
     d80:	93 b7       	in	r25, 0x33	; 51
     d82:	9e 7f       	andi	r25, 0xFE	; 254
     d84:	93 bf       	out	0x33, r25	; 51
     d86:	90 91 ba 01 	lds	r25, 0x01BA
     d8a:	94 30       	cpi	r25, 0x04	; 4
     d8c:	31 f7       	brne	.-52     	; 0xd5a <_Z13rf12_sendWaith+0x8>
     d8e:	08 95       	ret

00000d90 <_Z21rf12_interruptcontrolv>:
     d90:	e8 9a       	sbi	0x1d, 0	; 29
     d92:	e9 e6       	ldi	r30, 0x69	; 105
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	8d 7f       	andi	r24, 0xFD	; 253
     d9a:	80 83       	st	Z, r24
     d9c:	08 95       	ret

00000d9e <_Z12rf12_restorehhh>:
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	d6 2f       	mov	r29, r22
     da4:	c4 2f       	mov	r28, r20
     da6:	80 93 be 01 	sts	0x01BE, r24
     daa:	40 93 bc 01 	sts	0x01BC, r20
     dae:	60 93 bf 01 	sts	0x01BF, r22
     db2:	ee df       	rcall	.-36     	; 0xd90 <_Z21rf12_interruptcontrolv>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	6d df       	rcall	.-294    	; 0xc92 <_Z19rf12_setFixedLengthh>
     db8:	23 de       	rcall	.-954    	; 0xa00 <_ZL15blockInterruptsv>
     dba:	25 e0       	ldi	r18, 0x05	; 5
     dbc:	32 e8       	ldi	r19, 0x82	; 130
     dbe:	30 93 b9 01 	sts	0x01B9, r19
     dc2:	20 93 b8 01 	sts	0x01B8, r18
     dc6:	80 91 b8 01 	lds	r24, 0x01B8
     dca:	90 91 b9 01 	lds	r25, 0x01B9
     dce:	22 de       	rcall	.-956    	; 0xa14 <_ZL9rf12_xferj>
     dd0:	20 e1       	ldi	r18, 0x10	; 16
     dd2:	d2 9f       	mul	r29, r18
     dd4:	c0 01       	movw	r24, r0
     dd6:	11 24       	eor	r1, r1
     dd8:	87 6c       	ori	r24, 0xC7	; 199
     dda:	90 68       	ori	r25, 0x80	; 128
     ddc:	1b de       	rcall	.-970    	; 0xa14 <_ZL9rf12_xferj>
     dde:	80 e4       	ldi	r24, 0x40	; 64
     de0:	96 ea       	ldi	r25, 0xA6	; 166
     de2:	18 de       	rcall	.-976    	; 0xa14 <_ZL9rf12_xferj>
     de4:	86 e0       	ldi	r24, 0x06	; 6
     de6:	01 df       	rcall	.-510    	; 0xbea <_Z15rf12_setBitrateh>
     de8:	82 ea       	ldi	r24, 0xA2	; 162
     dea:	94 e9       	ldi	r25, 0x94	; 148
     dec:	13 de       	rcall	.-986    	; 0xa14 <_ZL9rf12_xferj>
     dee:	8c ea       	ldi	r24, 0xAC	; 172
     df0:	92 ec       	ldi	r25, 0xC2	; 194
     df2:	10 de       	rcall	.-992    	; 0xa14 <_ZL9rf12_xferj>
     df4:	cc 23       	and	r28, r28
     df6:	41 f0       	breq	.+16     	; 0xe08 <_Z12rf12_restorehhh+0x6a>
     df8:	83 e8       	ldi	r24, 0x83	; 131
     dfa:	9a ec       	ldi	r25, 0xCA	; 202
     dfc:	0b de       	rcall	.-1002   	; 0xa14 <_ZL9rf12_xferj>
     dfe:	8c 2f       	mov	r24, r28
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	9e 6c       	ori	r25, 0xCE	; 206
     e04:	07 de       	rcall	.-1010   	; 0xa14 <_ZL9rf12_xferj>
     e06:	06 c0       	rjmp	.+12     	; 0xe14 <_Z12rf12_restorehhh+0x76>
     e08:	8b e8       	ldi	r24, 0x8B	; 139
     e0a:	9a ec       	ldi	r25, 0xCA	; 202
     e0c:	03 de       	rcall	.-1018   	; 0xa14 <_ZL9rf12_xferj>
     e0e:	8d e2       	ldi	r24, 0x2D	; 45
     e10:	9e ec       	ldi	r25, 0xCE	; 206
     e12:	00 de       	rcall	.-1024   	; 0xa14 <_ZL9rf12_xferj>
     e14:	83 e8       	ldi	r24, 0x83	; 131
     e16:	94 ec       	ldi	r25, 0xC4	; 196
     e18:	fd dd       	rcall	.-1030   	; 0xa14 <_ZL9rf12_xferj>
     e1a:	80 e5       	ldi	r24, 0x50	; 80
     e1c:	98 e9       	ldi	r25, 0x98	; 152
     e1e:	fa dd       	rcall	.-1036   	; 0xa14 <_ZL9rf12_xferj>
     e20:	87 e7       	ldi	r24, 0x77	; 119
     e22:	9c ec       	ldi	r25, 0xCC	; 204
     e24:	f7 dd       	rcall	.-1042   	; 0xa14 <_ZL9rf12_xferj>
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 ee       	ldi	r25, 0xE0	; 224
     e2a:	f4 dd       	rcall	.-1048   	; 0xa14 <_ZL9rf12_xferj>
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	98 ec       	ldi	r25, 0xC8	; 200
     e30:	f1 dd       	rcall	.-1054   	; 0xa14 <_ZL9rf12_xferj>
     e32:	89 e4       	ldi	r24, 0x49	; 73
     e34:	90 ec       	ldi	r25, 0xC0	; 192
     e36:	ee dd       	rcall	.-1060   	; 0xa14 <_ZL9rf12_xferj>
     e38:	84 e0       	ldi	r24, 0x04	; 4
     e3a:	80 93 ba 01 	sts	0x01BA, r24
     e3e:	e2 dd       	rcall	.-1084   	; 0xa04 <_ZL15allowInterruptsv>
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <_Z15rf12_initializehhh>:
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	c8 2f       	mov	r28, r24
     e4e:	d6 2f       	mov	r29, r22
     e50:	14 2f       	mov	r17, r20
     e52:	80 93 be 01 	sts	0x01BE, r24
     e56:	40 93 bc 01 	sts	0x01BC, r20
     e5a:	60 93 bf 01 	sts	0x01BF, r22
     e5e:	08 de       	rcall	.-1008   	; 0xa70 <_Z12rf12_spiInitv>
     e60:	97 df       	rcall	.-210    	; 0xd90 <_Z21rf12_interruptcontrolv>
     e62:	82 e8       	ldi	r24, 0x82	; 130
     e64:	9a ec       	ldi	r25, 0xCA	; 202
     e66:	d6 dd       	rcall	.-1108   	; 0xa14 <_ZL9rf12_xferj>
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	9e ef       	ldi	r25, 0xFE	; 254
     e6c:	d3 dd       	rcall	.-1114   	; 0xa14 <_ZL9rf12_xferj>
     e6e:	85 e0       	ldi	r24, 0x05	; 5
     e70:	80 93 ba 01 	sts	0x01BA, r24
     e74:	83 b7       	in	r24, 0x33	; 51
     e76:	81 7f       	andi	r24, 0xF1	; 241
     e78:	83 bf       	out	0x33, r24	; 51
     e7a:	80 91 ba 01 	lds	r24, 0x01BA
     e7e:	85 30       	cpi	r24, 0x05	; 5
     e80:	59 f4       	brne	.+22     	; 0xe98 <_Z15rf12_initializehhh+0x52>
     e82:	93 b7       	in	r25, 0x33	; 51
     e84:	91 60       	ori	r25, 0x01	; 1
     e86:	93 bf       	out	0x33, r25	; 51
     e88:	88 95       	sleep
     e8a:	93 b7       	in	r25, 0x33	; 51
     e8c:	9e 7f       	andi	r25, 0xFE	; 254
     e8e:	93 bf       	out	0x33, r25	; 51
     e90:	90 91 ba 01 	lds	r25, 0x01BA
     e94:	95 30       	cpi	r25, 0x05	; 5
     e96:	a9 f3       	breq	.-22     	; 0xe82 <_Z15rf12_initializehhh+0x3c>
     e98:	41 2f       	mov	r20, r17
     e9a:	6d 2f       	mov	r22, r29
     e9c:	8c 2f       	mov	r24, r28
     e9e:	7f df       	rcall	.-258    	; 0xd9e <_Z12rf12_restorehhh>
     ea0:	80 91 be 01 	lds	r24, 0x01BE
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	08 95       	ret

00000eac <_Z16rf12_setWatchdogm>:
/// interrupt in the RFM12 module. Use rf12_wakeup() to check if the wakeup-interrupt
/// fired. This allows very deep sleep states (timer off) while still being able to wakeup
/// because of the external interrupt. The RFM12b wakeup-timer only needs about 1.5µA.
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
     eac:	cf 92       	push	r12
     eae:	df 92       	push	r13
     eb0:	ef 92       	push	r14
     eb2:	ff 92       	push	r15
     eb4:	cf 93       	push	r28
     eb6:	6b 01       	movw	r12, r22
     eb8:	7c 01       	movw	r14, r24
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	c8 16       	cp	r12, r24
     ebe:	d1 04       	cpc	r13, r1
     ec0:	e1 04       	cpc	r14, r1
     ec2:	f1 04       	cpc	r15, r1
     ec4:	79 f0       	breq	.+30     	; 0xee4 <_Z16rf12_setWatchdogm+0x38>
     ec6:	70 f0       	brcs	.+28     	; 0xee4 <_Z16rf12_setWatchdogm+0x38>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
     ec8:	c0 e0       	ldi	r28, 0x00	; 0
	while (m > 255) {
		r  += 1;
     eca:	cf 5f       	subi	r28, 0xFF	; 255
		m >>= 1;
     ecc:	f6 94       	lsr	r15
     ece:	e7 94       	ror	r14
     ed0:	d7 94       	ror	r13
     ed2:	c7 94       	ror	r12
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
     ed4:	8f ef       	ldi	r24, 0xFF	; 255
     ed6:	c8 16       	cp	r12, r24
     ed8:	d1 04       	cpc	r13, r1
     eda:	e1 04       	cpc	r14, r1
     edc:	f1 04       	cpc	r15, r1
     ede:	09 f0       	breq	.+2      	; 0xee2 <_Z16rf12_setWatchdogm+0x36>
     ee0:	a0 f7       	brcc	.-24     	; 0xeca <_Z16rf12_setWatchdogm+0x1e>
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <_Z16rf12_setWatchdogm+0x3a>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
     ee4:	c0 e0       	ldi	r28, 0x00	; 0
		m >>= 1;
	}
	
	// Disable old wakeup-timer if enabled
//	if (bitRead(rfmstate,1)) {
	if ((rfmstate>>1)&0x01){
     ee6:	80 91 b8 01 	lds	r24, 0x01B8
     eea:	90 91 b9 01 	lds	r25, 0x01B9
     eee:	81 ff       	sbrs	r24, 1
     ef0:	0e c0       	rjmp	.+28     	; 0xf0e <_Z16rf12_setWatchdogm+0x62>
		//bitClear(rfmstate,1);
		rfmstate &= ~(1 << 1);
     ef2:	80 91 b8 01 	lds	r24, 0x01B8
     ef6:	90 91 b9 01 	lds	r25, 0x01B9
     efa:	8d 7f       	andi	r24, 0xFD	; 253
     efc:	90 93 b9 01 	sts	0x01B9, r25
     f00:	80 93 b8 01 	sts	0x01B8, r24
		rf12_xfer(rfmstate);
     f04:	80 91 b8 01 	lds	r24, 0x01B8
     f08:	90 91 b9 01 	lds	r25, 0x01B9
     f0c:	83 dd       	rcall	.-1274   	; 0xa14 <_ZL9rf12_xferj>
	}
	
	// enable wakeup call if we have to
	if (m>0) {
     f0e:	c1 14       	cp	r12, r1
     f10:	d1 04       	cpc	r13, r1
     f12:	e1 04       	cpc	r14, r1
     f14:	f1 04       	cpc	r15, r1
     f16:	b1 f0       	breq	.+44     	; 0xf44 <_Z16rf12_setWatchdogm+0x98>
		// write time to wakeup-register
		rf12_xfer(RF_WAKEUP_TIMER | (r<<8) | m);
     f18:	3c 2f       	mov	r19, r28
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	d7 01       	movw	r26, r14
     f1e:	c6 01       	movw	r24, r12
     f20:	90 6e       	ori	r25, 0xE0	; 224
     f22:	82 2b       	or	r24, r18
     f24:	93 2b       	or	r25, r19
     f26:	76 dd       	rcall	.-1300   	; 0xa14 <_ZL9rf12_xferj>
		// enable wakeup
		//bitSet(rfmstate,1);
		rfmstate |= (1 << 1);
     f28:	80 91 b8 01 	lds	r24, 0x01B8
     f2c:	90 91 b9 01 	lds	r25, 0x01B9
     f30:	82 60       	ori	r24, 0x02	; 2
     f32:	90 93 b9 01 	sts	0x01B9, r25
     f36:	80 93 b8 01 	sts	0x01B8, r24
		rf12_xfer(rfmstate);
     f3a:	80 91 b8 01 	lds	r24, 0x01B8
     f3e:	90 91 b9 01 	lds	r25, 0x01B9
     f42:	68 dd       	rcall	.-1328   	; 0xa14 <_ZL9rf12_xferj>
	}
}
     f44:	cf 91       	pop	r28
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	df 90       	pop	r13
     f4c:	cf 90       	pop	r12
     f4e:	08 95       	ret

00000f50 <__vector_1>:
	while (!bitRead(PINB, RFM_IRQ - 8))
	rf12_interrupt();
}
#else
*/
ISR(INT0_vect) {
     f50:	1f 92       	push	r1
     f52:	0f 92       	push	r0
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	0f 92       	push	r0
     f58:	11 24       	eor	r1, r1
     f5a:	1f 93       	push	r17
     f5c:	2f 93       	push	r18
     f5e:	3f 93       	push	r19
     f60:	4f 93       	push	r20
     f62:	5f 93       	push	r21
     f64:	6f 93       	push	r22
     f66:	7f 93       	push	r23
     f68:	8f 93       	push	r24
     f6a:	9f 93       	push	r25
     f6c:	af 93       	push	r26
     f6e:	bf 93       	push	r27
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	ef 93       	push	r30
     f76:	ff 93       	push	r31
/// Requests RFM12 state from RF module and reads back a waiting data byte if there is
/// any.
/// One of two commands accessing SPI, so interrupts disabled in here
/// @param *data Pointer to  byte where to write the received data to (if any)
static uint16_t rf12_xferState (uint8_t *data) {
	blockInterrupts();
     f78:	43 dd       	rcall	.-1402   	; 0xa00 <_ZL15blockInterruptsv>

	// writing can take place at full speed, even 8 MHz works
	//bitClear(SS_PORT, cs_pin);
	PORT_RFM_CS &= ~(1<<BIT_RFM_CS); //clear CS
     f7a:	2a 98       	cbi	0x05, 2	; 5
	uint16_t res = rf12_byte(0x00) << 8;
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	44 dd       	rcall	.-1400   	; 0xa08 <_ZL9rf12_byteh>
     f80:	d8 2f       	mov	r29, r24
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	c8 2f       	mov	r28, r24
	res |= rf12_byte(0x00);
     f86:	40 dd       	rcall	.-1408   	; 0xa08 <_ZL9rf12_byteh>
     f88:	c8 2b       	or	r28, r24
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
     f8a:	dd 23       	and	r29, r29
     f8c:	2c f4       	brge	.+10     	; 0xf98 <__vector_1+0x48>
     f8e:	80 91 ba 01 	lds	r24, 0x01BA
     f92:	87 30       	cpi	r24, 0x07	; 7
     f94:	09 f4       	brne	.+2      	; 0xf98 <__vector_1+0x48>
     f96:	0f c1       	rjmp	.+542    	; 0x11b6 <__vector_1+0x266>
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
		#endif
	}
	
	//bitSet(SS_PORT, cs_pin);
	PORT_RFM_CS |= (1 << BIT_RFM_CS); //  bitSet(SS_PORT, cs_pin);
     f98:	2a 9a       	sbi	0x05, 2	; 5

	allowInterrupts();
     f9a:	34 dd       	rcall	.-1432   	; 0xa04 <_ZL15allowInterruptsv>
/// @details
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uint8_t in;
	state = rf12_xferState(&in);
     f9c:	d0 93 b7 01 	sts	0x01B7, r29
     fa0:	c0 93 b6 01 	sts	0x01B6, r28

	// data received or byte needed for sending
	if (state & RF_FIFO_BIT) {
     fa4:	20 91 b6 01 	lds	r18, 0x01B6
     fa8:	30 91 b7 01 	lds	r19, 0x01B7
     fac:	33 23       	and	r19, r19
     fae:	0c f0       	brlt	.+2      	; 0xfb2 <__vector_1+0x62>
     fb0:	e1 c0       	rjmp	.+450    	; 0x1174 <__vector_1+0x224>
		
		if (rxstate == TXRECV) {  // we are receiving
     fb2:	80 91 ba 01 	lds	r24, 0x01BA
     fb6:	87 30       	cpi	r24, 0x07	; 7
     fb8:	09 f0       	breq	.+2      	; 0xfbc <__vector_1+0x6c>
     fba:	78 c0       	rjmp	.+240    	; 0x10ac <__vector_1+0x15c>

			if (rxfill == 0 && group != 0)
     fbc:	80 91 bb 01 	lds	r24, 0x01BB
     fc0:	81 11       	cpse	r24, r1
     fc2:	04 c0       	rjmp	.+8      	; 0xfcc <__vector_1+0x7c>
     fc4:	80 91 bc 01 	lds	r24, 0x01BC
     fc8:	81 11       	cpse	r24, r1
     fca:	ff c0       	rjmp	.+510    	; 0x11ca <__vector_1+0x27a>
			rf12_buf[rxfill++] = group;

			rf12_buf[rxfill++] = in;
     fcc:	80 91 bb 01 	lds	r24, 0x01BB
     fd0:	e8 2f       	mov	r30, r24
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	e6 59       	subi	r30, 0x96	; 150
     fd6:	fe 4f       	sbci	r31, 0xFE	; 254
     fd8:	10 83       	st	Z, r17
     fda:	8f 5f       	subi	r24, 0xFF	; 255
     fdc:	80 93 bb 01 	sts	0x01BB, r24
			rf12_crc = _crc16_update(rf12_crc, in);
     fe0:	20 91 b1 01 	lds	r18, 0x01B1
     fe4:	30 91 b2 01 	lds	r19, 0x01B2
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
     fe8:	21 27       	eor	r18, r17
     fea:	12 2f       	mov	r17, r18
     fec:	12 95       	swap	r17
     fee:	12 27       	eor	r17, r18
     ff0:	01 2e       	mov	r0, r17
     ff2:	16 95       	lsr	r17
     ff4:	16 95       	lsr	r17
     ff6:	10 25       	eor	r17, r0
     ff8:	01 2e       	mov	r0, r17
     ffa:	16 95       	lsr	r17
     ffc:	10 25       	eor	r17, r0
     ffe:	17 70       	andi	r17, 0x07	; 7
    1000:	02 2e       	mov	r0, r18
    1002:	23 2f       	mov	r18, r19
    1004:	16 95       	lsr	r17
    1006:	07 94       	ror	r0
    1008:	17 95       	ror	r17
    100a:	30 2d       	mov	r19, r0
    100c:	21 27       	eor	r18, r17
    100e:	06 94       	lsr	r0
    1010:	17 95       	ror	r17
    1012:	30 25       	eor	r19, r0
    1014:	21 27       	eor	r18, r17
    1016:	30 93 b2 01 	sts	0x01B2, r19
    101a:	20 93 b1 01 	sts	0x01B1, r18

			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
    101e:	e0 91 b4 01 	lds	r30, 0x01B4
    1022:	e3 30       	cpi	r30, 0x03	; 3
    1024:	18 f5       	brcc	.+70     	; 0x106c <__vector_1+0x11c>
    1026:	80 91 bb 01 	lds	r24, 0x01BB
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 97       	sbiw	r24, 0x02	; 2
    102e:	60 91 b3 01 	lds	r22, 0x01B3
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	04 d2       	rcall	.+1032   	; 0x143e <__divmodhi4>
    1036:	89 2b       	or	r24, r25
    1038:	09 f4       	brne	.+2      	; 0x103c <__vector_1+0xec>
    103a:	d2 c0       	rjmp	.+420    	; 0x11e0 <__vector_1+0x290>
    103c:	17 c0       	rjmp	.+46     	; 0x106c <__vector_1+0x11c>
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    103e:	f0 e0       	ldi	r31, 0x00	; 0
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
    1040:	e0 5b       	subi	r30, 0xB0	; 176
    1042:	fe 4f       	sbci	r31, 0xFE	; 254
				: (drssi_dec_tree[drssi] >> 4);
    1044:	80 81       	ld	r24, Z
    1046:	8f 70       	andi	r24, 0x0F	; 15
    1048:	06 c0       	rjmp	.+12     	; 0x1056 <__vector_1+0x106>
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	e0 5b       	subi	r30, 0xB0	; 176
    104e:	fe 4f       	sbci	r31, 0xFE	; 254
    1050:	80 81       	ld	r24, Z
    1052:	82 95       	swap	r24
    1054:	8f 70       	andi	r24, 0x0F	; 15
    1056:	80 93 b4 01 	sts	0x01B4, r24
				if ( drssi < 3 ) {     // not yet final destination, set new threshold
    105a:	83 30       	cpi	r24, 0x03	; 3
    105c:	38 f4       	brcc	.+14     	; 0x106c <__vector_1+0x11c>
					rf12_xfer(RF_RECV_CONTROL | drssi*2+1);
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	01 96       	adiw	r24, 0x01	; 1
    1066:	80 6a       	ori	r24, 0xA0	; 160
    1068:	94 69       	ori	r25, 0x94	; 148
    106a:	d4 dc       	rcall	.-1624   	; 0xa14 <_ZL9rf12_xferj>
				}
			}

			// check if we got all the bytes (or maximum packet length was reached)
			if (fixedLength) {
    106c:	80 91 bd 01 	lds	r24, 0x01BD
    1070:	88 23       	and	r24, r24
    1072:	59 f0       	breq	.+22     	; 0x108a <__vector_1+0x13a>
				if (rxfill >= fixedLength || rxfill >= RF_MAX) {
    1074:	90 91 bb 01 	lds	r25, 0x01BB
    1078:	98 17       	cp	r25, r24
    107a:	28 f4       	brcc	.+10     	; 0x1086 <__vector_1+0x136>
    107c:	80 91 bb 01 	lds	r24, 0x01BB
    1080:	87 34       	cpi	r24, 0x47	; 71
    1082:	08 f4       	brcc	.+2      	; 0x1086 <__vector_1+0x136>
    1084:	77 c0       	rjmp	.+238    	; 0x1174 <__vector_1+0x224>
					rf12_idle();
    1086:	dd dc       	rcall	.-1606   	; 0xa42 <_ZL9rf12_idlev>
    1088:	75 c0       	rjmp	.+234    	; 0x1174 <__vector_1+0x224>
				}
				} else if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX) {
    108a:	20 91 bb 01 	lds	r18, 0x01BB
    108e:	80 91 6c 01 	lds	r24, 0x016C
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	05 96       	adiw	r24, 0x05	; 5
    1098:	28 17       	cp	r18, r24
    109a:	39 07       	cpc	r19, r25
    109c:	2c f4       	brge	.+10     	; 0x10a8 <__vector_1+0x158>
    109e:	80 91 bb 01 	lds	r24, 0x01BB
    10a2:	87 34       	cpi	r24, 0x47	; 71
    10a4:	08 f4       	brcc	.+2      	; 0x10a8 <__vector_1+0x158>
    10a6:	66 c0       	rjmp	.+204    	; 0x1174 <__vector_1+0x224>
				rf12_idle();
    10a8:	cc dc       	rcall	.-1640   	; 0xa42 <_ZL9rf12_idlev>
    10aa:	64 c0       	rjmp	.+200    	; 0x1174 <__vector_1+0x224>
			}
			} else {                  // we are sending
			uint8_t out;

			if (rxstate < 0) {
    10ac:	80 91 ba 01 	lds	r24, 0x01BA
    10b0:	88 23       	and	r24, r24
    10b2:	0c f0       	brlt	.+2      	; 0x10b6 <__vector_1+0x166>
    10b4:	2f c0       	rjmp	.+94     	; 0x1114 <__vector_1+0x1c4>
				uint8_t pos = 3 + rf12_len + rxstate++;
    10b6:	e0 91 6c 01 	lds	r30, 0x016C
    10ba:	80 91 ba 01 	lds	r24, 0x01BA
    10be:	98 2f       	mov	r25, r24
    10c0:	9f 5f       	subi	r25, 0xFF	; 255
    10c2:	90 93 ba 01 	sts	0x01BA, r25
    10c6:	ed 5f       	subi	r30, 0xFD	; 253
    10c8:	8e 0f       	add	r24, r30
				out = rf12_buf[pos];
    10ca:	e8 2f       	mov	r30, r24
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	e6 59       	subi	r30, 0x96	; 150
    10d0:	fe 4f       	sbci	r31, 0xFE	; 254
    10d2:	80 81       	ld	r24, Z
				rf12_crc = _crc16_update(rf12_crc, out);
    10d4:	20 91 b1 01 	lds	r18, 0x01B1
    10d8:	30 91 b2 01 	lds	r19, 0x01B2
    10dc:	28 27       	eor	r18, r24
    10de:	92 2f       	mov	r25, r18
    10e0:	92 95       	swap	r25
    10e2:	92 27       	eor	r25, r18
    10e4:	09 2e       	mov	r0, r25
    10e6:	96 95       	lsr	r25
    10e8:	96 95       	lsr	r25
    10ea:	90 25       	eor	r25, r0
    10ec:	09 2e       	mov	r0, r25
    10ee:	96 95       	lsr	r25
    10f0:	90 25       	eor	r25, r0
    10f2:	97 70       	andi	r25, 0x07	; 7
    10f4:	02 2e       	mov	r0, r18
    10f6:	23 2f       	mov	r18, r19
    10f8:	96 95       	lsr	r25
    10fa:	07 94       	ror	r0
    10fc:	97 95       	ror	r25
    10fe:	30 2d       	mov	r19, r0
    1100:	29 27       	eor	r18, r25
    1102:	06 94       	lsr	r0
    1104:	97 95       	ror	r25
    1106:	30 25       	eor	r19, r0
    1108:	29 27       	eor	r18, r25
    110a:	30 93 b2 01 	sts	0x01B2, r19
    110e:	20 93 b1 01 	sts	0x01B1, r18
    1112:	2d c0       	rjmp	.+90     	; 0x116e <__vector_1+0x21e>
			} else
			switch (rxstate++) {
    1114:	80 91 ba 01 	lds	r24, 0x01BA
    1118:	98 2f       	mov	r25, r24
    111a:	9f 5f       	subi	r25, 0xFF	; 255
    111c:	90 93 ba 01 	sts	0x01BA, r25
    1120:	83 30       	cpi	r24, 0x03	; 3
    1122:	09 f1       	breq	.+66     	; 0x1166 <__vector_1+0x216>
    1124:	2c f4       	brge	.+10     	; 0x1130 <__vector_1+0x1e0>
    1126:	88 23       	and	r24, r24
    1128:	99 f0       	breq	.+38     	; 0x1150 <__vector_1+0x200>
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	f9 f4       	brne	.+62     	; 0x116c <__vector_1+0x21c>
    112e:	15 c0       	rjmp	.+42     	; 0x115a <__vector_1+0x20a>
    1130:	8b 30       	cpi	r24, 0x0B	; 11
    1132:	19 f0       	breq	.+6      	; 0x113a <__vector_1+0x1ea>
    1134:	8c 30       	cpi	r24, 0x0C	; 12
    1136:	d1 f4       	brne	.+52     	; 0x116c <__vector_1+0x21c>
    1138:	02 c0       	rjmp	.+4      	; 0x113e <__vector_1+0x1ee>
				case TXSYN1: out = 0x2D; break;
    113a:	8d e2       	ldi	r24, 0x2D	; 45
    113c:	18 c0       	rjmp	.+48     	; 0x116e <__vector_1+0x21e>
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
    113e:	80 91 bc 01 	lds	r24, 0x01BC
    1142:	20 91 6c 01 	lds	r18, 0x016C
    1146:	9e ef       	ldi	r25, 0xFE	; 254
    1148:	92 1b       	sub	r25, r18
    114a:	90 93 ba 01 	sts	0x01BA, r25
    114e:	0f c0       	rjmp	.+30     	; 0x116e <__vector_1+0x21e>
				case TXCRC1: out = rf12_crc; break;
    1150:	80 91 b1 01 	lds	r24, 0x01B1
    1154:	90 91 b2 01 	lds	r25, 0x01B2
    1158:	0a c0       	rjmp	.+20     	; 0x116e <__vector_1+0x21e>
				case TXCRC2: out = rf12_crc >> 8; break;
    115a:	80 91 b1 01 	lds	r24, 0x01B1
    115e:	90 91 b2 01 	lds	r25, 0x01B2
    1162:	89 2f       	mov	r24, r25
    1164:	04 c0       	rjmp	.+8      	; 0x116e <__vector_1+0x21e>
				case TXDONE: rf12_idle(); // fall through
    1166:	6d dc       	rcall	.-1830   	; 0xa42 <_ZL9rf12_idlev>
				default:     out = 0xAA;
    1168:	8a ea       	ldi	r24, 0xAA	; 170
    116a:	01 c0       	rjmp	.+2      	; 0x116e <__vector_1+0x21e>
    116c:	8a ea       	ldi	r24, 0xAA	; 170
			}

			rf12_xfer(RF_TXREG_WRITE | out);
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	98 6b       	ori	r25, 0xB8	; 184
    1172:	50 dc       	rcall	.-1888   	; 0xa14 <_ZL9rf12_xferj>
		}
	}
	
	// power-on reset
	if (state & RF_POR_BIT) {
    1174:	80 91 b6 01 	lds	r24, 0x01B6
    1178:	90 91 b7 01 	lds	r25, 0x01B7
    117c:	96 ff       	sbrs	r25, 6
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <__vector_1+0x236>
		rxstate = POR_RECEIVED;
    1180:	86 e0       	ldi	r24, 0x06	; 6
    1182:	80 93 ba 01 	sts	0x01BA, r24
	}

	// got wakeup call
	if (state & RF_WDG_BIT) {
    1186:	80 91 b6 01 	lds	r24, 0x01B6
    118a:	90 91 b7 01 	lds	r25, 0x01B7
    118e:	94 ff       	sbrs	r25, 4
    1190:	07 c0       	rjmp	.+14     	; 0x11a0 <__vector_1+0x250>
		rf12_setWatchdog(0);
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	cb 01       	movw	r24, r22
    1198:	89 de       	rcall	.-750    	; 0xeac <_Z16rf12_setWatchdogm>
		rf12_gotwakeup = 1;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	80 93 b5 01 	sts	0x01B5, r24
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
    11a0:	80 91 b6 01 	lds	r24, 0x01B6
    11a4:	90 91 b7 01 	lds	r25, 0x01B7
    11a8:	95 ff       	sbrs	r25, 5
    11aa:	21 c0       	rjmp	.+66     	; 0x11ee <__vector_1+0x29e>
		rf12_idle();
    11ac:	4a dc       	rcall	.-1900   	; 0xa42 <_ZL9rf12_idlev>
		rxstate = TXIDLE;
    11ae:	84 e0       	ldi	r24, 0x04	; 4
    11b0:	80 93 ba 01 	sts	0x01BA, r24
    11b4:	1c c0       	rjmp	.+56     	; 0x11ee <__vector_1+0x29e>
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
		// slow down to under 2.5 MHz
		#if F_CPU > 10000000
		//bitSet(SPCR, SPR0);
		SPCR |= (1 << SPR0); //  bitSet(SPCR, SPR0);
    11b6:	8c b5       	in	r24, 0x2c	; 44
    11b8:	81 60       	ori	r24, 0x01	; 1
    11ba:	8c bd       	out	0x2c, r24	; 44
		#endif
		*data = rf12_byte(0x00);
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	24 dc       	rcall	.-1976   	; 0xa08 <_ZL9rf12_byteh>
    11c0:	18 2f       	mov	r17, r24
		#if F_CPU > 10000000
		//bitClear(SPCR, SPR0);
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
    11c2:	8c b5       	in	r24, 0x2c	; 44
    11c4:	8e 7f       	andi	r24, 0xFE	; 254
    11c6:	8c bd       	out	0x2c, r24	; 44
    11c8:	e7 ce       	rjmp	.-562    	; 0xf98 <__vector_1+0x48>
	if (state & RF_FIFO_BIT) {
		
		if (rxstate == TXRECV) {  // we are receiving

			if (rxfill == 0 && group != 0)
			rf12_buf[rxfill++] = group;
    11ca:	90 91 bb 01 	lds	r25, 0x01BB
    11ce:	e9 2f       	mov	r30, r25
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	e6 59       	subi	r30, 0x96	; 150
    11d4:	fe 4f       	sbci	r31, 0xFE	; 254
    11d6:	80 83       	st	Z, r24
    11d8:	9f 5f       	subi	r25, 0xFF	; 255
    11da:	90 93 bb 01 	sts	0x01BB, r25
    11de:	f6 ce       	rjmp	.-532    	; 0xfcc <__vector_1+0x7c>
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    11e0:	80 91 b6 01 	lds	r24, 0x01B6
    11e4:	90 91 b7 01 	lds	r25, 0x01B7
    11e8:	90 fd       	sbrc	r25, 0
    11ea:	29 cf       	rjmp	.-430    	; 0x103e <__vector_1+0xee>
    11ec:	2e cf       	rjmp	.-420    	; 0x104a <__vector_1+0xfa>
#else
*/
ISR(INT0_vect) {
	//uart0_puts("I");
	rf12_interrupt();
}
    11ee:	ff 91       	pop	r31
    11f0:	ef 91       	pop	r30
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	bf 91       	pop	r27
    11f8:	af 91       	pop	r26
    11fa:	9f 91       	pop	r25
    11fc:	8f 91       	pop	r24
    11fe:	7f 91       	pop	r23
    1200:	6f 91       	pop	r22
    1202:	5f 91       	pop	r21
    1204:	4f 91       	pop	r20
    1206:	3f 91       	pop	r19
    1208:	2f 91       	pop	r18
    120a:	1f 91       	pop	r17
    120c:	0f 90       	pop	r0
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	0f 90       	pop	r0
    1212:	1f 90       	pop	r1
    1214:	18 95       	reti

00001216 <tone_init>:
#include <avr/io.h>

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume counsigned long _tAC_time;ntrol.

void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
    1216:	21 9a       	sbi	0x04, 1	; 4
    1218:	08 95       	ret

0000121a <noTone>:

}


	void noTone() {
		uart0_puts("STOP");
    121a:	8f e3       	ldi	r24, 0x3F	; 63
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	01 d1       	rcall	.+514    	; 0x1422 <uart0_puts>
	//	TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
		 TCCR1B  &= ~(1<<0) | ~(1<<1) | ~(1<<2) ;        // No clock source (Timer/Counter stopped).
    1220:	e1 e8       	ldi	r30, 0x81	; 129
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	80 83       	st	Z, r24
		 TCCR1A  = 0x00;       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
    1228:	10 92 80 00 	sts	0x0080, r1
		PORTB &= ~(1 << 1); // Set pin PB1 to LOW.
    122c:	29 98       	cbi	0x05, 1	; 5
    122e:	08 95       	ret

00001230 <tone>:
void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
	
}

void tone(unsigned long frequency, uint8_t volume) {
    1230:	cf 92       	push	r12
    1232:	df 92       	push	r13
    1234:	ef 92       	push	r14
    1236:	ff 92       	push	r15
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	6b 01       	movw	r12, r22
    123e:	7c 01       	movw	r14, r24
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
    1240:	61 15       	cp	r22, r1
    1242:	71 05       	cpc	r23, r1
    1244:	81 05       	cpc	r24, r1
    1246:	91 05       	cpc	r25, r1
    1248:	11 f0       	breq	.+4      	; 0x124e <tone+0x1e>
    124a:	41 11       	cpse	r20, r1
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <tone+0x22>
    124e:	e5 df       	rcall	.-54     	; 0x121a <noTone>
    1250:	4d c0       	rjmp	.+154    	; 0x12ec <tone+0xbc>
    1252:	d4 2f       	mov	r29, r20
    1254:	4b 30       	cpi	r20, 0x0B	; 11
    1256:	08 f0       	brcs	.+2      	; 0x125a <tone+0x2a>
    1258:	da e0       	ldi	r29, 0x0A	; 10
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
    125a:	60 e0       	ldi	r22, 0x00	; 0
    125c:	72 e1       	ldi	r23, 0x12	; 18
    125e:	8a e7       	ldi	r24, 0x7A	; 122
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	a7 01       	movw	r20, r14
    1264:	96 01       	movw	r18, r12
    1266:	fe d0       	rcall	.+508    	; 0x1464 <__udivmodsi4>
    1268:	cc 24       	eor	r12, r12
    126a:	ca 94       	dec	r12
    126c:	dc 2c       	mov	r13, r12
    126e:	76 01       	movw	r14, r12
    1270:	c2 0e       	add	r12, r18
    1272:	d3 1e       	adc	r13, r19
    1274:	e4 1e       	adc	r14, r20
    1276:	f5 1e       	adc	r15, r21
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    1278:	c1 14       	cp	r12, r1
    127a:	d1 04       	cpc	r13, r1
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	e8 06       	cpc	r14, r24
    1280:	f1 04       	cpc	r15, r1
    1282:	58 f0       	brcs	.+22     	; 0x129a <tone+0x6a>
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
    1284:	cd 2c       	mov	r12, r13
    1286:	de 2c       	mov	r13, r14
    1288:	ef 2c       	mov	r14, r15
    128a:	ff 24       	eor	r15, r15
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	c8 1a       	sub	r12, r24
    1290:	d1 08       	sbc	r13, r1
    1292:	e1 08       	sbc	r14, r1
    1294:	f1 08       	sbc	r15, r1
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    1296:	c4 e0       	ldi	r28, 0x04	; 4
    1298:	01 c0       	rjmp	.+2      	; 0x129c <tone+0x6c>
void tone(unsigned long frequency, uint8_t volume) {
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
    129a:	c1 e0       	ldi	r28, 0x01	; 1
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
		}
	
		unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
    129c:	ed 2f       	mov	r30, r29
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	ed 5f       	subi	r30, 0xFD	; 253
    12a2:	fe 4f       	sbci	r31, 0xFE	; 254
    12a4:	20 81       	ld	r18, Z
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	c7 01       	movw	r24, r14
    12ae:	b6 01       	movw	r22, r12
    12b0:	d9 d0       	rcall	.+434    	; 0x1464 <__udivmodsi4>
		
		ICR1   = top;							// Set the top.
    12b2:	d0 92 87 00 	sts	0x0087, r13
    12b6:	c0 92 86 00 	sts	0x0086, r12
		if (TCNT1 > top) TCNT1 = top;			// Counter over the top, put within range.
    12ba:	80 91 84 00 	lds	r24, 0x0084
    12be:	90 91 85 00 	lds	r25, 0x0085
    12c2:	a0 e0       	ldi	r26, 0x00	; 0
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	c8 16       	cp	r12, r24
    12c8:	d9 06       	cpc	r13, r25
    12ca:	ea 06       	cpc	r14, r26
    12cc:	fb 06       	cpc	r15, r27
    12ce:	20 f4       	brcc	.+8      	; 0x12d8 <tone+0xa8>
    12d0:	d0 92 85 00 	sts	0x0085, r13
    12d4:	c0 92 84 00 	sts	0x0084, r12
			TCCR1B = _BV(WGM13)  | prescaler;   // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
    12d8:	c0 61       	ori	r28, 0x10	; 16
    12da:	c0 93 81 00 	sts	0x0081, r28
			OCR1A  = duty;						// Set the duty cycle (volume).
    12de:	30 93 89 00 	sts	0x0089, r19
    12e2:	20 93 88 00 	sts	0x0088, r18
			TCCR1A = _BV(COM1A1);				// Clear OC1A/OC1B on Compare Match (Set output to low level).
    12e6:	80 e8       	ldi	r24, 0x80	; 128
    12e8:	80 93 80 00 	sts	0x0080, r24

}
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	df 90       	pop	r13
    12f6:	cf 90       	pop	r12
    12f8:	08 95       	ret

000012fa <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    12fa:	1f 92       	push	r1
    12fc:	0f 92       	push	r0
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	0f 92       	push	r0
    1302:	11 24       	eor	r1, r1
    1304:	2f 93       	push	r18
    1306:	3f 93       	push	r19
    1308:	4f 93       	push	r20
    130a:	5f 93       	push	r21
    130c:	8f 93       	push	r24
    130e:	9f 93       	push	r25
    1310:	ef 93       	push	r30
    1312:	ff 93       	push	r31
    1314:	40 91 c0 00 	lds	r20, 0x00C0
    1318:	50 91 c6 00 	lds	r21, 0x00C6
    131c:	48 71       	andi	r20, 0x18	; 24
    131e:	80 91 c2 01 	lds	r24, 0x01C2
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	01 96       	adiw	r24, 0x01	; 1
    1326:	8f 77       	andi	r24, 0x7F	; 127
    1328:	99 27       	eor	r25, r25
    132a:	20 91 c1 01 	lds	r18, 0x01C1
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	28 17       	cp	r18, r24
    1332:	39 07       	cpc	r19, r25
    1334:	39 f0       	breq	.+14     	; 0x1344 <__vector_18+0x4a>
    1336:	80 93 c2 01 	sts	0x01C2, r24
    133a:	fc 01       	movw	r30, r24
    133c:	eb 53       	subi	r30, 0x3B	; 59
    133e:	fe 4f       	sbci	r31, 0xFE	; 254
    1340:	50 83       	st	Z, r21
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <__vector_18+0x4c>
    1344:	42 e0       	ldi	r20, 0x02	; 2
    1346:	40 93 c0 01 	sts	0x01C0, r20
    134a:	ff 91       	pop	r31
    134c:	ef 91       	pop	r30
    134e:	9f 91       	pop	r25
    1350:	8f 91       	pop	r24
    1352:	5f 91       	pop	r21
    1354:	4f 91       	pop	r20
    1356:	3f 91       	pop	r19
    1358:	2f 91       	pop	r18
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	0f 90       	pop	r0
    1360:	1f 90       	pop	r1
    1362:	18 95       	reti

00001364 <__vector_19>:
    1364:	1f 92       	push	r1
    1366:	0f 92       	push	r0
    1368:	0f b6       	in	r0, 0x3f	; 63
    136a:	0f 92       	push	r0
    136c:	11 24       	eor	r1, r1
    136e:	8f 93       	push	r24
    1370:	9f 93       	push	r25
    1372:	ef 93       	push	r30
    1374:	ff 93       	push	r31
    1376:	90 91 c4 01 	lds	r25, 0x01C4
    137a:	80 91 c3 01 	lds	r24, 0x01C3
    137e:	98 17       	cp	r25, r24
    1380:	79 f0       	breq	.+30     	; 0x13a0 <__vector_19+0x3c>
    1382:	80 91 c3 01 	lds	r24, 0x01C3
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	8f 77       	andi	r24, 0x7F	; 127
    138c:	99 27       	eor	r25, r25
    138e:	80 93 c3 01 	sts	0x01C3, r24
    1392:	fc 01       	movw	r30, r24
    1394:	eb 5b       	subi	r30, 0xBB	; 187
    1396:	fd 4f       	sbci	r31, 0xFD	; 253
    1398:	80 81       	ld	r24, Z
    139a:	80 93 c6 00 	sts	0x00C6, r24
    139e:	05 c0       	rjmp	.+10     	; 0x13aa <__vector_19+0x46>
    13a0:	e1 ec       	ldi	r30, 0xC1	; 193
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	8f 7d       	andi	r24, 0xDF	; 223
    13a8:	80 83       	st	Z, r24
    13aa:	ff 91       	pop	r31
    13ac:	ef 91       	pop	r30
    13ae:	9f 91       	pop	r25
    13b0:	8f 91       	pop	r24
    13b2:	0f 90       	pop	r0
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	0f 90       	pop	r0
    13b8:	1f 90       	pop	r1
    13ba:	18 95       	reti

000013bc <uart0_init>:
    13bc:	10 92 c4 01 	sts	0x01C4, r1
    13c0:	10 92 c3 01 	sts	0x01C3, r1
    13c4:	10 92 c2 01 	sts	0x01C2, r1
    13c8:	10 92 c1 01 	sts	0x01C1, r1
    13cc:	99 23       	and	r25, r25
    13ce:	24 f4       	brge	.+8      	; 0x13d8 <uart0_init+0x1c>
    13d0:	22 e0       	ldi	r18, 0x02	; 2
    13d2:	20 93 c0 00 	sts	0x00C0, r18
    13d6:	9f 77       	andi	r25, 0x7F	; 127
    13d8:	90 93 c5 00 	sts	0x00C5, r25
    13dc:	80 93 c4 00 	sts	0x00C4, r24
    13e0:	88 e9       	ldi	r24, 0x98	; 152
    13e2:	80 93 c1 00 	sts	0x00C1, r24
    13e6:	86 e0       	ldi	r24, 0x06	; 6
    13e8:	80 93 c2 00 	sts	0x00C2, r24
    13ec:	08 95       	ret

000013ee <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    13ee:	60 91 c4 01 	lds	r22, 0x01C4
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	6f 5f       	subi	r22, 0xFF	; 255
    13f6:	7f 4f       	sbci	r23, 0xFF	; 255
    13f8:	6f 77       	andi	r22, 0x7F	; 127
    13fa:	77 27       	eor	r23, r23
    13fc:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
    13fe:	20 91 c3 01 	lds	r18, 0x01C3
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	24 17       	cp	r18, r20
    1406:	35 07       	cpc	r19, r21
    1408:	d1 f3       	breq	.-12     	; 0x13fe <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    140a:	fb 01       	movw	r30, r22
    140c:	eb 5b       	subi	r30, 0xBB	; 187
    140e:	fd 4f       	sbci	r31, 0xFD	; 253
    1410:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    1412:	60 93 c4 01 	sts	0x01C4, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
    1416:	e1 ec       	ldi	r30, 0xC1	; 193
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	80 62       	ori	r24, 0x20	; 32
    141e:	80 83       	st	Z, r24
    1420:	08 95       	ret

00001422 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
    1422:	cf 93       	push	r28
    1424:	df 93       	push	r29
    1426:	ec 01       	movw	r28, r24
	while (*s) {
    1428:	88 81       	ld	r24, Y
    142a:	88 23       	and	r24, r24
    142c:	29 f0       	breq	.+10     	; 0x1438 <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
    142e:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
    1430:	de df       	rcall	.-68     	; 0x13ee <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
    1432:	89 91       	ld	r24, Y+
    1434:	81 11       	cpse	r24, r1
    1436:	fc cf       	rjmp	.-8      	; 0x1430 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <__divmodhi4>:
    143e:	97 fb       	bst	r25, 7
    1440:	07 2e       	mov	r0, r23
    1442:	16 f4       	brtc	.+4      	; 0x1448 <__divmodhi4+0xa>
    1444:	00 94       	com	r0
    1446:	06 d0       	rcall	.+12     	; 0x1454 <__divmodhi4_neg1>
    1448:	77 fd       	sbrc	r23, 7
    144a:	08 d0       	rcall	.+16     	; 0x145c <__divmodhi4_neg2>
    144c:	2d d0       	rcall	.+90     	; 0x14a8 <__udivmodhi4>
    144e:	07 fc       	sbrc	r0, 7
    1450:	05 d0       	rcall	.+10     	; 0x145c <__divmodhi4_neg2>
    1452:	3e f4       	brtc	.+14     	; 0x1462 <__divmodhi4_exit>

00001454 <__divmodhi4_neg1>:
    1454:	90 95       	com	r25
    1456:	81 95       	neg	r24
    1458:	9f 4f       	sbci	r25, 0xFF	; 255
    145a:	08 95       	ret

0000145c <__divmodhi4_neg2>:
    145c:	70 95       	com	r23
    145e:	61 95       	neg	r22
    1460:	7f 4f       	sbci	r23, 0xFF	; 255

00001462 <__divmodhi4_exit>:
    1462:	08 95       	ret

00001464 <__udivmodsi4>:
    1464:	a1 e2       	ldi	r26, 0x21	; 33
    1466:	1a 2e       	mov	r1, r26
    1468:	aa 1b       	sub	r26, r26
    146a:	bb 1b       	sub	r27, r27
    146c:	fd 01       	movw	r30, r26
    146e:	0d c0       	rjmp	.+26     	; 0x148a <__udivmodsi4_ep>

00001470 <__udivmodsi4_loop>:
    1470:	aa 1f       	adc	r26, r26
    1472:	bb 1f       	adc	r27, r27
    1474:	ee 1f       	adc	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	a2 17       	cp	r26, r18
    147a:	b3 07       	cpc	r27, r19
    147c:	e4 07       	cpc	r30, r20
    147e:	f5 07       	cpc	r31, r21
    1480:	20 f0       	brcs	.+8      	; 0x148a <__udivmodsi4_ep>
    1482:	a2 1b       	sub	r26, r18
    1484:	b3 0b       	sbc	r27, r19
    1486:	e4 0b       	sbc	r30, r20
    1488:	f5 0b       	sbc	r31, r21

0000148a <__udivmodsi4_ep>:
    148a:	66 1f       	adc	r22, r22
    148c:	77 1f       	adc	r23, r23
    148e:	88 1f       	adc	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	1a 94       	dec	r1
    1494:	69 f7       	brne	.-38     	; 0x1470 <__udivmodsi4_loop>
    1496:	60 95       	com	r22
    1498:	70 95       	com	r23
    149a:	80 95       	com	r24
    149c:	90 95       	com	r25
    149e:	9b 01       	movw	r18, r22
    14a0:	ac 01       	movw	r20, r24
    14a2:	bd 01       	movw	r22, r26
    14a4:	cf 01       	movw	r24, r30
    14a6:	08 95       	ret

000014a8 <__udivmodhi4>:
    14a8:	aa 1b       	sub	r26, r26
    14aa:	bb 1b       	sub	r27, r27
    14ac:	51 e1       	ldi	r21, 0x11	; 17
    14ae:	07 c0       	rjmp	.+14     	; 0x14be <__udivmodhi4_ep>

000014b0 <__udivmodhi4_loop>:
    14b0:	aa 1f       	adc	r26, r26
    14b2:	bb 1f       	adc	r27, r27
    14b4:	a6 17       	cp	r26, r22
    14b6:	b7 07       	cpc	r27, r23
    14b8:	10 f0       	brcs	.+4      	; 0x14be <__udivmodhi4_ep>
    14ba:	a6 1b       	sub	r26, r22
    14bc:	b7 0b       	sbc	r27, r23

000014be <__udivmodhi4_ep>:
    14be:	88 1f       	adc	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	5a 95       	dec	r21
    14c4:	a9 f7       	brne	.-22     	; 0x14b0 <__udivmodhi4_loop>
    14c6:	80 95       	com	r24
    14c8:	90 95       	com	r25
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	08 95       	ret

000014d0 <memcpy>:
    14d0:	fb 01       	movw	r30, r22
    14d2:	dc 01       	movw	r26, r24
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <memcpy+0xa>
    14d6:	01 90       	ld	r0, Z+
    14d8:	0d 92       	st	X+, r0
    14da:	41 50       	subi	r20, 0x01	; 1
    14dc:	50 40       	sbci	r21, 0x00	; 0
    14de:	d8 f7       	brcc	.-10     	; 0x14d6 <memcpy+0x6>
    14e0:	08 95       	ret

000014e2 <_exit>:
    14e2:	f8 94       	cli

000014e4 <__stop_program>:
    14e4:	ff cf       	rjmp	.-2      	; 0x14e4 <__stop_program>
