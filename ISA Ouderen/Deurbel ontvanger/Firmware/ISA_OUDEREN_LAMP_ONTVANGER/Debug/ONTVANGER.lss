
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  00000e14  00000ea8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000165  0080013a  0080013a  00000ee2  2**0
                  ALLOC
  3 .stab         00000e4c  00000000  00000000  00000ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000208b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  000020ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000031ca  00000000  00000000  000023f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001082  00000000  00000000  000055bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002334  00000000  00000000  0000663e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000834  00000000  00000000  00008974  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000cdb  00000000  00000000  000091a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002177  00000000  00000000  00009e83  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000330  00000000  00000000  0000bffa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	ae c4       	rjmp	.+2396   	; 0x962 <__vector_1>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b9 c0       	rjmp	.+370    	; 0x190 <__vector_7>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	ef c5       	rjmp	.+3038   	; 0xc28 <__vector_18>
  4a:	00 00       	nop
  4c:	22 c6       	rjmp	.+3140   	; 0xc92 <__vector_19>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 33       	cpi	r26, 0x3A	; 58
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e3       	ldi	r26, 0x3A	; 58
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 39       	cpi	r26, 0x9F	; 159
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	9f d0       	rcall	.+318    	; 0x1da <main>
  9c:	b9 c6       	rjmp	.+3442   	; 0xe10 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <I2C_init>:
  a0:	88 e4       	ldi	r24, 0x48	; 72
  a2:	80 93 b8 00 	sts	0x00B8, r24
  a6:	08 95       	ret

000000a8 <I2C_start>:
  a8:	ec eb       	ldi	r30, 0xBC	; 188
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
  ae:	94 ea       	ldi	r25, 0xA4	; 164
  b0:	90 83       	st	Z, r25
  b2:	90 81       	ld	r25, Z
  b4:	99 23       	and	r25, r25
  b6:	ec f7       	brge	.-6      	; 0xb2 <I2C_start+0xa>
  b8:	90 91 b9 00 	lds	r25, 0x00B9
  bc:	98 7f       	andi	r25, 0xF8	; 248
  be:	98 30       	cpi	r25, 0x08	; 8
  c0:	a1 f4       	brne	.+40     	; 0xea <I2C_start+0x42>
  c2:	80 93 bb 00 	sts	0x00BB, r24
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	80 93 bc 00 	sts	0x00BC, r24
  cc:	ec eb       	ldi	r30, 0xBC	; 188
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <I2C_start+0x28>
  d6:	90 91 b9 00 	lds	r25, 0x00B9
  da:	98 7f       	andi	r25, 0xF8	; 248
  dc:	98 31       	cpi	r25, 0x18	; 24
  de:	39 f0       	breq	.+14     	; 0xee <I2C_start+0x46>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 34       	cpi	r25, 0x40	; 64
  e4:	29 f4       	brne	.+10     	; 0xf0 <I2C_start+0x48>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	08 95       	ret
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	08 95       	ret

000000f2 <I2C_write>:
  f2:	80 93 bb 00 	sts	0x00BB, r24
  f6:	84 e8       	ldi	r24, 0x84	; 132
  f8:	80 93 bc 00 	sts	0x00BC, r24
  fc:	ec eb       	ldi	r30, 0xBC	; 188
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 23       	and	r24, r24
 104:	ec f7       	brge	.-6      	; 0x100 <I2C_write+0xe>
 106:	90 91 b9 00 	lds	r25, 0x00B9
 10a:	98 7f       	andi	r25, 0xF8	; 248
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	98 32       	cpi	r25, 0x28	; 40
 110:	09 f4       	brne	.+2      	; 0x114 <I2C_write+0x22>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	08 95       	ret

00000116 <I2C_stop>:
 116:	84 e9       	ldi	r24, 0x94	; 148
 118:	80 93 bc 00 	sts	0x00BC, r24
 11c:	08 95       	ret

0000011e <log_s>:
 11e:	18 c6       	rjmp	.+3120   	; 0xd50 <uart0_puts>
 120:	08 95       	ret

00000122 <millis_init>:
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 93 b0 00 	sts	0x00B0, r24
 128:	94 e0       	ldi	r25, 0x04	; 4
 12a:	90 93 b1 00 	sts	0x00B1, r25
 12e:	80 93 70 00 	sts	0x0070, r24
 132:	8a ef       	ldi	r24, 0xFA	; 250
 134:	80 93 b3 00 	sts	0x00B3, r24
 138:	08 95       	ret

0000013a <millis_get>:
 13a:	0f 93       	push	r16
 13c:	1f 93       	push	r17
 13e:	8f b7       	in	r24, 0x3f	; 63
 140:	f8 94       	cli
 142:	00 91 3a 01 	lds	r16, 0x013A
 146:	10 91 3b 01 	lds	r17, 0x013B
 14a:	20 91 3c 01 	lds	r18, 0x013C
 14e:	30 91 3d 01 	lds	r19, 0x013D
 152:	8f bf       	out	0x3f, r24	; 63
 154:	60 2f       	mov	r22, r16
 156:	71 2f       	mov	r23, r17
 158:	82 2f       	mov	r24, r18
 15a:	93 2f       	mov	r25, r19
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	08 95       	ret

00000162 <millis_resume>:
 162:	e4 e6       	ldi	r30, 0x64	; 100
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	8f 7b       	andi	r24, 0xBF	; 191
 16a:	80 83       	st	Z, r24
 16c:	e0 e7       	ldi	r30, 0x70	; 112
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	82 60       	ori	r24, 0x02	; 2
 174:	80 83       	st	Z, r24
 176:	08 95       	ret

00000178 <millis_reset>:
 178:	8f b7       	in	r24, 0x3f	; 63
 17a:	f8 94       	cli
 17c:	10 92 3a 01 	sts	0x013A, r1
 180:	10 92 3b 01 	sts	0x013B, r1
 184:	10 92 3c 01 	sts	0x013C, r1
 188:	10 92 3d 01 	sts	0x013D, r1
 18c:	8f bf       	out	0x3f, r24	; 63
 18e:	08 95       	ret

00000190 <__vector_7>:
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	80 91 3a 01 	lds	r24, 0x013A
 1a6:	90 91 3b 01 	lds	r25, 0x013B
 1aa:	a0 91 3c 01 	lds	r26, 0x013C
 1ae:	b0 91 3d 01 	lds	r27, 0x013D
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	a1 1d       	adc	r26, r1
 1b6:	b1 1d       	adc	r27, r1
 1b8:	80 93 3a 01 	sts	0x013A, r24
 1bc:	90 93 3b 01 	sts	0x013B, r25
 1c0:	a0 93 3c 01 	sts	0x013C, r26
 1c4:	b0 93 3d 01 	sts	0x013D, r27
 1c8:	bf 91       	pop	r27
 1ca:	af 91       	pop	r26
 1cc:	9f 91       	pop	r25
 1ce:	8f 91       	pop	r24
 1d0:	0f 90       	pop	r0
 1d2:	0f be       	out	0x3f, r0	; 63
 1d4:	0f 90       	pop	r0
 1d6:	1f 90       	pop	r1
 1d8:	18 95       	reti

000001da <main>:
 1da:	ea e7       	ldi	r30, 0x7A	; 122
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	8f 77       	andi	r24, 0x7F	; 127
 1e2:	80 83       	st	Z, r24
 1e4:	78 94       	sei
 1e6:	9d df       	rcall	.-198    	; 0x122 <millis_init>
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	8b e7       	ldi	r24, 0x7B	; 123
 1ec:	92 e9       	ldi	r25, 0x92	; 146
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x14>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x1e>
 1f8:	00 00       	nop
 1fa:	82 e0       	ldi	r24, 0x02	; 2
 1fc:	80 93 b0 00 	sts	0x00B0, r24
 200:	85 e0       	ldi	r24, 0x05	; 5
 202:	80 93 b1 00 	sts	0x00B1, r24
 206:	8d e7       	ldi	r24, 0x7D	; 125
 208:	80 93 b3 00 	sts	0x00B3, r24
 20c:	e4 e6       	ldi	r30, 0x64	; 100
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	80 64       	ori	r24, 0x40	; 64
 214:	80 83       	st	Z, r24
 216:	80 e1       	ldi	r24, 0x10	; 16
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	67 d5       	rcall	.+2766   	; 0xcea <uart0_init>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	97 d5       	rcall	.+2862   	; 0xd50 <uart0_puts>
 222:	ef ef       	ldi	r30, 0xFF	; 255
 224:	f3 ed       	ldi	r31, 0xD3	; 211
 226:	20 e3       	ldi	r18, 0x30	; 48
 228:	e1 50       	subi	r30, 0x01	; 1
 22a:	f0 40       	sbci	r31, 0x00	; 0
 22c:	20 40       	sbci	r18, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0x4e>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x58>
 232:	00 00       	nop
 234:	35 df       	rcall	.-406    	; 0xa0 <I2C_init>
 236:	b8 d0       	rcall	.+368    	; 0x3a8 <pca9635_init>
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	70 df       	rcall	.-288    	; 0x11e <log_s>
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	93 ed       	ldi	r25, 0xD3	; 211
 242:	e0 e3       	ldi	r30, 0x30	; 48
 244:	81 50       	subi	r24, 0x01	; 1
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	e0 40       	sbci	r30, 0x00	; 0
 24a:	e1 f7       	brne	.-8      	; 0x244 <main+0x6a>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <main+0x74>
 24e:	00 00       	nop
 250:	4e e0       	ldi	r20, 0x0E	; 14
 252:	62 e0       	ldi	r22, 0x02	; 2
 254:	82 e0       	ldi	r24, 0x02	; 2
 256:	00 d3       	rcall	.+1536   	; 0x858 <_Z15rf12_initializehhh>
 258:	8b e0       	ldi	r24, 0x0B	; 11
 25a:	91 e0       	ldi	r25, 0x01	; 1
 25c:	60 df       	rcall	.-320    	; 0x11e <log_s>
 25e:	ff ef       	ldi	r31, 0xFF	; 255
 260:	23 ed       	ldi	r18, 0xD3	; 211
 262:	80 e3       	ldi	r24, 0x30	; 48
 264:	f1 50       	subi	r31, 0x01	; 1
 266:	20 40       	sbci	r18, 0x00	; 0
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x8a>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x94>
 26e:	00 00       	nop
 270:	05 e4       	ldi	r16, 0x45	; 69
 272:	11 e0       	ldi	r17, 0x01	; 1
 274:	c6 e4       	ldi	r28, 0x46	; 70
 276:	d1 e0       	ldi	r29, 0x01	; 1
 278:	0f 2e       	mov	r0, r31
 27a:	f7 e4       	ldi	r31, 0x47	; 71
 27c:	af 2e       	mov	r10, r31
 27e:	f1 e0       	ldi	r31, 0x01	; 1
 280:	bf 2e       	mov	r11, r31
 282:	f0 2d       	mov	r31, r0
 284:	41 2c       	mov	r4, r1
 286:	51 2c       	mov	r5, r1
 288:	32 01       	movw	r6, r4
 28a:	31 2c       	mov	r3, r1
 28c:	68 94       	set
 28e:	22 24       	eor	r2, r2
 290:	27 f8       	bld	r2, 7
 292:	02 c0       	rjmp	.+4      	; 0x298 <main+0xbe>
 294:	73 01       	movw	r14, r6
 296:	62 01       	movw	r12, r4
 298:	01 d1       	rcall	.+514    	; 0x49c <_Z13rf12_recvDonev>
 29a:	88 23       	and	r24, r24
 29c:	09 f4       	brne	.+2      	; 0x2a0 <main+0xc6>
 29e:	6e c0       	rjmp	.+220    	; 0x37c <main+0x1a2>
 2a0:	80 91 8b 01 	lds	r24, 0x018B
 2a4:	90 91 8c 01 	lds	r25, 0x018C
 2a8:	89 2b       	or	r24, r25
 2aa:	09 f4       	brne	.+2      	; 0x2ae <main+0xd4>
 2ac:	72 c0       	rjmp	.+228    	; 0x392 <main+0x1b8>
 2ae:	66 c0       	rjmp	.+204    	; 0x37c <main+0x1a2>
 2b0:	f8 01       	movw	r30, r16
 2b2:	80 81       	ld	r24, Z
 2b4:	88 23       	and	r24, r24
 2b6:	0c f0       	brlt	.+2      	; 0x2ba <main+0xe0>
 2b8:	71 c0       	rjmp	.+226    	; 0x39c <main+0x1c2>
 2ba:	16 c0       	rjmp	.+44     	; 0x2e8 <main+0x10e>
 2bc:	f8 01       	movw	r30, r16
 2be:	80 81       	ld	r24, Z
 2c0:	8f 71       	andi	r24, 0x1F	; 31
 2c2:	80 6c       	ori	r24, 0xC0	; 192
 2c4:	43 2d       	mov	r20, r3
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	3e d2       	rcall	.+1148   	; 0x748 <_Z14rf12_sendStarthPKvh>
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	4a d2       	rcall	.+1172   	; 0x764 <_Z13rf12_sendWaith>
 2d0:	88 e1       	ldi	r24, 0x18	; 24
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	3d d5       	rcall	.+2682   	; 0xd50 <uart0_puts>
 2d6:	ff ef       	ldi	r31, 0xFF	; 255
 2d8:	29 ef       	ldi	r18, 0xF9	; 249
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	f1 50       	subi	r31, 0x01	; 1
 2de:	20 40       	sbci	r18, 0x00	; 0
 2e0:	80 40       	sbci	r24, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <main+0x102>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <main+0x10c>
 2e6:	00 00       	nop
 2e8:	8f e1       	ldi	r24, 0x1F	; 31
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	31 d5       	rcall	.+2658   	; 0xd50 <uart0_puts>
 2ee:	9f ef       	ldi	r25, 0xFF	; 255
 2f0:	e9 ef       	ldi	r30, 0xF9	; 249
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	91 50       	subi	r25, 0x01	; 1
 2f6:	e0 40       	sbci	r30, 0x00	; 0
 2f8:	f0 40       	sbci	r31, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0x11a>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0x124>
 2fe:	00 00       	nop
 300:	88 81       	ld	r24, Y
 302:	88 23       	and	r24, r24
 304:	59 f0       	breq	.+22     	; 0x31c <main+0x142>
 306:	93 2c       	mov	r9, r3
 308:	e9 2d       	mov	r30, r9
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	e9 5b       	subi	r30, 0xB9	; 185
 30e:	fe 4f       	sbci	r31, 0xFE	; 254
 310:	80 81       	ld	r24, Z
 312:	04 d5       	rcall	.+2568   	; 0xd1c <uart0_putc>
 314:	93 94       	inc	r9
 316:	88 81       	ld	r24, Y
 318:	98 16       	cp	r9, r24
 31a:	b0 f3       	brcs	.-20     	; 0x308 <main+0x12e>
 31c:	f5 01       	movw	r30, r10
 31e:	90 80       	ld	r9, Z
 320:	94 fe       	sbrs	r9, 4
 322:	05 c0       	rjmp	.+10     	; 0x32e <main+0x154>
 324:	8b e2       	ldi	r24, 0x2B	; 43
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	13 d5       	rcall	.+2598   	; 0xd50 <uart0_puts>
 32a:	89 20       	and	r8, r9
 32c:	05 c0       	rjmp	.+10     	; 0x338 <main+0x15e>
 32e:	81 e3       	ldi	r24, 0x31	; 49
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e d5       	rcall	.+2588   	; 0xd50 <uart0_puts>
 334:	90 94       	com	r9
 336:	89 20       	and	r8, r9
 338:	88 2d       	mov	r24, r8
 33a:	8f 70       	andi	r24, 0x0F	; 15
 33c:	09 f4       	brne	.+2      	; 0x340 <main+0x166>
 33e:	aa cf       	rjmp	.-172    	; 0x294 <main+0xba>
 340:	cd 28       	or	r12, r13
 342:	ce 28       	or	r12, r14
 344:	cf 28       	or	r12, r15
 346:	61 f4       	brne	.+24     	; 0x360 <main+0x186>
 348:	17 df       	rcall	.-466    	; 0x178 <millis_reset>
 34a:	0b df       	rcall	.-490    	; 0x162 <millis_resume>
 34c:	e4 e6       	ldi	r30, 0x64	; 100
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	8f 7b       	andi	r24, 0xBF	; 191
 354:	80 83       	st	Z, r24
 356:	e0 e7       	ldi	r30, 0x70	; 112
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	82 60       	ori	r24, 0x02	; 2
 35e:	80 83       	st	Z, r24
 360:	ec de       	rcall	.-552    	; 0x13a <millis_get>
 362:	0f 2e       	mov	r0, r31
 364:	f0 e2       	ldi	r31, 0x20	; 32
 366:	cf 2e       	mov	r12, r31
 368:	fe e4       	ldi	r31, 0x4E	; 78
 36a:	df 2e       	mov	r13, r31
 36c:	e1 2c       	mov	r14, r1
 36e:	f1 2c       	mov	r15, r1
 370:	f0 2d       	mov	r31, r0
 372:	c6 0e       	add	r12, r22
 374:	d7 1e       	adc	r13, r23
 376:	e8 1e       	adc	r14, r24
 378:	f9 1e       	adc	r15, r25
 37a:	8e cf       	rjmp	.-228    	; 0x298 <main+0xbe>
 37c:	83 b7       	in	r24, 0x33	; 51
 37e:	81 7f       	andi	r24, 0xF1	; 241
 380:	83 bf       	out	0x33, r24	; 51
 382:	83 b7       	in	r24, 0x33	; 51
 384:	81 60       	ori	r24, 0x01	; 1
 386:	83 bf       	out	0x33, r24	; 51
 388:	88 95       	sleep
 38a:	83 b7       	in	r24, 0x33	; 51
 38c:	8e 7f       	andi	r24, 0xFE	; 254
 38e:	83 bf       	out	0x33, r24	; 51
 390:	83 cf       	rjmp	.-250    	; 0x298 <main+0xbe>
 392:	f8 01       	movw	r30, r16
 394:	80 81       	ld	r24, Z
 396:	85 fd       	sbrc	r24, 5
 398:	8b cf       	rjmp	.-234    	; 0x2b0 <main+0xd6>
 39a:	a6 cf       	rjmp	.-180    	; 0x2e8 <main+0x10e>
 39c:	f8 01       	movw	r30, r16
 39e:	80 81       	ld	r24, Z
 3a0:	86 ff       	sbrs	r24, 6
 3a2:	8c cf       	rjmp	.-232    	; 0x2bc <main+0xe2>
 3a4:	82 2d       	mov	r24, r2
 3a6:	8e cf       	rjmp	.-228    	; 0x2c4 <main+0xea>

000003a8 <pca9635_init>:
 3a8:	80 e8       	ldi	r24, 0x80	; 128
 3aa:	7e de       	rcall	.-772    	; 0xa8 <I2C_start>
 3ac:	80 e8       	ldi	r24, 0x80	; 128
 3ae:	a1 de       	rcall	.-702    	; 0xf2 <I2C_write>
 3b0:	80 e8       	ldi	r24, 0x80	; 128
 3b2:	9f de       	rcall	.-706    	; 0xf2 <I2C_write>
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	9d de       	rcall	.-710    	; 0xf2 <I2C_write>
  //Reg 0x01 = MODE2 - set to 0x02 - noninverted logic state, open-drain
  I2C_write(0x02);
  
  //Reg 0x02-0x11 - PWM0-15 - LED brightnesses, start at low brightness (0x20)
  
  I2C_write(0x01);
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	9b de       	rcall	.-714    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	99 de       	rcall	.-718    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	97 de       	rcall	.-722    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	95 de       	rcall	.-726    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	93 de       	rcall	.-730    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	91 de       	rcall	.-734    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	8f de       	rcall	.-738    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	8d de       	rcall	.-742    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	8b de       	rcall	.-746    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	89 de       	rcall	.-750    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	87 de       	rcall	.-754    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	85 de       	rcall	.-758    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	83 de       	rcall	.-762    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	81 de       	rcall	.-766    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	7f de       	rcall	.-770    	; 0xf2 <I2C_write>
  I2C_write(0x01);
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	7d de       	rcall	.-774    	; 0xf2 <I2C_write>
  
  //Reg 0x12 - Group PWM - should not matter
  I2C_write(0xff);
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	7b de       	rcall	.-778    	; 0xf2 <I2C_write>

  //Reg 0x13 - Group Freq - should not matter
  I2C_write(0x00);
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	79 de       	rcall	.-782    	; 0xf2 <I2C_write>

  //Reg 0x14-0x17 - LED Output State Control - all 0xAA (output state for each LED = 0x2)
  I2C_write(0xaa);
 400:	8a ea       	ldi	r24, 0xAA	; 170
 402:	77 de       	rcall	.-786    	; 0xf2 <I2C_write>
  I2C_write(0xaa);
 404:	8a ea       	ldi	r24, 0xAA	; 170
 406:	75 de       	rcall	.-790    	; 0xf2 <I2C_write>
  I2C_write(0xaa);
 408:	8a ea       	ldi	r24, 0xAA	; 170
 40a:	73 de       	rcall	.-794    	; 0xf2 <I2C_write>
  I2C_write(0xaa);
 40c:	8a ea       	ldi	r24, 0xAA	; 170
 40e:	71 de       	rcall	.-798    	; 0xf2 <I2C_write>

  //Reg 0x18-0x1b - Subaddressing stuff, doesn't matter, just stop the xfer
  I2C_stop();
 410:	82 ce       	rjmp	.-764    	; 0x116 <I2C_stop>

00000412 <_ZL15blockInterruptsv>:
	rf12_idle();
	else {
		rfmstate &= ~B11111000; // make sure everything is switched off (except bod, wkup, clk)
		rf12_xfer(rfmstate);
	}
	rxstate = TXIDLE;
 412:	e8 98       	cbi	0x1d, 0	; 29
 414:	08 95       	ret

00000416 <_ZL15allowInterruptsv>:
 416:	e8 9a       	sbi	0x1d, 0	; 29
 418:	08 95       	ret

0000041a <_ZL9rf12_byteh>:
 41a:	8e bd       	out	0x2e, r24	; 46
 41c:	0d b4       	in	r0, 0x2d	; 45
 41e:	07 fe       	sbrs	r0, 7
 420:	fd cf       	rjmp	.-6      	; 0x41c <_ZL9rf12_byteh+0x2>
 422:	8e b5       	in	r24, 0x2e	; 46
 424:	08 95       	ret

00000426 <_ZL9rf12_xferj>:
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	18 2f       	mov	r17, r24
 42e:	c9 2f       	mov	r28, r25
 430:	f0 df       	rcall	.-32     	; 0x412 <_ZL15blockInterruptsv>
 432:	2a 98       	cbi	0x05, 2	; 5
 434:	8c 2f       	mov	r24, r28
 436:	f1 df       	rcall	.-30     	; 0x41a <_ZL9rf12_byteh>
 438:	d8 2f       	mov	r29, r24
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	c8 2f       	mov	r28, r24
 43e:	81 2f       	mov	r24, r17
 440:	ec df       	rcall	.-40     	; 0x41a <_ZL9rf12_byteh>
 442:	c8 2b       	or	r28, r24
 444:	2a 9a       	sbi	0x05, 2	; 5
 446:	e7 df       	rcall	.-50     	; 0x416 <_ZL15allowInterruptsv>
 448:	8c 2f       	mov	r24, r28
 44a:	9d 2f       	mov	r25, r29
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	08 95       	ret

00000454 <_ZL9rf12_idlev>:
 454:	80 91 92 01 	lds	r24, 0x0192
 458:	90 91 93 01 	lds	r25, 0x0193
 45c:	8f 70       	andi	r24, 0x0F	; 15
 45e:	90 93 93 01 	sts	0x0193, r25
 462:	80 93 92 01 	sts	0x0192, r24
 466:	80 91 92 01 	lds	r24, 0x0192
 46a:	90 91 93 01 	lds	r25, 0x0193
 46e:	88 60       	ori	r24, 0x08	; 8
 470:	90 93 93 01 	sts	0x0193, r25
 474:	80 93 92 01 	sts	0x0192, r24
 478:	80 91 92 01 	lds	r24, 0x0192
 47c:	90 91 93 01 	lds	r25, 0x0193
 480:	d2 cf       	rjmp	.-92     	; 0x426 <_ZL9rf12_xferj>

00000482 <_Z12rf12_spiInitv>:
 482:	84 b1       	in	r24, 0x04	; 4
 484:	8c 62       	ori	r24, 0x2C	; 44
 486:	84 b9       	out	0x04, r24	; 4
 488:	2a 9a       	sbi	0x05, 2	; 5
 48a:	24 98       	cbi	0x04, 4	; 4
 48c:	80 e5       	ldi	r24, 0x50	; 80
 48e:	8c bd       	out	0x2c, r24	; 44
 490:	8d b5       	in	r24, 0x2d	; 45
 492:	81 60       	ori	r24, 0x01	; 1
 494:	8d bd       	out	0x2d, r24	; 45
 496:	52 98       	cbi	0x0a, 2	; 10
 498:	5a 9a       	sbi	0x0b, 2	; 11
 49a:	08 95       	ret

0000049c <_Z13rf12_recvDonev>:
 49c:	80 91 94 01 	lds	r24, 0x0194
 4a0:	87 30       	cpi	r24, 0x07	; 7
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <_Z13rf12_recvDonev+0xa>
 4a4:	51 c0       	rjmp	.+162    	; 0x548 <_Z13rf12_recvDonev+0xac>
 4a6:	80 91 97 01 	lds	r24, 0x0197
 4aa:	88 23       	and	r24, r24
 4ac:	a1 f0       	breq	.+40     	; 0x4d6 <_Z13rf12_recvDonev+0x3a>
 4ae:	90 91 95 01 	lds	r25, 0x0195
 4b2:	98 17       	cp	r25, r24
 4b4:	28 f4       	brcc	.+10     	; 0x4c0 <_Z13rf12_recvDonev+0x24>
 4b6:	80 91 95 01 	lds	r24, 0x0195
 4ba:	87 34       	cpi	r24, 0x47	; 71
 4bc:	08 f4       	brcc	.+2      	; 0x4c0 <_Z13rf12_recvDonev+0x24>
 4be:	44 c0       	rjmp	.+136    	; 0x548 <_Z13rf12_recvDonev+0xac>
 4c0:	84 e0       	ldi	r24, 0x04	; 4
 4c2:	80 93 94 01 	sts	0x0194, r24
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	90 93 8c 01 	sts	0x018C, r25
 4ce:	80 93 8b 01 	sts	0x018B, r24
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	08 95       	ret
 4d6:	20 91 95 01 	lds	r18, 0x0195
 4da:	80 91 46 01 	lds	r24, 0x0146
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	05 96       	adiw	r24, 0x05	; 5
 4e4:	28 17       	cp	r18, r24
 4e6:	39 07       	cpc	r19, r25
 4e8:	24 f4       	brge	.+8      	; 0x4f2 <_Z13rf12_recvDonev+0x56>
 4ea:	80 91 95 01 	lds	r24, 0x0195
 4ee:	87 34       	cpi	r24, 0x47	; 71
 4f0:	58 f1       	brcs	.+86     	; 0x548 <_Z13rf12_recvDonev+0xac>
 4f2:	84 e0       	ldi	r24, 0x04	; 4
 4f4:	80 93 94 01 	sts	0x0194, r24
 4f8:	80 91 46 01 	lds	r24, 0x0146
 4fc:	83 34       	cpi	r24, 0x43	; 67
 4fe:	30 f0       	brcs	.+12     	; 0x50c <_Z13rf12_recvDonev+0x70>
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	90 93 8c 01 	sts	0x018C, r25
 508:	80 93 8b 01 	sts	0x018B, r24
 50c:	80 91 45 01 	lds	r24, 0x0145
 510:	86 ff       	sbrs	r24, 6
 512:	0b c0       	rjmp	.+22     	; 0x52a <_Z13rf12_recvDonev+0x8e>
 514:	80 91 98 01 	lds	r24, 0x0198
 518:	98 2f       	mov	r25, r24
 51a:	9f 71       	andi	r25, 0x1F	; 31
 51c:	9f 31       	cpi	r25, 0x1F	; 31
 51e:	29 f0       	breq	.+10     	; 0x52a <_Z13rf12_recvDonev+0x8e>
 520:	90 91 45 01 	lds	r25, 0x0145
 524:	89 27       	eor	r24, r25
 526:	8f 71       	andi	r24, 0x1F	; 31
 528:	79 f4       	brne	.+30     	; 0x548 <_Z13rf12_recvDonev+0xac>
 52a:	80 91 8b 01 	lds	r24, 0x018B
 52e:	90 91 8c 01 	lds	r25, 0x018C
 532:	89 2b       	or	r24, r25
 534:	09 f0       	breq	.+2      	; 0x538 <_Z13rf12_recvDonev+0x9c>
 536:	55 c0       	rjmp	.+170    	; 0x5e2 <_Z13rf12_recvDonev+0x146>
 538:	e0 91 3e 01 	lds	r30, 0x013E
 53c:	f0 91 3f 01 	lds	r31, 0x013F
 540:	30 97       	sbiw	r30, 0x00	; 0
 542:	09 f0       	breq	.+2      	; 0x546 <_Z13rf12_recvDonev+0xaa>
 544:	4a c0       	rjmp	.+148    	; 0x5da <_Z13rf12_recvDonev+0x13e>
 546:	4d c0       	rjmp	.+154    	; 0x5e2 <_Z13rf12_recvDonev+0x146>
 548:	80 91 94 01 	lds	r24, 0x0194
 54c:	84 30       	cpi	r24, 0x04	; 4
 54e:	09 f0       	breq	.+2      	; 0x552 <_Z13rf12_recvDonev+0xb6>
 550:	42 c0       	rjmp	.+132    	; 0x5d6 <_Z13rf12_recvDonev+0x13a>
 552:	10 92 46 01 	sts	0x0146, r1
 556:	10 92 95 01 	sts	0x0195, r1
 55a:	8f ef       	ldi	r24, 0xFF	; 255
 55c:	9f ef       	ldi	r25, 0xFF	; 255
 55e:	90 93 8c 01 	sts	0x018C, r25
 562:	80 93 8b 01 	sts	0x018B, r24
 566:	20 91 96 01 	lds	r18, 0x0196
 56a:	22 23       	and	r18, r18
 56c:	d9 f0       	breq	.+54     	; 0x5a4 <_Z13rf12_recvDonev+0x108>
 56e:	82 27       	eor	r24, r18
 570:	28 2f       	mov	r18, r24
 572:	22 95       	swap	r18
 574:	28 27       	eor	r18, r24
 576:	02 2e       	mov	r0, r18
 578:	26 95       	lsr	r18
 57a:	26 95       	lsr	r18
 57c:	20 25       	eor	r18, r0
 57e:	02 2e       	mov	r0, r18
 580:	26 95       	lsr	r18
 582:	20 25       	eor	r18, r0
 584:	27 70       	andi	r18, 0x07	; 7
 586:	08 2e       	mov	r0, r24
 588:	89 2f       	mov	r24, r25
 58a:	26 95       	lsr	r18
 58c:	07 94       	ror	r0
 58e:	27 95       	ror	r18
 590:	90 2d       	mov	r25, r0
 592:	82 27       	eor	r24, r18
 594:	06 94       	lsr	r0
 596:	27 95       	ror	r18
 598:	90 25       	eor	r25, r0
 59a:	82 27       	eor	r24, r18
 59c:	90 93 8c 01 	sts	0x018C, r25
 5a0:	80 93 8b 01 	sts	0x018B, r24
 5a4:	87 e0       	ldi	r24, 0x07	; 7
 5a6:	80 93 94 01 	sts	0x0194, r24
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	80 93 8e 01 	sts	0x018E, r24
 5b0:	83 ea       	ldi	r24, 0xA3	; 163
 5b2:	94 e9       	ldi	r25, 0x94	; 148
 5b4:	38 df       	rcall	.-400    	; 0x426 <_ZL9rf12_xferj>
 5b6:	80 91 92 01 	lds	r24, 0x0192
 5ba:	90 91 93 01 	lds	r25, 0x0193
 5be:	88 6d       	ori	r24, 0xD8	; 216
 5c0:	90 93 93 01 	sts	0x0193, r25
 5c4:	80 93 92 01 	sts	0x0192, r24
 5c8:	80 91 92 01 	lds	r24, 0x0192
 5cc:	90 91 93 01 	lds	r25, 0x0193
 5d0:	2a df       	rcall	.-428    	; 0x426 <_ZL9rf12_xferj>
 5d2:	80 e0       	ldi	r24, 0x00	; 0
 5d4:	08 95       	ret
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	08 95       	ret
 5da:	80 e0       	ldi	r24, 0x00	; 0
 5dc:	09 95       	icall
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	08 95       	ret
 5e2:	8f ef       	ldi	r24, 0xFF	; 255
 5e4:	9f ef       	ldi	r25, 0xFF	; 255
 5e6:	dc 01       	movw	r26, r24
 5e8:	80 93 40 01 	sts	0x0140, r24
 5ec:	90 93 41 01 	sts	0x0141, r25
 5f0:	a0 93 42 01 	sts	0x0142, r26
 5f4:	b0 93 43 01 	sts	0x0143, r27
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	08 95       	ret

000005fc <_Z15rf12_setBitrateh>:
 5fc:	cf 92       	push	r12
 5fe:	df 92       	push	r13
 600:	ef 92       	push	r14
 602:	ff 92       	push	r15
 604:	0f 93       	push	r16
 606:	1f 93       	push	r17
 608:	cf 93       	push	r28
 60a:	c8 2f       	mov	r28, r24
 60c:	08 2f       	mov	r16, r24
 60e:	10 e0       	ldi	r17, 0x00	; 0
 610:	c8 01       	movw	r24, r16
 612:	96 6c       	ori	r25, 0xC6	; 198
 614:	08 df       	rcall	.-496    	; 0x426 <_ZL9rf12_xferj>
 616:	cf 77       	andi	r28, 0x7F	; 127
 618:	2c 2f       	mov	r18, r28
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	2f 5f       	subi	r18, 0xFF	; 255
 61e:	3f 4f       	sbci	r19, 0xFF	; 255
 620:	44 27       	eor	r20, r20
 622:	37 fd       	sbrc	r19, 7
 624:	40 95       	com	r20
 626:	54 2f       	mov	r21, r20
 628:	6b ef       	ldi	r22, 0xFB	; 251
 62a:	72 e4       	ldi	r23, 0x42	; 66
 62c:	85 e0       	ldi	r24, 0x05	; 5
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	b0 d3       	rcall	.+1888   	; 0xd92 <__udivmodsi4>
 632:	69 01       	movw	r12, r18
 634:	7a 01       	movw	r14, r20
 636:	c8 01       	movw	r24, r16
 638:	88 0f       	add	r24, r24
 63a:	89 2f       	mov	r24, r25
 63c:	88 1f       	adc	r24, r24
 63e:	99 0b       	sbc	r25, r25
 640:	8c 01       	movw	r16, r24
 642:	00 0f       	add	r16, r16
 644:	11 1f       	adc	r17, r17
 646:	00 0f       	add	r16, r16
 648:	11 1f       	adc	r17, r17
 64a:	00 0f       	add	r16, r16
 64c:	11 1f       	adc	r17, r17
 64e:	08 1b       	sub	r16, r24
 650:	19 0b       	sbc	r17, r25
 652:	0f 5f       	subi	r16, 0xFF	; 255
 654:	1f 4f       	sbci	r17, 0xFF	; 255
 656:	98 01       	movw	r18, r16
 658:	44 27       	eor	r20, r20
 65a:	37 fd       	sbrc	r19, 7
 65c:	40 95       	com	r20
 65e:	54 2f       	mov	r21, r20
 660:	c7 01       	movw	r24, r14
 662:	b6 01       	movw	r22, r12
 664:	96 d3       	rcall	.+1836   	; 0xd92 <__udivmodsi4>
 666:	da 01       	movw	r26, r20
 668:	c9 01       	movw	r24, r18
 66a:	68 94       	set
 66c:	12 f8       	bld	r1, 2
 66e:	b6 95       	lsr	r27
 670:	a7 95       	ror	r26
 672:	97 95       	ror	r25
 674:	87 95       	ror	r24
 676:	16 94       	lsr	r1
 678:	d1 f7       	brne	.-12     	; 0x66e <_Z15rf12_setBitrateh+0x72>
 67a:	bc 01       	movw	r22, r24
 67c:	cd 01       	movw	r24, r26
 67e:	6d 57       	subi	r22, 0x7D	; 125
 680:	7c 4f       	sbci	r23, 0xFC	; 252
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	24 e8       	ldi	r18, 0x84	; 132
 688:	33 e0       	ldi	r19, 0x03	; 3
 68a:	40 e0       	ldi	r20, 0x00	; 0
 68c:	50 e0       	ldi	r21, 0x00	; 0
 68e:	81 d3       	rcall	.+1794   	; 0xd92 <__udivmodsi4>
 690:	20 93 8d 01 	sts	0x018D, r18
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	ff 90       	pop	r15
 69c:	ef 90       	pop	r14
 69e:	df 90       	pop	r13
 6a0:	cf 90       	pop	r12
 6a2:	08 95       	ret

000006a4 <_Z19rf12_setFixedLengthh>:
 6a4:	81 11       	cpse	r24, r1
 6a6:	03 c0       	rjmp	.+6      	; 0x6ae <_Z19rf12_setFixedLengthh+0xa>
 6a8:	10 92 97 01 	sts	0x0197, r1
 6ac:	08 95       	ret
 6ae:	8f 5f       	subi	r24, 0xFF	; 255
 6b0:	80 93 97 01 	sts	0x0197, r24
 6b4:	08 95       	ret

000006b6 <_Z14rf12_sendStarth>:
 6b6:	86 fd       	sbrc	r24, 6
 6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <_Z14rf12_sendStarth+0xe>
 6ba:	80 7e       	andi	r24, 0xE0	; 224
 6bc:	90 91 98 01 	lds	r25, 0x0198
 6c0:	9f 71       	andi	r25, 0x1F	; 31
 6c2:	89 0f       	add	r24, r25
 6c4:	80 93 45 01 	sts	0x0145, r24
 6c8:	e0 91 3e 01 	lds	r30, 0x013E
 6cc:	f0 91 3f 01 	lds	r31, 0x013F
 6d0:	30 97       	sbiw	r30, 0x00	; 0
 6d2:	11 f0       	breq	.+4      	; 0x6d8 <_Z14rf12_sendStarth+0x22>
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	09 95       	icall
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
 6da:	9f ef       	ldi	r25, 0xFF	; 255
 6dc:	90 93 8c 01 	sts	0x018C, r25
 6e0:	80 93 8b 01 	sts	0x018B, r24
 6e4:	80 91 8b 01 	lds	r24, 0x018B
 6e8:	90 91 8c 01 	lds	r25, 0x018C
 6ec:	20 91 96 01 	lds	r18, 0x0196
 6f0:	82 27       	eor	r24, r18
 6f2:	28 2f       	mov	r18, r24
 6f4:	22 95       	swap	r18
 6f6:	28 27       	eor	r18, r24
 6f8:	02 2e       	mov	r0, r18
 6fa:	26 95       	lsr	r18
 6fc:	26 95       	lsr	r18
 6fe:	20 25       	eor	r18, r0
 700:	02 2e       	mov	r0, r18
 702:	26 95       	lsr	r18
 704:	20 25       	eor	r18, r0
 706:	27 70       	andi	r18, 0x07	; 7
 708:	08 2e       	mov	r0, r24
 70a:	89 2f       	mov	r24, r25
 70c:	26 95       	lsr	r18
 70e:	07 94       	ror	r0
 710:	27 95       	ror	r18
 712:	90 2d       	mov	r25, r0
 714:	82 27       	eor	r24, r18
 716:	06 94       	lsr	r0
 718:	27 95       	ror	r18
 71a:	90 25       	eor	r25, r0
 71c:	82 27       	eor	r24, r18
 71e:	90 93 8c 01 	sts	0x018C, r25
 722:	80 93 8b 01 	sts	0x018B, r24
 726:	88 e0       	ldi	r24, 0x08	; 8
 728:	80 93 94 01 	sts	0x0194, r24
 72c:	80 91 92 01 	lds	r24, 0x0192
 730:	90 91 93 01 	lds	r25, 0x0193
 734:	88 63       	ori	r24, 0x38	; 56
 736:	90 93 93 01 	sts	0x0193, r25
 73a:	80 93 92 01 	sts	0x0192, r24
 73e:	80 91 92 01 	lds	r24, 0x0192
 742:	90 91 93 01 	lds	r25, 0x0193
 746:	6f ce       	rjmp	.-802    	; 0x426 <_ZL9rf12_xferj>

00000748 <_Z14rf12_sendStarthPKvh>:
 748:	cf 93       	push	r28
 74a:	c8 2f       	mov	r28, r24
 74c:	40 93 46 01 	sts	0x0146, r20
 750:	27 e4       	ldi	r18, 0x47	; 71
 752:	31 e0       	ldi	r19, 0x01	; 1
 754:	50 e0       	ldi	r21, 0x00	; 0
 756:	82 2f       	mov	r24, r18
 758:	93 2f       	mov	r25, r19
 75a:	51 d3       	rcall	.+1698   	; 0xdfe <memcpy>
 75c:	8c 2f       	mov	r24, r28
 75e:	ab df       	rcall	.-170    	; 0x6b6 <_Z14rf12_sendStarth>
 760:	cf 91       	pop	r28
 762:	08 95       	ret

00000764 <_Z13rf12_sendWaith>:
 764:	44 e0       	ldi	r20, 0x04	; 4
 766:	30 e0       	ldi	r19, 0x00	; 0
 768:	5c e0       	ldi	r21, 0x0C	; 12
 76a:	16 c0       	rjmp	.+44     	; 0x798 <_Z13rf12_sendWaith+0x34>
 76c:	88 23       	and	r24, r24
 76e:	a1 f0       	breq	.+40     	; 0x798 <_Z13rf12_sendWaith+0x34>
 770:	93 b7       	in	r25, 0x33	; 51
 772:	91 7f       	andi	r25, 0xF1	; 241
 774:	83 30       	cpi	r24, 0x03	; 3
 776:	21 f0       	breq	.+8      	; 0x780 <_Z13rf12_sendWaith+0x1c>
 778:	82 30       	cpi	r24, 0x02	; 2
 77a:	21 f4       	brne	.+8      	; 0x784 <_Z13rf12_sendWaith+0x20>
 77c:	25 2f       	mov	r18, r21
 77e:	03 c0       	rjmp	.+6      	; 0x786 <_Z13rf12_sendWaith+0x22>
 780:	24 2f       	mov	r18, r20
 782:	01 c0       	rjmp	.+2      	; 0x786 <_Z13rf12_sendWaith+0x22>
 784:	23 2f       	mov	r18, r19
 786:	92 2b       	or	r25, r18
 788:	93 bf       	out	0x33, r25	; 51
 78a:	93 b7       	in	r25, 0x33	; 51
 78c:	91 60       	ori	r25, 0x01	; 1
 78e:	93 bf       	out	0x33, r25	; 51
 790:	88 95       	sleep
 792:	93 b7       	in	r25, 0x33	; 51
 794:	9e 7f       	andi	r25, 0xFE	; 254
 796:	93 bf       	out	0x33, r25	; 51
 798:	90 91 94 01 	lds	r25, 0x0194
 79c:	94 30       	cpi	r25, 0x04	; 4
 79e:	31 f7       	brne	.-52     	; 0x76c <_Z13rf12_sendWaith+0x8>
 7a0:	08 95       	ret

000007a2 <_Z21rf12_interruptcontrolv>:
 7a2:	e8 9a       	sbi	0x1d, 0	; 29
 7a4:	e9 e6       	ldi	r30, 0x69	; 105
 7a6:	f0 e0       	ldi	r31, 0x00	; 0
 7a8:	80 81       	ld	r24, Z
 7aa:	8d 7f       	andi	r24, 0xFD	; 253
 7ac:	80 83       	st	Z, r24
 7ae:	08 95       	ret

000007b0 <_Z12rf12_restorehhh>:
 7b0:	cf 93       	push	r28
 7b2:	df 93       	push	r29
 7b4:	d6 2f       	mov	r29, r22
 7b6:	c4 2f       	mov	r28, r20
 7b8:	80 93 98 01 	sts	0x0198, r24
 7bc:	40 93 96 01 	sts	0x0196, r20
 7c0:	60 93 99 01 	sts	0x0199, r22
 7c4:	ee df       	rcall	.-36     	; 0x7a2 <_Z21rf12_interruptcontrolv>
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	6d df       	rcall	.-294    	; 0x6a4 <_Z19rf12_setFixedLengthh>
 7ca:	23 de       	rcall	.-954    	; 0x412 <_ZL15blockInterruptsv>
 7cc:	25 e0       	ldi	r18, 0x05	; 5
 7ce:	32 e8       	ldi	r19, 0x82	; 130
 7d0:	30 93 93 01 	sts	0x0193, r19
 7d4:	20 93 92 01 	sts	0x0192, r18
 7d8:	80 91 92 01 	lds	r24, 0x0192
 7dc:	90 91 93 01 	lds	r25, 0x0193
 7e0:	22 de       	rcall	.-956    	; 0x426 <_ZL9rf12_xferj>
 7e2:	20 e1       	ldi	r18, 0x10	; 16
 7e4:	d2 9f       	mul	r29, r18
 7e6:	c0 01       	movw	r24, r0
 7e8:	11 24       	eor	r1, r1
 7ea:	87 6c       	ori	r24, 0xC7	; 199
 7ec:	90 68       	ori	r25, 0x80	; 128
 7ee:	1b de       	rcall	.-970    	; 0x426 <_ZL9rf12_xferj>
 7f0:	80 e4       	ldi	r24, 0x40	; 64
 7f2:	96 ea       	ldi	r25, 0xA6	; 166
 7f4:	18 de       	rcall	.-976    	; 0x426 <_ZL9rf12_xferj>
 7f6:	86 e0       	ldi	r24, 0x06	; 6
 7f8:	01 df       	rcall	.-510    	; 0x5fc <_Z15rf12_setBitrateh>
 7fa:	82 ea       	ldi	r24, 0xA2	; 162
 7fc:	94 e9       	ldi	r25, 0x94	; 148
 7fe:	13 de       	rcall	.-986    	; 0x426 <_ZL9rf12_xferj>
 800:	8c ea       	ldi	r24, 0xAC	; 172
 802:	92 ec       	ldi	r25, 0xC2	; 194
 804:	10 de       	rcall	.-992    	; 0x426 <_ZL9rf12_xferj>
 806:	cc 23       	and	r28, r28
 808:	41 f0       	breq	.+16     	; 0x81a <_Z12rf12_restorehhh+0x6a>
 80a:	83 e8       	ldi	r24, 0x83	; 131
 80c:	9a ec       	ldi	r25, 0xCA	; 202
 80e:	0b de       	rcall	.-1002   	; 0x426 <_ZL9rf12_xferj>
 810:	8c 2f       	mov	r24, r28
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	9e 6c       	ori	r25, 0xCE	; 206
 816:	07 de       	rcall	.-1010   	; 0x426 <_ZL9rf12_xferj>
 818:	06 c0       	rjmp	.+12     	; 0x826 <_Z12rf12_restorehhh+0x76>
 81a:	8b e8       	ldi	r24, 0x8B	; 139
 81c:	9a ec       	ldi	r25, 0xCA	; 202
 81e:	03 de       	rcall	.-1018   	; 0x426 <_ZL9rf12_xferj>
 820:	8d e2       	ldi	r24, 0x2D	; 45
 822:	9e ec       	ldi	r25, 0xCE	; 206
 824:	00 de       	rcall	.-1024   	; 0x426 <_ZL9rf12_xferj>
 826:	83 e8       	ldi	r24, 0x83	; 131
 828:	94 ec       	ldi	r25, 0xC4	; 196
 82a:	fd dd       	rcall	.-1030   	; 0x426 <_ZL9rf12_xferj>
 82c:	80 e5       	ldi	r24, 0x50	; 80
 82e:	98 e9       	ldi	r25, 0x98	; 152
 830:	fa dd       	rcall	.-1036   	; 0x426 <_ZL9rf12_xferj>
 832:	87 e7       	ldi	r24, 0x77	; 119
 834:	9c ec       	ldi	r25, 0xCC	; 204
 836:	f7 dd       	rcall	.-1042   	; 0x426 <_ZL9rf12_xferj>
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	90 ee       	ldi	r25, 0xE0	; 224
 83c:	f4 dd       	rcall	.-1048   	; 0x426 <_ZL9rf12_xferj>
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	98 ec       	ldi	r25, 0xC8	; 200
 842:	f1 dd       	rcall	.-1054   	; 0x426 <_ZL9rf12_xferj>
 844:	89 e4       	ldi	r24, 0x49	; 73
 846:	90 ec       	ldi	r25, 0xC0	; 192
 848:	ee dd       	rcall	.-1060   	; 0x426 <_ZL9rf12_xferj>
 84a:	84 e0       	ldi	r24, 0x04	; 4
 84c:	80 93 94 01 	sts	0x0194, r24
 850:	e2 dd       	rcall	.-1084   	; 0x416 <_ZL15allowInterruptsv>
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	08 95       	ret

00000858 <_Z15rf12_initializehhh>:
 858:	1f 93       	push	r17
 85a:	cf 93       	push	r28
 85c:	df 93       	push	r29
 85e:	c8 2f       	mov	r28, r24
 860:	d6 2f       	mov	r29, r22
 862:	14 2f       	mov	r17, r20
 864:	80 93 98 01 	sts	0x0198, r24
 868:	40 93 96 01 	sts	0x0196, r20
 86c:	60 93 99 01 	sts	0x0199, r22
 870:	08 de       	rcall	.-1008   	; 0x482 <_Z12rf12_spiInitv>
 872:	97 df       	rcall	.-210    	; 0x7a2 <_Z21rf12_interruptcontrolv>
 874:	82 e8       	ldi	r24, 0x82	; 130
 876:	9a ec       	ldi	r25, 0xCA	; 202
 878:	d6 dd       	rcall	.-1108   	; 0x426 <_ZL9rf12_xferj>
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	9e ef       	ldi	r25, 0xFE	; 254
 87e:	d3 dd       	rcall	.-1114   	; 0x426 <_ZL9rf12_xferj>
 880:	85 e0       	ldi	r24, 0x05	; 5
 882:	80 93 94 01 	sts	0x0194, r24
 886:	83 b7       	in	r24, 0x33	; 51
 888:	81 7f       	andi	r24, 0xF1	; 241
 88a:	83 bf       	out	0x33, r24	; 51
 88c:	80 91 94 01 	lds	r24, 0x0194
 890:	85 30       	cpi	r24, 0x05	; 5
 892:	59 f4       	brne	.+22     	; 0x8aa <_Z15rf12_initializehhh+0x52>
 894:	93 b7       	in	r25, 0x33	; 51
 896:	91 60       	ori	r25, 0x01	; 1
 898:	93 bf       	out	0x33, r25	; 51
 89a:	88 95       	sleep
 89c:	93 b7       	in	r25, 0x33	; 51
 89e:	9e 7f       	andi	r25, 0xFE	; 254
 8a0:	93 bf       	out	0x33, r25	; 51
 8a2:	90 91 94 01 	lds	r25, 0x0194
 8a6:	95 30       	cpi	r25, 0x05	; 5
 8a8:	a9 f3       	breq	.-22     	; 0x894 <_Z15rf12_initializehhh+0x3c>
 8aa:	41 2f       	mov	r20, r17
 8ac:	6d 2f       	mov	r22, r29
 8ae:	8c 2f       	mov	r24, r28
 8b0:	7f df       	rcall	.-258    	; 0x7b0 <_Z12rf12_restorehhh>
 8b2:	80 91 98 01 	lds	r24, 0x0198
 8b6:	df 91       	pop	r29
 8b8:	cf 91       	pop	r28
 8ba:	1f 91       	pop	r17
 8bc:	08 95       	ret

000008be <_Z16rf12_setWatchdogm>:
/// interrupt in the RFM12 module. Use rf12_wakeup() to check if the wakeup-interrupt
/// fired. This allows very deep sleep states (timer off) while still being able to wakeup
/// because of the external interrupt. The RFM12b wakeup-timer only needs about 1.5µA.
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
 8be:	cf 92       	push	r12
 8c0:	df 92       	push	r13
 8c2:	ef 92       	push	r14
 8c4:	ff 92       	push	r15
 8c6:	cf 93       	push	r28
 8c8:	6b 01       	movw	r12, r22
 8ca:	7c 01       	movw	r14, r24
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
 8cc:	8f ef       	ldi	r24, 0xFF	; 255
 8ce:	c8 16       	cp	r12, r24
 8d0:	d1 04       	cpc	r13, r1
 8d2:	e1 04       	cpc	r14, r1
 8d4:	f1 04       	cpc	r15, r1
 8d6:	79 f0       	breq	.+30     	; 0x8f6 <_Z16rf12_setWatchdogm+0x38>
 8d8:	70 f0       	brcs	.+28     	; 0x8f6 <_Z16rf12_setWatchdogm+0x38>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
 8da:	c0 e0       	ldi	r28, 0x00	; 0
	while (m > 255) {
		r  += 1;
 8dc:	cf 5f       	subi	r28, 0xFF	; 255
		m >>= 1;
 8de:	f6 94       	lsr	r15
 8e0:	e7 94       	ror	r14
 8e2:	d7 94       	ror	r13
 8e4:	c7 94       	ror	r12
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
 8e6:	8f ef       	ldi	r24, 0xFF	; 255
 8e8:	c8 16       	cp	r12, r24
 8ea:	d1 04       	cpc	r13, r1
 8ec:	e1 04       	cpc	r14, r1
 8ee:	f1 04       	cpc	r15, r1
 8f0:	09 f0       	breq	.+2      	; 0x8f4 <_Z16rf12_setWatchdogm+0x36>
 8f2:	a0 f7       	brcc	.-24     	; 0x8dc <_Z16rf12_setWatchdogm+0x1e>
 8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <_Z16rf12_setWatchdogm+0x3a>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
 8f6:	c0 e0       	ldi	r28, 0x00	; 0
		m >>= 1;
	}
	
	// Disable old wakeup-timer if enabled
//	if (bitRead(rfmstate,1)) {
	if ((rfmstate>>1)&0x01){
 8f8:	80 91 92 01 	lds	r24, 0x0192
 8fc:	90 91 93 01 	lds	r25, 0x0193
 900:	81 ff       	sbrs	r24, 1
 902:	0e c0       	rjmp	.+28     	; 0x920 <__stack+0x21>
		//bitClear(rfmstate,1);
		rfmstate &= ~(1 << 1);
 904:	80 91 92 01 	lds	r24, 0x0192
 908:	90 91 93 01 	lds	r25, 0x0193
 90c:	8d 7f       	andi	r24, 0xFD	; 253
 90e:	90 93 93 01 	sts	0x0193, r25
 912:	80 93 92 01 	sts	0x0192, r24
		rf12_xfer(rfmstate);
 916:	80 91 92 01 	lds	r24, 0x0192
 91a:	90 91 93 01 	lds	r25, 0x0193
 91e:	83 dd       	rcall	.-1274   	; 0x426 <_ZL9rf12_xferj>
	}
	
	// enable wakeup call if we have to
	if (m>0) {
 920:	c1 14       	cp	r12, r1
 922:	d1 04       	cpc	r13, r1
 924:	e1 04       	cpc	r14, r1
 926:	f1 04       	cpc	r15, r1
 928:	b1 f0       	breq	.+44     	; 0x956 <__stack+0x57>
		// write time to wakeup-register
		rf12_xfer(RF_WAKEUP_TIMER | (r<<8) | m);
 92a:	3c 2f       	mov	r19, r28
 92c:	20 e0       	ldi	r18, 0x00	; 0
 92e:	d7 01       	movw	r26, r14
 930:	c6 01       	movw	r24, r12
 932:	90 6e       	ori	r25, 0xE0	; 224
 934:	82 2b       	or	r24, r18
 936:	93 2b       	or	r25, r19
 938:	76 dd       	rcall	.-1300   	; 0x426 <_ZL9rf12_xferj>
		// enable wakeup
		//bitSet(rfmstate,1);
		rfmstate |= (1 << 1);
 93a:	80 91 92 01 	lds	r24, 0x0192
 93e:	90 91 93 01 	lds	r25, 0x0193
 942:	82 60       	ori	r24, 0x02	; 2
 944:	90 93 93 01 	sts	0x0193, r25
 948:	80 93 92 01 	sts	0x0192, r24
		rf12_xfer(rfmstate);
 94c:	80 91 92 01 	lds	r24, 0x0192
 950:	90 91 93 01 	lds	r25, 0x0193
 954:	68 dd       	rcall	.-1328   	; 0x426 <_ZL9rf12_xferj>
	}
}
 956:	cf 91       	pop	r28
 958:	ff 90       	pop	r15
 95a:	ef 90       	pop	r14
 95c:	df 90       	pop	r13
 95e:	cf 90       	pop	r12
 960:	08 95       	ret

00000962 <__vector_1>:
	while (!bitRead(PINB, RFM_IRQ - 8))
	rf12_interrupt();
}
#else
*/
ISR(INT0_vect) {
 962:	1f 92       	push	r1
 964:	0f 92       	push	r0
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	0f 92       	push	r0
 96a:	11 24       	eor	r1, r1
 96c:	1f 93       	push	r17
 96e:	2f 93       	push	r18
 970:	3f 93       	push	r19
 972:	4f 93       	push	r20
 974:	5f 93       	push	r21
 976:	6f 93       	push	r22
 978:	7f 93       	push	r23
 97a:	8f 93       	push	r24
 97c:	9f 93       	push	r25
 97e:	af 93       	push	r26
 980:	bf 93       	push	r27
 982:	cf 93       	push	r28
 984:	df 93       	push	r29
 986:	ef 93       	push	r30
 988:	ff 93       	push	r31
/// Requests RFM12 state from RF module and reads back a waiting data byte if there is
/// any.
/// One of two commands accessing SPI, so interrupts disabled in here
/// @param *data Pointer to  byte where to write the received data to (if any)
static uint16_t rf12_xferState (uint8_t *data) {
	blockInterrupts();
 98a:	43 dd       	rcall	.-1402   	; 0x412 <_ZL15blockInterruptsv>

	// writing can take place at full speed, even 8 MHz works
	//bitClear(SS_PORT, cs_pin);
	PORT_RFM_CS &= ~(1<<BIT_RFM_CS); //clear CS
 98c:	2a 98       	cbi	0x05, 2	; 5
	uint16_t res = rf12_byte(0x00) << 8;
 98e:	80 e0       	ldi	r24, 0x00	; 0
 990:	44 dd       	rcall	.-1400   	; 0x41a <_ZL9rf12_byteh>
 992:	d8 2f       	mov	r29, r24
 994:	80 e0       	ldi	r24, 0x00	; 0
 996:	c8 2f       	mov	r28, r24
	res |= rf12_byte(0x00);
 998:	40 dd       	rcall	.-1408   	; 0x41a <_ZL9rf12_byteh>
 99a:	c8 2b       	or	r28, r24
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
 99c:	dd 23       	and	r29, r29
 99e:	2c f4       	brge	.+10     	; 0x9aa <__vector_1+0x48>
 9a0:	80 91 94 01 	lds	r24, 0x0194
 9a4:	87 30       	cpi	r24, 0x07	; 7
 9a6:	09 f4       	brne	.+2      	; 0x9aa <__vector_1+0x48>
 9a8:	0f c1       	rjmp	.+542    	; 0xbc8 <__vector_1+0x266>
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
		#endif
	}
	
	//bitSet(SS_PORT, cs_pin);
	PORT_RFM_CS |= (1 << BIT_RFM_CS); //  bitSet(SS_PORT, cs_pin);
 9aa:	2a 9a       	sbi	0x05, 2	; 5

	allowInterrupts();
 9ac:	34 dd       	rcall	.-1432   	; 0x416 <_ZL15allowInterruptsv>
/// @details
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uint8_t in;
	state = rf12_xferState(&in);
 9ae:	d0 93 91 01 	sts	0x0191, r29
 9b2:	c0 93 90 01 	sts	0x0190, r28

	// data received or byte needed for sending
	if (state & RF_FIFO_BIT) {
 9b6:	20 91 90 01 	lds	r18, 0x0190
 9ba:	30 91 91 01 	lds	r19, 0x0191
 9be:	33 23       	and	r19, r19
 9c0:	0c f0       	brlt	.+2      	; 0x9c4 <__vector_1+0x62>
 9c2:	e1 c0       	rjmp	.+450    	; 0xb86 <__vector_1+0x224>
		
		if (rxstate == TXRECV) {  // we are receiving
 9c4:	80 91 94 01 	lds	r24, 0x0194
 9c8:	87 30       	cpi	r24, 0x07	; 7
 9ca:	09 f0       	breq	.+2      	; 0x9ce <__vector_1+0x6c>
 9cc:	78 c0       	rjmp	.+240    	; 0xabe <__vector_1+0x15c>

			if (rxfill == 0 && group != 0)
 9ce:	80 91 95 01 	lds	r24, 0x0195
 9d2:	81 11       	cpse	r24, r1
 9d4:	04 c0       	rjmp	.+8      	; 0x9de <__vector_1+0x7c>
 9d6:	80 91 96 01 	lds	r24, 0x0196
 9da:	81 11       	cpse	r24, r1
 9dc:	ff c0       	rjmp	.+510    	; 0xbdc <__vector_1+0x27a>
			rf12_buf[rxfill++] = group;

			rf12_buf[rxfill++] = in;
 9de:	80 91 95 01 	lds	r24, 0x0195
 9e2:	e8 2f       	mov	r30, r24
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	ec 5b       	subi	r30, 0xBC	; 188
 9e8:	fe 4f       	sbci	r31, 0xFE	; 254
 9ea:	10 83       	st	Z, r17
 9ec:	8f 5f       	subi	r24, 0xFF	; 255
 9ee:	80 93 95 01 	sts	0x0195, r24
			rf12_crc = _crc16_update(rf12_crc, in);
 9f2:	20 91 8b 01 	lds	r18, 0x018B
 9f6:	30 91 8c 01 	lds	r19, 0x018C
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
 9fa:	21 27       	eor	r18, r17
 9fc:	12 2f       	mov	r17, r18
 9fe:	12 95       	swap	r17
 a00:	12 27       	eor	r17, r18
 a02:	01 2e       	mov	r0, r17
 a04:	16 95       	lsr	r17
 a06:	16 95       	lsr	r17
 a08:	10 25       	eor	r17, r0
 a0a:	01 2e       	mov	r0, r17
 a0c:	16 95       	lsr	r17
 a0e:	10 25       	eor	r17, r0
 a10:	17 70       	andi	r17, 0x07	; 7
 a12:	02 2e       	mov	r0, r18
 a14:	23 2f       	mov	r18, r19
 a16:	16 95       	lsr	r17
 a18:	07 94       	ror	r0
 a1a:	17 95       	ror	r17
 a1c:	30 2d       	mov	r19, r0
 a1e:	21 27       	eor	r18, r17
 a20:	06 94       	lsr	r0
 a22:	17 95       	ror	r17
 a24:	30 25       	eor	r19, r0
 a26:	21 27       	eor	r18, r17
 a28:	30 93 8c 01 	sts	0x018C, r19
 a2c:	20 93 8b 01 	sts	0x018B, r18

			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
 a30:	e0 91 8e 01 	lds	r30, 0x018E
 a34:	e3 30       	cpi	r30, 0x03	; 3
 a36:	18 f5       	brcc	.+70     	; 0xa7e <__vector_1+0x11c>
 a38:	80 91 95 01 	lds	r24, 0x0195
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	02 97       	sbiw	r24, 0x02	; 2
 a40:	60 91 8d 01 	lds	r22, 0x018D
 a44:	70 e0       	ldi	r23, 0x00	; 0
 a46:	92 d1       	rcall	.+804    	; 0xd6c <__divmodhi4>
 a48:	89 2b       	or	r24, r25
 a4a:	09 f4       	brne	.+2      	; 0xa4e <__vector_1+0xec>
 a4c:	d2 c0       	rjmp	.+420    	; 0xbf2 <__vector_1+0x290>
 a4e:	17 c0       	rjmp	.+46     	; 0xa7e <__vector_1+0x11c>
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
 a50:	f0 e0       	ldi	r31, 0x00	; 0
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
 a52:	ea 5c       	subi	r30, 0xCA	; 202
 a54:	fe 4f       	sbci	r31, 0xFE	; 254
				: (drssi_dec_tree[drssi] >> 4);
 a56:	80 81       	ld	r24, Z
 a58:	8f 70       	andi	r24, 0x0F	; 15
 a5a:	06 c0       	rjmp	.+12     	; 0xa68 <__vector_1+0x106>
 a5c:	f0 e0       	ldi	r31, 0x00	; 0
 a5e:	ea 5c       	subi	r30, 0xCA	; 202
 a60:	fe 4f       	sbci	r31, 0xFE	; 254
 a62:	80 81       	ld	r24, Z
 a64:	82 95       	swap	r24
 a66:	8f 70       	andi	r24, 0x0F	; 15
 a68:	80 93 8e 01 	sts	0x018E, r24
				if ( drssi < 3 ) {     // not yet final destination, set new threshold
 a6c:	83 30       	cpi	r24, 0x03	; 3
 a6e:	38 f4       	brcc	.+14     	; 0xa7e <__vector_1+0x11c>
					rf12_xfer(RF_RECV_CONTROL | drssi*2+1);
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	88 0f       	add	r24, r24
 a74:	99 1f       	adc	r25, r25
 a76:	01 96       	adiw	r24, 0x01	; 1
 a78:	80 6a       	ori	r24, 0xA0	; 160
 a7a:	94 69       	ori	r25, 0x94	; 148
 a7c:	d4 dc       	rcall	.-1624   	; 0x426 <_ZL9rf12_xferj>
				}
			}

			// check if we got all the bytes (or maximum packet length was reached)
			if (fixedLength) {
 a7e:	80 91 97 01 	lds	r24, 0x0197
 a82:	88 23       	and	r24, r24
 a84:	59 f0       	breq	.+22     	; 0xa9c <__vector_1+0x13a>
				if (rxfill >= fixedLength || rxfill >= RF_MAX) {
 a86:	90 91 95 01 	lds	r25, 0x0195
 a8a:	98 17       	cp	r25, r24
 a8c:	28 f4       	brcc	.+10     	; 0xa98 <__vector_1+0x136>
 a8e:	80 91 95 01 	lds	r24, 0x0195
 a92:	87 34       	cpi	r24, 0x47	; 71
 a94:	08 f4       	brcc	.+2      	; 0xa98 <__vector_1+0x136>
 a96:	77 c0       	rjmp	.+238    	; 0xb86 <__vector_1+0x224>
					rf12_idle();
 a98:	dd dc       	rcall	.-1606   	; 0x454 <_ZL9rf12_idlev>
 a9a:	75 c0       	rjmp	.+234    	; 0xb86 <__vector_1+0x224>
				}
				} else if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX) {
 a9c:	20 91 95 01 	lds	r18, 0x0195
 aa0:	80 91 46 01 	lds	r24, 0x0146
 aa4:	30 e0       	ldi	r19, 0x00	; 0
 aa6:	90 e0       	ldi	r25, 0x00	; 0
 aa8:	05 96       	adiw	r24, 0x05	; 5
 aaa:	28 17       	cp	r18, r24
 aac:	39 07       	cpc	r19, r25
 aae:	2c f4       	brge	.+10     	; 0xaba <__vector_1+0x158>
 ab0:	80 91 95 01 	lds	r24, 0x0195
 ab4:	87 34       	cpi	r24, 0x47	; 71
 ab6:	08 f4       	brcc	.+2      	; 0xaba <__vector_1+0x158>
 ab8:	66 c0       	rjmp	.+204    	; 0xb86 <__vector_1+0x224>
				rf12_idle();
 aba:	cc dc       	rcall	.-1640   	; 0x454 <_ZL9rf12_idlev>
 abc:	64 c0       	rjmp	.+200    	; 0xb86 <__vector_1+0x224>
			}
			} else {                  // we are sending
			uint8_t out;

			if (rxstate < 0) {
 abe:	80 91 94 01 	lds	r24, 0x0194
 ac2:	88 23       	and	r24, r24
 ac4:	0c f0       	brlt	.+2      	; 0xac8 <__vector_1+0x166>
 ac6:	2f c0       	rjmp	.+94     	; 0xb26 <__vector_1+0x1c4>
				uint8_t pos = 3 + rf12_len + rxstate++;
 ac8:	e0 91 46 01 	lds	r30, 0x0146
 acc:	80 91 94 01 	lds	r24, 0x0194
 ad0:	98 2f       	mov	r25, r24
 ad2:	9f 5f       	subi	r25, 0xFF	; 255
 ad4:	90 93 94 01 	sts	0x0194, r25
 ad8:	ed 5f       	subi	r30, 0xFD	; 253
 ada:	8e 0f       	add	r24, r30
				out = rf12_buf[pos];
 adc:	e8 2f       	mov	r30, r24
 ade:	f0 e0       	ldi	r31, 0x00	; 0
 ae0:	ec 5b       	subi	r30, 0xBC	; 188
 ae2:	fe 4f       	sbci	r31, 0xFE	; 254
 ae4:	80 81       	ld	r24, Z
				rf12_crc = _crc16_update(rf12_crc, out);
 ae6:	20 91 8b 01 	lds	r18, 0x018B
 aea:	30 91 8c 01 	lds	r19, 0x018C
 aee:	28 27       	eor	r18, r24
 af0:	92 2f       	mov	r25, r18
 af2:	92 95       	swap	r25
 af4:	92 27       	eor	r25, r18
 af6:	09 2e       	mov	r0, r25
 af8:	96 95       	lsr	r25
 afa:	96 95       	lsr	r25
 afc:	90 25       	eor	r25, r0
 afe:	09 2e       	mov	r0, r25
 b00:	96 95       	lsr	r25
 b02:	90 25       	eor	r25, r0
 b04:	97 70       	andi	r25, 0x07	; 7
 b06:	02 2e       	mov	r0, r18
 b08:	23 2f       	mov	r18, r19
 b0a:	96 95       	lsr	r25
 b0c:	07 94       	ror	r0
 b0e:	97 95       	ror	r25
 b10:	30 2d       	mov	r19, r0
 b12:	29 27       	eor	r18, r25
 b14:	06 94       	lsr	r0
 b16:	97 95       	ror	r25
 b18:	30 25       	eor	r19, r0
 b1a:	29 27       	eor	r18, r25
 b1c:	30 93 8c 01 	sts	0x018C, r19
 b20:	20 93 8b 01 	sts	0x018B, r18
 b24:	2d c0       	rjmp	.+90     	; 0xb80 <__vector_1+0x21e>
			} else
			switch (rxstate++) {
 b26:	80 91 94 01 	lds	r24, 0x0194
 b2a:	98 2f       	mov	r25, r24
 b2c:	9f 5f       	subi	r25, 0xFF	; 255
 b2e:	90 93 94 01 	sts	0x0194, r25
 b32:	83 30       	cpi	r24, 0x03	; 3
 b34:	09 f1       	breq	.+66     	; 0xb78 <__vector_1+0x216>
 b36:	2c f4       	brge	.+10     	; 0xb42 <__vector_1+0x1e0>
 b38:	88 23       	and	r24, r24
 b3a:	99 f0       	breq	.+38     	; 0xb62 <__vector_1+0x200>
 b3c:	81 30       	cpi	r24, 0x01	; 1
 b3e:	f9 f4       	brne	.+62     	; 0xb7e <__vector_1+0x21c>
 b40:	15 c0       	rjmp	.+42     	; 0xb6c <__vector_1+0x20a>
 b42:	8b 30       	cpi	r24, 0x0B	; 11
 b44:	19 f0       	breq	.+6      	; 0xb4c <__vector_1+0x1ea>
 b46:	8c 30       	cpi	r24, 0x0C	; 12
 b48:	d1 f4       	brne	.+52     	; 0xb7e <__vector_1+0x21c>
 b4a:	02 c0       	rjmp	.+4      	; 0xb50 <__vector_1+0x1ee>
				case TXSYN1: out = 0x2D; break;
 b4c:	8d e2       	ldi	r24, 0x2D	; 45
 b4e:	18 c0       	rjmp	.+48     	; 0xb80 <__vector_1+0x21e>
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
 b50:	80 91 96 01 	lds	r24, 0x0196
 b54:	20 91 46 01 	lds	r18, 0x0146
 b58:	9e ef       	ldi	r25, 0xFE	; 254
 b5a:	92 1b       	sub	r25, r18
 b5c:	90 93 94 01 	sts	0x0194, r25
 b60:	0f c0       	rjmp	.+30     	; 0xb80 <__vector_1+0x21e>
				case TXCRC1: out = rf12_crc; break;
 b62:	80 91 8b 01 	lds	r24, 0x018B
 b66:	90 91 8c 01 	lds	r25, 0x018C
 b6a:	0a c0       	rjmp	.+20     	; 0xb80 <__vector_1+0x21e>
				case TXCRC2: out = rf12_crc >> 8; break;
 b6c:	80 91 8b 01 	lds	r24, 0x018B
 b70:	90 91 8c 01 	lds	r25, 0x018C
 b74:	89 2f       	mov	r24, r25
 b76:	04 c0       	rjmp	.+8      	; 0xb80 <__vector_1+0x21e>
				case TXDONE: rf12_idle(); // fall through
 b78:	6d dc       	rcall	.-1830   	; 0x454 <_ZL9rf12_idlev>
				default:     out = 0xAA;
 b7a:	8a ea       	ldi	r24, 0xAA	; 170
 b7c:	01 c0       	rjmp	.+2      	; 0xb80 <__vector_1+0x21e>
 b7e:	8a ea       	ldi	r24, 0xAA	; 170
			}

			rf12_xfer(RF_TXREG_WRITE | out);
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	98 6b       	ori	r25, 0xB8	; 184
 b84:	50 dc       	rcall	.-1888   	; 0x426 <_ZL9rf12_xferj>
		}
	}
	
	// power-on reset
	if (state & RF_POR_BIT) {
 b86:	80 91 90 01 	lds	r24, 0x0190
 b8a:	90 91 91 01 	lds	r25, 0x0191
 b8e:	96 ff       	sbrs	r25, 6
 b90:	03 c0       	rjmp	.+6      	; 0xb98 <__vector_1+0x236>
		rxstate = POR_RECEIVED;
 b92:	86 e0       	ldi	r24, 0x06	; 6
 b94:	80 93 94 01 	sts	0x0194, r24
	}

	// got wakeup call
	if (state & RF_WDG_BIT) {
 b98:	80 91 90 01 	lds	r24, 0x0190
 b9c:	90 91 91 01 	lds	r25, 0x0191
 ba0:	94 ff       	sbrs	r25, 4
 ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <__vector_1+0x250>
		rf12_setWatchdog(0);
 ba4:	60 e0       	ldi	r22, 0x00	; 0
 ba6:	70 e0       	ldi	r23, 0x00	; 0
 ba8:	cb 01       	movw	r24, r22
 baa:	89 de       	rcall	.-750    	; 0x8be <_Z16rf12_setWatchdogm>
		rf12_gotwakeup = 1;
 bac:	81 e0       	ldi	r24, 0x01	; 1
 bae:	80 93 8f 01 	sts	0x018F, r24
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
 bb2:	80 91 90 01 	lds	r24, 0x0190
 bb6:	90 91 91 01 	lds	r25, 0x0191
 bba:	95 ff       	sbrs	r25, 5
 bbc:	21 c0       	rjmp	.+66     	; 0xc00 <__vector_1+0x29e>
		rf12_idle();
 bbe:	4a dc       	rcall	.-1900   	; 0x454 <_ZL9rf12_idlev>
		rxstate = TXIDLE;
 bc0:	84 e0       	ldi	r24, 0x04	; 4
 bc2:	80 93 94 01 	sts	0x0194, r24
 bc6:	1c c0       	rjmp	.+56     	; 0xc00 <__vector_1+0x29e>
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
		// slow down to under 2.5 MHz
		#if F_CPU > 10000000
		//bitSet(SPCR, SPR0);
		SPCR |= (1 << SPR0); //  bitSet(SPCR, SPR0);
 bc8:	8c b5       	in	r24, 0x2c	; 44
 bca:	81 60       	ori	r24, 0x01	; 1
 bcc:	8c bd       	out	0x2c, r24	; 44
		#endif
		*data = rf12_byte(0x00);
 bce:	80 e0       	ldi	r24, 0x00	; 0
 bd0:	24 dc       	rcall	.-1976   	; 0x41a <_ZL9rf12_byteh>
 bd2:	18 2f       	mov	r17, r24
		#if F_CPU > 10000000
		//bitClear(SPCR, SPR0);
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
 bd4:	8c b5       	in	r24, 0x2c	; 44
 bd6:	8e 7f       	andi	r24, 0xFE	; 254
 bd8:	8c bd       	out	0x2c, r24	; 44
 bda:	e7 ce       	rjmp	.-562    	; 0x9aa <__vector_1+0x48>
	if (state & RF_FIFO_BIT) {
		
		if (rxstate == TXRECV) {  // we are receiving

			if (rxfill == 0 && group != 0)
			rf12_buf[rxfill++] = group;
 bdc:	90 91 95 01 	lds	r25, 0x0195
 be0:	e9 2f       	mov	r30, r25
 be2:	f0 e0       	ldi	r31, 0x00	; 0
 be4:	ec 5b       	subi	r30, 0xBC	; 188
 be6:	fe 4f       	sbci	r31, 0xFE	; 254
 be8:	80 83       	st	Z, r24
 bea:	9f 5f       	subi	r25, 0xFF	; 255
 bec:	90 93 95 01 	sts	0x0195, r25
 bf0:	f6 ce       	rjmp	.-532    	; 0x9de <__vector_1+0x7c>
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
 bf2:	80 91 90 01 	lds	r24, 0x0190
 bf6:	90 91 91 01 	lds	r25, 0x0191
 bfa:	90 fd       	sbrc	r25, 0
 bfc:	29 cf       	rjmp	.-430    	; 0xa50 <__vector_1+0xee>
 bfe:	2e cf       	rjmp	.-420    	; 0xa5c <__vector_1+0xfa>
#else
*/
ISR(INT0_vect) {
	//uart0_puts("I");
	rf12_interrupt();
}
 c00:	ff 91       	pop	r31
 c02:	ef 91       	pop	r30
 c04:	df 91       	pop	r29
 c06:	cf 91       	pop	r28
 c08:	bf 91       	pop	r27
 c0a:	af 91       	pop	r26
 c0c:	9f 91       	pop	r25
 c0e:	8f 91       	pop	r24
 c10:	7f 91       	pop	r23
 c12:	6f 91       	pop	r22
 c14:	5f 91       	pop	r21
 c16:	4f 91       	pop	r20
 c18:	3f 91       	pop	r19
 c1a:	2f 91       	pop	r18
 c1c:	1f 91       	pop	r17
 c1e:	0f 90       	pop	r0
 c20:	0f be       	out	0x3f, r0	; 63
 c22:	0f 90       	pop	r0
 c24:	1f 90       	pop	r1
 c26:	18 95       	reti

00000c28 <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
 c28:	1f 92       	push	r1
 c2a:	0f 92       	push	r0
 c2c:	0f b6       	in	r0, 0x3f	; 63
 c2e:	0f 92       	push	r0
 c30:	11 24       	eor	r1, r1
 c32:	2f 93       	push	r18
 c34:	3f 93       	push	r19
 c36:	4f 93       	push	r20
 c38:	5f 93       	push	r21
 c3a:	8f 93       	push	r24
 c3c:	9f 93       	push	r25
 c3e:	ef 93       	push	r30
 c40:	ff 93       	push	r31
 c42:	40 91 c0 00 	lds	r20, 0x00C0
 c46:	50 91 c6 00 	lds	r21, 0x00C6
 c4a:	48 71       	andi	r20, 0x18	; 24
 c4c:	80 91 9c 01 	lds	r24, 0x019C
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	01 96       	adiw	r24, 0x01	; 1
 c54:	8f 77       	andi	r24, 0x7F	; 127
 c56:	99 27       	eor	r25, r25
 c58:	20 91 9b 01 	lds	r18, 0x019B
 c5c:	30 e0       	ldi	r19, 0x00	; 0
 c5e:	28 17       	cp	r18, r24
 c60:	39 07       	cpc	r19, r25
 c62:	39 f0       	breq	.+14     	; 0xc72 <__vector_18+0x4a>
 c64:	80 93 9c 01 	sts	0x019C, r24
 c68:	fc 01       	movw	r30, r24
 c6a:	e1 56       	subi	r30, 0x61	; 97
 c6c:	fe 4f       	sbci	r31, 0xFE	; 254
 c6e:	50 83       	st	Z, r21
 c70:	01 c0       	rjmp	.+2      	; 0xc74 <__vector_18+0x4c>
 c72:	42 e0       	ldi	r20, 0x02	; 2
 c74:	40 93 9a 01 	sts	0x019A, r20
 c78:	ff 91       	pop	r31
 c7a:	ef 91       	pop	r30
 c7c:	9f 91       	pop	r25
 c7e:	8f 91       	pop	r24
 c80:	5f 91       	pop	r21
 c82:	4f 91       	pop	r20
 c84:	3f 91       	pop	r19
 c86:	2f 91       	pop	r18
 c88:	0f 90       	pop	r0
 c8a:	0f be       	out	0x3f, r0	; 63
 c8c:	0f 90       	pop	r0
 c8e:	1f 90       	pop	r1
 c90:	18 95       	reti

00000c92 <__vector_19>:
 c92:	1f 92       	push	r1
 c94:	0f 92       	push	r0
 c96:	0f b6       	in	r0, 0x3f	; 63
 c98:	0f 92       	push	r0
 c9a:	11 24       	eor	r1, r1
 c9c:	8f 93       	push	r24
 c9e:	9f 93       	push	r25
 ca0:	ef 93       	push	r30
 ca2:	ff 93       	push	r31
 ca4:	90 91 9e 01 	lds	r25, 0x019E
 ca8:	80 91 9d 01 	lds	r24, 0x019D
 cac:	98 17       	cp	r25, r24
 cae:	79 f0       	breq	.+30     	; 0xcce <__vector_19+0x3c>
 cb0:	80 91 9d 01 	lds	r24, 0x019D
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	01 96       	adiw	r24, 0x01	; 1
 cb8:	8f 77       	andi	r24, 0x7F	; 127
 cba:	99 27       	eor	r25, r25
 cbc:	80 93 9d 01 	sts	0x019D, r24
 cc0:	fc 01       	movw	r30, r24
 cc2:	e1 5e       	subi	r30, 0xE1	; 225
 cc4:	fd 4f       	sbci	r31, 0xFD	; 253
 cc6:	80 81       	ld	r24, Z
 cc8:	80 93 c6 00 	sts	0x00C6, r24
 ccc:	05 c0       	rjmp	.+10     	; 0xcd8 <__vector_19+0x46>
 cce:	e1 ec       	ldi	r30, 0xC1	; 193
 cd0:	f0 e0       	ldi	r31, 0x00	; 0
 cd2:	80 81       	ld	r24, Z
 cd4:	8f 7d       	andi	r24, 0xDF	; 223
 cd6:	80 83       	st	Z, r24
 cd8:	ff 91       	pop	r31
 cda:	ef 91       	pop	r30
 cdc:	9f 91       	pop	r25
 cde:	8f 91       	pop	r24
 ce0:	0f 90       	pop	r0
 ce2:	0f be       	out	0x3f, r0	; 63
 ce4:	0f 90       	pop	r0
 ce6:	1f 90       	pop	r1
 ce8:	18 95       	reti

00000cea <uart0_init>:
 cea:	10 92 9e 01 	sts	0x019E, r1
 cee:	10 92 9d 01 	sts	0x019D, r1
 cf2:	10 92 9c 01 	sts	0x019C, r1
 cf6:	10 92 9b 01 	sts	0x019B, r1
 cfa:	99 23       	and	r25, r25
 cfc:	24 f4       	brge	.+8      	; 0xd06 <uart0_init+0x1c>
 cfe:	22 e0       	ldi	r18, 0x02	; 2
 d00:	20 93 c0 00 	sts	0x00C0, r18
 d04:	9f 77       	andi	r25, 0x7F	; 127
 d06:	90 93 c5 00 	sts	0x00C5, r25
 d0a:	80 93 c4 00 	sts	0x00C4, r24
 d0e:	88 e9       	ldi	r24, 0x98	; 152
 d10:	80 93 c1 00 	sts	0x00C1, r24
 d14:	86 e0       	ldi	r24, 0x06	; 6
 d16:	80 93 c2 00 	sts	0x00C2, r24
 d1a:	08 95       	ret

00000d1c <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
 d1c:	60 91 9e 01 	lds	r22, 0x019E
 d20:	70 e0       	ldi	r23, 0x00	; 0
 d22:	6f 5f       	subi	r22, 0xFF	; 255
 d24:	7f 4f       	sbci	r23, 0xFF	; 255
 d26:	6f 77       	andi	r22, 0x7F	; 127
 d28:	77 27       	eor	r23, r23
 d2a:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
 d2c:	20 91 9d 01 	lds	r18, 0x019D
 d30:	30 e0       	ldi	r19, 0x00	; 0
 d32:	24 17       	cp	r18, r20
 d34:	35 07       	cpc	r19, r21
 d36:	d1 f3       	breq	.-12     	; 0xd2c <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
 d38:	fb 01       	movw	r30, r22
 d3a:	e1 5e       	subi	r30, 0xE1	; 225
 d3c:	fd 4f       	sbci	r31, 0xFD	; 253
 d3e:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
 d40:	60 93 9e 01 	sts	0x019E, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
 d44:	e1 ec       	ldi	r30, 0xC1	; 193
 d46:	f0 e0       	ldi	r31, 0x00	; 0
 d48:	80 81       	ld	r24, Z
 d4a:	80 62       	ori	r24, 0x20	; 32
 d4c:	80 83       	st	Z, r24
 d4e:	08 95       	ret

00000d50 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
 d50:	cf 93       	push	r28
 d52:	df 93       	push	r29
 d54:	ec 01       	movw	r28, r24
	while (*s) {
 d56:	88 81       	ld	r24, Y
 d58:	88 23       	and	r24, r24
 d5a:	29 f0       	breq	.+10     	; 0xd66 <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
 d5c:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
 d5e:	de df       	rcall	.-68     	; 0xd1c <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
 d60:	89 91       	ld	r24, Y+
 d62:	81 11       	cpse	r24, r1
 d64:	fc cf       	rjmp	.-8      	; 0xd5e <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
 d66:	df 91       	pop	r29
 d68:	cf 91       	pop	r28
 d6a:	08 95       	ret

00000d6c <__divmodhi4>:
 d6c:	97 fb       	bst	r25, 7
 d6e:	07 2e       	mov	r0, r23
 d70:	16 f4       	brtc	.+4      	; 0xd76 <__divmodhi4+0xa>
 d72:	00 94       	com	r0
 d74:	06 d0       	rcall	.+12     	; 0xd82 <__divmodhi4_neg1>
 d76:	77 fd       	sbrc	r23, 7
 d78:	08 d0       	rcall	.+16     	; 0xd8a <__divmodhi4_neg2>
 d7a:	2d d0       	rcall	.+90     	; 0xdd6 <__udivmodhi4>
 d7c:	07 fc       	sbrc	r0, 7
 d7e:	05 d0       	rcall	.+10     	; 0xd8a <__divmodhi4_neg2>
 d80:	3e f4       	brtc	.+14     	; 0xd90 <__divmodhi4_exit>

00000d82 <__divmodhi4_neg1>:
 d82:	90 95       	com	r25
 d84:	81 95       	neg	r24
 d86:	9f 4f       	sbci	r25, 0xFF	; 255
 d88:	08 95       	ret

00000d8a <__divmodhi4_neg2>:
 d8a:	70 95       	com	r23
 d8c:	61 95       	neg	r22
 d8e:	7f 4f       	sbci	r23, 0xFF	; 255

00000d90 <__divmodhi4_exit>:
 d90:	08 95       	ret

00000d92 <__udivmodsi4>:
 d92:	a1 e2       	ldi	r26, 0x21	; 33
 d94:	1a 2e       	mov	r1, r26
 d96:	aa 1b       	sub	r26, r26
 d98:	bb 1b       	sub	r27, r27
 d9a:	fd 01       	movw	r30, r26
 d9c:	0d c0       	rjmp	.+26     	; 0xdb8 <__udivmodsi4_ep>

00000d9e <__udivmodsi4_loop>:
 d9e:	aa 1f       	adc	r26, r26
 da0:	bb 1f       	adc	r27, r27
 da2:	ee 1f       	adc	r30, r30
 da4:	ff 1f       	adc	r31, r31
 da6:	a2 17       	cp	r26, r18
 da8:	b3 07       	cpc	r27, r19
 daa:	e4 07       	cpc	r30, r20
 dac:	f5 07       	cpc	r31, r21
 dae:	20 f0       	brcs	.+8      	; 0xdb8 <__udivmodsi4_ep>
 db0:	a2 1b       	sub	r26, r18
 db2:	b3 0b       	sbc	r27, r19
 db4:	e4 0b       	sbc	r30, r20
 db6:	f5 0b       	sbc	r31, r21

00000db8 <__udivmodsi4_ep>:
 db8:	66 1f       	adc	r22, r22
 dba:	77 1f       	adc	r23, r23
 dbc:	88 1f       	adc	r24, r24
 dbe:	99 1f       	adc	r25, r25
 dc0:	1a 94       	dec	r1
 dc2:	69 f7       	brne	.-38     	; 0xd9e <__udivmodsi4_loop>
 dc4:	60 95       	com	r22
 dc6:	70 95       	com	r23
 dc8:	80 95       	com	r24
 dca:	90 95       	com	r25
 dcc:	9b 01       	movw	r18, r22
 dce:	ac 01       	movw	r20, r24
 dd0:	bd 01       	movw	r22, r26
 dd2:	cf 01       	movw	r24, r30
 dd4:	08 95       	ret

00000dd6 <__udivmodhi4>:
 dd6:	aa 1b       	sub	r26, r26
 dd8:	bb 1b       	sub	r27, r27
 dda:	51 e1       	ldi	r21, 0x11	; 17
 ddc:	07 c0       	rjmp	.+14     	; 0xdec <__udivmodhi4_ep>

00000dde <__udivmodhi4_loop>:
 dde:	aa 1f       	adc	r26, r26
 de0:	bb 1f       	adc	r27, r27
 de2:	a6 17       	cp	r26, r22
 de4:	b7 07       	cpc	r27, r23
 de6:	10 f0       	brcs	.+4      	; 0xdec <__udivmodhi4_ep>
 de8:	a6 1b       	sub	r26, r22
 dea:	b7 0b       	sbc	r27, r23

00000dec <__udivmodhi4_ep>:
 dec:	88 1f       	adc	r24, r24
 dee:	99 1f       	adc	r25, r25
 df0:	5a 95       	dec	r21
 df2:	a9 f7       	brne	.-22     	; 0xdde <__udivmodhi4_loop>
 df4:	80 95       	com	r24
 df6:	90 95       	com	r25
 df8:	bc 01       	movw	r22, r24
 dfa:	cd 01       	movw	r24, r26
 dfc:	08 95       	ret

00000dfe <memcpy>:
 dfe:	fb 01       	movw	r30, r22
 e00:	dc 01       	movw	r26, r24
 e02:	02 c0       	rjmp	.+4      	; 0xe08 <memcpy+0xa>
 e04:	01 90       	ld	r0, Z+
 e06:	0d 92       	st	X+, r0
 e08:	41 50       	subi	r20, 0x01	; 1
 e0a:	50 40       	sbci	r21, 0x00	; 0
 e0c:	d8 f7       	brcc	.-10     	; 0xe04 <memcpy+0x6>
 e0e:	08 95       	ret

00000e10 <_exit>:
 e10:	f8 94       	cli

00000e12 <__stop_program>:
 e12:	ff cf       	rjmp	.-2      	; 0xe12 <__stop_program>
