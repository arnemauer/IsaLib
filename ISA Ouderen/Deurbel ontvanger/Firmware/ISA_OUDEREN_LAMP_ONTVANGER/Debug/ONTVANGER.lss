
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000a0a  00000a9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015f  0080012a  0080012a  00000ac8  2**0
                  ALLOC
  3 .stab         00000e4c  00000000  00000000  00000ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001c6f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  00001c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002f24  00000000  00000000  00001fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fb1  00000000  00000000  00004efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000220e  00000000  00000000  00005eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000834  00000000  00000000  000080bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000bde  00000000  00000000  000088f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002043  00000000  00000000  000094ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002f0  00000000  00000000  0000b511  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	ac c2       	rjmp	.+1368   	; 0x55e <__vector_1>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8e c0       	rjmp	.+284    	; 0x13a <__vector_7>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	f3 c3       	rjmp	.+2022   	; 0x830 <__vector_18>
  4a:	00 00       	nop
  4c:	26 c4       	rjmp	.+2124   	; 0x89a <__vector_19>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 38       	cpi	r26, 0x89	; 137
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	74 d0       	rcall	.+232    	; 0x184 <main>
  9c:	b4 c4       	rjmp	.+2408   	; 0xa06 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <I2C_init>:
  a0:	88 e4       	ldi	r24, 0x48	; 72
  a2:	80 93 b8 00 	sts	0x00B8, r24
  a6:	08 95       	ret

000000a8 <I2C_start>:
  a8:	ec eb       	ldi	r30, 0xBC	; 188
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
  ae:	94 ea       	ldi	r25, 0xA4	; 164
  b0:	90 83       	st	Z, r25
  b2:	90 81       	ld	r25, Z
  b4:	99 23       	and	r25, r25
  b6:	ec f7       	brge	.-6      	; 0xb2 <I2C_start+0xa>
  b8:	90 91 b9 00 	lds	r25, 0x00B9
  bc:	98 7f       	andi	r25, 0xF8	; 248
  be:	98 30       	cpi	r25, 0x08	; 8
  c0:	a1 f4       	brne	.+40     	; 0xea <I2C_start+0x42>
  c2:	80 93 bb 00 	sts	0x00BB, r24
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	80 93 bc 00 	sts	0x00BC, r24
  cc:	ec eb       	ldi	r30, 0xBC	; 188
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <I2C_start+0x28>
  d6:	90 91 b9 00 	lds	r25, 0x00B9
  da:	98 7f       	andi	r25, 0xF8	; 248
  dc:	98 31       	cpi	r25, 0x18	; 24
  de:	39 f0       	breq	.+14     	; 0xee <I2C_start+0x46>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 34       	cpi	r25, 0x40	; 64
  e4:	29 f4       	brne	.+10     	; 0xf0 <I2C_start+0x48>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	08 95       	ret
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	08 95       	ret

000000f2 <I2C_write>:
  f2:	80 93 bb 00 	sts	0x00BB, r24
  f6:	84 e8       	ldi	r24, 0x84	; 132
  f8:	80 93 bc 00 	sts	0x00BC, r24
  fc:	ec eb       	ldi	r30, 0xBC	; 188
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 23       	and	r24, r24
 104:	ec f7       	brge	.-6      	; 0x100 <I2C_write+0xe>
 106:	90 91 b9 00 	lds	r25, 0x00B9
 10a:	98 7f       	andi	r25, 0xF8	; 248
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	98 32       	cpi	r25, 0x28	; 40
 110:	09 f4       	brne	.+2      	; 0x114 <I2C_write+0x22>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	08 95       	ret

00000116 <I2C_stop>:
 116:	84 e9       	ldi	r24, 0x94	; 148
 118:	80 93 bc 00 	sts	0x00BC, r24
 11c:	08 95       	ret

0000011e <log_s>:
 11e:	1c c4       	rjmp	.+2104   	; 0x958 <uart0_puts>
 120:	08 95       	ret

00000122 <millis_init>:
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 93 b0 00 	sts	0x00B0, r24
 128:	94 e0       	ldi	r25, 0x04	; 4
 12a:	90 93 b1 00 	sts	0x00B1, r25
 12e:	80 93 70 00 	sts	0x0070, r24
 132:	8a ef       	ldi	r24, 0xFA	; 250
 134:	80 93 b3 00 	sts	0x00B3, r24
 138:	08 95       	ret

0000013a <__vector_7>:
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	80 91 2a 01 	lds	r24, 0x012A
 150:	90 91 2b 01 	lds	r25, 0x012B
 154:	a0 91 2c 01 	lds	r26, 0x012C
 158:	b0 91 2d 01 	lds	r27, 0x012D
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	a1 1d       	adc	r26, r1
 160:	b1 1d       	adc	r27, r1
 162:	80 93 2a 01 	sts	0x012A, r24
 166:	90 93 2b 01 	sts	0x012B, r25
 16a:	a0 93 2c 01 	sts	0x012C, r26
 16e:	b0 93 2d 01 	sts	0x012D, r27
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	0f 90       	pop	r0
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	0f 90       	pop	r0
 180:	1f 90       	pop	r1
 182:	18 95       	reti

00000184 <main>:
 184:	78 94       	sei
 186:	cd df       	rcall	.-102    	; 0x122 <millis_init>
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	8b e7       	ldi	r24, 0x7B	; 123
 18c:	92 e9       	ldi	r25, 0x92	; 146
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <main+0xa>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x14>
 198:	00 00       	nop
 19a:	80 e1       	ldi	r24, 0x10	; 16
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	a9 d3       	rcall	.+1874   	; 0x8f2 <uart0_init>
 1a0:	80 e0       	ldi	r24, 0x00	; 0
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	d9 d3       	rcall	.+1970   	; 0x958 <uart0_puts>
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
 1a8:	83 ed       	ldi	r24, 0xD3	; 211
 1aa:	90 e3       	ldi	r25, 0x30	; 48
 1ac:	21 50       	subi	r18, 0x01	; 1
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	90 40       	sbci	r25, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0x28>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0x32>
 1b6:	00 00       	nop
 1b8:	73 df       	rcall	.-282    	; 0xa0 <I2C_init>
 1ba:	1d d0       	rcall	.+58     	; 0x1f6 <pca9635_init>
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	ae df       	rcall	.-164    	; 0x11e <log_s>
 1c2:	2f ef       	ldi	r18, 0xFF	; 255
 1c4:	83 ed       	ldi	r24, 0xD3	; 211
 1c6:	90 e3       	ldi	r25, 0x30	; 48
 1c8:	21 50       	subi	r18, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x44>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x4e>
 1d2:	00 00       	nop
 1d4:	4e e0       	ldi	r20, 0x0E	; 14
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	39 d1       	rcall	.+626    	; 0x44e <_Z15rf12_initializehhh>
 1dc:	8b e0       	ldi	r24, 0x0B	; 11
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	9e df       	rcall	.-196    	; 0x11e <log_s>
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	83 ed       	ldi	r24, 0xD3	; 211
 1e6:	90 e3       	ldi	r25, 0x30	; 48
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x64>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x6e>
 1f2:	00 00       	nop
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <main+0x70>

000001f6 <pca9635_init>:
 1f6:	80 e8       	ldi	r24, 0x80	; 128
 1f8:	57 df       	rcall	.-338    	; 0xa8 <I2C_start>
 1fa:	80 e8       	ldi	r24, 0x80	; 128
 1fc:	7a df       	rcall	.-268    	; 0xf2 <I2C_write>
 1fe:	80 e8       	ldi	r24, 0x80	; 128
 200:	78 df       	rcall	.-272    	; 0xf2 <I2C_write>
 202:	82 e0       	ldi	r24, 0x02	; 2
 204:	76 df       	rcall	.-276    	; 0xf2 <I2C_write>
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	74 df       	rcall	.-280    	; 0xf2 <I2C_write>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	72 df       	rcall	.-284    	; 0xf2 <I2C_write>
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	70 df       	rcall	.-288    	; 0xf2 <I2C_write>
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	6e df       	rcall	.-292    	; 0xf2 <I2C_write>
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	6c df       	rcall	.-296    	; 0xf2 <I2C_write>
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	6a df       	rcall	.-300    	; 0xf2 <I2C_write>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	68 df       	rcall	.-304    	; 0xf2 <I2C_write>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	66 df       	rcall	.-308    	; 0xf2 <I2C_write>
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	64 df       	rcall	.-312    	; 0xf2 <I2C_write>
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	62 df       	rcall	.-316    	; 0xf2 <I2C_write>
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	60 df       	rcall	.-320    	; 0xf2 <I2C_write>
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	5e df       	rcall	.-324    	; 0xf2 <I2C_write>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	5c df       	rcall	.-328    	; 0xf2 <I2C_write>
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	5a df       	rcall	.-332    	; 0xf2 <I2C_write>
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	58 df       	rcall	.-336    	; 0xf2 <I2C_write>
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	56 df       	rcall	.-340    	; 0xf2 <I2C_write>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	54 df       	rcall	.-344    	; 0xf2 <I2C_write>
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	52 df       	rcall	.-348    	; 0xf2 <I2C_write>
 24e:	8a ea       	ldi	r24, 0xAA	; 170
 250:	50 df       	rcall	.-352    	; 0xf2 <I2C_write>
 252:	8a ea       	ldi	r24, 0xAA	; 170
 254:	4e df       	rcall	.-356    	; 0xf2 <I2C_write>
 256:	8a ea       	ldi	r24, 0xAA	; 170
 258:	4c df       	rcall	.-360    	; 0xf2 <I2C_write>
 25a:	8a ea       	ldi	r24, 0xAA	; 170
 25c:	4a df       	rcall	.-364    	; 0xf2 <I2C_write>
 25e:	5b cf       	rjmp	.-330    	; 0x116 <I2C_stop>

00000260 <_ZL15blockInterruptsv>:
 260:	e8 98       	cbi	0x1d, 0	; 29
 262:	08 95       	ret

00000264 <_ZL15allowInterruptsv>:
 264:	e8 9a       	sbi	0x1d, 0	; 29
 266:	08 95       	ret

00000268 <_ZL9rf12_byteh>:
 268:	8e bd       	out	0x2e, r24	; 46
 26a:	0d b4       	in	r0, 0x2d	; 45
 26c:	07 fe       	sbrs	r0, 7
 26e:	fd cf       	rjmp	.-6      	; 0x26a <_ZL9rf12_byteh+0x2>
 270:	8e b5       	in	r24, 0x2e	; 46
 272:	08 95       	ret

00000274 <_ZL9rf12_xferj>:
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	18 2f       	mov	r17, r24
 27c:	c9 2f       	mov	r28, r25
 27e:	f0 df       	rcall	.-32     	; 0x260 <_ZL15blockInterruptsv>
 280:	2a 98       	cbi	0x05, 2	; 5
 282:	8c 2f       	mov	r24, r28
 284:	f1 df       	rcall	.-30     	; 0x268 <_ZL9rf12_byteh>
 286:	d8 2f       	mov	r29, r24
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	c8 2f       	mov	r28, r24
 28c:	81 2f       	mov	r24, r17
 28e:	ec df       	rcall	.-40     	; 0x268 <_ZL9rf12_byteh>
 290:	c8 2b       	or	r28, r24
 292:	2a 9a       	sbi	0x05, 2	; 5
 294:	e7 df       	rcall	.-50     	; 0x264 <_ZL15allowInterruptsv>
 296:	8c 2f       	mov	r24, r28
 298:	9d 2f       	mov	r25, r29
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	1f 91       	pop	r17
 2a0:	08 95       	ret

000002a2 <_ZL9rf12_idlev>:
 2a2:	80 91 7c 01 	lds	r24, 0x017C
 2a6:	90 91 7d 01 	lds	r25, 0x017D
 2aa:	8f 70       	andi	r24, 0x0F	; 15
 2ac:	90 93 7d 01 	sts	0x017D, r25
 2b0:	80 93 7c 01 	sts	0x017C, r24
 2b4:	80 91 7c 01 	lds	r24, 0x017C
 2b8:	90 91 7d 01 	lds	r25, 0x017D
 2bc:	88 60       	ori	r24, 0x08	; 8
 2be:	90 93 7d 01 	sts	0x017D, r25
 2c2:	80 93 7c 01 	sts	0x017C, r24
 2c6:	80 91 7c 01 	lds	r24, 0x017C
 2ca:	90 91 7d 01 	lds	r25, 0x017D
 2ce:	d2 cf       	rjmp	.-92     	; 0x274 <_ZL9rf12_xferj>

000002d0 <_Z12rf12_spiInitv>:
 2d0:	84 b1       	in	r24, 0x04	; 4
 2d2:	8c 62       	ori	r24, 0x2C	; 44
 2d4:	84 b9       	out	0x04, r24	; 4
 2d6:	2a 9a       	sbi	0x05, 2	; 5
 2d8:	24 98       	cbi	0x04, 4	; 4
 2da:	80 e5       	ldi	r24, 0x50	; 80
 2dc:	8c bd       	out	0x2c, r24	; 44
 2de:	8d b5       	in	r24, 0x2d	; 45
 2e0:	81 60       	ori	r24, 0x01	; 1
 2e2:	8d bd       	out	0x2d, r24	; 45
 2e4:	52 98       	cbi	0x0a, 2	; 10
 2e6:	08 95       	ret

000002e8 <_Z15rf12_setBitrateh>:
 2e8:	cf 92       	push	r12
 2ea:	df 92       	push	r13
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	0f 93       	push	r16
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	c8 2f       	mov	r28, r24
 2f8:	08 2f       	mov	r16, r24
 2fa:	10 e0       	ldi	r17, 0x00	; 0
 2fc:	c8 01       	movw	r24, r16
 2fe:	96 6c       	ori	r25, 0xC6	; 198
 300:	b9 df       	rcall	.-142    	; 0x274 <_ZL9rf12_xferj>
 302:	cf 77       	andi	r28, 0x7F	; 127
 304:	2c 2f       	mov	r18, r28
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	2f 5f       	subi	r18, 0xFF	; 255
 30a:	3f 4f       	sbci	r19, 0xFF	; 255
 30c:	44 27       	eor	r20, r20
 30e:	37 fd       	sbrc	r19, 7
 310:	40 95       	com	r20
 312:	54 2f       	mov	r21, r20
 314:	6b ef       	ldi	r22, 0xFB	; 251
 316:	72 e4       	ldi	r23, 0x42	; 66
 318:	85 e0       	ldi	r24, 0x05	; 5
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	3e d3       	rcall	.+1660   	; 0x99a <__udivmodsi4>
 31e:	69 01       	movw	r12, r18
 320:	7a 01       	movw	r14, r20
 322:	c8 01       	movw	r24, r16
 324:	88 0f       	add	r24, r24
 326:	89 2f       	mov	r24, r25
 328:	88 1f       	adc	r24, r24
 32a:	99 0b       	sbc	r25, r25
 32c:	8c 01       	movw	r16, r24
 32e:	00 0f       	add	r16, r16
 330:	11 1f       	adc	r17, r17
 332:	00 0f       	add	r16, r16
 334:	11 1f       	adc	r17, r17
 336:	00 0f       	add	r16, r16
 338:	11 1f       	adc	r17, r17
 33a:	08 1b       	sub	r16, r24
 33c:	19 0b       	sbc	r17, r25
 33e:	0f 5f       	subi	r16, 0xFF	; 255
 340:	1f 4f       	sbci	r17, 0xFF	; 255
 342:	98 01       	movw	r18, r16
 344:	44 27       	eor	r20, r20
 346:	37 fd       	sbrc	r19, 7
 348:	40 95       	com	r20
 34a:	54 2f       	mov	r21, r20
 34c:	c7 01       	movw	r24, r14
 34e:	b6 01       	movw	r22, r12
 350:	24 d3       	rcall	.+1608   	; 0x99a <__udivmodsi4>
 352:	da 01       	movw	r26, r20
 354:	c9 01       	movw	r24, r18
 356:	68 94       	set
 358:	12 f8       	bld	r1, 2
 35a:	b6 95       	lsr	r27
 35c:	a7 95       	ror	r26
 35e:	97 95       	ror	r25
 360:	87 95       	ror	r24
 362:	16 94       	lsr	r1
 364:	d1 f7       	brne	.-12     	; 0x35a <_Z15rf12_setBitrateh+0x72>
 366:	bc 01       	movw	r22, r24
 368:	cd 01       	movw	r24, r26
 36a:	6d 57       	subi	r22, 0x7D	; 125
 36c:	7c 4f       	sbci	r23, 0xFC	; 252
 36e:	8f 4f       	sbci	r24, 0xFF	; 255
 370:	9f 4f       	sbci	r25, 0xFF	; 255
 372:	24 e8       	ldi	r18, 0x84	; 132
 374:	33 e0       	ldi	r19, 0x03	; 3
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	0f d3       	rcall	.+1566   	; 0x99a <__udivmodsi4>
 37c:	20 93 77 01 	sts	0x0177, r18
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	ff 90       	pop	r15
 388:	ef 90       	pop	r14
 38a:	df 90       	pop	r13
 38c:	cf 90       	pop	r12
 38e:	08 95       	ret

00000390 <_Z19rf12_setFixedLengthh>:
 390:	81 11       	cpse	r24, r1
 392:	03 c0       	rjmp	.+6      	; 0x39a <_Z19rf12_setFixedLengthh+0xa>
 394:	10 92 81 01 	sts	0x0181, r1
 398:	08 95       	ret
 39a:	8f 5f       	subi	r24, 0xFF	; 255
 39c:	80 93 81 01 	sts	0x0181, r24
 3a0:	08 95       	ret

000003a2 <_Z21rf12_interruptcontrolv>:
 3a2:	e8 9a       	sbi	0x1d, 0	; 29
 3a4:	08 95       	ret

000003a6 <_Z12rf12_restorehhh>:
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	d6 2f       	mov	r29, r22
 3ac:	c4 2f       	mov	r28, r20
 3ae:	80 93 82 01 	sts	0x0182, r24
 3b2:	40 93 80 01 	sts	0x0180, r20
 3b6:	60 93 83 01 	sts	0x0183, r22
	rf12_idle();
	else {
		rfmstate &= ~B11111000; // make sure everything is switched off (except bod, wkup, clk)
		rf12_xfer(rfmstate);
	}
	rxstate = TXIDLE;
 3ba:	f3 df       	rcall	.-26     	; 0x3a2 <_Z21rf12_interruptcontrolv>
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	e8 df       	rcall	.-48     	; 0x390 <_Z19rf12_setFixedLengthh>
 3c0:	4f df       	rcall	.-354    	; 0x260 <_ZL15blockInterruptsv>
 3c2:	25 e0       	ldi	r18, 0x05	; 5
 3c4:	32 e8       	ldi	r19, 0x82	; 130
 3c6:	30 93 7d 01 	sts	0x017D, r19
 3ca:	20 93 7c 01 	sts	0x017C, r18
 3ce:	80 91 7c 01 	lds	r24, 0x017C
 3d2:	90 91 7d 01 	lds	r25, 0x017D
 3d6:	4e df       	rcall	.-356    	; 0x274 <_ZL9rf12_xferj>
 3d8:	20 e1       	ldi	r18, 0x10	; 16
 3da:	d2 9f       	mul	r29, r18
 3dc:	c0 01       	movw	r24, r0
 3de:	11 24       	eor	r1, r1
 3e0:	87 6c       	ori	r24, 0xC7	; 199
 3e2:	90 68       	ori	r25, 0x80	; 128
 3e4:	47 df       	rcall	.-370    	; 0x274 <_ZL9rf12_xferj>
 3e6:	80 e4       	ldi	r24, 0x40	; 64
 3e8:	96 ea       	ldi	r25, 0xA6	; 166
 3ea:	44 df       	rcall	.-376    	; 0x274 <_ZL9rf12_xferj>
 3ec:	86 e0       	ldi	r24, 0x06	; 6
 3ee:	7c df       	rcall	.-264    	; 0x2e8 <_Z15rf12_setBitrateh>
 3f0:	82 ea       	ldi	r24, 0xA2	; 162
 3f2:	94 e9       	ldi	r25, 0x94	; 148
 3f4:	3f df       	rcall	.-386    	; 0x274 <_ZL9rf12_xferj>
 3f6:	8c ea       	ldi	r24, 0xAC	; 172
 3f8:	92 ec       	ldi	r25, 0xC2	; 194
 3fa:	3c df       	rcall	.-392    	; 0x274 <_ZL9rf12_xferj>
 3fc:	cc 23       	and	r28, r28
 3fe:	41 f0       	breq	.+16     	; 0x410 <_Z12rf12_restorehhh+0x6a>
 400:	83 e8       	ldi	r24, 0x83	; 131
 402:	9a ec       	ldi	r25, 0xCA	; 202
 404:	37 df       	rcall	.-402    	; 0x274 <_ZL9rf12_xferj>
 406:	8c 2f       	mov	r24, r28
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	9e 6c       	ori	r25, 0xCE	; 206
 40c:	33 df       	rcall	.-410    	; 0x274 <_ZL9rf12_xferj>
 40e:	06 c0       	rjmp	.+12     	; 0x41c <_Z12rf12_restorehhh+0x76>
 410:	8b e8       	ldi	r24, 0x8B	; 139
 412:	9a ec       	ldi	r25, 0xCA	; 202
 414:	2f df       	rcall	.-418    	; 0x274 <_ZL9rf12_xferj>
 416:	8d e2       	ldi	r24, 0x2D	; 45
 418:	9e ec       	ldi	r25, 0xCE	; 206
 41a:	2c df       	rcall	.-424    	; 0x274 <_ZL9rf12_xferj>
 41c:	83 e8       	ldi	r24, 0x83	; 131
 41e:	94 ec       	ldi	r25, 0xC4	; 196
 420:	29 df       	rcall	.-430    	; 0x274 <_ZL9rf12_xferj>
 422:	80 e5       	ldi	r24, 0x50	; 80
 424:	98 e9       	ldi	r25, 0x98	; 152
 426:	26 df       	rcall	.-436    	; 0x274 <_ZL9rf12_xferj>
 428:	87 e7       	ldi	r24, 0x77	; 119
 42a:	9c ec       	ldi	r25, 0xCC	; 204
 42c:	23 df       	rcall	.-442    	; 0x274 <_ZL9rf12_xferj>
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	90 ee       	ldi	r25, 0xE0	; 224
 432:	20 df       	rcall	.-448    	; 0x274 <_ZL9rf12_xferj>
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	98 ec       	ldi	r25, 0xC8	; 200
 438:	1d df       	rcall	.-454    	; 0x274 <_ZL9rf12_xferj>
 43a:	89 e4       	ldi	r24, 0x49	; 73
 43c:	90 ec       	ldi	r25, 0xC0	; 192
 43e:	1a df       	rcall	.-460    	; 0x274 <_ZL9rf12_xferj>
 440:	84 e0       	ldi	r24, 0x04	; 4
 442:	80 93 7e 01 	sts	0x017E, r24
 446:	0e df       	rcall	.-484    	; 0x264 <_ZL15allowInterruptsv>
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <_Z15rf12_initializehhh>:
 44e:	1f 93       	push	r17
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	c8 2f       	mov	r28, r24
 456:	d6 2f       	mov	r29, r22
 458:	14 2f       	mov	r17, r20
 45a:	80 93 82 01 	sts	0x0182, r24
 45e:	40 93 80 01 	sts	0x0180, r20
 462:	60 93 83 01 	sts	0x0183, r22
 466:	34 df       	rcall	.-408    	; 0x2d0 <_Z12rf12_spiInitv>
 468:	9c df       	rcall	.-200    	; 0x3a2 <_Z21rf12_interruptcontrolv>
 46a:	82 e8       	ldi	r24, 0x82	; 130
 46c:	9a ec       	ldi	r25, 0xCA	; 202
 46e:	02 df       	rcall	.-508    	; 0x274 <_ZL9rf12_xferj>
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	9e ef       	ldi	r25, 0xFE	; 254
 474:	ff de       	rcall	.-514    	; 0x274 <_ZL9rf12_xferj>
 476:	85 e0       	ldi	r24, 0x05	; 5
 478:	80 93 7e 01 	sts	0x017E, r24
 47c:	83 b7       	in	r24, 0x33	; 51
 47e:	81 7f       	andi	r24, 0xF1	; 241
 480:	83 bf       	out	0x33, r24	; 51
 482:	80 91 7e 01 	lds	r24, 0x017E
 486:	85 30       	cpi	r24, 0x05	; 5
 488:	59 f4       	brne	.+22     	; 0x4a0 <_Z15rf12_initializehhh+0x52>
 48a:	93 b7       	in	r25, 0x33	; 51
 48c:	91 60       	ori	r25, 0x01	; 1
 48e:	93 bf       	out	0x33, r25	; 51
 490:	88 95       	sleep
 492:	93 b7       	in	r25, 0x33	; 51
 494:	9e 7f       	andi	r25, 0xFE	; 254
 496:	93 bf       	out	0x33, r25	; 51
 498:	90 91 7e 01 	lds	r25, 0x017E
 49c:	95 30       	cpi	r25, 0x05	; 5
 49e:	a9 f3       	breq	.-22     	; 0x48a <_Z15rf12_initializehhh+0x3c>
 4a0:	8c e1       	ldi	r24, 0x1C	; 28
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	59 d2       	rcall	.+1202   	; 0x958 <uart0_puts>
 4a6:	41 2f       	mov	r20, r17
 4a8:	6d 2f       	mov	r22, r29
 4aa:	8c 2f       	mov	r24, r28
 4ac:	7c df       	rcall	.-264    	; 0x3a6 <_Z12rf12_restorehhh>
 4ae:	80 91 82 01 	lds	r24, 0x0182
 4b2:	df 91       	pop	r29
 4b4:	cf 91       	pop	r28
 4b6:	1f 91       	pop	r17
 4b8:	08 95       	ret

000004ba <_Z16rf12_setWatchdogm>:
/// interrupt in the RFM12 module. Use rf12_wakeup() to check if the wakeup-interrupt
/// fired. This allows very deep sleep states (timer off) while still being able to wakeup
/// because of the external interrupt. The RFM12b wakeup-timer only needs about 1.5µA.
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
 4ba:	cf 92       	push	r12
 4bc:	df 92       	push	r13
 4be:	ef 92       	push	r14
 4c0:	ff 92       	push	r15
 4c2:	cf 93       	push	r28
 4c4:	6b 01       	movw	r12, r22
 4c6:	7c 01       	movw	r14, r24
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	c8 16       	cp	r12, r24
 4cc:	d1 04       	cpc	r13, r1
 4ce:	e1 04       	cpc	r14, r1
 4d0:	f1 04       	cpc	r15, r1
 4d2:	79 f0       	breq	.+30     	; 0x4f2 <_Z16rf12_setWatchdogm+0x38>
 4d4:	70 f0       	brcs	.+28     	; 0x4f2 <_Z16rf12_setWatchdogm+0x38>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
 4d6:	c0 e0       	ldi	r28, 0x00	; 0
	while (m > 255) {
		r  += 1;
 4d8:	cf 5f       	subi	r28, 0xFF	; 255
		m >>= 1;
 4da:	f6 94       	lsr	r15
 4dc:	e7 94       	ror	r14
 4de:	d7 94       	ror	r13
 4e0:	c7 94       	ror	r12
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
 4e4:	c8 16       	cp	r12, r24
 4e6:	d1 04       	cpc	r13, r1
 4e8:	e1 04       	cpc	r14, r1
 4ea:	f1 04       	cpc	r15, r1
 4ec:	09 f0       	breq	.+2      	; 0x4f0 <_Z16rf12_setWatchdogm+0x36>
 4ee:	a0 f7       	brcc	.-24     	; 0x4d8 <_Z16rf12_setWatchdogm+0x1e>
 4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <_Z16rf12_setWatchdogm+0x3a>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
 4f2:	c0 e0       	ldi	r28, 0x00	; 0
		m >>= 1;
	}
	
	// Disable old wakeup-timer if enabled
//	if (bitRead(rfmstate,1)) {
	if ((rfmstate>>1)&0x01){
 4f4:	80 91 7c 01 	lds	r24, 0x017C
 4f8:	90 91 7d 01 	lds	r25, 0x017D
 4fc:	81 ff       	sbrs	r24, 1
 4fe:	0e c0       	rjmp	.+28     	; 0x51c <_Z16rf12_setWatchdogm+0x62>
		//bitClear(rfmstate,1);
		rfmstate &= ~(1 << 1);
 500:	80 91 7c 01 	lds	r24, 0x017C
 504:	90 91 7d 01 	lds	r25, 0x017D
 508:	8d 7f       	andi	r24, 0xFD	; 253
 50a:	90 93 7d 01 	sts	0x017D, r25
 50e:	80 93 7c 01 	sts	0x017C, r24
		rf12_xfer(rfmstate);
 512:	80 91 7c 01 	lds	r24, 0x017C
 516:	90 91 7d 01 	lds	r25, 0x017D
 51a:	ac de       	rcall	.-680    	; 0x274 <_ZL9rf12_xferj>
	}
	
	// enable wakeup call if we have to
	if (m>0) {
 51c:	c1 14       	cp	r12, r1
 51e:	d1 04       	cpc	r13, r1
 520:	e1 04       	cpc	r14, r1
 522:	f1 04       	cpc	r15, r1
 524:	b1 f0       	breq	.+44     	; 0x552 <_Z16rf12_setWatchdogm+0x98>
		// write time to wakeup-register
		rf12_xfer(RF_WAKEUP_TIMER | (r<<8) | m);
 526:	3c 2f       	mov	r19, r28
 528:	20 e0       	ldi	r18, 0x00	; 0
 52a:	d7 01       	movw	r26, r14
 52c:	c6 01       	movw	r24, r12
 52e:	90 6e       	ori	r25, 0xE0	; 224
 530:	82 2b       	or	r24, r18
 532:	93 2b       	or	r25, r19
 534:	9f de       	rcall	.-706    	; 0x274 <_ZL9rf12_xferj>
		// enable wakeup
		//bitSet(rfmstate,1);
		rfmstate |= (1 << 1);
 536:	80 91 7c 01 	lds	r24, 0x017C
 53a:	90 91 7d 01 	lds	r25, 0x017D
 53e:	82 60       	ori	r24, 0x02	; 2
 540:	90 93 7d 01 	sts	0x017D, r25
 544:	80 93 7c 01 	sts	0x017C, r24
		rf12_xfer(rfmstate);
 548:	80 91 7c 01 	lds	r24, 0x017C
 54c:	90 91 7d 01 	lds	r25, 0x017D
 550:	91 de       	rcall	.-734    	; 0x274 <_ZL9rf12_xferj>
	}
}
 552:	cf 91       	pop	r28
 554:	ff 90       	pop	r15
 556:	ef 90       	pop	r14
 558:	df 90       	pop	r13
 55a:	cf 90       	pop	r12
 55c:	08 95       	ret

0000055e <__vector_1>:
	while (!bitRead(PINB, RFM_IRQ - 8))
	rf12_interrupt();
}
#else
*/
ISR(INT0_vect) {
 55e:	1f 92       	push	r1
 560:	0f 92       	push	r0
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	1f 93       	push	r17
 56a:	2f 93       	push	r18
 56c:	3f 93       	push	r19
 56e:	4f 93       	push	r20
 570:	5f 93       	push	r21
 572:	6f 93       	push	r22
 574:	7f 93       	push	r23
 576:	8f 93       	push	r24
 578:	9f 93       	push	r25
 57a:	af 93       	push	r26
 57c:	bf 93       	push	r27
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	ef 93       	push	r30
 584:	ff 93       	push	r31
		uart0_puts("INT");
 586:	82 e2       	ldi	r24, 0x22	; 34
 588:	91 e0       	ldi	r25, 0x01	; 1
 58a:	e6 d1       	rcall	.+972    	; 0x958 <uart0_puts>

/// @details
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uart0_puts("INT");
 58c:	82 e2       	ldi	r24, 0x22	; 34
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	e3 d1       	rcall	.+966    	; 0x958 <uart0_puts>
/// Requests RFM12 state from RF module and reads back a waiting data byte if there is
/// any.
/// One of two commands accessing SPI, so interrupts disabled in here
/// @param *data Pointer to  byte where to write the received data to (if any)
static uint16_t rf12_xferState (uint8_t *data) {
	blockInterrupts();
 592:	66 de       	rcall	.-820    	; 0x260 <_ZL15blockInterruptsv>

	// writing can take place at full speed, even 8 MHz works
	//bitClear(SS_PORT, cs_pin);
	PORT_RFM_CS &= ~(1<<BIT_RFM_CS); //clear CS
 594:	2a 98       	cbi	0x05, 2	; 5
	uint16_t res = rf12_byte(0x00) << 8;
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	67 de       	rcall	.-818    	; 0x268 <_ZL9rf12_byteh>
 59a:	d8 2f       	mov	r29, r24
 59c:	80 e0       	ldi	r24, 0x00	; 0
 59e:	c8 2f       	mov	r28, r24
	res |= rf12_byte(0x00);
 5a0:	63 de       	rcall	.-826    	; 0x268 <_ZL9rf12_byteh>
 5a2:	c8 2b       	or	r28, r24
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
 5a4:	dd 23       	and	r29, r29
 5a6:	2c f4       	brge	.+10     	; 0x5b2 <__vector_1+0x54>
 5a8:	80 91 7e 01 	lds	r24, 0x017E
 5ac:	87 30       	cpi	r24, 0x07	; 7
 5ae:	09 f4       	brne	.+2      	; 0x5b2 <__vector_1+0x54>
 5b0:	0f c1       	rjmp	.+542    	; 0x7d0 <__vector_1+0x272>
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
		#endif
	}
	
	//bitSet(SS_PORT, cs_pin);
	PORT_RFM_CS |= (1 << BIT_RFM_CS); //  bitSet(SS_PORT, cs_pin);
 5b2:	2a 9a       	sbi	0x05, 2	; 5

	allowInterrupts();
 5b4:	57 de       	rcall	.-850    	; 0x264 <_ZL15allowInterruptsv>
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uart0_puts("INT");
	uint8_t in;
	state = rf12_xferState(&in);
 5b6:	d0 93 7b 01 	sts	0x017B, r29
 5ba:	c0 93 7a 01 	sts	0x017A, r28

	// data received or byte needed for sending
	if (state & RF_FIFO_BIT) {
 5be:	20 91 7a 01 	lds	r18, 0x017A
 5c2:	30 91 7b 01 	lds	r19, 0x017B
 5c6:	33 23       	and	r19, r19
 5c8:	0c f0       	brlt	.+2      	; 0x5cc <__vector_1+0x6e>
 5ca:	e1 c0       	rjmp	.+450    	; 0x78e <__vector_1+0x230>
		
		if (rxstate == TXRECV) {  // we are receiving
 5cc:	80 91 7e 01 	lds	r24, 0x017E
 5d0:	87 30       	cpi	r24, 0x07	; 7
 5d2:	09 f0       	breq	.+2      	; 0x5d6 <__vector_1+0x78>
 5d4:	78 c0       	rjmp	.+240    	; 0x6c6 <__vector_1+0x168>

			if (rxfill == 0 && group != 0)
 5d6:	80 91 7f 01 	lds	r24, 0x017F
 5da:	81 11       	cpse	r24, r1
 5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <__vector_1+0x88>
 5de:	80 91 80 01 	lds	r24, 0x0180
 5e2:	81 11       	cpse	r24, r1
 5e4:	ff c0       	rjmp	.+510    	; 0x7e4 <__vector_1+0x286>
			rf12_buf[rxfill++] = group;

			rf12_buf[rxfill++] = in;
 5e6:	80 91 7f 01 	lds	r24, 0x017F
 5ea:	e8 2f       	mov	r30, r24
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	e2 5d       	subi	r30, 0xD2	; 210
 5f0:	fe 4f       	sbci	r31, 0xFE	; 254
 5f2:	10 83       	st	Z, r17
 5f4:	8f 5f       	subi	r24, 0xFF	; 255
 5f6:	80 93 7f 01 	sts	0x017F, r24
			rf12_crc = _crc16_update(rf12_crc, in);
 5fa:	20 91 75 01 	lds	r18, 0x0175
 5fe:	30 91 76 01 	lds	r19, 0x0176
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
 602:	21 27       	eor	r18, r17
 604:	12 2f       	mov	r17, r18
 606:	12 95       	swap	r17
 608:	12 27       	eor	r17, r18
 60a:	01 2e       	mov	r0, r17
 60c:	16 95       	lsr	r17
 60e:	16 95       	lsr	r17
 610:	10 25       	eor	r17, r0
 612:	01 2e       	mov	r0, r17
 614:	16 95       	lsr	r17
 616:	10 25       	eor	r17, r0
 618:	17 70       	andi	r17, 0x07	; 7
 61a:	02 2e       	mov	r0, r18
 61c:	23 2f       	mov	r18, r19
 61e:	16 95       	lsr	r17
 620:	07 94       	ror	r0
 622:	17 95       	ror	r17
 624:	30 2d       	mov	r19, r0
 626:	21 27       	eor	r18, r17
 628:	06 94       	lsr	r0
 62a:	17 95       	ror	r17
 62c:	30 25       	eor	r19, r0
 62e:	21 27       	eor	r18, r17
 630:	30 93 76 01 	sts	0x0176, r19
 634:	20 93 75 01 	sts	0x0175, r18

			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
 638:	e0 91 78 01 	lds	r30, 0x0178
 63c:	e3 30       	cpi	r30, 0x03	; 3
 63e:	18 f5       	brcc	.+70     	; 0x686 <__vector_1+0x128>
 640:	80 91 7f 01 	lds	r24, 0x017F
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	02 97       	sbiw	r24, 0x02	; 2
 648:	60 91 77 01 	lds	r22, 0x0177
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	92 d1       	rcall	.+804    	; 0x974 <__divmodhi4>
 650:	89 2b       	or	r24, r25
 652:	09 f4       	brne	.+2      	; 0x656 <__vector_1+0xf8>
 654:	d2 c0       	rjmp	.+420    	; 0x7fa <__vector_1+0x29c>
 656:	17 c0       	rjmp	.+46     	; 0x686 <__vector_1+0x128>
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
 658:	f0 e0       	ldi	r31, 0x00	; 0
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
 65a:	ea 5d       	subi	r30, 0xDA	; 218
 65c:	fe 4f       	sbci	r31, 0xFE	; 254
				: (drssi_dec_tree[drssi] >> 4);
 65e:	80 81       	ld	r24, Z
 660:	8f 70       	andi	r24, 0x0F	; 15
 662:	06 c0       	rjmp	.+12     	; 0x670 <__vector_1+0x112>
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	ea 5d       	subi	r30, 0xDA	; 218
 668:	fe 4f       	sbci	r31, 0xFE	; 254
 66a:	80 81       	ld	r24, Z
 66c:	82 95       	swap	r24
 66e:	8f 70       	andi	r24, 0x0F	; 15
 670:	80 93 78 01 	sts	0x0178, r24
				if ( drssi < 3 ) {     // not yet final destination, set new threshold
 674:	83 30       	cpi	r24, 0x03	; 3
 676:	38 f4       	brcc	.+14     	; 0x686 <__vector_1+0x128>
					rf12_xfer(RF_RECV_CONTROL | drssi*2+1);
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	80 6a       	ori	r24, 0xA0	; 160
 682:	94 69       	ori	r25, 0x94	; 148
 684:	f7 dd       	rcall	.-1042   	; 0x274 <_ZL9rf12_xferj>
				}
			}

			// check if we got all the bytes (or maximum packet length was reached)
			if (fixedLength) {
 686:	80 91 81 01 	lds	r24, 0x0181
 68a:	88 23       	and	r24, r24
 68c:	59 f0       	breq	.+22     	; 0x6a4 <__vector_1+0x146>
				if (rxfill >= fixedLength || rxfill >= RF_MAX) {
 68e:	90 91 7f 01 	lds	r25, 0x017F
 692:	98 17       	cp	r25, r24
 694:	28 f4       	brcc	.+10     	; 0x6a0 <__vector_1+0x142>
 696:	80 91 7f 01 	lds	r24, 0x017F
 69a:	87 34       	cpi	r24, 0x47	; 71
 69c:	08 f4       	brcc	.+2      	; 0x6a0 <__vector_1+0x142>
 69e:	77 c0       	rjmp	.+238    	; 0x78e <__vector_1+0x230>
					rf12_idle();
 6a0:	00 de       	rcall	.-1024   	; 0x2a2 <_ZL9rf12_idlev>
 6a2:	75 c0       	rjmp	.+234    	; 0x78e <__vector_1+0x230>
				}
				} else if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX) {
 6a4:	20 91 7f 01 	lds	r18, 0x017F
 6a8:	80 91 30 01 	lds	r24, 0x0130
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	05 96       	adiw	r24, 0x05	; 5
 6b2:	28 17       	cp	r18, r24
 6b4:	39 07       	cpc	r19, r25
 6b6:	2c f4       	brge	.+10     	; 0x6c2 <__vector_1+0x164>
 6b8:	80 91 7f 01 	lds	r24, 0x017F
 6bc:	87 34       	cpi	r24, 0x47	; 71
 6be:	08 f4       	brcc	.+2      	; 0x6c2 <__vector_1+0x164>
 6c0:	66 c0       	rjmp	.+204    	; 0x78e <__vector_1+0x230>
				rf12_idle();
 6c2:	ef dd       	rcall	.-1058   	; 0x2a2 <_ZL9rf12_idlev>
 6c4:	64 c0       	rjmp	.+200    	; 0x78e <__vector_1+0x230>
			}
			} else {                  // we are sending
			uint8_t out;

			if (rxstate < 0) {
 6c6:	80 91 7e 01 	lds	r24, 0x017E
 6ca:	88 23       	and	r24, r24
 6cc:	0c f0       	brlt	.+2      	; 0x6d0 <__vector_1+0x172>
 6ce:	2f c0       	rjmp	.+94     	; 0x72e <__vector_1+0x1d0>
				uint8_t pos = 3 + rf12_len + rxstate++;
 6d0:	e0 91 30 01 	lds	r30, 0x0130
 6d4:	80 91 7e 01 	lds	r24, 0x017E
 6d8:	98 2f       	mov	r25, r24
 6da:	9f 5f       	subi	r25, 0xFF	; 255
 6dc:	90 93 7e 01 	sts	0x017E, r25
 6e0:	ed 5f       	subi	r30, 0xFD	; 253
 6e2:	8e 0f       	add	r24, r30
				out = rf12_buf[pos];
 6e4:	e8 2f       	mov	r30, r24
 6e6:	f0 e0       	ldi	r31, 0x00	; 0
 6e8:	e2 5d       	subi	r30, 0xD2	; 210
 6ea:	fe 4f       	sbci	r31, 0xFE	; 254
 6ec:	80 81       	ld	r24, Z
				rf12_crc = _crc16_update(rf12_crc, out);
 6ee:	20 91 75 01 	lds	r18, 0x0175
 6f2:	30 91 76 01 	lds	r19, 0x0176
 6f6:	28 27       	eor	r18, r24
 6f8:	92 2f       	mov	r25, r18
 6fa:	92 95       	swap	r25
 6fc:	92 27       	eor	r25, r18
 6fe:	09 2e       	mov	r0, r25
 700:	96 95       	lsr	r25
 702:	96 95       	lsr	r25
 704:	90 25       	eor	r25, r0
 706:	09 2e       	mov	r0, r25
 708:	96 95       	lsr	r25
 70a:	90 25       	eor	r25, r0
 70c:	97 70       	andi	r25, 0x07	; 7
 70e:	02 2e       	mov	r0, r18
 710:	23 2f       	mov	r18, r19
 712:	96 95       	lsr	r25
 714:	07 94       	ror	r0
 716:	97 95       	ror	r25
 718:	30 2d       	mov	r19, r0
 71a:	29 27       	eor	r18, r25
 71c:	06 94       	lsr	r0
 71e:	97 95       	ror	r25
 720:	30 25       	eor	r19, r0
 722:	29 27       	eor	r18, r25
 724:	30 93 76 01 	sts	0x0176, r19
 728:	20 93 75 01 	sts	0x0175, r18
 72c:	2d c0       	rjmp	.+90     	; 0x788 <__vector_1+0x22a>
			} else
			switch (rxstate++) {
 72e:	80 91 7e 01 	lds	r24, 0x017E
 732:	98 2f       	mov	r25, r24
 734:	9f 5f       	subi	r25, 0xFF	; 255
 736:	90 93 7e 01 	sts	0x017E, r25
 73a:	83 30       	cpi	r24, 0x03	; 3
 73c:	09 f1       	breq	.+66     	; 0x780 <__vector_1+0x222>
 73e:	2c f4       	brge	.+10     	; 0x74a <__vector_1+0x1ec>
 740:	88 23       	and	r24, r24
 742:	99 f0       	breq	.+38     	; 0x76a <__vector_1+0x20c>
 744:	81 30       	cpi	r24, 0x01	; 1
 746:	f9 f4       	brne	.+62     	; 0x786 <__vector_1+0x228>
 748:	15 c0       	rjmp	.+42     	; 0x774 <__vector_1+0x216>
 74a:	8b 30       	cpi	r24, 0x0B	; 11
 74c:	19 f0       	breq	.+6      	; 0x754 <__vector_1+0x1f6>
 74e:	8c 30       	cpi	r24, 0x0C	; 12
 750:	d1 f4       	brne	.+52     	; 0x786 <__vector_1+0x228>
 752:	02 c0       	rjmp	.+4      	; 0x758 <__vector_1+0x1fa>
				case TXSYN1: out = 0x2D; break;
 754:	8d e2       	ldi	r24, 0x2D	; 45
 756:	18 c0       	rjmp	.+48     	; 0x788 <__vector_1+0x22a>
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
 758:	80 91 80 01 	lds	r24, 0x0180
 75c:	20 91 30 01 	lds	r18, 0x0130
 760:	9e ef       	ldi	r25, 0xFE	; 254
 762:	92 1b       	sub	r25, r18
 764:	90 93 7e 01 	sts	0x017E, r25
 768:	0f c0       	rjmp	.+30     	; 0x788 <__vector_1+0x22a>
				case TXCRC1: out = rf12_crc; break;
 76a:	80 91 75 01 	lds	r24, 0x0175
 76e:	90 91 76 01 	lds	r25, 0x0176
 772:	0a c0       	rjmp	.+20     	; 0x788 <__vector_1+0x22a>
				case TXCRC2: out = rf12_crc >> 8; break;
 774:	80 91 75 01 	lds	r24, 0x0175
 778:	90 91 76 01 	lds	r25, 0x0176
 77c:	89 2f       	mov	r24, r25
 77e:	04 c0       	rjmp	.+8      	; 0x788 <__vector_1+0x22a>
				case TXDONE: rf12_idle(); // fall through
 780:	90 dd       	rcall	.-1248   	; 0x2a2 <_ZL9rf12_idlev>
				default:     out = 0xAA;
 782:	8a ea       	ldi	r24, 0xAA	; 170
 784:	01 c0       	rjmp	.+2      	; 0x788 <__vector_1+0x22a>
 786:	8a ea       	ldi	r24, 0xAA	; 170
			}

			rf12_xfer(RF_TXREG_WRITE | out);
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	98 6b       	ori	r25, 0xB8	; 184
 78c:	73 dd       	rcall	.-1306   	; 0x274 <_ZL9rf12_xferj>
		}
	}
	
	// power-on reset
	if (state & RF_POR_BIT) {
 78e:	80 91 7a 01 	lds	r24, 0x017A
 792:	90 91 7b 01 	lds	r25, 0x017B
 796:	96 ff       	sbrs	r25, 6
 798:	03 c0       	rjmp	.+6      	; 0x7a0 <__vector_1+0x242>
		rxstate = POR_RECEIVED;
 79a:	86 e0       	ldi	r24, 0x06	; 6
 79c:	80 93 7e 01 	sts	0x017E, r24
	}
	
	// got wakeup call
	if (state & RF_WDG_BIT) {
 7a0:	80 91 7a 01 	lds	r24, 0x017A
 7a4:	90 91 7b 01 	lds	r25, 0x017B
 7a8:	94 ff       	sbrs	r25, 4
 7aa:	07 c0       	rjmp	.+14     	; 0x7ba <__vector_1+0x25c>
		rf12_setWatchdog(0);
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	70 e0       	ldi	r23, 0x00	; 0
 7b0:	cb 01       	movw	r24, r22
 7b2:	83 de       	rcall	.-762    	; 0x4ba <_Z16rf12_setWatchdogm>
		rf12_gotwakeup = 1;
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	80 93 79 01 	sts	0x0179, r24
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
 7ba:	80 91 7a 01 	lds	r24, 0x017A
 7be:	90 91 7b 01 	lds	r25, 0x017B
 7c2:	95 ff       	sbrs	r25, 5
 7c4:	21 c0       	rjmp	.+66     	; 0x808 <__vector_1+0x2aa>
		rf12_idle();
 7c6:	6d dd       	rcall	.-1318   	; 0x2a2 <_ZL9rf12_idlev>
		rxstate = TXIDLE;
 7c8:	84 e0       	ldi	r24, 0x04	; 4
 7ca:	80 93 7e 01 	sts	0x017E, r24
 7ce:	1c c0       	rjmp	.+56     	; 0x808 <__vector_1+0x2aa>
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
		// slow down to under 2.5 MHz
		#if F_CPU > 10000000
		//bitSet(SPCR, SPR0);
		SPCR |= (1 << SPR0); //  bitSet(SPCR, SPR0);
 7d0:	8c b5       	in	r24, 0x2c	; 44
 7d2:	81 60       	ori	r24, 0x01	; 1
 7d4:	8c bd       	out	0x2c, r24	; 44
		#endif
		*data = rf12_byte(0x00);
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	47 dd       	rcall	.-1394   	; 0x268 <_ZL9rf12_byteh>
 7da:	18 2f       	mov	r17, r24
		#if F_CPU > 10000000
		//bitClear(SPCR, SPR0);
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
 7dc:	8c b5       	in	r24, 0x2c	; 44
 7de:	8e 7f       	andi	r24, 0xFE	; 254
 7e0:	8c bd       	out	0x2c, r24	; 44
 7e2:	e7 ce       	rjmp	.-562    	; 0x5b2 <__vector_1+0x54>
	if (state & RF_FIFO_BIT) {
		
		if (rxstate == TXRECV) {  // we are receiving

			if (rxfill == 0 && group != 0)
			rf12_buf[rxfill++] = group;
 7e4:	90 91 7f 01 	lds	r25, 0x017F
 7e8:	e9 2f       	mov	r30, r25
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	e2 5d       	subi	r30, 0xD2	; 210
 7ee:	fe 4f       	sbci	r31, 0xFE	; 254
 7f0:	80 83       	st	Z, r24
 7f2:	9f 5f       	subi	r25, 0xFF	; 255
 7f4:	90 93 7f 01 	sts	0x017F, r25
 7f8:	f6 ce       	rjmp	.-532    	; 0x5e6 <__vector_1+0x88>
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
 7fa:	80 91 7a 01 	lds	r24, 0x017A
 7fe:	90 91 7b 01 	lds	r25, 0x017B
 802:	90 fd       	sbrc	r25, 0
 804:	29 cf       	rjmp	.-430    	; 0x658 <__vector_1+0xfa>
 806:	2e cf       	rjmp	.-420    	; 0x664 <__vector_1+0x106>
		uart0_puts("INT");
	//while (!bitRead(PINC, RFM_IRQ - 14))
	//LED_PORT |= (1 << LED_BIT);  // led aan	
	//while(!(PIN_RFM_IRQ & (1<<BIT_RFM_IRQ)))
	rf12_interrupt();
}
 808:	ff 91       	pop	r31
 80a:	ef 91       	pop	r30
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	bf 91       	pop	r27
 812:	af 91       	pop	r26
 814:	9f 91       	pop	r25
 816:	8f 91       	pop	r24
 818:	7f 91       	pop	r23
 81a:	6f 91       	pop	r22
 81c:	5f 91       	pop	r21
 81e:	4f 91       	pop	r20
 820:	3f 91       	pop	r19
 822:	2f 91       	pop	r18
 824:	1f 91       	pop	r17
 826:	0f 90       	pop	r0
 828:	0f be       	out	0x3f, r0	; 63
 82a:	0f 90       	pop	r0
 82c:	1f 90       	pop	r1
 82e:	18 95       	reti

00000830 <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
 830:	1f 92       	push	r1
 832:	0f 92       	push	r0
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	0f 92       	push	r0
 838:	11 24       	eor	r1, r1
 83a:	2f 93       	push	r18
 83c:	3f 93       	push	r19
 83e:	4f 93       	push	r20
 840:	5f 93       	push	r21
 842:	8f 93       	push	r24
 844:	9f 93       	push	r25
 846:	ef 93       	push	r30
 848:	ff 93       	push	r31
 84a:	40 91 c0 00 	lds	r20, 0x00C0
 84e:	50 91 c6 00 	lds	r21, 0x00C6
 852:	48 71       	andi	r20, 0x18	; 24
 854:	80 91 86 01 	lds	r24, 0x0186
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	01 96       	adiw	r24, 0x01	; 1
 85c:	8f 77       	andi	r24, 0x7F	; 127
 85e:	99 27       	eor	r25, r25
 860:	20 91 85 01 	lds	r18, 0x0185
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	28 17       	cp	r18, r24
 868:	39 07       	cpc	r19, r25
 86a:	39 f0       	breq	.+14     	; 0x87a <__vector_18+0x4a>
 86c:	80 93 86 01 	sts	0x0186, r24
 870:	fc 01       	movw	r30, r24
 872:	e7 57       	subi	r30, 0x77	; 119
 874:	fe 4f       	sbci	r31, 0xFE	; 254
 876:	50 83       	st	Z, r21
 878:	01 c0       	rjmp	.+2      	; 0x87c <__vector_18+0x4c>
 87a:	42 e0       	ldi	r20, 0x02	; 2
 87c:	40 93 84 01 	sts	0x0184, r20
 880:	ff 91       	pop	r31
 882:	ef 91       	pop	r30
 884:	9f 91       	pop	r25
 886:	8f 91       	pop	r24
 888:	5f 91       	pop	r21
 88a:	4f 91       	pop	r20
 88c:	3f 91       	pop	r19
 88e:	2f 91       	pop	r18
 890:	0f 90       	pop	r0
 892:	0f be       	out	0x3f, r0	; 63
 894:	0f 90       	pop	r0
 896:	1f 90       	pop	r1
 898:	18 95       	reti

0000089a <__vector_19>:
 89a:	1f 92       	push	r1
 89c:	0f 92       	push	r0
 89e:	0f b6       	in	r0, 0x3f	; 63
 8a0:	0f 92       	push	r0
 8a2:	11 24       	eor	r1, r1
 8a4:	8f 93       	push	r24
 8a6:	9f 93       	push	r25
 8a8:	ef 93       	push	r30
 8aa:	ff 93       	push	r31
 8ac:	90 91 88 01 	lds	r25, 0x0188
 8b0:	80 91 87 01 	lds	r24, 0x0187
 8b4:	98 17       	cp	r25, r24
 8b6:	79 f0       	breq	.+30     	; 0x8d6 <__vector_19+0x3c>
 8b8:	80 91 87 01 	lds	r24, 0x0187
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	01 96       	adiw	r24, 0x01	; 1
 8c0:	8f 77       	andi	r24, 0x7F	; 127
 8c2:	99 27       	eor	r25, r25
 8c4:	80 93 87 01 	sts	0x0187, r24
 8c8:	fc 01       	movw	r30, r24
 8ca:	e7 5f       	subi	r30, 0xF7	; 247
 8cc:	fd 4f       	sbci	r31, 0xFD	; 253
 8ce:	80 81       	ld	r24, Z
 8d0:	80 93 c6 00 	sts	0x00C6, r24
 8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <__vector_19+0x46>
 8d6:	e1 ec       	ldi	r30, 0xC1	; 193
 8d8:	f0 e0       	ldi	r31, 0x00	; 0
 8da:	80 81       	ld	r24, Z
 8dc:	8f 7d       	andi	r24, 0xDF	; 223
 8de:	80 83       	st	Z, r24
 8e0:	ff 91       	pop	r31
 8e2:	ef 91       	pop	r30
 8e4:	9f 91       	pop	r25
 8e6:	8f 91       	pop	r24
 8e8:	0f 90       	pop	r0
 8ea:	0f be       	out	0x3f, r0	; 63
 8ec:	0f 90       	pop	r0
 8ee:	1f 90       	pop	r1
 8f0:	18 95       	reti

000008f2 <uart0_init>:
 8f2:	10 92 88 01 	sts	0x0188, r1
 8f6:	10 92 87 01 	sts	0x0187, r1
 8fa:	10 92 86 01 	sts	0x0186, r1
 8fe:	10 92 85 01 	sts	0x0185, r1
 902:	99 23       	and	r25, r25
 904:	24 f4       	brge	.+8      	; 0x90e <__stack+0xf>
 906:	22 e0       	ldi	r18, 0x02	; 2
 908:	20 93 c0 00 	sts	0x00C0, r18
 90c:	9f 77       	andi	r25, 0x7F	; 127
 90e:	90 93 c5 00 	sts	0x00C5, r25
 912:	80 93 c4 00 	sts	0x00C4, r24
 916:	88 e9       	ldi	r24, 0x98	; 152
 918:	80 93 c1 00 	sts	0x00C1, r24
 91c:	86 e0       	ldi	r24, 0x06	; 6
 91e:	80 93 c2 00 	sts	0x00C2, r24
 922:	08 95       	ret

00000924 <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
 924:	60 91 88 01 	lds	r22, 0x0188
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	6f 5f       	subi	r22, 0xFF	; 255
 92c:	7f 4f       	sbci	r23, 0xFF	; 255
 92e:	6f 77       	andi	r22, 0x7F	; 127
 930:	77 27       	eor	r23, r23
 932:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
 934:	20 91 87 01 	lds	r18, 0x0187
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	24 17       	cp	r18, r20
 93c:	35 07       	cpc	r19, r21
 93e:	d1 f3       	breq	.-12     	; 0x934 <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
 940:	fb 01       	movw	r30, r22
 942:	e7 5f       	subi	r30, 0xF7	; 247
 944:	fd 4f       	sbci	r31, 0xFD	; 253
 946:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
 948:	60 93 88 01 	sts	0x0188, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
 94c:	e1 ec       	ldi	r30, 0xC1	; 193
 94e:	f0 e0       	ldi	r31, 0x00	; 0
 950:	80 81       	ld	r24, Z
 952:	80 62       	ori	r24, 0x20	; 32
 954:	80 83       	st	Z, r24
 956:	08 95       	ret

00000958 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
 95c:	ec 01       	movw	r28, r24
	while (*s) {
 95e:	88 81       	ld	r24, Y
 960:	88 23       	and	r24, r24
 962:	29 f0       	breq	.+10     	; 0x96e <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
 964:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
 966:	de df       	rcall	.-68     	; 0x924 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
 968:	89 91       	ld	r24, Y+
 96a:	81 11       	cpse	r24, r1
 96c:	fc cf       	rjmp	.-8      	; 0x966 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	08 95       	ret

00000974 <__divmodhi4>:
 974:	97 fb       	bst	r25, 7
 976:	07 2e       	mov	r0, r23
 978:	16 f4       	brtc	.+4      	; 0x97e <__divmodhi4+0xa>
 97a:	00 94       	com	r0
 97c:	06 d0       	rcall	.+12     	; 0x98a <__divmodhi4_neg1>
 97e:	77 fd       	sbrc	r23, 7
 980:	08 d0       	rcall	.+16     	; 0x992 <__divmodhi4_neg2>
 982:	2d d0       	rcall	.+90     	; 0x9de <__udivmodhi4>
 984:	07 fc       	sbrc	r0, 7
 986:	05 d0       	rcall	.+10     	; 0x992 <__divmodhi4_neg2>
 988:	3e f4       	brtc	.+14     	; 0x998 <__divmodhi4_exit>

0000098a <__divmodhi4_neg1>:
 98a:	90 95       	com	r25
 98c:	81 95       	neg	r24
 98e:	9f 4f       	sbci	r25, 0xFF	; 255
 990:	08 95       	ret

00000992 <__divmodhi4_neg2>:
 992:	70 95       	com	r23
 994:	61 95       	neg	r22
 996:	7f 4f       	sbci	r23, 0xFF	; 255

00000998 <__divmodhi4_exit>:
 998:	08 95       	ret

0000099a <__udivmodsi4>:
 99a:	a1 e2       	ldi	r26, 0x21	; 33
 99c:	1a 2e       	mov	r1, r26
 99e:	aa 1b       	sub	r26, r26
 9a0:	bb 1b       	sub	r27, r27
 9a2:	fd 01       	movw	r30, r26
 9a4:	0d c0       	rjmp	.+26     	; 0x9c0 <__udivmodsi4_ep>

000009a6 <__udivmodsi4_loop>:
 9a6:	aa 1f       	adc	r26, r26
 9a8:	bb 1f       	adc	r27, r27
 9aa:	ee 1f       	adc	r30, r30
 9ac:	ff 1f       	adc	r31, r31
 9ae:	a2 17       	cp	r26, r18
 9b0:	b3 07       	cpc	r27, r19
 9b2:	e4 07       	cpc	r30, r20
 9b4:	f5 07       	cpc	r31, r21
 9b6:	20 f0       	brcs	.+8      	; 0x9c0 <__udivmodsi4_ep>
 9b8:	a2 1b       	sub	r26, r18
 9ba:	b3 0b       	sbc	r27, r19
 9bc:	e4 0b       	sbc	r30, r20
 9be:	f5 0b       	sbc	r31, r21

000009c0 <__udivmodsi4_ep>:
 9c0:	66 1f       	adc	r22, r22
 9c2:	77 1f       	adc	r23, r23
 9c4:	88 1f       	adc	r24, r24
 9c6:	99 1f       	adc	r25, r25
 9c8:	1a 94       	dec	r1
 9ca:	69 f7       	brne	.-38     	; 0x9a6 <__udivmodsi4_loop>
 9cc:	60 95       	com	r22
 9ce:	70 95       	com	r23
 9d0:	80 95       	com	r24
 9d2:	90 95       	com	r25
 9d4:	9b 01       	movw	r18, r22
 9d6:	ac 01       	movw	r20, r24
 9d8:	bd 01       	movw	r22, r26
 9da:	cf 01       	movw	r24, r30
 9dc:	08 95       	ret

000009de <__udivmodhi4>:
 9de:	aa 1b       	sub	r26, r26
 9e0:	bb 1b       	sub	r27, r27
 9e2:	51 e1       	ldi	r21, 0x11	; 17
 9e4:	07 c0       	rjmp	.+14     	; 0x9f4 <__udivmodhi4_ep>

000009e6 <__udivmodhi4_loop>:
 9e6:	aa 1f       	adc	r26, r26
 9e8:	bb 1f       	adc	r27, r27
 9ea:	a6 17       	cp	r26, r22
 9ec:	b7 07       	cpc	r27, r23
 9ee:	10 f0       	brcs	.+4      	; 0x9f4 <__udivmodhi4_ep>
 9f0:	a6 1b       	sub	r26, r22
 9f2:	b7 0b       	sbc	r27, r23

000009f4 <__udivmodhi4_ep>:
 9f4:	88 1f       	adc	r24, r24
 9f6:	99 1f       	adc	r25, r25
 9f8:	5a 95       	dec	r21
 9fa:	a9 f7       	brne	.-22     	; 0x9e6 <__udivmodhi4_loop>
 9fc:	80 95       	com	r24
 9fe:	90 95       	com	r25
 a00:	bc 01       	movw	r22, r24
 a02:	cd 01       	movw	r24, r26
 a04:	08 95       	ret

00000a06 <_exit>:
 a06:	f8 94       	cli

00000a08 <__stop_program>:
 a08:	ff cf       	rjmp	.-2      	; 0xa08 <__stop_program>
