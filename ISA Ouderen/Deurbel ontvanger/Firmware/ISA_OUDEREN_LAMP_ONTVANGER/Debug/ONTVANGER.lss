
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  00001ab2  00001b46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ab2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017c  0080011a  0080011a  00001b60  2**0
                  ALLOC
  3 .stab         00000d08  00000000  00000000  00001b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000272  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002ada  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003c0  00000000  00000000  00002b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a97  00000000  00000000  00002ec9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000126f  00000000  00000000  00006960  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002682  00000000  00000000  00007bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000924  00000000  00000000  0000a254  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e4d  00000000  00000000  0000ab78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000022d8  00000000  00000000  0000b9c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000388  00000000  00000000  0000dc9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c3 c2       	rjmp	.+1414   	; 0x588 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 c8 0a 	jmp	0x1590	; 0x1590 <__vector_1>
       8:	db c2       	rjmp	.+1462   	; 0x5c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d9 c2       	rjmp	.+1458   	; 0x5c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	d7 c2       	rjmp	.+1454   	; 0x5c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	d5 c2       	rjmp	.+1450   	; 0x5c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	d3 c2       	rjmp	.+1446   	; 0x5c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	3b c7       	rjmp	.+3702   	; 0xe94 <__vector_7>
      1e:	00 00       	nop
      20:	cf c2       	rjmp	.+1438   	; 0x5c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	cd c2       	rjmp	.+1434   	; 0x5c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	cb c2       	rjmp	.+1430   	; 0x5c0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c9 c2       	rjmp	.+1426   	; 0x5c0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c7 c2       	rjmp	.+1422   	; 0x5c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c2       	rjmp	.+1418   	; 0x5c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4d c3       	rjmp	.+1690   	; 0x6d4 <__vector_14>
      3a:	00 00       	nop
      3c:	c1 c2       	rjmp	.+1410   	; 0x5c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bf c2       	rjmp	.+1406   	; 0x5c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	bd c2       	rjmp	.+1402   	; 0x5c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 a4 0c 	jmp	0x1948	; 0x1948 <__vector_18>
      4c:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__vector_19>
      50:	b7 c2       	rjmp	.+1390   	; 0x5c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	b5 c2       	rjmp	.+1386   	; 0x5c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	b3 c2       	rjmp	.+1382   	; 0x5c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b1 c2       	rjmp	.+1378   	; 0x5c0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	af c2       	rjmp	.+1374   	; 0x5c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	ad c2       	rjmp	.+1370   	; 0x5c0 <__bad_interrupt>
	...

00000068 <_ZL16icon_led_numbers>:
      68:	0c 0b 0a 0f 0e 0d 07 08 09 02 01 00                 ............

00000074 <_ZL22sound_pattern_doorbell>:
      74:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      84:	b0 04 00 00 f4 01 00 00 00 00 00 00 e8 03 00 00     ................
      94:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      a4:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000000b4 <_ZL19sound_pattern_phone>:
      b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     104:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     114:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     124:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     134:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     144:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     154:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     164:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     174:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     184:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     194:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     1a4:	00 00 00 00 e8 03 00 00 e8 03 00 00 28 00 00 00     ............(...
     1b4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1c4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1d4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1e4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1f4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     204:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     214:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     224:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     234:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     244:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     254:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     264:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     274:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     284:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     294:	ee 02 00 00 28 00 00 00 00 00 00 00 e8 03 00 00     ....(...........
     2a4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     304:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     314:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     324:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     334:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     344:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     354:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     364:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     374:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     384:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     394:	00 00 00 00 e8 03 00 00 00 00 00 00 00 00 00 00     ................
	...

000003b4 <_ZL18sound_pattern_fire>:
     3b4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3c4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3d4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3e4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3f4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     404:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     414:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     424:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...

00000434 <_ZL18sound_pattern_help>:
     434:	bf 04 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     444:	1c 07 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     454:	bf 04 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     464:	1c 07 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     474:	00 00 00 00 e8 03 00 00                             ........

0000047c <_ZL13flash_pattern>:
     47c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     48c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     49c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4ac:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4bc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4cc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4dc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4ec:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4fc:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     50c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     51c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     52c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     53c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     54c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     55c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     56c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...

0000057c <_ZL11icon_colors>:
     57c:	3d f5 00 00 b8 f5 ff 00 00 ff ff 00                 =...........

00000588 <__ctors_end>:
     588:	11 24       	eor	r1, r1
     58a:	1f be       	out	0x3f, r1	; 63
     58c:	cf ef       	ldi	r28, 0xFF	; 255
     58e:	d8 e0       	ldi	r29, 0x08	; 8
     590:	de bf       	out	0x3e, r29	; 62
     592:	cd bf       	out	0x3d, r28	; 61

00000594 <__do_copy_data>:
     594:	11 e0       	ldi	r17, 0x01	; 1
     596:	a0 e0       	ldi	r26, 0x00	; 0
     598:	b1 e0       	ldi	r27, 0x01	; 1
     59a:	e2 eb       	ldi	r30, 0xB2	; 178
     59c:	fa e1       	ldi	r31, 0x1A	; 26
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__do_copy_data+0x10>
     5a0:	05 90       	lpm	r0, Z+
     5a2:	0d 92       	st	X+, r0
     5a4:	aa 31       	cpi	r26, 0x1A	; 26
     5a6:	b1 07       	cpc	r27, r17
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <__do_copy_data+0xc>

000005aa <__do_clear_bss>:
     5aa:	22 e0       	ldi	r18, 0x02	; 2
     5ac:	aa e1       	ldi	r26, 0x1A	; 26
     5ae:	b1 e0       	ldi	r27, 0x01	; 1
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <.do_clear_bss_start>

000005b2 <.do_clear_bss_loop>:
     5b2:	1d 92       	st	X+, r1

000005b4 <.do_clear_bss_start>:
     5b4:	a6 39       	cpi	r26, 0x96	; 150
     5b6:	b2 07       	cpc	r27, r18
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <.do_clear_bss_loop>
     5ba:	d1 d0       	rcall	.+418    	; 0x75e <main>
     5bc:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <_exit>

000005c0 <__bad_interrupt>:
     5c0:	1f cd       	rjmp	.-1474   	; 0x0 <__vectors>

000005c2 <I2C_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
     5c2:	88 e4       	ldi	r24, 0x48	; 72
     5c4:	80 93 b8 00 	sts	0x00B8, r24
     5c8:	08 95       	ret

000005ca <I2C_start>:
     5ca:	ec eb       	ldi	r30, 0xBC	; 188
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	10 82       	st	Z, r1
     5d0:	94 ea       	ldi	r25, 0xA4	; 164
     5d2:	90 83       	st	Z, r25
     5d4:	90 81       	ld	r25, Z
     5d6:	99 23       	and	r25, r25
     5d8:	ec f7       	brge	.-6      	; 0x5d4 <I2C_start+0xa>
     5da:	90 91 b9 00 	lds	r25, 0x00B9
     5de:	98 7f       	andi	r25, 0xF8	; 248
     5e0:	98 30       	cpi	r25, 0x08	; 8
     5e2:	a1 f4       	brne	.+40     	; 0x60c <I2C_start+0x42>
     5e4:	80 93 bb 00 	sts	0x00BB, r24
     5e8:	84 e8       	ldi	r24, 0x84	; 132
     5ea:	80 93 bc 00 	sts	0x00BC, r24
     5ee:	ec eb       	ldi	r30, 0xBC	; 188
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	88 23       	and	r24, r24
     5f6:	ec f7       	brge	.-6      	; 0x5f2 <I2C_start+0x28>
     5f8:	90 91 b9 00 	lds	r25, 0x00B9
     5fc:	98 7f       	andi	r25, 0xF8	; 248
     5fe:	98 31       	cpi	r25, 0x18	; 24
     600:	39 f0       	breq	.+14     	; 0x610 <I2C_start+0x46>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 34       	cpi	r25, 0x40	; 64
     606:	29 f4       	brne	.+10     	; 0x612 <I2C_start+0x48>
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	08 95       	ret
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	08 95       	ret
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	08 95       	ret

00000614 <I2C_write>:
     614:	80 93 bb 00 	sts	0x00BB, r24
     618:	84 e8       	ldi	r24, 0x84	; 132
     61a:	80 93 bc 00 	sts	0x00BC, r24
     61e:	ec eb       	ldi	r30, 0xBC	; 188
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	88 23       	and	r24, r24
     626:	ec f7       	brge	.-6      	; 0x622 <I2C_write+0xe>
     628:	90 91 b9 00 	lds	r25, 0x00B9
     62c:	98 7f       	andi	r25, 0xF8	; 248
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	98 32       	cpi	r25, 0x28	; 40
     632:	09 f4       	brne	.+2      	; 0x636 <I2C_write+0x22>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	08 95       	ret

00000638 <I2C_read_ack>:
     638:	84 ec       	ldi	r24, 0xC4	; 196
     63a:	80 93 bc 00 	sts	0x00BC, r24
     63e:	ec eb       	ldi	r30, 0xBC	; 188
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	88 23       	and	r24, r24
     646:	ec f7       	brge	.-6      	; 0x642 <I2C_read_ack+0xa>
     648:	80 91 bb 00 	lds	r24, 0x00BB
     64c:	08 95       	ret

0000064e <I2C_stop>:

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     64e:	84 e9       	ldi	r24, 0x94	; 148
     650:	80 93 bc 00 	sts	0x00BC, r24
     654:	08 95       	ret

00000656 <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	84 bd       	out	0x24, r24	; 36
     65a:	93 e0       	ldi	r25, 0x03	; 3
     65c:	95 bd       	out	0x25, r25	; 37
     65e:	80 93 6e 00 	sts	0x006E, r24
     662:	8a ef       	ldi	r24, 0xFA	; 250
     664:	87 bd       	out	0x27, r24	; 39
     666:	08 95       	ret

00000668 <millis_get>:
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	8f b7       	in	r24, 0x3f	; 63
     66e:	f8 94       	cli
     670:	00 91 1a 01 	lds	r16, 0x011A
     674:	10 91 1b 01 	lds	r17, 0x011B
     678:	20 91 1c 01 	lds	r18, 0x011C
     67c:	30 91 1d 01 	lds	r19, 0x011D
     680:	8f bf       	out	0x3f, r24	; 63
     682:	60 2f       	mov	r22, r16
     684:	71 2f       	mov	r23, r17
     686:	82 2f       	mov	r24, r18
     688:	93 2f       	mov	r25, r19
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	08 95       	ret

00000690 <millis_resume>:
     690:	e4 e6       	ldi	r30, 0x64	; 100
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	80 81       	ld	r24, Z
     696:	8f 7d       	andi	r24, 0xDF	; 223
     698:	80 83       	st	Z, r24
     69a:	ee e6       	ldi	r30, 0x6E	; 110
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 81       	ld	r24, Z
     6a0:	82 60       	ori	r24, 0x02	; 2
     6a2:	80 83       	st	Z, r24
     6a4:	08 95       	ret

000006a6 <millis_pause>:
     6a6:	ee e6       	ldi	r30, 0x6E	; 110
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	8d 7f       	andi	r24, 0xFD	; 253
     6ae:	80 83       	st	Z, r24
     6b0:	e4 e6       	ldi	r30, 0x64	; 100
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	80 62       	ori	r24, 0x20	; 32
     6b8:	80 83       	st	Z, r24
     6ba:	08 95       	ret

000006bc <millis_reset>:
     6bc:	8f b7       	in	r24, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	10 92 1a 01 	sts	0x011A, r1
     6c4:	10 92 1b 01 	sts	0x011B, r1
     6c8:	10 92 1c 01 	sts	0x011C, r1
     6cc:	10 92 1d 01 	sts	0x011D, r1
     6d0:	8f bf       	out	0x3f, r24	; 63
     6d2:	08 95       	ret

000006d4 <__vector_14>:

ISR(ISR_VECT)
{
     6d4:	1f 92       	push	r1
     6d6:	0f 92       	push	r0
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	0f 92       	push	r0
     6dc:	11 24       	eor	r1, r1
     6de:	8f 93       	push	r24
     6e0:	9f 93       	push	r25
     6e2:	af 93       	push	r26
     6e4:	bf 93       	push	r27
	++milliseconds;
     6e6:	80 91 1a 01 	lds	r24, 0x011A
     6ea:	90 91 1b 01 	lds	r25, 0x011B
     6ee:	a0 91 1c 01 	lds	r26, 0x011C
     6f2:	b0 91 1d 01 	lds	r27, 0x011D
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	a1 1d       	adc	r26, r1
     6fa:	b1 1d       	adc	r27, r1
     6fc:	80 93 1a 01 	sts	0x011A, r24
     700:	90 93 1b 01 	sts	0x011B, r25
     704:	a0 93 1c 01 	sts	0x011C, r26
     708:	b0 93 1d 01 	sts	0x011D, r27
}
     70c:	bf 91       	pop	r27
     70e:	af 91       	pop	r26
     710:	9f 91       	pop	r25
     712:	8f 91       	pop	r24
     714:	0f 90       	pop	r0
     716:	0f be       	out	0x3f, r0	; 63
     718:	0f 90       	pop	r0
     71a:	1f 90       	pop	r1
     71c:	18 95       	reti

0000071e <_Z11timer2_initv>:

// Initialise library
void timer2_init()
{
	// Timer settings
	TCCR2A = _BV(WGM21); // prescaler 128
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	80 93 b0 00 	sts	0x00B0, r24
	TCCR2B = _BV(CS22)|_BV(CS20);
     724:	85 e0       	ldi	r24, 0x05	; 5
     726:	80 93 b1 00 	sts	0x00B1, r24
	
	OCR2A = ((F_CPU / 128) / 1000);
     72a:	8d e7       	ldi	r24, 0x7D	; 125
     72c:	80 93 b3 00 	sts	0x00B3, r24
     730:	08 95       	ret

00000732 <_Z13timer2_resumev>:


// Turn on timer and resume interrupts
void timer2_resume()
{
	power_timer2_enable();
     732:	e4 e6       	ldi	r30, 0x64	; 100
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	8f 7b       	andi	r24, 0xBF	; 191
     73a:	80 83       	st	Z, r24
	TIMSK2 |= _BV(OCIE2A);
     73c:	e0 e7       	ldi	r30, 0x70	; 112
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	80 81       	ld	r24, Z
     742:	82 60       	ori	r24, 0x02	; 2
     744:	80 83       	st	Z, r24
     746:	08 95       	ret

00000748 <_Z12timer2_pausev>:
}

// Pause interrupts and turn off timer to save power
void timer2_pause()
{
	TIMSK2 &= ~_BV(OCIE2A);
     748:	e0 e7       	ldi	r30, 0x70	; 112
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	8d 7f       	andi	r24, 0xFD	; 253
     750:	80 83       	st	Z, r24
	power_timer2_disable();
     752:	e4 e6       	ldi	r30, 0x64	; 100
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	80 81       	ld	r24, Z
     758:	80 64       	ori	r24, 0x40	; 64
     75a:	80 83       	st	Z, r24
     75c:	08 95       	ret

0000075e <main>:
	#include "tone.h"
};

		 
	
int main() {	
     75e:	cf 93       	push	r28
     760:	df 93       	push	r29
     762:	00 d0       	rcall	.+0      	; 0x764 <main+0x6>
     764:	cd b7       	in	r28, 0x3d	; 61
     766:	de b7       	in	r29, 0x3e	; 62
// disable ADC for less power 
	ADCSRA &= ~_BV(ADEN); // ADC off 
     768:	ea e7       	ldi	r30, 0x7A	; 122
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 81       	ld	r24, Z
     76e:	8f 77       	andi	r24, 0x7F	; 127
     770:	80 83       	st	Z, r24
	sei();
     772:	78 94       	sei
	
	DDRB |= _BV(0); // pb0 output
     774:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= _BV(0); // pb0 aan
     776:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     778:	2f ef       	ldi	r18, 0xFF	; 255
     77a:	89 e6       	ldi	r24, 0x69	; 105
     77c:	98 e1       	ldi	r25, 0x18	; 24
     77e:	21 50       	subi	r18, 0x01	; 1
     780:	80 40       	sbci	r24, 0x00	; 0
     782:	90 40       	sbci	r25, 0x00	; 0
     784:	e1 f7       	brne	.-8      	; 0x77e <main+0x20>
     786:	00 c0       	rjmp	.+0      	; 0x788 <main+0x2a>
     788:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~_BV(0); // pb0 uit
     78a:	28 98       	cbi	0x05, 0	; 5

	
			/* Initialize MILLIS */
	        millis_init();
     78c:	64 df       	rcall	.-312    	; 0x656 <millis_init>
     78e:	ef ef       	ldi	r30, 0xFF	; 255
     790:	f3 ed       	ldi	r31, 0xD3	; 211
     792:	20 e3       	ldi	r18, 0x30	; 48
     794:	e1 50       	subi	r30, 0x01	; 1
     796:	f0 40       	sbci	r31, 0x00	; 0
     798:	20 40       	sbci	r18, 0x00	; 0
     79a:	e1 f7       	brne	.-8      	; 0x794 <main+0x36>
     79c:	00 c0       	rjmp	.+0      	; 0x79e <main+0x40>
     79e:	00 00       	nop
			_delay_ms(1000);
			/* Initialize MILLIS */

			/* Initialize TONE */						
			tone_init();	
     7a0:	0e 94 2b 0c 	call	0x1856	; 0x1856 <tone_init>
			noTone();	
     7a4:	0e 94 2d 0c 	call	0x185a	; 0x185a <noTone>
			/* Initialize TONE */						
						
						
			/* Initialize TIMER 2 */
			timer2_init();
     7a8:	ba df       	rcall	.-140    	; 0x71e <_Z11timer2_initv>
			timer2_pause();
     7aa:	ce df       	rcall	.-100    	; 0x748 <_Z12timer2_pausev>
			/* Initialize UART */
			#ifdef DEBUG_SERIAL
			uart_init( ((F_CPU)/((UART_BAUD_RATE)*16l)-1)) ;
			_delay_ms(1000);
			#else
			power_usart0_disable();
     7ac:	e4 e6       	ldi	r30, 0x64	; 100
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	82 60       	ori	r24, 0x02	; 2
     7b4:	80 83       	st	Z, r24
			#endif
			/* Initialize UART */
		
			/* Initialize I2C */
			I2C_init();	
     7b6:	05 df       	rcall	.-502    	; 0x5c2 <I2C_init>
			/* Initialize I2C */
			
			/* Initialize PCA9634 */
			pca9635_init();
     7b8:	e0 d3       	rcall	.+1984   	; 0xf7a <pca9635_init>
     7ba:	13 e0       	ldi	r17, 0x03	; 3
			
			// blink 3 times fast
			for (byte i = 0; i <= 2; ++i){
			pca9635_set_all_led_pwm(255);
     7bc:	8f ef       	ldi	r24, 0xFF	; 255
     7be:	23 d4       	rcall	.+2118   	; 0x1006 <pca9635_set_all_led_pwm>
     7c0:	8f ef       	ldi	r24, 0xFF	; 255
     7c2:	91 ee       	ldi	r25, 0xE1	; 225
     7c4:	e4 e0       	ldi	r30, 0x04	; 4
     7c6:	81 50       	subi	r24, 0x01	; 1
     7c8:	90 40       	sbci	r25, 0x00	; 0
     7ca:	e0 40       	sbci	r30, 0x00	; 0
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <main+0x68>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <main+0x72>
     7d0:	00 00       	nop
			_delay_ms(100);
			pca9635_set_all_led_pwm(0);
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	18 d4       	rcall	.+2096   	; 0x1006 <pca9635_set_all_led_pwm>
     7d6:	ff ef       	ldi	r31, 0xFF	; 255
     7d8:	21 ee       	ldi	r18, 0xE1	; 225
     7da:	84 e0       	ldi	r24, 0x04	; 4
     7dc:	f1 50       	subi	r31, 0x01	; 1
     7de:	20 40       	sbci	r18, 0x00	; 0
     7e0:	80 40       	sbci	r24, 0x00	; 0
     7e2:	e1 f7       	brne	.-8      	; 0x7dc <main+0x7e>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <main+0x88>
     7e6:	00 00       	nop
     7e8:	11 50       	subi	r17, 0x01	; 1
			
			/* Initialize PCA9634 */
			pca9635_init();
			
			// blink 3 times fast
			for (byte i = 0; i <= 2; ++i){
     7ea:	41 f7       	brne	.-48     	; 0x7bc <main+0x5e>
			
			/* Initialize PCA9634 */
			
		
			// node id, rfband, group id
			rf12_initialize(2, RF12_868MHZ, 14);
     7ec:	4e e0       	ldi	r20, 0x0E	; 14
     7ee:	62 e0       	ldi	r22, 0x02	; 2
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	49 d6       	rcall	.+3218   	; 0x1486 <_Z15rf12_initializehhh>
			// see http://tools.jeelabs.org/rfm12b
		


			deep_sleep_ok = 1; // put device in deep sleep after initializing
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	80 93 34 01 	sts	0x0134, r24
			_delay_ms(1000);
			#endif
			
			// initialised
			
				pca9635_set_led_pwm(1, 255);
     7fa:	6f ef       	ldi	r22, 0xFF	; 255
     7fc:	f3 d3       	rcall	.+2022   	; 0xfe4 <pca9635_set_led_pwm>
     7fe:	9f ef       	ldi	r25, 0xFF	; 255
     800:	e7 e8       	ldi	r30, 0x87	; 135
     802:	f3 e1       	ldi	r31, 0x13	; 19
     804:	91 50       	subi	r25, 0x01	; 1
     806:	e0 40       	sbci	r30, 0x00	; 0
     808:	f0 40       	sbci	r31, 0x00	; 0
     80a:	e1 f7       	brne	.-8      	; 0x804 <main+0xa6>
     80c:	00 c0       	rjmp	.+0      	; 0x80e <main+0xb0>
     80e:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(8, 255);
     810:	6f ef       	ldi	r22, 0xFF	; 255
     812:	88 e0       	ldi	r24, 0x08	; 8
     814:	e7 d3       	rcall	.+1998   	; 0xfe4 <pca9635_set_led_pwm>
     816:	2f ef       	ldi	r18, 0xFF	; 255
     818:	87 e8       	ldi	r24, 0x87	; 135
     81a:	93 e1       	ldi	r25, 0x13	; 19
     81c:	21 50       	subi	r18, 0x01	; 1
     81e:	80 40       	sbci	r24, 0x00	; 0
     820:	90 40       	sbci	r25, 0x00	; 0
     822:	e1 f7       	brne	.-8      	; 0x81c <main+0xbe>
     824:	00 c0       	rjmp	.+0      	; 0x826 <main+0xc8>
     826:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(11, 255);
     828:	6f ef       	ldi	r22, 0xFF	; 255
     82a:	8b e0       	ldi	r24, 0x0B	; 11
     82c:	db d3       	rcall	.+1974   	; 0xfe4 <pca9635_set_led_pwm>
     82e:	ef ef       	ldi	r30, 0xFF	; 255
     830:	f7 e8       	ldi	r31, 0x87	; 135
     832:	23 e1       	ldi	r18, 0x13	; 19
     834:	e1 50       	subi	r30, 0x01	; 1
     836:	f0 40       	sbci	r31, 0x00	; 0
     838:	20 40       	sbci	r18, 0x00	; 0
     83a:	e1 f7       	brne	.-8      	; 0x834 <main+0xd6>
     83c:	00 c0       	rjmp	.+0      	; 0x83e <main+0xe0>
     83e:	00 00       	nop
				_delay_ms(400);
				pca9635_set_led_pwm(14, 255);
     840:	6f ef       	ldi	r22, 0xFF	; 255
     842:	8e e0       	ldi	r24, 0x0E	; 14
     844:	cf d3       	rcall	.+1950   	; 0xfe4 <pca9635_set_led_pwm>
     846:	8f ef       	ldi	r24, 0xFF	; 255
     848:	9f e0       	ldi	r25, 0x0F	; 15
     84a:	e7 e2       	ldi	r30, 0x27	; 39
     84c:	81 50       	subi	r24, 0x01	; 1
     84e:	90 40       	sbci	r25, 0x00	; 0
     850:	e0 40       	sbci	r30, 0x00	; 0
     852:	e1 f7       	brne	.-8      	; 0x84c <main+0xee>
     854:	00 c0       	rjmp	.+0      	; 0x856 <main+0xf8>
     856:	00 00       	nop
				_delay_ms(800);
				pca9635_set_all_led_pwm(0);
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	d5 d3       	rcall	.+1962   	; 0x1006 <pca9635_set_all_led_pwm>
				pca9635_set_sleep(1);
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	e3 d3       	rcall	.+1990   	; 0x1026 <pca9635_set_sleep>
		// process incoming data here
			
//			#ifdef DEBUG_SERIAL	uart0_puts("DATA");	//	_delay_ms(10);	#endif
					
								
			if (RF12_WANTS_ACK) {
     860:	0f 2e       	mov	r0, r31
     862:	fc e3       	ldi	r31, 0x3C	; 60
     864:	ef 2e       	mov	r14, r31
     866:	f1 e0       	ldi	r31, 0x01	; 1
     868:	ff 2e       	mov	r15, r31
     86a:	f0 2d       	mov	r31, r0
				*/
						
						
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[1]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     86c:	0f 2e       	mov	r0, r31
     86e:	ff e3       	ldi	r31, 0x3F	; 63
     870:	8f 2e       	mov	r8, r31
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	9f 2e       	mov	r9, r31
     876:	f0 2d       	mov	r31, r0
										 
							
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     878:	41 2c       	mov	r4, r1
     87a:	51 2c       	mov	r5, r1
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     87c:	49 82       	std	Y+1, r4	; 0x01
     87e:	5a 82       	std	Y+2, r5	; 0x02
							
							 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     880:	22 24       	eor	r2, r2
     882:	23 94       	inc	r2
				
				
	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).

	
	if (rf12_recvDone() && rf12_crc == 0) {
     884:	27 d4       	rcall	.+2126   	; 0x10d4 <_Z13rf12_recvDonev>
     886:	88 23       	and	r24, r24
     888:	e9 f3       	breq	.-6      	; 0x884 <main+0x126>
     88a:	80 91 82 01 	lds	r24, 0x0182
     88e:	90 91 83 01 	lds	r25, 0x0183
     892:	89 2b       	or	r24, r25
     894:	09 f4       	brne	.+2      	; 0x898 <main+0x13a>
     896:	d8 c0       	rjmp	.+432    	; 0xa48 <__stack+0x149>
     898:	f5 cf       	rjmp	.-22     	; 0x884 <main+0x126>
		// process incoming data here
			
//			#ifdef DEBUG_SERIAL	uart0_puts("DATA");	//	_delay_ms(10);	#endif
					
								
			if (RF12_WANTS_ACK) {
     89a:	f7 01       	movw	r30, r14
     89c:	80 81       	ld	r24, Z
     89e:	85 ff       	sbrs	r24, 5
     8a0:	0e c0       	rjmp	.+28     	; 0x8be <main+0x160>
     8a2:	80 81       	ld	r24, Z
     8a4:	88 23       	and	r24, r24
     8a6:	0c f0       	brlt	.+2      	; 0x8aa <main+0x14c>
     8a8:	d5 c0       	rjmp	.+426    	; 0xa54 <__stack+0x155>
     8aa:	09 c0       	rjmp	.+18     	; 0x8be <main+0x160>
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     8ac:	f7 01       	movw	r30, r14
     8ae:	80 81       	ld	r24, Z
     8b0:	8f 71       	andi	r24, 0x1F	; 31
     8b2:	80 6c       	ori	r24, 0xC0	; 192
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	b2 01       	movw	r22, r4
     8b8:	63 d5       	rcall	.+2758   	; 0x1380 <_Z14rf12_sendStarthPKvh>
				rf12_sendWait(1); // don't power down too soon
     8ba:	82 2d       	mov	r24, r2
     8bc:	6f d5       	rcall	.+2782   	; 0x139c <_Z13rf12_sendWaith>
				*/
						
						
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[1]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     8be:	f4 01       	movw	r30, r8
     8c0:	30 80       	ld	r3, Z
				#ifdef DEBUG_SERIAL
				uart0_putc(data);
				_delay_ms(10);
				#endif    
						
				 if(data & 0x10){
     8c2:	33 2d       	mov	r19, r3
     8c4:	30 71       	andi	r19, 0x10	; 16
     8c6:	34 fe       	sbrs	r3, 4
     8c8:	06 c0       	rjmp	.+12     	; 0x8d6 <main+0x178>
					 #ifdef DEBUG_SERIAL
					 // start alarm	 
					 uart0_puts("START");
					 #endif
					
					 active_alarm = active_alarm | data; // 00001111 
     8ca:	80 91 33 01 	lds	r24, 0x0133
     8ce:	83 29       	or	r24, r3
     8d0:	80 93 33 01 	sts	0x0133, r24
     8d4:	07 c0       	rjmp	.+14     	; 0x8e4 <main+0x186>
					 #ifdef DEBUG_SERIAL
					 // start alarm
					 uart0_puts("STOP");
					 #endif
					 
					 active_alarm =  active_alarm & (~data); /* invert data, compare with active alarm array to clear the right alarm bit */		 
     8d6:	83 2d       	mov	r24, r3
     8d8:	80 95       	com	r24
     8da:	90 91 33 01 	lds	r25, 0x0133
     8de:	89 23       	and	r24, r25
     8e0:	80 93 33 01 	sts	0x0133, r24
				 }
				 
				////////////////		Fill alarm array		 ////////////////				 
				
			 // IS ER EEN ALARM ACTIEF in array active_alarm?
				 if(active_alarm & 0x0F){
     8e4:	20 91 33 01 	lds	r18, 0x0133
     8e8:	82 2f       	mov	r24, r18
     8ea:	8f 70       	andi	r24, 0x0F	; 15
     8ec:	09 f4       	brne	.+2      	; 0x8f0 <main+0x192>
     8ee:	86 c0       	rjmp	.+268    	; 0x9fc <__stack+0xfd>
						
						
							
				  
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
     8f0:	80 91 2f 01 	lds	r24, 0x012F
     8f4:	90 91 30 01 	lds	r25, 0x0130
     8f8:	a0 91 31 01 	lds	r26, 0x0131
     8fc:	b0 91 32 01 	lds	r27, 0x0132
     900:	89 2b       	or	r24, r25
     902:	8a 2b       	or	r24, r26
     904:	8b 2b       	or	r24, r27
     906:	c1 f5       	brne	.+112    	; 0x978 <__stack+0x79>
							// Geen alarm actief
				
							
							 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
     908:	10 92 34 01 	sts	0x0134, r1
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     90c:	23 fd       	sbrc	r18, 3
     90e:	0c c0       	rjmp	.+24     	; 0x928 <__stack+0x29>
     910:	22 fd       	sbrc	r18, 2
     912:	06 c0       	rjmp	.+12     	; 0x920 <__stack+0x21>
     914:	21 fd       	sbrc	r18, 1
     916:	06 c0       	rjmp	.+12     	; 0x924 <__stack+0x25>
     918:	20 ff       	sbrs	r18, 0
     91a:	0b c0       	rjmp	.+22     	; 0x932 <__stack+0x33>
     91c:	83 e0       	ldi	r24, 0x03	; 3
     91e:	05 c0       	rjmp	.+10     	; 0x92a <__stack+0x2b>
							
							 
							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     920:	82 2d       	mov	r24, r2
     922:	03 c0       	rjmp	.+6      	; 0x92a <__stack+0x2b>
     924:	82 e0       	ldi	r24, 0x02	; 2
     926:	01 c0       	rjmp	.+2      	; 0x92a <__stack+0x2b>
     928:	80 e0       	ldi	r24, 0x00	; 0
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
									sound_current_alarm = i;
     92a:	80 93 2e 01 	sts	0x012E, r24
									icon_current_alarm  = i;
     92e:	80 93 23 01 	sts	0x0123, r24
									break;
								} 
							 }

							// 2. timer 0 - millis starten
							millis_reset();
     932:	c4 de       	rcall	.-632    	; 0x6bc <millis_reset>
							millis_resume();
     934:	ad de       	rcall	.-678    	; 0x690 <millis_resume>
							
							active_alarm_time = millis_get() + alarm_duration;
     936:	98 de       	rcall	.-720    	; 0x668 <millis_get>
     938:	00 91 00 01 	lds	r16, 0x0100
     93c:	10 91 01 01 	lds	r17, 0x0101
     940:	20 91 02 01 	lds	r18, 0x0102
     944:	30 91 03 01 	lds	r19, 0x0103
     948:	dc 01       	movw	r26, r24
     94a:	cb 01       	movw	r24, r22
     94c:	80 0f       	add	r24, r16
     94e:	91 1f       	adc	r25, r17
     950:	a2 1f       	adc	r26, r18
     952:	b3 1f       	adc	r27, r19
     954:	80 93 2f 01 	sts	0x012F, r24
     958:	90 93 30 01 	sts	0x0130, r25
     95c:	a0 93 31 01 	sts	0x0131, r26
     960:	b0 93 32 01 	sts	0x0132, r27
							
							// wake up pca9635!
							power_twi_enable();
     964:	e4 e6       	ldi	r30, 0x64	; 100
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	8f 77       	andi	r24, 0x7F	; 127
     96c:	80 83       	st	Z, r24
							I2C_init();
     96e:	29 de       	rcall	.-942    	; 0x5c2 <I2C_init>
							pca9635_set_sleep(0);
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	59 d3       	rcall	.+1714   	; 0x1026 <pca9635_set_sleep>
				 
							// 3. timer 2 - alarm timer starten
							timer2_resume();							
     974:	de de       	rcall	.-580    	; 0x732 <_Z13timer2_resumev>
     976:	86 cf       	rjmp	.-244    	; 0x884 <main+0x126>
										 
							
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     978:	31 11       	cpse	r19, r1
     97a:	72 c0       	rjmp	.+228    	; 0xa60 <__stack+0x161>
     97c:	0f 2e       	mov	r0, r31
     97e:	fe e0       	ldi	r31, 0x0E	; 14
     980:	af 2e       	mov	r10, r31
     982:	f1 e0       	ldi	r31, 0x01	; 1
     984:	bf 2e       	mov	r11, r31
     986:	f0 2d       	mov	r31, r0
     988:	62 01       	movw	r12, r4
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     98a:	f5 01       	movw	r30, r10
     98c:	21 91       	ld	r18, Z+
     98e:	5f 01       	movw	r10, r30
     990:	23 21       	and	r18, r3
     992:	a1 f0       	breq	.+40     	; 0x9bc <__stack+0xbd>
     994:	09 81       	ldd	r16, Y+1	; 0x01
     996:	1a 81       	ldd	r17, Y+2	; 0x02
											for (byte j = 0; j <= 2; j++){
												pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[i].lednr[j])), 0); // leds off!
     998:	36 01       	movw	r6, r12
     99a:	66 0c       	add	r6, r6
     99c:	77 1c       	adc	r7, r7
     99e:	6c 0c       	add	r6, r12
     9a0:	7d 1c       	adc	r7, r13
     9a2:	f3 01       	movw	r30, r6
     9a4:	e0 0f       	add	r30, r16
     9a6:	f1 1f       	adc	r31, r17
     9a8:	e8 59       	subi	r30, 0x98	; 152
     9aa:	ff 4f       	sbci	r31, 0xFF	; 255
     9ac:	84 91       	lpm	r24, Z
     9ae:	60 e0       	ldi	r22, 0x00	; 0
     9b0:	19 d3       	rcall	.+1586   	; 0xfe4 <pca9635_set_led_pwm>
     9b2:	0f 5f       	subi	r16, 0xFF	; 255
     9b4:	1f 4f       	sbci	r17, 0xFF	; 255
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
											for (byte j = 0; j <= 2; j++){
     9b6:	03 30       	cpi	r16, 0x03	; 3
     9b8:	11 05       	cpc	r17, r1
     9ba:	99 f7       	brne	.-26     	; 0x9a2 <__stack+0xa3>
     9bc:	ff ef       	ldi	r31, 0xFF	; 255
     9be:	cf 1a       	sub	r12, r31
     9c0:	df 0a       	sbc	r13, r31
								
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
     9c2:	24 e0       	ldi	r18, 0x04	; 4
     9c4:	c2 16       	cp	r12, r18
     9c6:	d1 04       	cpc	r13, r1
     9c8:	01 f7       	brne	.-64     	; 0x98a <__stack+0x8b>
     9ca:	5c cf       	rjmp	.-328    	; 0x884 <main+0x126>
							
							
								// Only reset active alarm timer if there is a new alarm...
								// 0x10 = activate bit 0x0F are bits of the alarms
								if( (data & 0x10) && (data & 0x0F)){
										active_alarm_time = millis_get() + alarm_duration;
     9cc:	4d de       	rcall	.-870    	; 0x668 <millis_get>
     9ce:	00 91 00 01 	lds	r16, 0x0100
     9d2:	10 91 01 01 	lds	r17, 0x0101
     9d6:	20 91 02 01 	lds	r18, 0x0102
     9da:	30 91 03 01 	lds	r19, 0x0103
     9de:	dc 01       	movw	r26, r24
     9e0:	cb 01       	movw	r24, r22
     9e2:	80 0f       	add	r24, r16
     9e4:	91 1f       	adc	r25, r17
     9e6:	a2 1f       	adc	r26, r18
     9e8:	b3 1f       	adc	r27, r19
     9ea:	80 93 2f 01 	sts	0x012F, r24
     9ee:	90 93 30 01 	sts	0x0130, r25
     9f2:	a0 93 31 01 	sts	0x0131, r26
     9f6:	b0 93 32 01 	sts	0x0132, r27
     9fa:	44 cf       	rjmp	.-376    	; 0x884 <main+0x126>
					 
					 

				}else{ //  if(active_alarm & 0x0F){ // IS ER EEN ALARM ACTIEF in active_alarm?
						// no active alarm in array	
						active_alarm_time = 0; // set alarm time to zero, timers will be disabled in next timer 2 interrupt
     9fc:	10 92 2f 01 	sts	0x012F, r1
     a00:	10 92 30 01 	sts	0x0130, r1
     a04:	10 92 31 01 	sts	0x0131, r1
     a08:	10 92 32 01 	sts	0x0132, r1
     a0c:	3b cf       	rjmp	.-394    	; 0x884 <main+0x126>
					 
									
	} else {
		
		// switch into idle mode until the next interrupt - Choose our preferred sleep mode:
		if(deep_sleep_ok == 1){
     a0e:	80 91 34 01 	lds	r24, 0x0134
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	71 f4       	brne	.+28     	; 0xa32 <__stack+0x133>
		//		PRR		= 0x69;
		//		#else
			//	PRR		= 0xEB;
		//	#endif

			set_sleep_mode(SLEEP_MODE_STANDBY); // if active alarm, go in pwr save mode to keep timer 2 running
     a16:	83 b7       	in	r24, 0x33	; 51
     a18:	81 7f       	andi	r24, 0xF1	; 241
     a1a:	8c 60       	ori	r24, 0x0C	; 12
     a1c:	83 bf       	out	0x33, r24	; 51
			sleep_enable();
     a1e:	83 b7       	in	r24, 0x33	; 51
     a20:	81 60       	ori	r24, 0x01	; 1
     a22:	83 bf       	out	0x33, r24	; 51
		// turn off brown-out enable in software
			 sleep_bod_disable();
     a24:	85 b7       	in	r24, 0x35	; 53
     a26:	80 66       	ori	r24, 0x60	; 96
     a28:	85 bf       	out	0x35, r24	; 53
     a2a:	8f 7d       	andi	r24, 0xDF	; 223
     a2c:	85 bf       	out	0x35, r24	; 53
			 
		// Put the device to sleep:
			sleep_cpu();
     a2e:	88 95       	sleep
     a30:	07 c0       	rjmp	.+14     	; 0xa40 <__stack+0x141>
		}else{
			// disable various adc + usart0
			set_sleep_mode(SLEEP_MODE_IDLE);
     a32:	83 b7       	in	r24, 0x33	; 51
     a34:	81 7f       	andi	r24, 0xF1	; 241
     a36:	83 bf       	out	0x33, r24	; 51
			sleep_enable();
     a38:	83 b7       	in	r24, 0x33	; 51
     a3a:	81 60       	ori	r24, 0x01	; 1
     a3c:	83 bf       	out	0x33, r24	; 51
			
			// Put the device to sleep:
			sleep_cpu();
     a3e:	88 95       	sleep
		}
	
	// Clear sleep enable (SE) bit:
	sleep_disable();
     a40:	83 b7       	in	r24, 0x33	; 51
     a42:	8e 7f       	andi	r24, 0xFE	; 254
     a44:	83 bf       	out	0x33, r24	; 51
     a46:	1e cf       	rjmp	.-452    	; 0x884 <main+0x126>
				
	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).

	
	if (rf12_recvDone() && rf12_crc == 0) {
		if(rf12_data[0] == 0x99) { // 153
     a48:	ee e3       	ldi	r30, 0x3E	; 62
     a4a:	f1 e0       	ldi	r31, 0x01	; 1
     a4c:	80 81       	ld	r24, Z
     a4e:	89 39       	cpi	r24, 0x99	; 153
     a50:	f1 f6       	brne	.-68     	; 0xa0e <__stack+0x10f>
     a52:	23 cf       	rjmp	.-442    	; 0x89a <main+0x13c>
			
//			#ifdef DEBUG_SERIAL	uart0_puts("DATA");	//	_delay_ms(10);	#endif
					
								
			if (RF12_WANTS_ACK) {
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     a54:	f7 01       	movw	r30, r14
     a56:	80 81       	ld	r24, Z
     a58:	86 ff       	sbrs	r24, 6
     a5a:	28 cf       	rjmp	.-432    	; 0x8ac <main+0x14e>
     a5c:	80 e8       	ldi	r24, 0x80	; 128
     a5e:	2a cf       	rjmp	.-428    	; 0x8b4 <main+0x156>
								}
							
							
								// Only reset active alarm timer if there is a new alarm...
								// 0x10 = activate bit 0x0F are bits of the alarms
								if( (data & 0x10) && (data & 0x0F)){
     a60:	83 2d       	mov	r24, r3
     a62:	8f 70       	andi	r24, 0x0F	; 15
     a64:	09 f4       	brne	.+2      	; 0xa68 <__stack+0x169>
     a66:	0e cf       	rjmp	.-484    	; 0x884 <main+0x126>
     a68:	b1 cf       	rjmp	.-158    	; 0x9cc <__stack+0xcd>

00000a6a <_Z9isr_soundv>:
	}
						
}


	void isr_sound(){
     a6a:	0f 93       	push	r16
     a6c:	1f 93       	push	r17
		//	uart0_putc(sound_current_step);
		//	uart0_putc(millis_get());
		//	uart0_putc(_sound_note_time);
		
			// Stop note if necessary 
			if(_sound_note_time != 0){ // sound already playing?		
     a6e:	80 91 29 01 	lds	r24, 0x0129
     a72:	90 91 2a 01 	lds	r25, 0x012A
     a76:	a0 91 2b 01 	lds	r26, 0x012B
     a7a:	b0 91 2c 01 	lds	r27, 0x012C
     a7e:	89 2b       	or	r24, r25
     a80:	8a 2b       	or	r24, r26
     a82:	8b 2b       	or	r24, r27
     a84:	81 f0       	breq	.+32     	; 0xaa6 <_Z9isr_soundv+0x3c>
				//	uart0_puts("GS");
				if(millis_get() < _sound_note_time ){ // Do we need to stop the current note?
     a86:	f0 dd       	rcall	.-1056   	; 0x668 <millis_get>
     a88:	00 91 29 01 	lds	r16, 0x0129
     a8c:	10 91 2a 01 	lds	r17, 0x012A
     a90:	20 91 2b 01 	lds	r18, 0x012B
     a94:	30 91 2c 01 	lds	r19, 0x012C
     a98:	60 17       	cp	r22, r16
     a9a:	71 07       	cpc	r23, r17
     a9c:	82 07       	cpc	r24, r18
     a9e:	93 07       	cpc	r25, r19
     aa0:	08 f4       	brcc	.+2      	; 0xaa4 <_Z9isr_soundv+0x3a>
     aa2:	ef c0       	rjmp	.+478    	; 0xc82 <_Z9isr_soundv+0x218>
					//uart0_puts("DS");
					return; // dont stop current note
					
				}else{
					noTone(); // stop current note
     aa4:	da d6       	rcall	.+3508   	; 0x185a <noTone>
			
			// play next tone
		//	uart0_puts("PN");
		//	tone(unsigned long frequency, uint8_t volume);
		//uart0_putc(sound_current_alarm);
			if(sound_current_alarm == 0 ){
     aa6:	80 91 2e 01 	lds	r24, 0x012E
     aaa:	81 11       	cpse	r24, r1
     aac:	2e c0       	rjmp	.+92     	; 0xb0a <_Z9isr_soundv+0xa0>
				tone(pgm_read_word(&(sound_pattern_doorbell[sound_current_step].frequency)), sound_alarm_volume); // freq, volume
     aae:	e0 91 2d 01 	lds	r30, 0x012D
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	ee 0f       	add	r30, r30
     ab6:	ff 1f       	adc	r31, r31
     ab8:	ee 0f       	add	r30, r30
     aba:	ff 1f       	adc	r31, r31
     abc:	ee 0f       	add	r30, r30
     abe:	ff 1f       	adc	r31, r31
     ac0:	ec 58       	subi	r30, 0x8C	; 140
     ac2:	ff 4f       	sbci	r31, 0xFF	; 255
     ac4:	65 91       	lpm	r22, Z+
     ac6:	74 91       	lpm	r23, Z
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	41 e0       	ldi	r20, 0x01	; 1
     ace:	d2 d6       	rcall	.+3492   	; 0x1874 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_doorbell[sound_current_step].time)));
     ad0:	cb dd       	rcall	.-1130   	; 0x668 <millis_get>
     ad2:	e0 91 2d 01 	lds	r30, 0x012D
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	ee 0f       	add	r30, r30
     ada:	ff 1f       	adc	r31, r31
     adc:	ee 0f       	add	r30, r30
     ade:	ff 1f       	adc	r31, r31
     ae0:	ee 0f       	add	r30, r30
     ae2:	ff 1f       	adc	r31, r31
     ae4:	e8 58       	subi	r30, 0x88	; 136
     ae6:	ff 4f       	sbci	r31, 0xFF	; 255
     ae8:	25 91       	lpm	r18, Z+
     aea:	34 91       	lpm	r19, Z
     aec:	dc 01       	movw	r26, r24
     aee:	cb 01       	movw	r24, r22
     af0:	82 0f       	add	r24, r18
     af2:	93 1f       	adc	r25, r19
     af4:	a1 1d       	adc	r26, r1
     af6:	b1 1d       	adc	r27, r1
     af8:	80 93 29 01 	sts	0x0129, r24
     afc:	90 93 2a 01 	sts	0x012A, r25
     b00:	a0 93 2b 01 	sts	0x012B, r26
     b04:	b0 93 2c 01 	sts	0x012C, r27
     b08:	8f c0       	rjmp	.+286    	; 0xc28 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 1 ){
     b0a:	81 30       	cpi	r24, 0x01	; 1
     b0c:	71 f5       	brne	.+92     	; 0xb6a <_Z9isr_soundv+0x100>
				tone(pgm_read_word(&(sound_pattern_phone[sound_current_step].frequency)), sound_alarm_volume);
     b0e:	e0 91 2d 01 	lds	r30, 0x012D
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	ee 0f       	add	r30, r30
     b16:	ff 1f       	adc	r31, r31
     b18:	ee 0f       	add	r30, r30
     b1a:	ff 1f       	adc	r31, r31
     b1c:	ee 0f       	add	r30, r30
     b1e:	ff 1f       	adc	r31, r31
     b20:	ec 54       	subi	r30, 0x4C	; 76
     b22:	ff 4f       	sbci	r31, 0xFF	; 255
     b24:	65 91       	lpm	r22, Z+
     b26:	74 91       	lpm	r23, Z
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	41 e0       	ldi	r20, 0x01	; 1
     b2e:	a2 d6       	rcall	.+3396   	; 0x1874 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_phone[sound_current_step].time)));
     b30:	9b dd       	rcall	.-1226   	; 0x668 <millis_get>
     b32:	e0 91 2d 01 	lds	r30, 0x012D
     b36:	f0 e0       	ldi	r31, 0x00	; 0
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	ee 0f       	add	r30, r30
     b3e:	ff 1f       	adc	r31, r31
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	e8 54       	subi	r30, 0x48	; 72
     b46:	ff 4f       	sbci	r31, 0xFF	; 255
     b48:	25 91       	lpm	r18, Z+
     b4a:	34 91       	lpm	r19, Z
     b4c:	dc 01       	movw	r26, r24
     b4e:	cb 01       	movw	r24, r22
     b50:	82 0f       	add	r24, r18
     b52:	93 1f       	adc	r25, r19
     b54:	a1 1d       	adc	r26, r1
     b56:	b1 1d       	adc	r27, r1
     b58:	80 93 29 01 	sts	0x0129, r24
     b5c:	90 93 2a 01 	sts	0x012A, r25
     b60:	a0 93 2b 01 	sts	0x012B, r26
     b64:	b0 93 2c 01 	sts	0x012C, r27
     b68:	5f c0       	rjmp	.+190    	; 0xc28 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 2 ){
     b6a:	82 30       	cpi	r24, 0x02	; 2
     b6c:	71 f5       	brne	.+92     	; 0xbca <_Z9isr_soundv+0x160>
				tone(pgm_read_word(&(sound_pattern_fire[sound_current_step].frequency)), sound_alarm_volume);
     b6e:	e0 91 2d 01 	lds	r30, 0x012D
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	ee 0f       	add	r30, r30
     b7a:	ff 1f       	adc	r31, r31
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	ec 54       	subi	r30, 0x4C	; 76
     b82:	fc 4f       	sbci	r31, 0xFC	; 252
     b84:	65 91       	lpm	r22, Z+
     b86:	74 91       	lpm	r23, Z
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	41 e0       	ldi	r20, 0x01	; 1
     b8e:	72 d6       	rcall	.+3300   	; 0x1874 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_fire[sound_current_step].time)));
     b90:	6b dd       	rcall	.-1322   	; 0x668 <millis_get>
     b92:	e0 91 2d 01 	lds	r30, 0x012D
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	ee 0f       	add	r30, r30
     b9a:	ff 1f       	adc	r31, r31
     b9c:	ee 0f       	add	r30, r30
     b9e:	ff 1f       	adc	r31, r31
     ba0:	ee 0f       	add	r30, r30
     ba2:	ff 1f       	adc	r31, r31
     ba4:	e8 54       	subi	r30, 0x48	; 72
     ba6:	fc 4f       	sbci	r31, 0xFC	; 252
     ba8:	25 91       	lpm	r18, Z+
     baa:	34 91       	lpm	r19, Z
     bac:	dc 01       	movw	r26, r24
     bae:	cb 01       	movw	r24, r22
     bb0:	82 0f       	add	r24, r18
     bb2:	93 1f       	adc	r25, r19
     bb4:	a1 1d       	adc	r26, r1
     bb6:	b1 1d       	adc	r27, r1
     bb8:	80 93 29 01 	sts	0x0129, r24
     bbc:	90 93 2a 01 	sts	0x012A, r25
     bc0:	a0 93 2b 01 	sts	0x012B, r26
     bc4:	b0 93 2c 01 	sts	0x012C, r27
     bc8:	2f c0       	rjmp	.+94     	; 0xc28 <_Z9isr_soundv+0x1be>
			}
			else if(sound_current_alarm == 3 ){
     bca:	83 30       	cpi	r24, 0x03	; 3
     bcc:	69 f5       	brne	.+90     	; 0xc28 <_Z9isr_soundv+0x1be>
				tone(pgm_read_word(&(sound_pattern_help[sound_current_step].frequency)),sound_alarm_volume);
     bce:	e0 91 2d 01 	lds	r30, 0x012D
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	ee 0f       	add	r30, r30
     bd6:	ff 1f       	adc	r31, r31
     bd8:	ee 0f       	add	r30, r30
     bda:	ff 1f       	adc	r31, r31
     bdc:	ee 0f       	add	r30, r30
     bde:	ff 1f       	adc	r31, r31
     be0:	ec 5c       	subi	r30, 0xCC	; 204
     be2:	fb 4f       	sbci	r31, 0xFB	; 251
     be4:	65 91       	lpm	r22, Z+
     be6:	74 91       	lpm	r23, Z
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	41 e0       	ldi	r20, 0x01	; 1
     bee:	42 d6       	rcall	.+3204   	; 0x1874 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_help[sound_current_step].time)));
     bf0:	3b dd       	rcall	.-1418   	; 0x668 <millis_get>
     bf2:	e0 91 2d 01 	lds	r30, 0x012D
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	ee 0f       	add	r30, r30
     bfa:	ff 1f       	adc	r31, r31
     bfc:	ee 0f       	add	r30, r30
     bfe:	ff 1f       	adc	r31, r31
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	e8 5c       	subi	r30, 0xC8	; 200
     c06:	fb 4f       	sbci	r31, 0xFB	; 251
     c08:	25 91       	lpm	r18, Z+
     c0a:	34 91       	lpm	r19, Z
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	82 0f       	add	r24, r18
     c12:	93 1f       	adc	r25, r19
     c14:	a1 1d       	adc	r26, r1
     c16:	b1 1d       	adc	r27, r1
     c18:	80 93 29 01 	sts	0x0129, r24
     c1c:	90 93 2a 01 	sts	0x012A, r25
     c20:	a0 93 2b 01 	sts	0x012B, r26
     c24:	b0 93 2c 01 	sts	0x012C, r27
			}
			
		//_sound_note_time = millis_get() + 1000;
			
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
     c28:	50 91 2d 01 	lds	r21, 0x012D
     c2c:	40 91 2e 01 	lds	r20, 0x012E
     c30:	25 2f       	mov	r18, r21
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	e4 2f       	mov	r30, r20
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	ee 5e       	subi	r30, 0xEE	; 238
     c3a:	fe 4f       	sbci	r31, 0xFE	; 254
     c3c:	80 81       	ld	r24, Z
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	01 97       	sbiw	r24, 0x01	; 1
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	d4 f0       	brlt	.+52     	; 0xc7c <_Z9isr_soundv+0x212>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c48:	20 91 33 01 	lds	r18, 0x0133
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     c4c:	92 2f       	mov	r25, r18
     c4e:	9f 70       	andi	r25, 0x0F	; 15
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     c50:	30 e0       	ldi	r19, 0x00	; 0
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
     c52:	4f 5f       	subi	r20, 0xFF	; 255
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     c54:	44 30       	cpi	r20, 0x04	; 4
     c56:	09 f4       	brne	.+2      	; 0xc5a <_Z9isr_soundv+0x1f0>
     c58:	43 2f       	mov	r20, r19
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c5a:	e4 2f       	mov	r30, r20
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	e2 5f       	subi	r30, 0xF2	; 242
     c60:	fe 4f       	sbci	r31, 0xFE	; 254
     c62:	80 81       	ld	r24, Z
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     c64:	91 11       	cpse	r25, r1
     c66:	03 c0       	rjmp	.+6      	; 0xc6e <_Z9isr_soundv+0x204>
     c68:	40 93 2e 01 	sts	0x012E, r20
     c6c:	04 c0       	rjmp	.+8      	; 0xc76 <_Z9isr_soundv+0x20c>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c6e:	82 23       	and	r24, r18
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
     c70:	81 f3       	breq	.-32     	; 0xc52 <_Z9isr_soundv+0x1e8>
     c72:	40 93 2e 01 	sts	0x012E, r20
						done = 1; // in case there is no active alarm anymore, just breakout while
					}

				} // while
				
				sound_current_step = 0; // reset sound_current_step to zero to start the next sound	
     c76:	10 92 2d 01 	sts	0x012D, r1
     c7a:	03 c0       	rjmp	.+6      	; 0xc82 <_Z9isr_soundv+0x218>
				
			}else{
				// set sound_current_step plus one
				sound_current_step++;
     c7c:	5f 5f       	subi	r21, 0xFF	; 255
     c7e:	50 93 2d 01 	sts	0x012D, r21
			}
	
				
		} //void isr_sound()
     c82:	1f 91       	pop	r17
     c84:	0f 91       	pop	r16
     c86:	08 95       	ret

00000c88 <_Z15isr_light_flashv>:
		
	void isr_light_flash(){
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
			
		// Do we need to go to the next flash?
		if(_flash_time != 0){ // is there already a flash ?
     c90:	80 91 24 01 	lds	r24, 0x0124
     c94:	90 91 25 01 	lds	r25, 0x0125
     c98:	a0 91 26 01 	lds	r26, 0x0126
     c9c:	b0 91 27 01 	lds	r27, 0x0127
     ca0:	89 2b       	or	r24, r25
     ca2:	8a 2b       	or	r24, r26
     ca4:	8b 2b       	or	r24, r27
     ca6:	09 f4       	brne	.+2      	; 0xcaa <_Z15isr_light_flashv+0x22>
     ca8:	48 c0       	rjmp	.+144    	; 0xd3a <_Z15isr_light_flashv+0xb2>
			if(millis_get() < _flash_time ){ // Do we need to stop the current note?
     caa:	de dc       	rcall	.-1604   	; 0x668 <millis_get>
     cac:	00 91 24 01 	lds	r16, 0x0124
     cb0:	10 91 25 01 	lds	r17, 0x0125
     cb4:	20 91 26 01 	lds	r18, 0x0126
     cb8:	30 91 27 01 	lds	r19, 0x0127
     cbc:	60 17       	cp	r22, r16
     cbe:	71 07       	cpc	r23, r17
     cc0:	82 07       	cpc	r24, r18
     cc2:	93 07       	cpc	r25, r19
     cc4:	08 f0       	brcs	.+2      	; 0xcc8 <_Z15isr_light_flashv+0x40>
     cc6:	39 c0       	rjmp	.+114    	; 0xd3a <_Z15isr_light_flashv+0xb2>
     cc8:	3b c0       	rjmp	.+118    	; 0xd40 <_Z15isr_light_flashv+0xb8>
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
     cca:	80 91 28 01 	lds	r24, 0x0128
     cce:	fe 01       	movw	r30, r28
     cd0:	98 e0       	ldi	r25, 0x08	; 8
     cd2:	89 9f       	mul	r24, r25
     cd4:	e0 0d       	add	r30, r0
     cd6:	f1 1d       	adc	r31, r1
     cd8:	11 24       	eor	r1, r1
     cda:	e4 58       	subi	r30, 0x84	; 132
     cdc:	fb 4f       	sbci	r31, 0xFB	; 251
     cde:	64 91       	lpm	r22, Z
     ce0:	8c 2f       	mov	r24, r28
     ce2:	8d 5f       	subi	r24, 0xFD	; 253
     ce4:	7f d1       	rcall	.+766    	; 0xfe4 <pca9635_set_led_pwm>
     ce6:	21 96       	adiw	r28, 0x01	; 1
			}						
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
     ce8:	c4 30       	cpi	r28, 0x04	; 4
     cea:	d1 05       	cpc	r29, r1
     cec:	71 f7       	brne	.-36     	; 0xcca <_Z15isr_light_flashv+0x42>
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
		}
		
		_flash_time = millis_get() + pgm_read_word(&(flash_pattern[_flash_current_step].time));
     cee:	bc dc       	rcall	.-1672   	; 0x668 <millis_get>
     cf0:	40 91 28 01 	lds	r20, 0x0128
     cf4:	e4 2f       	mov	r30, r20
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	ee 0f       	add	r30, r30
     cfe:	ff 1f       	adc	r31, r31
     d00:	ee 0f       	add	r30, r30
     d02:	ff 1f       	adc	r31, r31
     d04:	e0 58       	subi	r30, 0x80	; 128
     d06:	fb 4f       	sbci	r31, 0xFB	; 251
     d08:	25 91       	lpm	r18, Z+
     d0a:	34 91       	lpm	r19, Z
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	82 0f       	add	r24, r18
     d12:	93 1f       	adc	r25, r19
     d14:	a1 1d       	adc	r26, r1
     d16:	b1 1d       	adc	r27, r1
     d18:	80 93 24 01 	sts	0x0124, r24
     d1c:	90 93 25 01 	sts	0x0125, r25
     d20:	a0 93 26 01 	sts	0x0126, r26
     d24:	b0 93 27 01 	sts	0x0127, r27
			
		// is variable _flash_current_step equal to total steps?
		if(_flash_current_step == (flash_keys -1 )) {
     d28:	4f 31       	cpi	r20, 0x1F	; 31
     d2a:	19 f4       	brne	.+6      	; 0xd32 <_Z15isr_light_flashv+0xaa>
			//reset _flash_current_step to 0
			_flash_current_step = 0;				
     d2c:	10 92 28 01 	sts	0x0128, r1
     d30:	07 c0       	rjmp	.+14     	; 0xd40 <_Z15isr_light_flashv+0xb8>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
     d32:	4f 5f       	subi	r20, 0xFF	; 255
     d34:	40 93 28 01 	sts	0x0128, r20
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <_Z15isr_light_flashv+0xb8>
			}
	
				
		} //void isr_sound()
		
	void isr_light_flash(){
     d3a:	c0 e0       	ldi	r28, 0x00	; 0
     d3c:	d0 e0       	ldi	r29, 0x00	; 0
     d3e:	c5 cf       	rjmp	.-118    	; 0xcca <_Z15isr_light_flashv+0x42>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
		}
		
	} // END isr_light_flash
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	08 95       	ret

00000d4a <_Z14isr_light_iconv>:
		
		
		
		
		
	void isr_light_icon(){
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
		
		// Do we need to go to the next flash?
		if(_icon_time != 0){ // is there already a flash ?
     d52:	80 91 1e 01 	lds	r24, 0x011E
     d56:	90 91 1f 01 	lds	r25, 0x011F
     d5a:	a0 91 20 01 	lds	r26, 0x0120
     d5e:	b0 91 21 01 	lds	r27, 0x0121
     d62:	89 2b       	or	r24, r25
     d64:	8a 2b       	or	r24, r26
     d66:	8b 2b       	or	r24, r27
     d68:	79 f0       	breq	.+30     	; 0xd88 <_Z14isr_light_iconv+0x3e>
			if(millis_get() < _icon_time ){ // Do we need to stop the current note?
     d6a:	7e dc       	rcall	.-1796   	; 0x668 <millis_get>
     d6c:	00 91 1e 01 	lds	r16, 0x011E
     d70:	10 91 1f 01 	lds	r17, 0x011F
     d74:	20 91 20 01 	lds	r18, 0x0120
     d78:	30 91 21 01 	lds	r19, 0x0121
     d7c:	60 17       	cp	r22, r16
     d7e:	71 07       	cpc	r23, r17
     d80:	82 07       	cpc	r24, r18
     d82:	93 07       	cpc	r25, r19
     d84:	08 f4       	brcc	.+2      	; 0xd88 <_Z14isr_light_iconv+0x3e>
     d86:	81 c0       	rjmp	.+258    	; 0xe8a <_Z14isr_light_iconv+0x140>
	// step 2 = 250 - (2 x 25)  = 200
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
     d88:	20 91 22 01 	lds	r18, 0x0122
     d8c:	22 23       	and	r18, r18
     d8e:	19 f0       	breq	.+6      	; 0xd96 <_Z14isr_light_iconv+0x4c>
     d90:	2b 30       	cpi	r18, 0x0B	; 11
     d92:	21 f5       	brne	.+72     	; 0xddc <_Z14isr_light_iconv+0x92>
     d94:	12 c0       	rjmp	.+36     	; 0xdba <_Z14isr_light_iconv+0x70>
		intensity = 255;
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 1000;
     d96:	68 dc       	rcall	.-1840   	; 0x668 <millis_get>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	88 51       	subi	r24, 0x18	; 24
     d9e:	9c 4f       	sbci	r25, 0xFC	; 252
     da0:	af 4f       	sbci	r26, 0xFF	; 255
     da2:	bf 4f       	sbci	r27, 0xFF	; 255
     da4:	80 93 1e 01 	sts	0x011E, r24
     da8:	90 93 1f 01 	sts	0x011F, r25
     dac:	a0 93 20 01 	sts	0x0120, r26
     db0:	b0 93 21 01 	sts	0x0121, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     db4:	cf ef       	ldi	r28, 0xFF	; 255
     db6:	d0 e0       	ldi	r29, 0x00	; 0
     db8:	25 c0       	rjmp	.+74     	; 0xe04 <_Z14isr_light_iconv+0xba>
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 1000;
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
     dba:	56 dc       	rcall	.-1876   	; 0x668 <millis_get>
     dbc:	dc 01       	movw	r26, r24
     dbe:	cb 01       	movw	r24, r22
     dc0:	01 96       	adiw	r24, 0x01	; 1
     dc2:	a1 1d       	adc	r26, r1
     dc4:	b1 1d       	adc	r27, r1
     dc6:	80 93 1e 01 	sts	0x011E, r24
     dca:	90 93 1f 01 	sts	0x011F, r25
     dce:	a0 93 20 01 	sts	0x0120, r26
     dd2:	b0 93 21 01 	sts	0x0121, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     dd6:	cf ef       	ldi	r28, 0xFF	; 255
     dd8:	d0 e0       	ldi	r29, 0x00	; 0
     dda:	14 c0       	rjmp	.+40     	; 0xe04 <_Z14isr_light_iconv+0xba>
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
		}
			
	}else{
		intensity = (250 - (icon_current_step * 25)); // step 1 to 10, 
     ddc:	37 ee       	ldi	r19, 0xE7	; 231
     dde:	32 03       	mulsu	r19, r18
     de0:	e0 01       	movw	r28, r0
     de2:	11 24       	eor	r1, r1
     de4:	c6 50       	subi	r28, 0x06	; 6
     de6:	df 4f       	sbci	r29, 0xFF	; 255
		_icon_time = millis_get() + 30;
     de8:	3f dc       	rcall	.-1922   	; 0x668 <millis_get>
     dea:	dc 01       	movw	r26, r24
     dec:	cb 01       	movw	r24, r22
     dee:	4e 96       	adiw	r24, 0x1e	; 30
     df0:	a1 1d       	adc	r26, r1
     df2:	b1 1d       	adc	r27, r1
     df4:	80 93 1e 01 	sts	0x011E, r24
     df8:	90 93 1f 01 	sts	0x011F, r25
     dfc:	a0 93 20 01 	sts	0x0120, r26
     e00:	b0 93 21 01 	sts	0x0121, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     e04:	00 e0       	ldi	r16, 0x00	; 0
     e06:	10 e0       	ldi	r17, 0x00	; 0
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     e08:	80 91 23 01 	lds	r24, 0x0123
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	9c 01       	movw	r18, r24
     e10:	22 0f       	add	r18, r18
     e12:	33 1f       	adc	r19, r19
     e14:	82 0f       	add	r24, r18
     e16:	93 1f       	adc	r25, r19
     e18:	80 0f       	add	r24, r16
     e1a:	91 1f       	adc	r25, r17
     e1c:	fc 01       	movw	r30, r24
     e1e:	e4 58       	subi	r30, 0x84	; 132
     e20:	fa 4f       	sbci	r31, 0xFA	; 250
     e22:	44 91       	lpm	r20, Z
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     e24:	fc 01       	movw	r30, r24
     e26:	e8 59       	subi	r30, 0x98	; 152
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	84 91       	lpm	r24, Z
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     e2c:	4c 9f       	mul	r20, r28
     e2e:	90 01       	movw	r18, r0
     e30:	4d 9f       	mul	r20, r29
     e32:	30 0d       	add	r19, r0
     e34:	11 24       	eor	r1, r1
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     e36:	63 2f       	mov	r22, r19
     e38:	d5 d0       	rcall	.+426    	; 0xfe4 <pca9635_set_led_pwm>
     e3a:	0f 5f       	subi	r16, 0xFF	; 255
     e3c:	1f 4f       	sbci	r17, 0xFF	; 255
		_icon_time = millis_get() + 30;
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
     e3e:	03 30       	cpi	r16, 0x03	; 3
     e40:	11 05       	cpc	r17, r1
     e42:	11 f7       	brne	.-60     	; 0xe08 <_Z14isr_light_iconv+0xbe>
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
	}
	

	// is variable _flash_current_step equal to total steps?
	if(icon_current_step == 11) {
     e44:	80 91 22 01 	lds	r24, 0x0122
     e48:	8b 30       	cpi	r24, 0x0B	; 11
     e4a:	e1 f4       	brne	.+56     	; 0xe84 <_Z14isr_light_iconv+0x13a>
		//reset _flash_current_step to 0
		icon_current_step = 0;
     e4c:	10 92 22 01 	sts	0x0122, r1
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e50:	30 91 33 01 	lds	r19, 0x0133
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     e54:	23 2f       	mov	r18, r19
     e56:	2f 70       	andi	r18, 0x0F	; 15
     e58:	80 91 23 01 	lds	r24, 0x0123
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     e5c:	40 e0       	ldi	r20, 0x00	; 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
     e5e:	8f 5f       	subi	r24, 0xFF	; 255
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     e60:	84 30       	cpi	r24, 0x04	; 4
     e62:	09 f4       	brne	.+2      	; 0xe66 <_Z14isr_light_iconv+0x11c>
     e64:	84 2f       	mov	r24, r20
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e66:	e8 2f       	mov	r30, r24
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	e2 5f       	subi	r30, 0xF2	; 242
     e6c:	fe 4f       	sbci	r31, 0xFE	; 254
     e6e:	90 81       	ld	r25, Z
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     e70:	21 11       	cpse	r18, r1
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <_Z14isr_light_iconv+0x130>
     e74:	80 93 23 01 	sts	0x0123, r24
     e78:	08 c0       	rjmp	.+16     	; 0xe8a <_Z14isr_light_iconv+0x140>
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e7a:	93 23       	and	r25, r19
		//reset _flash_current_step to 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
     e7c:	81 f3       	breq	.-32     	; 0xe5e <_Z14isr_light_iconv+0x114>
     e7e:	80 93 23 01 	sts	0x0123, r24
     e82:	03 c0       	rjmp	.+6      	; 0xe8a <_Z14isr_light_iconv+0x140>
			} // while
			
			
		}else{
		// set _flash_current_step +1
		icon_current_step++;
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	80 93 22 01 	sts	0x0122, r24
	}
	
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	08 95       	ret

00000e94 <__vector_7>:

	
	
	
	
ISR (TIMER2_COMPA_vect) {
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	2f 93       	push	r18
     ea4:	3f 93       	push	r19
     ea6:	4f 93       	push	r20
     ea8:	5f 93       	push	r21
     eaa:	6f 93       	push	r22
     eac:	7f 93       	push	r23
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	af 93       	push	r26
     eb4:	bf 93       	push	r27
     eb6:	ef 93       	push	r30
     eb8:	ff 93       	push	r31

	// check if the alarm needs to be stopped
	if(millis_get() >= active_alarm_time || active_alarm_time == 0){
     eba:	d6 db       	rcall	.-2132   	; 0x668 <millis_get>
     ebc:	00 91 2f 01 	lds	r16, 0x012F
     ec0:	10 91 30 01 	lds	r17, 0x0130
     ec4:	20 91 31 01 	lds	r18, 0x0131
     ec8:	30 91 32 01 	lds	r19, 0x0132
     ecc:	60 17       	cp	r22, r16
     ece:	71 07       	cpc	r23, r17
     ed0:	82 07       	cpc	r24, r18
     ed2:	93 07       	cpc	r25, r19
     ed4:	20 f4       	brcc	.+8      	; 0xede <__vector_7+0x4a>
     ed6:	01 2b       	or	r16, r17
     ed8:	02 2b       	or	r16, r18
     eda:	03 2b       	or	r16, r19
     edc:	c1 f5       	brne	.+112    	; 0xf4e <__vector_7+0xba>
		// stop alarm
			
			// reset steps of sound, flash and icon
			sound_current_step		= 0;
     ede:	10 92 2d 01 	sts	0x012D, r1
			_sound_note_time		= 0;
     ee2:	10 92 29 01 	sts	0x0129, r1
     ee6:	10 92 2a 01 	sts	0x012A, r1
     eea:	10 92 2b 01 	sts	0x012B, r1
     eee:	10 92 2c 01 	sts	0x012C, r1
										
			_flash_current_step		= 0;
     ef2:	10 92 28 01 	sts	0x0128, r1
			_flash_time				= 0;
     ef6:	10 92 24 01 	sts	0x0124, r1
     efa:	10 92 25 01 	sts	0x0125, r1
     efe:	10 92 26 01 	sts	0x0126, r1
     f02:	10 92 27 01 	sts	0x0127, r1
										
			icon_current_step		= 0;
     f06:	10 92 22 01 	sts	0x0122, r1
			_icon_time				= 0;
     f0a:	10 92 1e 01 	sts	0x011E, r1
     f0e:	10 92 1f 01 	sts	0x011F, r1
     f12:	10 92 20 01 	sts	0x0120, r1
     f16:	10 92 21 01 	sts	0x0121, r1
										
			// empty alarm arrray
			active_alarm = 0x00; 
     f1a:	10 92 33 01 	sts	0x0133, r1
			active_alarm_time = 0;
     f1e:	10 92 2f 01 	sts	0x012F, r1
     f22:	10 92 30 01 	sts	0x0130, r1
     f26:	10 92 31 01 	sts	0x0131, r1
     f2a:	10 92 32 01 	sts	0x0132, r1
					
			// alle leds uit, pca in slaapstand
			pca9635_set_all_led_pwm(0); // dimm all leds to zero
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	6a d0       	rcall	.+212    	; 0x1006 <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1); // put pca9635 in sleep
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	78 d0       	rcall	.+240    	; 0x1026 <pca9635_set_sleep>
			power_twi_disable();
     f36:	e4 e6       	ldi	r30, 0x64	; 100
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 68       	ori	r24, 0x80	; 128
     f3e:	80 83       	st	Z, r24
			
			// automatisch slapen in loop.

			//uart0_puts("STOPINT");
			// stop timer 0
			millis_pause();
     f40:	b2 db       	rcall	.-2204   	; 0x6a6 <millis_pause>
			
			// stop sound
			noTone();
     f42:	8b d4       	rcall	.+2326   	; 0x185a <noTone>
			
			// stop timer 2
			timer2_pause();
     f44:	01 dc       	rcall	.-2046   	; 0x748 <_Z12timer2_pausev>
			
			deep_sleep_ok = 1;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	80 93 34 01 	sts	0x0134, r24
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <__vector_7+0xc0>
					
	}else{
		// continue alarm
		isr_sound();
     f4e:	8d dd       	rcall	.-1254   	; 0xa6a <_Z9isr_soundv>
	    isr_light_flash();
     f50:	9b de       	rcall	.-714    	; 0xc88 <_Z15isr_light_flashv>
		isr_light_icon();		
     f52:	fb de       	rcall	.-522    	; 0xd4a <_Z14isr_light_iconv>
	}
						
}
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	0f 90       	pop	r0
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	0f 90       	pop	r0
     f76:	1f 90       	pop	r1
     f78:	18 95       	reti

00000f7a <pca9635_init>:
	   I2C_write(value);	
  	}
			  
  	I2C_stop();
		  
}
     f7a:	80 e8       	ldi	r24, 0x80	; 128
     f7c:	26 db       	rcall	.-2484   	; 0x5ca <I2C_start>
     f7e:	80 e8       	ldi	r24, 0x80	; 128
     f80:	49 db       	rcall	.-2414   	; 0x614 <I2C_write>
     f82:	80 e8       	ldi	r24, 0x80	; 128
     f84:	47 db       	rcall	.-2418   	; 0x614 <I2C_write>
     f86:	82 e0       	ldi	r24, 0x02	; 2
     f88:	45 db       	rcall	.-2422   	; 0x614 <I2C_write>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	43 db       	rcall	.-2426   	; 0x614 <I2C_write>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	41 db       	rcall	.-2430   	; 0x614 <I2C_write>
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	3f db       	rcall	.-2434   	; 0x614 <I2C_write>
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	3d db       	rcall	.-2438   	; 0x614 <I2C_write>
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	3b db       	rcall	.-2442   	; 0x614 <I2C_write>
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	39 db       	rcall	.-2446   	; 0x614 <I2C_write>
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	37 db       	rcall	.-2450   	; 0x614 <I2C_write>
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	35 db       	rcall	.-2454   	; 0x614 <I2C_write>
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	33 db       	rcall	.-2458   	; 0x614 <I2C_write>
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	31 db       	rcall	.-2462   	; 0x614 <I2C_write>
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	2f db       	rcall	.-2466   	; 0x614 <I2C_write>
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	2d db       	rcall	.-2470   	; 0x614 <I2C_write>
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	2b db       	rcall	.-2474   	; 0x614 <I2C_write>
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	29 db       	rcall	.-2478   	; 0x614 <I2C_write>
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	27 db       	rcall	.-2482   	; 0x614 <I2C_write>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	25 db       	rcall	.-2486   	; 0x614 <I2C_write>
     fca:	8f ef       	ldi	r24, 0xFF	; 255
     fcc:	23 db       	rcall	.-2490   	; 0x614 <I2C_write>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	21 db       	rcall	.-2494   	; 0x614 <I2C_write>
     fd2:	8a ea       	ldi	r24, 0xAA	; 170
     fd4:	1f db       	rcall	.-2498   	; 0x614 <I2C_write>
     fd6:	8a ea       	ldi	r24, 0xAA	; 170
     fd8:	1d db       	rcall	.-2502   	; 0x614 <I2C_write>
     fda:	8a ea       	ldi	r24, 0xAA	; 170
     fdc:	1b db       	rcall	.-2506   	; 0x614 <I2C_write>
     fde:	8a ea       	ldi	r24, 0xAA	; 170
     fe0:	19 db       	rcall	.-2510   	; 0x614 <I2C_write>
     fe2:	35 cb       	rjmp	.-2454   	; 0x64e <I2C_stop>

00000fe4 <pca9635_set_led_pwm>:
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	d8 2f       	mov	r29, r24
     fea:	c6 2f       	mov	r28, r22
     fec:	80 e8       	ldi	r24, 0x80	; 128
     fee:	ed da       	rcall	.-2598   	; 0x5ca <I2C_start>
     ff0:	8d 2f       	mov	r24, r29
     ff2:	8e 5f       	subi	r24, 0xFE	; 254
     ff4:	80 68       	ori	r24, 0x80	; 128
     ff6:	0e db       	rcall	.-2532   	; 0x614 <I2C_write>
     ff8:	8c 2f       	mov	r24, r28
     ffa:	0c db       	rcall	.-2536   	; 0x614 <I2C_write>
     ffc:	28 db       	rcall	.-2480   	; 0x64e <I2C_stop>
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	08 95       	ret

00001006 <pca9635_set_all_led_pwm>:
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	d8 2f       	mov	r29, r24
    100c:	80 e8       	ldi	r24, 0x80	; 128
    100e:	dd da       	rcall	.-2630   	; 0x5ca <I2C_start>
    1010:	82 e8       	ldi	r24, 0x82	; 130
    1012:	00 db       	rcall	.-2560   	; 0x614 <I2C_write>
    1014:	c0 e1       	ldi	r28, 0x10	; 16
    1016:	8d 2f       	mov	r24, r29
    1018:	fd da       	rcall	.-2566   	; 0x614 <I2C_write>
    101a:	c1 50       	subi	r28, 0x01	; 1
    101c:	e1 f7       	brne	.-8      	; 0x1016 <pca9635_set_all_led_pwm+0x10>
    101e:	17 db       	rcall	.-2514   	; 0x64e <I2C_stop>
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <pca9635_set_sleep>:

/**
* Changes the oscillator mode between sleep (1) and active (0)
*/
uint8_t pca9635_set_sleep(uint8_t sleep)
{
    1026:	cf 93       	push	r28
    1028:	c8 2f       	mov	r28, r24
	I2C_start((0x40<<1)+I2C_READ);
    102a:	81 e8       	ldi	r24, 0x81	; 129
    102c:	ce da       	rcall	.-2660   	; 0x5ca <I2C_start>
	I2C_write(0x80); // autoincrement, mode 0,
    102e:	80 e8       	ldi	r24, 0x80	; 128
    1030:	f1 da       	rcall	.-2590   	; 0x614 <I2C_write>
	// I2C_stop(); ???nodig?
	uint8_t data = I2C_read_ack();
    1032:	02 db       	rcall	.-2556   	; 0x638 <I2C_read_ack>
	
	if(sleep){		// set or unset bit 4
    1034:	cc 23       	and	r28, r28
    1036:	11 f0       	breq	.+4      	; 0x103c <pca9635_set_sleep+0x16>
		data |= (1<<4);
    1038:	80 61       	ori	r24, 0x10	; 16
    103a:	01 c0       	rjmp	.+2      	; 0x103e <pca9635_set_sleep+0x18>
	}else{
		data &= ~(1<<4);
    103c:	8f 7e       	andi	r24, 0xEF	; 239
	}
	
	uint8_t ack = I2C_write(data);  
    103e:	ea da       	rcall	.-2604   	; 0x614 <I2C_write>
    1040:	c8 2f       	mov	r28, r24
	I2C_stop();
    1042:	05 db       	rcall	.-2550   	; 0x64e <I2C_stop>
	return ack;
}
    1044:	8c 2f       	mov	r24, r28
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <_ZL15blockInterruptsv>:
	rf12_idle();
	else {
		rfmstate &= ~B11111000; // make sure everything is switched off (except bod, wkup, clk)
		rf12_xfer(rfmstate);
	}
	rxstate = TXIDLE;
    104a:	e8 98       	cbi	0x1d, 0	; 29
    104c:	08 95       	ret

0000104e <_ZL15allowInterruptsv>:
    104e:	e8 9a       	sbi	0x1d, 0	; 29
    1050:	08 95       	ret

00001052 <_ZL9rf12_byteh>:
    1052:	8e bd       	out	0x2e, r24	; 46
    1054:	0d b4       	in	r0, 0x2d	; 45
    1056:	07 fe       	sbrs	r0, 7
    1058:	fd cf       	rjmp	.-6      	; 0x1054 <_ZL9rf12_byteh+0x2>
    105a:	8e b5       	in	r24, 0x2e	; 46
    105c:	08 95       	ret

0000105e <_ZL9rf12_xferj>:
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	18 2f       	mov	r17, r24
    1066:	c9 2f       	mov	r28, r25
    1068:	f0 df       	rcall	.-32     	; 0x104a <_ZL15blockInterruptsv>
    106a:	2a 98       	cbi	0x05, 2	; 5
    106c:	8c 2f       	mov	r24, r28
    106e:	f1 df       	rcall	.-30     	; 0x1052 <_ZL9rf12_byteh>
    1070:	d8 2f       	mov	r29, r24
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	c8 2f       	mov	r28, r24
    1076:	81 2f       	mov	r24, r17
    1078:	ec df       	rcall	.-40     	; 0x1052 <_ZL9rf12_byteh>
    107a:	c8 2b       	or	r28, r24
    107c:	2a 9a       	sbi	0x05, 2	; 5
    107e:	e7 df       	rcall	.-50     	; 0x104e <_ZL15allowInterruptsv>
    1080:	8c 2f       	mov	r24, r28
    1082:	9d 2f       	mov	r25, r29
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
    108a:	08 95       	ret

0000108c <_ZL9rf12_idlev>:
    108c:	80 91 89 01 	lds	r24, 0x0189
    1090:	90 91 8a 01 	lds	r25, 0x018A
    1094:	8f 70       	andi	r24, 0x0F	; 15
    1096:	90 93 8a 01 	sts	0x018A, r25
    109a:	80 93 89 01 	sts	0x0189, r24
    109e:	80 91 89 01 	lds	r24, 0x0189
    10a2:	90 91 8a 01 	lds	r25, 0x018A
    10a6:	88 60       	ori	r24, 0x08	; 8
    10a8:	90 93 8a 01 	sts	0x018A, r25
    10ac:	80 93 89 01 	sts	0x0189, r24
    10b0:	80 91 89 01 	lds	r24, 0x0189
    10b4:	90 91 8a 01 	lds	r25, 0x018A
    10b8:	d2 cf       	rjmp	.-92     	; 0x105e <_ZL9rf12_xferj>

000010ba <_Z12rf12_spiInitv>:
    10ba:	84 b1       	in	r24, 0x04	; 4
    10bc:	8c 62       	ori	r24, 0x2C	; 44
    10be:	84 b9       	out	0x04, r24	; 4
    10c0:	2a 9a       	sbi	0x05, 2	; 5
    10c2:	24 98       	cbi	0x04, 4	; 4
    10c4:	80 e5       	ldi	r24, 0x50	; 80
    10c6:	8c bd       	out	0x2c, r24	; 44
    10c8:	8d b5       	in	r24, 0x2d	; 45
    10ca:	81 60       	ori	r24, 0x01	; 1
    10cc:	8d bd       	out	0x2d, r24	; 45
    10ce:	52 98       	cbi	0x0a, 2	; 10
    10d0:	5a 9a       	sbi	0x0b, 2	; 11
    10d2:	08 95       	ret

000010d4 <_Z13rf12_recvDonev>:
    10d4:	80 91 8b 01 	lds	r24, 0x018B
    10d8:	87 30       	cpi	r24, 0x07	; 7
    10da:	09 f0       	breq	.+2      	; 0x10de <_Z13rf12_recvDonev+0xa>
    10dc:	51 c0       	rjmp	.+162    	; 0x1180 <_Z13rf12_recvDonev+0xac>
    10de:	80 91 8e 01 	lds	r24, 0x018E
    10e2:	88 23       	and	r24, r24
    10e4:	a1 f0       	breq	.+40     	; 0x110e <_Z13rf12_recvDonev+0x3a>
    10e6:	90 91 8c 01 	lds	r25, 0x018C
    10ea:	98 17       	cp	r25, r24
    10ec:	28 f4       	brcc	.+10     	; 0x10f8 <_Z13rf12_recvDonev+0x24>
    10ee:	80 91 8c 01 	lds	r24, 0x018C
    10f2:	87 34       	cpi	r24, 0x47	; 71
    10f4:	08 f4       	brcc	.+2      	; 0x10f8 <_Z13rf12_recvDonev+0x24>
    10f6:	44 c0       	rjmp	.+136    	; 0x1180 <_Z13rf12_recvDonev+0xac>
    10f8:	84 e0       	ldi	r24, 0x04	; 4
    10fa:	80 93 8b 01 	sts	0x018B, r24
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	90 93 83 01 	sts	0x0183, r25
    1106:	80 93 82 01 	sts	0x0182, r24
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	08 95       	ret
    110e:	20 91 8c 01 	lds	r18, 0x018C
    1112:	80 91 3d 01 	lds	r24, 0x013D
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	05 96       	adiw	r24, 0x05	; 5
    111c:	28 17       	cp	r18, r24
    111e:	39 07       	cpc	r19, r25
    1120:	24 f4       	brge	.+8      	; 0x112a <_Z13rf12_recvDonev+0x56>
    1122:	80 91 8c 01 	lds	r24, 0x018C
    1126:	87 34       	cpi	r24, 0x47	; 71
    1128:	58 f1       	brcs	.+86     	; 0x1180 <_Z13rf12_recvDonev+0xac>
    112a:	84 e0       	ldi	r24, 0x04	; 4
    112c:	80 93 8b 01 	sts	0x018B, r24
    1130:	80 91 3d 01 	lds	r24, 0x013D
    1134:	83 34       	cpi	r24, 0x43	; 67
    1136:	30 f0       	brcs	.+12     	; 0x1144 <_Z13rf12_recvDonev+0x70>
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	90 93 83 01 	sts	0x0183, r25
    1140:	80 93 82 01 	sts	0x0182, r24
    1144:	80 91 3c 01 	lds	r24, 0x013C
    1148:	86 ff       	sbrs	r24, 6
    114a:	0b c0       	rjmp	.+22     	; 0x1162 <_Z13rf12_recvDonev+0x8e>
    114c:	80 91 8f 01 	lds	r24, 0x018F
    1150:	98 2f       	mov	r25, r24
    1152:	9f 71       	andi	r25, 0x1F	; 31
    1154:	9f 31       	cpi	r25, 0x1F	; 31
    1156:	29 f0       	breq	.+10     	; 0x1162 <_Z13rf12_recvDonev+0x8e>
    1158:	90 91 3c 01 	lds	r25, 0x013C
    115c:	89 27       	eor	r24, r25
    115e:	8f 71       	andi	r24, 0x1F	; 31
    1160:	79 f4       	brne	.+30     	; 0x1180 <_Z13rf12_recvDonev+0xac>
    1162:	80 91 82 01 	lds	r24, 0x0182
    1166:	90 91 83 01 	lds	r25, 0x0183
    116a:	89 2b       	or	r24, r25
    116c:	09 f0       	breq	.+2      	; 0x1170 <_Z13rf12_recvDonev+0x9c>
    116e:	55 c0       	rjmp	.+170    	; 0x121a <_Z13rf12_recvDonev+0x146>
    1170:	e0 91 35 01 	lds	r30, 0x0135
    1174:	f0 91 36 01 	lds	r31, 0x0136
    1178:	30 97       	sbiw	r30, 0x00	; 0
    117a:	09 f0       	breq	.+2      	; 0x117e <_Z13rf12_recvDonev+0xaa>
    117c:	4a c0       	rjmp	.+148    	; 0x1212 <_Z13rf12_recvDonev+0x13e>
    117e:	4d c0       	rjmp	.+154    	; 0x121a <_Z13rf12_recvDonev+0x146>
    1180:	80 91 8b 01 	lds	r24, 0x018B
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	09 f0       	breq	.+2      	; 0x118a <_Z13rf12_recvDonev+0xb6>
    1188:	42 c0       	rjmp	.+132    	; 0x120e <_Z13rf12_recvDonev+0x13a>
    118a:	10 92 3d 01 	sts	0x013D, r1
    118e:	10 92 8c 01 	sts	0x018C, r1
    1192:	8f ef       	ldi	r24, 0xFF	; 255
    1194:	9f ef       	ldi	r25, 0xFF	; 255
    1196:	90 93 83 01 	sts	0x0183, r25
    119a:	80 93 82 01 	sts	0x0182, r24
    119e:	20 91 8d 01 	lds	r18, 0x018D
    11a2:	22 23       	and	r18, r18
    11a4:	d9 f0       	breq	.+54     	; 0x11dc <_Z13rf12_recvDonev+0x108>
    11a6:	82 27       	eor	r24, r18
    11a8:	28 2f       	mov	r18, r24
    11aa:	22 95       	swap	r18
    11ac:	28 27       	eor	r18, r24
    11ae:	02 2e       	mov	r0, r18
    11b0:	26 95       	lsr	r18
    11b2:	26 95       	lsr	r18
    11b4:	20 25       	eor	r18, r0
    11b6:	02 2e       	mov	r0, r18
    11b8:	26 95       	lsr	r18
    11ba:	20 25       	eor	r18, r0
    11bc:	27 70       	andi	r18, 0x07	; 7
    11be:	08 2e       	mov	r0, r24
    11c0:	89 2f       	mov	r24, r25
    11c2:	26 95       	lsr	r18
    11c4:	07 94       	ror	r0
    11c6:	27 95       	ror	r18
    11c8:	90 2d       	mov	r25, r0
    11ca:	82 27       	eor	r24, r18
    11cc:	06 94       	lsr	r0
    11ce:	27 95       	ror	r18
    11d0:	90 25       	eor	r25, r0
    11d2:	82 27       	eor	r24, r18
    11d4:	90 93 83 01 	sts	0x0183, r25
    11d8:	80 93 82 01 	sts	0x0182, r24
    11dc:	87 e0       	ldi	r24, 0x07	; 7
    11de:	80 93 8b 01 	sts	0x018B, r24
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	80 93 85 01 	sts	0x0185, r24
    11e8:	83 ea       	ldi	r24, 0xA3	; 163
    11ea:	94 e9       	ldi	r25, 0x94	; 148
    11ec:	38 df       	rcall	.-400    	; 0x105e <_ZL9rf12_xferj>
    11ee:	80 91 89 01 	lds	r24, 0x0189
    11f2:	90 91 8a 01 	lds	r25, 0x018A
    11f6:	88 6d       	ori	r24, 0xD8	; 216
    11f8:	90 93 8a 01 	sts	0x018A, r25
    11fc:	80 93 89 01 	sts	0x0189, r24
    1200:	80 91 89 01 	lds	r24, 0x0189
    1204:	90 91 8a 01 	lds	r25, 0x018A
    1208:	2a df       	rcall	.-428    	; 0x105e <_ZL9rf12_xferj>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	08 95       	ret
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	08 95       	ret
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	09 95       	icall
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	08 95       	ret
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	9f ef       	ldi	r25, 0xFF	; 255
    121e:	dc 01       	movw	r26, r24
    1220:	80 93 37 01 	sts	0x0137, r24
    1224:	90 93 38 01 	sts	0x0138, r25
    1228:	a0 93 39 01 	sts	0x0139, r26
    122c:	b0 93 3a 01 	sts	0x013A, r27
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	08 95       	ret

00001234 <_Z15rf12_setBitrateh>:
    1234:	cf 92       	push	r12
    1236:	df 92       	push	r13
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	c8 2f       	mov	r28, r24
    1244:	08 2f       	mov	r16, r24
    1246:	10 e0       	ldi	r17, 0x00	; 0
    1248:	c8 01       	movw	r24, r16
    124a:	96 6c       	ori	r25, 0xC6	; 198
    124c:	08 df       	rcall	.-496    	; 0x105e <_ZL9rf12_xferj>
    124e:	cf 77       	andi	r28, 0x7F	; 127
    1250:	2c 2f       	mov	r18, r28
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	2f 5f       	subi	r18, 0xFF	; 255
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	44 27       	eor	r20, r20
    125a:	37 fd       	sbrc	r19, 7
    125c:	40 95       	com	r20
    125e:	54 2f       	mov	r21, r20
    1260:	6b ef       	ldi	r22, 0xFB	; 251
    1262:	72 e4       	ldi	r23, 0x42	; 66
    1264:	85 e0       	ldi	r24, 0x05	; 5
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	e3 d3       	rcall	.+1990   	; 0x1a30 <__udivmodsi4>
    126a:	69 01       	movw	r12, r18
    126c:	7a 01       	movw	r14, r20
    126e:	c8 01       	movw	r24, r16
    1270:	88 0f       	add	r24, r24
    1272:	89 2f       	mov	r24, r25
    1274:	88 1f       	adc	r24, r24
    1276:	99 0b       	sbc	r25, r25
    1278:	8c 01       	movw	r16, r24
    127a:	00 0f       	add	r16, r16
    127c:	11 1f       	adc	r17, r17
    127e:	00 0f       	add	r16, r16
    1280:	11 1f       	adc	r17, r17
    1282:	00 0f       	add	r16, r16
    1284:	11 1f       	adc	r17, r17
    1286:	08 1b       	sub	r16, r24
    1288:	19 0b       	sbc	r17, r25
    128a:	0f 5f       	subi	r16, 0xFF	; 255
    128c:	1f 4f       	sbci	r17, 0xFF	; 255
    128e:	98 01       	movw	r18, r16
    1290:	44 27       	eor	r20, r20
    1292:	37 fd       	sbrc	r19, 7
    1294:	40 95       	com	r20
    1296:	54 2f       	mov	r21, r20
    1298:	c7 01       	movw	r24, r14
    129a:	b6 01       	movw	r22, r12
    129c:	c9 d3       	rcall	.+1938   	; 0x1a30 <__udivmodsi4>
    129e:	da 01       	movw	r26, r20
    12a0:	c9 01       	movw	r24, r18
    12a2:	68 94       	set
    12a4:	12 f8       	bld	r1, 2
    12a6:	b6 95       	lsr	r27
    12a8:	a7 95       	ror	r26
    12aa:	97 95       	ror	r25
    12ac:	87 95       	ror	r24
    12ae:	16 94       	lsr	r1
    12b0:	d1 f7       	brne	.-12     	; 0x12a6 <_Z15rf12_setBitrateh+0x72>
    12b2:	bc 01       	movw	r22, r24
    12b4:	cd 01       	movw	r24, r26
    12b6:	6d 57       	subi	r22, 0x7D	; 125
    12b8:	7c 4f       	sbci	r23, 0xFC	; 252
    12ba:	8f 4f       	sbci	r24, 0xFF	; 255
    12bc:	9f 4f       	sbci	r25, 0xFF	; 255
    12be:	24 e8       	ldi	r18, 0x84	; 132
    12c0:	33 e0       	ldi	r19, 0x03	; 3
    12c2:	40 e0       	ldi	r20, 0x00	; 0
    12c4:	50 e0       	ldi	r21, 0x00	; 0
    12c6:	b4 d3       	rcall	.+1896   	; 0x1a30 <__udivmodsi4>
    12c8:	20 93 84 01 	sts	0x0184, r18
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	0f 91       	pop	r16
    12d2:	ff 90       	pop	r15
    12d4:	ef 90       	pop	r14
    12d6:	df 90       	pop	r13
    12d8:	cf 90       	pop	r12
    12da:	08 95       	ret

000012dc <_Z19rf12_setFixedLengthh>:
    12dc:	81 11       	cpse	r24, r1
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <_Z19rf12_setFixedLengthh+0xa>
    12e0:	10 92 8e 01 	sts	0x018E, r1
    12e4:	08 95       	ret
    12e6:	8f 5f       	subi	r24, 0xFF	; 255
    12e8:	80 93 8e 01 	sts	0x018E, r24
    12ec:	08 95       	ret

000012ee <_Z14rf12_sendStarth>:
    12ee:	86 fd       	sbrc	r24, 6
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <_Z14rf12_sendStarth+0xe>
    12f2:	80 7e       	andi	r24, 0xE0	; 224
    12f4:	90 91 8f 01 	lds	r25, 0x018F
    12f8:	9f 71       	andi	r25, 0x1F	; 31
    12fa:	89 0f       	add	r24, r25
    12fc:	80 93 3c 01 	sts	0x013C, r24
    1300:	e0 91 35 01 	lds	r30, 0x0135
    1304:	f0 91 36 01 	lds	r31, 0x0136
    1308:	30 97       	sbiw	r30, 0x00	; 0
    130a:	11 f0       	breq	.+4      	; 0x1310 <_Z14rf12_sendStarth+0x22>
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	09 95       	icall
    1310:	8f ef       	ldi	r24, 0xFF	; 255
    1312:	9f ef       	ldi	r25, 0xFF	; 255
    1314:	90 93 83 01 	sts	0x0183, r25
    1318:	80 93 82 01 	sts	0x0182, r24
    131c:	80 91 82 01 	lds	r24, 0x0182
    1320:	90 91 83 01 	lds	r25, 0x0183
    1324:	20 91 8d 01 	lds	r18, 0x018D
    1328:	82 27       	eor	r24, r18
    132a:	28 2f       	mov	r18, r24
    132c:	22 95       	swap	r18
    132e:	28 27       	eor	r18, r24
    1330:	02 2e       	mov	r0, r18
    1332:	26 95       	lsr	r18
    1334:	26 95       	lsr	r18
    1336:	20 25       	eor	r18, r0
    1338:	02 2e       	mov	r0, r18
    133a:	26 95       	lsr	r18
    133c:	20 25       	eor	r18, r0
    133e:	27 70       	andi	r18, 0x07	; 7
    1340:	08 2e       	mov	r0, r24
    1342:	89 2f       	mov	r24, r25
    1344:	26 95       	lsr	r18
    1346:	07 94       	ror	r0
    1348:	27 95       	ror	r18
    134a:	90 2d       	mov	r25, r0
    134c:	82 27       	eor	r24, r18
    134e:	06 94       	lsr	r0
    1350:	27 95       	ror	r18
    1352:	90 25       	eor	r25, r0
    1354:	82 27       	eor	r24, r18
    1356:	90 93 83 01 	sts	0x0183, r25
    135a:	80 93 82 01 	sts	0x0182, r24
    135e:	88 e0       	ldi	r24, 0x08	; 8
    1360:	80 93 8b 01 	sts	0x018B, r24
    1364:	80 91 89 01 	lds	r24, 0x0189
    1368:	90 91 8a 01 	lds	r25, 0x018A
    136c:	88 63       	ori	r24, 0x38	; 56
    136e:	90 93 8a 01 	sts	0x018A, r25
    1372:	80 93 89 01 	sts	0x0189, r24
    1376:	80 91 89 01 	lds	r24, 0x0189
    137a:	90 91 8a 01 	lds	r25, 0x018A
    137e:	6f ce       	rjmp	.-802    	; 0x105e <_ZL9rf12_xferj>

00001380 <_Z14rf12_sendStarthPKvh>:
    1380:	cf 93       	push	r28
    1382:	c8 2f       	mov	r28, r24
    1384:	40 93 3d 01 	sts	0x013D, r20
    1388:	2e e3       	ldi	r18, 0x3E	; 62
    138a:	31 e0       	ldi	r19, 0x01	; 1
    138c:	50 e0       	ldi	r21, 0x00	; 0
    138e:	82 2f       	mov	r24, r18
    1390:	93 2f       	mov	r25, r19
    1392:	84 d3       	rcall	.+1800   	; 0x1a9c <memcpy>
    1394:	8c 2f       	mov	r24, r28
    1396:	ab df       	rcall	.-170    	; 0x12ee <_Z14rf12_sendStarth>
    1398:	cf 91       	pop	r28
    139a:	08 95       	ret

0000139c <_Z13rf12_sendWaith>:
    139c:	44 e0       	ldi	r20, 0x04	; 4
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	5c e0       	ldi	r21, 0x0C	; 12
    13a2:	16 c0       	rjmp	.+44     	; 0x13d0 <_Z13rf12_sendWaith+0x34>
    13a4:	88 23       	and	r24, r24
    13a6:	a1 f0       	breq	.+40     	; 0x13d0 <_Z13rf12_sendWaith+0x34>
    13a8:	93 b7       	in	r25, 0x33	; 51
    13aa:	91 7f       	andi	r25, 0xF1	; 241
    13ac:	83 30       	cpi	r24, 0x03	; 3
    13ae:	21 f0       	breq	.+8      	; 0x13b8 <_Z13rf12_sendWaith+0x1c>
    13b0:	82 30       	cpi	r24, 0x02	; 2
    13b2:	21 f4       	brne	.+8      	; 0x13bc <_Z13rf12_sendWaith+0x20>
    13b4:	25 2f       	mov	r18, r21
    13b6:	03 c0       	rjmp	.+6      	; 0x13be <_Z13rf12_sendWaith+0x22>
    13b8:	24 2f       	mov	r18, r20
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <_Z13rf12_sendWaith+0x22>
    13bc:	23 2f       	mov	r18, r19
    13be:	92 2b       	or	r25, r18
    13c0:	93 bf       	out	0x33, r25	; 51
    13c2:	93 b7       	in	r25, 0x33	; 51
    13c4:	91 60       	ori	r25, 0x01	; 1
    13c6:	93 bf       	out	0x33, r25	; 51
    13c8:	88 95       	sleep
    13ca:	93 b7       	in	r25, 0x33	; 51
    13cc:	9e 7f       	andi	r25, 0xFE	; 254
    13ce:	93 bf       	out	0x33, r25	; 51
    13d0:	90 91 8b 01 	lds	r25, 0x018B
    13d4:	94 30       	cpi	r25, 0x04	; 4
    13d6:	31 f7       	brne	.-52     	; 0x13a4 <_Z13rf12_sendWaith+0x8>
    13d8:	08 95       	ret

000013da <_Z21rf12_interruptcontrolv>:
    13da:	e8 9a       	sbi	0x1d, 0	; 29
    13dc:	08 95       	ret

000013de <_Z12rf12_restorehhh>:
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	d6 2f       	mov	r29, r22
    13e4:	c4 2f       	mov	r28, r20
    13e6:	80 93 8f 01 	sts	0x018F, r24
    13ea:	40 93 8d 01 	sts	0x018D, r20
    13ee:	60 93 90 01 	sts	0x0190, r22
    13f2:	f3 df       	rcall	.-26     	; 0x13da <_Z21rf12_interruptcontrolv>
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	72 df       	rcall	.-284    	; 0x12dc <_Z19rf12_setFixedLengthh>
    13f8:	28 de       	rcall	.-944    	; 0x104a <_ZL15blockInterruptsv>
    13fa:	25 e0       	ldi	r18, 0x05	; 5
    13fc:	32 e8       	ldi	r19, 0x82	; 130
    13fe:	30 93 8a 01 	sts	0x018A, r19
    1402:	20 93 89 01 	sts	0x0189, r18
    1406:	80 91 89 01 	lds	r24, 0x0189
    140a:	90 91 8a 01 	lds	r25, 0x018A
    140e:	27 de       	rcall	.-946    	; 0x105e <_ZL9rf12_xferj>
    1410:	20 e1       	ldi	r18, 0x10	; 16
    1412:	d2 9f       	mul	r29, r18
    1414:	c0 01       	movw	r24, r0
    1416:	11 24       	eor	r1, r1
    1418:	87 6c       	ori	r24, 0xC7	; 199
    141a:	90 68       	ori	r25, 0x80	; 128
    141c:	20 de       	rcall	.-960    	; 0x105e <_ZL9rf12_xferj>
    141e:	80 e4       	ldi	r24, 0x40	; 64
    1420:	96 ea       	ldi	r25, 0xA6	; 166
    1422:	1d de       	rcall	.-966    	; 0x105e <_ZL9rf12_xferj>
    1424:	86 e0       	ldi	r24, 0x06	; 6
    1426:	06 df       	rcall	.-500    	; 0x1234 <_Z15rf12_setBitrateh>
    1428:	82 ea       	ldi	r24, 0xA2	; 162
    142a:	94 e9       	ldi	r25, 0x94	; 148
    142c:	18 de       	rcall	.-976    	; 0x105e <_ZL9rf12_xferj>
    142e:	8c ea       	ldi	r24, 0xAC	; 172
    1430:	92 ec       	ldi	r25, 0xC2	; 194
    1432:	15 de       	rcall	.-982    	; 0x105e <_ZL9rf12_xferj>
    1434:	cc 23       	and	r28, r28
    1436:	41 f0       	breq	.+16     	; 0x1448 <_Z12rf12_restorehhh+0x6a>
    1438:	83 e8       	ldi	r24, 0x83	; 131
    143a:	9a ec       	ldi	r25, 0xCA	; 202
    143c:	10 de       	rcall	.-992    	; 0x105e <_ZL9rf12_xferj>
    143e:	8c 2f       	mov	r24, r28
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	9e 6c       	ori	r25, 0xCE	; 206
    1444:	0c de       	rcall	.-1000   	; 0x105e <_ZL9rf12_xferj>
    1446:	06 c0       	rjmp	.+12     	; 0x1454 <_Z12rf12_restorehhh+0x76>
    1448:	8b e8       	ldi	r24, 0x8B	; 139
    144a:	9a ec       	ldi	r25, 0xCA	; 202
    144c:	08 de       	rcall	.-1008   	; 0x105e <_ZL9rf12_xferj>
    144e:	8d e2       	ldi	r24, 0x2D	; 45
    1450:	9e ec       	ldi	r25, 0xCE	; 206
    1452:	05 de       	rcall	.-1014   	; 0x105e <_ZL9rf12_xferj>
    1454:	83 e8       	ldi	r24, 0x83	; 131
    1456:	94 ec       	ldi	r25, 0xC4	; 196
    1458:	02 de       	rcall	.-1020   	; 0x105e <_ZL9rf12_xferj>
    145a:	80 e5       	ldi	r24, 0x50	; 80
    145c:	98 e9       	ldi	r25, 0x98	; 152
    145e:	ff dd       	rcall	.-1026   	; 0x105e <_ZL9rf12_xferj>
    1460:	87 e7       	ldi	r24, 0x77	; 119
    1462:	9c ec       	ldi	r25, 0xCC	; 204
    1464:	fc dd       	rcall	.-1032   	; 0x105e <_ZL9rf12_xferj>
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 ee       	ldi	r25, 0xE0	; 224
    146a:	f9 dd       	rcall	.-1038   	; 0x105e <_ZL9rf12_xferj>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	98 ec       	ldi	r25, 0xC8	; 200
    1470:	f6 dd       	rcall	.-1044   	; 0x105e <_ZL9rf12_xferj>
    1472:	89 e4       	ldi	r24, 0x49	; 73
    1474:	90 ec       	ldi	r25, 0xC0	; 192
    1476:	f3 dd       	rcall	.-1050   	; 0x105e <_ZL9rf12_xferj>
    1478:	84 e0       	ldi	r24, 0x04	; 4
    147a:	80 93 8b 01 	sts	0x018B, r24
    147e:	e7 dd       	rcall	.-1074   	; 0x104e <_ZL15allowInterruptsv>
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	08 95       	ret

00001486 <_Z15rf12_initializehhh>:
    1486:	1f 93       	push	r17
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	c8 2f       	mov	r28, r24
    148e:	d6 2f       	mov	r29, r22
    1490:	14 2f       	mov	r17, r20
    1492:	80 93 8f 01 	sts	0x018F, r24
    1496:	40 93 8d 01 	sts	0x018D, r20
    149a:	60 93 90 01 	sts	0x0190, r22
    149e:	0d de       	rcall	.-998    	; 0x10ba <_Z12rf12_spiInitv>
    14a0:	9c df       	rcall	.-200    	; 0x13da <_Z21rf12_interruptcontrolv>
    14a2:	82 e8       	ldi	r24, 0x82	; 130
    14a4:	9a ec       	ldi	r25, 0xCA	; 202
    14a6:	db dd       	rcall	.-1098   	; 0x105e <_ZL9rf12_xferj>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	9e ef       	ldi	r25, 0xFE	; 254
    14ac:	d8 dd       	rcall	.-1104   	; 0x105e <_ZL9rf12_xferj>
    14ae:	85 e0       	ldi	r24, 0x05	; 5
    14b0:	80 93 8b 01 	sts	0x018B, r24
    14b4:	83 b7       	in	r24, 0x33	; 51
    14b6:	81 7f       	andi	r24, 0xF1	; 241
    14b8:	83 bf       	out	0x33, r24	; 51
    14ba:	80 91 8b 01 	lds	r24, 0x018B
    14be:	85 30       	cpi	r24, 0x05	; 5
    14c0:	59 f4       	brne	.+22     	; 0x14d8 <_Z15rf12_initializehhh+0x52>
    14c2:	93 b7       	in	r25, 0x33	; 51
    14c4:	91 60       	ori	r25, 0x01	; 1
    14c6:	93 bf       	out	0x33, r25	; 51
    14c8:	88 95       	sleep
    14ca:	93 b7       	in	r25, 0x33	; 51
    14cc:	9e 7f       	andi	r25, 0xFE	; 254
    14ce:	93 bf       	out	0x33, r25	; 51
    14d0:	90 91 8b 01 	lds	r25, 0x018B
    14d4:	95 30       	cpi	r25, 0x05	; 5
    14d6:	a9 f3       	breq	.-22     	; 0x14c2 <_Z15rf12_initializehhh+0x3c>
    14d8:	41 2f       	mov	r20, r17
    14da:	6d 2f       	mov	r22, r29
    14dc:	8c 2f       	mov	r24, r28
    14de:	7f df       	rcall	.-258    	; 0x13de <_Z12rf12_restorehhh>
    14e0:	80 91 8f 01 	lds	r24, 0x018F
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	08 95       	ret

000014ec <_Z16rf12_setWatchdogm>:
/// interrupt in the RFM12 module. Use rf12_wakeup() to check if the wakeup-interrupt
/// fired. This allows very deep sleep states (timer off) while still being able to wakeup
/// because of the external interrupt. The RFM12b wakeup-timer only needs about 1.5µA.
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
    14ec:	cf 92       	push	r12
    14ee:	df 92       	push	r13
    14f0:	ef 92       	push	r14
    14f2:	ff 92       	push	r15
    14f4:	cf 93       	push	r28
    14f6:	6b 01       	movw	r12, r22
    14f8:	7c 01       	movw	r14, r24
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    14fa:	8f ef       	ldi	r24, 0xFF	; 255
    14fc:	c8 16       	cp	r12, r24
    14fe:	d1 04       	cpc	r13, r1
    1500:	e1 04       	cpc	r14, r1
    1502:	f1 04       	cpc	r15, r1
    1504:	79 f0       	breq	.+30     	; 0x1524 <_Z16rf12_setWatchdogm+0x38>
    1506:	70 f0       	brcs	.+28     	; 0x1524 <_Z16rf12_setWatchdogm+0x38>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    1508:	c0 e0       	ldi	r28, 0x00	; 0
	while (m > 255) {
		r  += 1;
    150a:	cf 5f       	subi	r28, 0xFF	; 255
		m >>= 1;
    150c:	f6 94       	lsr	r15
    150e:	e7 94       	ror	r14
    1510:	d7 94       	ror	r13
    1512:	c7 94       	ror	r12
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    1514:	8f ef       	ldi	r24, 0xFF	; 255
    1516:	c8 16       	cp	r12, r24
    1518:	d1 04       	cpc	r13, r1
    151a:	e1 04       	cpc	r14, r1
    151c:	f1 04       	cpc	r15, r1
    151e:	09 f0       	breq	.+2      	; 0x1522 <_Z16rf12_setWatchdogm+0x36>
    1520:	a0 f7       	brcc	.-24     	; 0x150a <_Z16rf12_setWatchdogm+0x1e>
    1522:	01 c0       	rjmp	.+2      	; 0x1526 <_Z16rf12_setWatchdogm+0x3a>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    1524:	c0 e0       	ldi	r28, 0x00	; 0
		m >>= 1;
	}
	
	// Disable old wakeup-timer if enabled
//	if (bitRead(rfmstate,1)) {
	if ((rfmstate>>1)&0x01){
    1526:	80 91 89 01 	lds	r24, 0x0189
    152a:	90 91 8a 01 	lds	r25, 0x018A
    152e:	81 ff       	sbrs	r24, 1
    1530:	0e c0       	rjmp	.+28     	; 0x154e <_Z16rf12_setWatchdogm+0x62>
		//bitClear(rfmstate,1);
		rfmstate &= ~(1 << 1);
    1532:	80 91 89 01 	lds	r24, 0x0189
    1536:	90 91 8a 01 	lds	r25, 0x018A
    153a:	8d 7f       	andi	r24, 0xFD	; 253
    153c:	90 93 8a 01 	sts	0x018A, r25
    1540:	80 93 89 01 	sts	0x0189, r24
		rf12_xfer(rfmstate);
    1544:	80 91 89 01 	lds	r24, 0x0189
    1548:	90 91 8a 01 	lds	r25, 0x018A
    154c:	88 dd       	rcall	.-1264   	; 0x105e <_ZL9rf12_xferj>
	}
	
	// enable wakeup call if we have to
	if (m>0) {
    154e:	c1 14       	cp	r12, r1
    1550:	d1 04       	cpc	r13, r1
    1552:	e1 04       	cpc	r14, r1
    1554:	f1 04       	cpc	r15, r1
    1556:	b1 f0       	breq	.+44     	; 0x1584 <_Z16rf12_setWatchdogm+0x98>
		// write time to wakeup-register
		rf12_xfer(RF_WAKEUP_TIMER | (r<<8) | m);
    1558:	3c 2f       	mov	r19, r28
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	d7 01       	movw	r26, r14
    155e:	c6 01       	movw	r24, r12
    1560:	90 6e       	ori	r25, 0xE0	; 224
    1562:	82 2b       	or	r24, r18
    1564:	93 2b       	or	r25, r19
    1566:	7b dd       	rcall	.-1290   	; 0x105e <_ZL9rf12_xferj>
		// enable wakeup
		//bitSet(rfmstate,1);
		rfmstate |= (1 << 1);
    1568:	80 91 89 01 	lds	r24, 0x0189
    156c:	90 91 8a 01 	lds	r25, 0x018A
    1570:	82 60       	ori	r24, 0x02	; 2
    1572:	90 93 8a 01 	sts	0x018A, r25
    1576:	80 93 89 01 	sts	0x0189, r24
		rf12_xfer(rfmstate);
    157a:	80 91 89 01 	lds	r24, 0x0189
    157e:	90 91 8a 01 	lds	r25, 0x018A
    1582:	6d dd       	rcall	.-1318   	; 0x105e <_ZL9rf12_xferj>
	}
}
    1584:	cf 91       	pop	r28
    1586:	ff 90       	pop	r15
    1588:	ef 90       	pop	r14
    158a:	df 90       	pop	r13
    158c:	cf 90       	pop	r12
    158e:	08 95       	ret

00001590 <__vector_1>:
	}

}


ISR(INT0_vect) {
    1590:	1f 92       	push	r1
    1592:	0f 92       	push	r0
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	0f 92       	push	r0
    1598:	11 24       	eor	r1, r1
    159a:	1f 93       	push	r17
    159c:	2f 93       	push	r18
    159e:	3f 93       	push	r19
    15a0:	4f 93       	push	r20
    15a2:	5f 93       	push	r21
    15a4:	6f 93       	push	r22
    15a6:	7f 93       	push	r23
    15a8:	8f 93       	push	r24
    15aa:	9f 93       	push	r25
    15ac:	af 93       	push	r26
    15ae:	bf 93       	push	r27
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	ef 93       	push	r30
    15b6:	ff 93       	push	r31
/// Requests RFM12 state from RF module and reads back a waiting data byte if there is
/// any.
/// One of two commands accessing SPI, so interrupts disabled in here
/// @param *data Pointer to  byte where to write the received data to (if any)
static uint16_t rf12_xferState (uint8_t *data) {
	blockInterrupts();
    15b8:	48 dd       	rcall	.-1392   	; 0x104a <_ZL15blockInterruptsv>

	// writing can take place at full speed, even 8 MHz works
	//bitClear(SS_PORT, cs_pin);
	PORT_RFM_CS &= ~(1<<BIT_RFM_CS); //clear CS
    15ba:	2a 98       	cbi	0x05, 2	; 5
	uint16_t res = rf12_byte(0x00) << 8;
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	49 dd       	rcall	.-1390   	; 0x1052 <_ZL9rf12_byteh>
    15c0:	d8 2f       	mov	r29, r24
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	c8 2f       	mov	r28, r24
	res |= rf12_byte(0x00);
    15c6:	45 dd       	rcall	.-1398   	; 0x1052 <_ZL9rf12_byteh>
    15c8:	c8 2b       	or	r28, r24
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
    15ca:	dd 23       	and	r29, r29
    15cc:	2c f4       	brge	.+10     	; 0x15d8 <__vector_1+0x48>
    15ce:	80 91 8b 01 	lds	r24, 0x018B
    15d2:	87 30       	cpi	r24, 0x07	; 7
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <__vector_1+0x48>
    15d6:	0f c1       	rjmp	.+542    	; 0x17f6 <__vector_1+0x266>
		#if F_CPU > 10000000
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
		#endif
	}
	
	PORT_RFM_CS |= (1 << BIT_RFM_CS); //  bitSet(SS_PORT, cs_pin);
    15d8:	2a 9a       	sbi	0x05, 2	; 5

	allowInterrupts();
    15da:	39 dd       	rcall	.-1422   	; 0x104e <_ZL15allowInterruptsv>
/// @details
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uint8_t in;
	state = rf12_xferState(&in);
    15dc:	d0 93 88 01 	sts	0x0188, r29
    15e0:	c0 93 87 01 	sts	0x0187, r28

	// data received or byte needed for sending
	if (state & RF_FIFO_BIT) {
    15e4:	20 91 87 01 	lds	r18, 0x0187
    15e8:	30 91 88 01 	lds	r19, 0x0188
    15ec:	33 23       	and	r19, r19
    15ee:	0c f0       	brlt	.+2      	; 0x15f2 <__vector_1+0x62>
    15f0:	e1 c0       	rjmp	.+450    	; 0x17b4 <__vector_1+0x224>
		
		// RECEIVING - RECEIVING - RECEIVING!
		if (rxstate == TXRECV) {  // we are receiving
    15f2:	80 91 8b 01 	lds	r24, 0x018B
    15f6:	87 30       	cpi	r24, 0x07	; 7
    15f8:	09 f0       	breq	.+2      	; 0x15fc <__vector_1+0x6c>
    15fa:	78 c0       	rjmp	.+240    	; 0x16ec <__vector_1+0x15c>

			if (rxfill == 0 && group != 0)
    15fc:	80 91 8c 01 	lds	r24, 0x018C
    1600:	81 11       	cpse	r24, r1
    1602:	04 c0       	rjmp	.+8      	; 0x160c <__vector_1+0x7c>
    1604:	80 91 8d 01 	lds	r24, 0x018D
    1608:	81 11       	cpse	r24, r1
    160a:	ff c0       	rjmp	.+510    	; 0x180a <__vector_1+0x27a>
			rf12_buf[rxfill++] = group;

			rf12_buf[rxfill++] = in;
    160c:	80 91 8c 01 	lds	r24, 0x018C
    1610:	e8 2f       	mov	r30, r24
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	e5 5c       	subi	r30, 0xC5	; 197
    1616:	fe 4f       	sbci	r31, 0xFE	; 254
    1618:	10 83       	st	Z, r17
    161a:	8f 5f       	subi	r24, 0xFF	; 255
    161c:	80 93 8c 01 	sts	0x018C, r24
			rf12_crc = _crc16_update(rf12_crc, in);
    1620:	20 91 82 01 	lds	r18, 0x0182
    1624:	30 91 83 01 	lds	r19, 0x0183
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    1628:	21 27       	eor	r18, r17
    162a:	12 2f       	mov	r17, r18
    162c:	12 95       	swap	r17
    162e:	12 27       	eor	r17, r18
    1630:	01 2e       	mov	r0, r17
    1632:	16 95       	lsr	r17
    1634:	16 95       	lsr	r17
    1636:	10 25       	eor	r17, r0
    1638:	01 2e       	mov	r0, r17
    163a:	16 95       	lsr	r17
    163c:	10 25       	eor	r17, r0
    163e:	17 70       	andi	r17, 0x07	; 7
    1640:	02 2e       	mov	r0, r18
    1642:	23 2f       	mov	r18, r19
    1644:	16 95       	lsr	r17
    1646:	07 94       	ror	r0
    1648:	17 95       	ror	r17
    164a:	30 2d       	mov	r19, r0
    164c:	21 27       	eor	r18, r17
    164e:	06 94       	lsr	r0
    1650:	17 95       	ror	r17
    1652:	30 25       	eor	r19, r0
    1654:	21 27       	eor	r18, r17
    1656:	30 93 83 01 	sts	0x0183, r19
    165a:	20 93 82 01 	sts	0x0182, r18

			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
    165e:	e0 91 85 01 	lds	r30, 0x0185
    1662:	e3 30       	cpi	r30, 0x03	; 3
    1664:	18 f5       	brcc	.+70     	; 0x16ac <__vector_1+0x11c>
    1666:	80 91 8c 01 	lds	r24, 0x018C
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 97       	sbiw	r24, 0x02	; 2
    166e:	60 91 84 01 	lds	r22, 0x0184
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	ca d1       	rcall	.+916    	; 0x1a0a <__divmodhi4>
    1676:	89 2b       	or	r24, r25
    1678:	09 f4       	brne	.+2      	; 0x167c <__vector_1+0xec>
    167a:	d2 c0       	rjmp	.+420    	; 0x1820 <__vector_1+0x290>
    167c:	17 c0       	rjmp	.+46     	; 0x16ac <__vector_1+0x11c>
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    167e:	f0 e0       	ldi	r31, 0x00	; 0
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
    1680:	ea 5e       	subi	r30, 0xEA	; 234
    1682:	fe 4f       	sbci	r31, 0xFE	; 254
				: (drssi_dec_tree[drssi] >> 4);
    1684:	80 81       	ld	r24, Z
    1686:	8f 70       	andi	r24, 0x0F	; 15
    1688:	06 c0       	rjmp	.+12     	; 0x1696 <__vector_1+0x106>
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	ea 5e       	subi	r30, 0xEA	; 234
    168e:	fe 4f       	sbci	r31, 0xFE	; 254
    1690:	80 81       	ld	r24, Z
    1692:	82 95       	swap	r24
    1694:	8f 70       	andi	r24, 0x0F	; 15
    1696:	80 93 85 01 	sts	0x0185, r24
				if ( drssi < 3 ) {     // not yet final destination, set new threshold
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	38 f4       	brcc	.+14     	; 0x16ac <__vector_1+0x11c>
					rf12_xfer(RF_RECV_CONTROL | drssi*2+1);
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	01 96       	adiw	r24, 0x01	; 1
    16a6:	80 6a       	ori	r24, 0xA0	; 160
    16a8:	94 69       	ori	r25, 0x94	; 148
    16aa:	d9 dc       	rcall	.-1614   	; 0x105e <_ZL9rf12_xferj>
				}
			}

			// check if we got all the bytes (or maximum packet length was reached)
			if (fixedLength) {
    16ac:	80 91 8e 01 	lds	r24, 0x018E
    16b0:	88 23       	and	r24, r24
    16b2:	59 f0       	breq	.+22     	; 0x16ca <__vector_1+0x13a>
				if (rxfill >= fixedLength || rxfill >= RF_MAX) {
    16b4:	90 91 8c 01 	lds	r25, 0x018C
    16b8:	98 17       	cp	r25, r24
    16ba:	28 f4       	brcc	.+10     	; 0x16c6 <__vector_1+0x136>
    16bc:	80 91 8c 01 	lds	r24, 0x018C
    16c0:	87 34       	cpi	r24, 0x47	; 71
    16c2:	08 f4       	brcc	.+2      	; 0x16c6 <__vector_1+0x136>
    16c4:	77 c0       	rjmp	.+238    	; 0x17b4 <__vector_1+0x224>
					rf12_idle();
    16c6:	e2 dc       	rcall	.-1596   	; 0x108c <_ZL9rf12_idlev>
    16c8:	75 c0       	rjmp	.+234    	; 0x17b4 <__vector_1+0x224>
				}
			} else if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX) {
    16ca:	20 91 8c 01 	lds	r18, 0x018C
    16ce:	80 91 3d 01 	lds	r24, 0x013D
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	05 96       	adiw	r24, 0x05	; 5
    16d8:	28 17       	cp	r18, r24
    16da:	39 07       	cpc	r19, r25
    16dc:	2c f4       	brge	.+10     	; 0x16e8 <__vector_1+0x158>
    16de:	80 91 8c 01 	lds	r24, 0x018C
    16e2:	87 34       	cpi	r24, 0x47	; 71
    16e4:	08 f4       	brcc	.+2      	; 0x16e8 <__vector_1+0x158>
    16e6:	66 c0       	rjmp	.+204    	; 0x17b4 <__vector_1+0x224>
				//PORTB |= _BV(0); // pb0 aan
				rf12_idle();
    16e8:	d1 dc       	rcall	.-1630   	; 0x108c <_ZL9rf12_idlev>
    16ea:	64 c0       	rjmp	.+200    	; 0x17b4 <__vector_1+0x224>
			
			// SENDING - SENDING - SENDING!
			} else {                  // we are sending
			uint8_t out;

			if (rxstate < 0) {
    16ec:	80 91 8b 01 	lds	r24, 0x018B
    16f0:	88 23       	and	r24, r24
    16f2:	0c f0       	brlt	.+2      	; 0x16f6 <__vector_1+0x166>
    16f4:	2f c0       	rjmp	.+94     	; 0x1754 <__vector_1+0x1c4>
				uint8_t pos = 3 + rf12_len + rxstate++;
    16f6:	e0 91 3d 01 	lds	r30, 0x013D
    16fa:	80 91 8b 01 	lds	r24, 0x018B
    16fe:	98 2f       	mov	r25, r24
    1700:	9f 5f       	subi	r25, 0xFF	; 255
    1702:	90 93 8b 01 	sts	0x018B, r25
    1706:	ed 5f       	subi	r30, 0xFD	; 253
    1708:	8e 0f       	add	r24, r30
				out = rf12_buf[pos];
    170a:	e8 2f       	mov	r30, r24
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	e5 5c       	subi	r30, 0xC5	; 197
    1710:	fe 4f       	sbci	r31, 0xFE	; 254
    1712:	80 81       	ld	r24, Z
				rf12_crc = _crc16_update(rf12_crc, out);
    1714:	20 91 82 01 	lds	r18, 0x0182
    1718:	30 91 83 01 	lds	r19, 0x0183
    171c:	28 27       	eor	r18, r24
    171e:	92 2f       	mov	r25, r18
    1720:	92 95       	swap	r25
    1722:	92 27       	eor	r25, r18
    1724:	09 2e       	mov	r0, r25
    1726:	96 95       	lsr	r25
    1728:	96 95       	lsr	r25
    172a:	90 25       	eor	r25, r0
    172c:	09 2e       	mov	r0, r25
    172e:	96 95       	lsr	r25
    1730:	90 25       	eor	r25, r0
    1732:	97 70       	andi	r25, 0x07	; 7
    1734:	02 2e       	mov	r0, r18
    1736:	23 2f       	mov	r18, r19
    1738:	96 95       	lsr	r25
    173a:	07 94       	ror	r0
    173c:	97 95       	ror	r25
    173e:	30 2d       	mov	r19, r0
    1740:	29 27       	eor	r18, r25
    1742:	06 94       	lsr	r0
    1744:	97 95       	ror	r25
    1746:	30 25       	eor	r19, r0
    1748:	29 27       	eor	r18, r25
    174a:	30 93 83 01 	sts	0x0183, r19
    174e:	20 93 82 01 	sts	0x0182, r18
    1752:	2d c0       	rjmp	.+90     	; 0x17ae <__vector_1+0x21e>
			} else
			switch (rxstate++) {
    1754:	80 91 8b 01 	lds	r24, 0x018B
    1758:	98 2f       	mov	r25, r24
    175a:	9f 5f       	subi	r25, 0xFF	; 255
    175c:	90 93 8b 01 	sts	0x018B, r25
    1760:	83 30       	cpi	r24, 0x03	; 3
    1762:	09 f1       	breq	.+66     	; 0x17a6 <__vector_1+0x216>
    1764:	2c f4       	brge	.+10     	; 0x1770 <__vector_1+0x1e0>
    1766:	88 23       	and	r24, r24
    1768:	99 f0       	breq	.+38     	; 0x1790 <__vector_1+0x200>
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	f9 f4       	brne	.+62     	; 0x17ac <__vector_1+0x21c>
    176e:	15 c0       	rjmp	.+42     	; 0x179a <__vector_1+0x20a>
    1770:	8b 30       	cpi	r24, 0x0B	; 11
    1772:	19 f0       	breq	.+6      	; 0x177a <__vector_1+0x1ea>
    1774:	8c 30       	cpi	r24, 0x0C	; 12
    1776:	d1 f4       	brne	.+52     	; 0x17ac <__vector_1+0x21c>
    1778:	02 c0       	rjmp	.+4      	; 0x177e <__vector_1+0x1ee>
				case TXSYN1: out = 0x2D; break;
    177a:	8d e2       	ldi	r24, 0x2D	; 45
    177c:	18 c0       	rjmp	.+48     	; 0x17ae <__vector_1+0x21e>
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
    177e:	80 91 8d 01 	lds	r24, 0x018D
    1782:	20 91 3d 01 	lds	r18, 0x013D
    1786:	9e ef       	ldi	r25, 0xFE	; 254
    1788:	92 1b       	sub	r25, r18
    178a:	90 93 8b 01 	sts	0x018B, r25
    178e:	0f c0       	rjmp	.+30     	; 0x17ae <__vector_1+0x21e>
				case TXCRC1: out = rf12_crc; break;
    1790:	80 91 82 01 	lds	r24, 0x0182
    1794:	90 91 83 01 	lds	r25, 0x0183
    1798:	0a c0       	rjmp	.+20     	; 0x17ae <__vector_1+0x21e>
				case TXCRC2: out = rf12_crc >> 8; break;
    179a:	80 91 82 01 	lds	r24, 0x0182
    179e:	90 91 83 01 	lds	r25, 0x0183
    17a2:	89 2f       	mov	r24, r25
    17a4:	04 c0       	rjmp	.+8      	; 0x17ae <__vector_1+0x21e>
				case TXDONE: rf12_idle(); // fall through
    17a6:	72 dc       	rcall	.-1820   	; 0x108c <_ZL9rf12_idlev>
				default:     out = 0xAA;
    17a8:	8a ea       	ldi	r24, 0xAA	; 170
    17aa:	01 c0       	rjmp	.+2      	; 0x17ae <__vector_1+0x21e>
    17ac:	8a ea       	ldi	r24, 0xAA	; 170
			}

			rf12_xfer(RF_TXREG_WRITE | out);
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	98 6b       	ori	r25, 0xB8	; 184
    17b2:	55 dc       	rcall	.-1878   	; 0x105e <_ZL9rf12_xferj>
		}
	}
	
	// power-on reset
	if (state & RF_POR_BIT) {
    17b4:	80 91 87 01 	lds	r24, 0x0187
    17b8:	90 91 88 01 	lds	r25, 0x0188
    17bc:	96 ff       	sbrs	r25, 6
    17be:	03 c0       	rjmp	.+6      	; 0x17c6 <__vector_1+0x236>
		rxstate = POR_RECEIVED;
    17c0:	86 e0       	ldi	r24, 0x06	; 6
    17c2:	80 93 8b 01 	sts	0x018B, r24
	}

	// got wakeup call
	if (state & RF_WDG_BIT) {
    17c6:	80 91 87 01 	lds	r24, 0x0187
    17ca:	90 91 88 01 	lds	r25, 0x0188
    17ce:	94 ff       	sbrs	r25, 4
    17d0:	07 c0       	rjmp	.+14     	; 0x17e0 <__vector_1+0x250>
		rf12_setWatchdog(0);
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	cb 01       	movw	r24, r22
    17d8:	89 de       	rcall	.-750    	; 0x14ec <_Z16rf12_setWatchdogm>
		rf12_gotwakeup = 1;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	80 93 86 01 	sts	0x0186, r24
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
    17e0:	80 91 87 01 	lds	r24, 0x0187
    17e4:	90 91 88 01 	lds	r25, 0x0188
    17e8:	95 ff       	sbrs	r25, 5
    17ea:	21 c0       	rjmp	.+66     	; 0x182e <__vector_1+0x29e>
		rf12_idle();
    17ec:	4f dc       	rcall	.-1890   	; 0x108c <_ZL9rf12_idlev>
		rxstate = TXIDLE;
    17ee:	84 e0       	ldi	r24, 0x04	; 4
    17f0:	80 93 8b 01 	sts	0x018B, r24
    17f4:	1c c0       	rjmp	.+56     	; 0x182e <__vector_1+0x29e>
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
		// slow down to under 2.5 MHz
		#if F_CPU > 10000000

		SPCR |= (1 << SPR0); //  bitSet(SPCR, SPR0);
    17f6:	8c b5       	in	r24, 0x2c	; 44
    17f8:	81 60       	ori	r24, 0x01	; 1
    17fa:	8c bd       	out	0x2c, r24	; 44
		#endif
		
		*data = rf12_byte(0x00);
    17fc:	80 e0       	ldi	r24, 0x00	; 0
    17fe:	29 dc       	rcall	.-1966   	; 0x1052 <_ZL9rf12_byteh>
    1800:	18 2f       	mov	r17, r24
		
		#if F_CPU > 10000000
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
    1802:	8c b5       	in	r24, 0x2c	; 44
    1804:	8e 7f       	andi	r24, 0xFE	; 254
    1806:	8c bd       	out	0x2c, r24	; 44
    1808:	e7 ce       	rjmp	.-562    	; 0x15d8 <__vector_1+0x48>
		
		// RECEIVING - RECEIVING - RECEIVING!
		if (rxstate == TXRECV) {  // we are receiving

			if (rxfill == 0 && group != 0)
			rf12_buf[rxfill++] = group;
    180a:	90 91 8c 01 	lds	r25, 0x018C
    180e:	e9 2f       	mov	r30, r25
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	e5 5c       	subi	r30, 0xC5	; 197
    1814:	fe 4f       	sbci	r31, 0xFE	; 254
    1816:	80 83       	st	Z, r24
    1818:	9f 5f       	subi	r25, 0xFF	; 255
    181a:	90 93 8c 01 	sts	0x018C, r25
    181e:	f6 ce       	rjmp	.-532    	; 0x160c <__vector_1+0x7c>
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    1820:	80 91 87 01 	lds	r24, 0x0187
    1824:	90 91 88 01 	lds	r25, 0x0188
    1828:	90 fd       	sbrc	r25, 0
    182a:	29 cf       	rjmp	.-430    	; 0x167e <__vector_1+0xee>
    182c:	2e cf       	rjmp	.-420    	; 0x168a <__vector_1+0xfa>
}


ISR(INT0_vect) {
		rf12_interrupt();
}
    182e:	ff 91       	pop	r31
    1830:	ef 91       	pop	r30
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	bf 91       	pop	r27
    1838:	af 91       	pop	r26
    183a:	9f 91       	pop	r25
    183c:	8f 91       	pop	r24
    183e:	7f 91       	pop	r23
    1840:	6f 91       	pop	r22
    1842:	5f 91       	pop	r21
    1844:	4f 91       	pop	r20
    1846:	3f 91       	pop	r19
    1848:	2f 91       	pop	r18
    184a:	1f 91       	pop	r17
    184c:	0f 90       	pop	r0
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	0f 90       	pop	r0
    1852:	1f 90       	pop	r1
    1854:	18 95       	reti

00001856 <tone_init>:
#include <avr/power.h>

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume counsigned long _tAC_time;ntrol.

void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
    1856:	21 9a       	sbi	0x04, 1	; 4
    1858:	08 95       	ret

0000185a <noTone>:


	void noTone() {
	//	uart0_puts("STOP");
	//	TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
		 TCCR1B  &= ~(1<<0) | ~(1<<1) | ~(1<<2) ;        // No clock source (Timer/Counter stopped).
    185a:	e1 e8       	ldi	r30, 0x81	; 129
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	80 83       	st	Z, r24
		 TCCR1A  = 0x00;       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
    1862:	10 92 80 00 	sts	0x0080, r1
		 power_timer1_disable();
    1866:	e4 e6       	ldi	r30, 0x64	; 100
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	88 60       	ori	r24, 0x08	; 8
    186e:	80 83       	st	Z, r24
		PORTB &= ~(1 << 1); // Set pin PB1 to LOW.
    1870:	29 98       	cbi	0x05, 1	; 5
    1872:	08 95       	ret

00001874 <tone>:
void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
	
}

void tone(unsigned long frequency, uint8_t volume) {
    1874:	cf 92       	push	r12
    1876:	df 92       	push	r13
    1878:	ef 92       	push	r14
    187a:	ff 92       	push	r15
    187c:	cf 93       	push	r28
    187e:	df 93       	push	r29
    1880:	6b 01       	movw	r12, r22
    1882:	7c 01       	movw	r14, r24
	 power_timer1_enable();
    1884:	e4 e6       	ldi	r30, 0x64	; 100
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	87 7f       	andi	r24, 0xF7	; 247
    188c:	80 83       	st	Z, r24
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
    188e:	c1 14       	cp	r12, r1
    1890:	d1 04       	cpc	r13, r1
    1892:	e1 04       	cpc	r14, r1
    1894:	f1 04       	cpc	r15, r1
    1896:	11 f0       	breq	.+4      	; 0x189c <tone+0x28>
    1898:	41 11       	cpse	r20, r1
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <tone+0x2c>
    189c:	de df       	rcall	.-68     	; 0x185a <noTone>
    189e:	4d c0       	rjmp	.+154    	; 0x193a <tone+0xc6>
    18a0:	d4 2f       	mov	r29, r20
    18a2:	4b 30       	cpi	r20, 0x0B	; 11
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <tone+0x34>
    18a6:	da e0       	ldi	r29, 0x0A	; 10
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	72 e1       	ldi	r23, 0x12	; 18
    18ac:	8a e7       	ldi	r24, 0x7A	; 122
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	a7 01       	movw	r20, r14
    18b2:	96 01       	movw	r18, r12
    18b4:	bd d0       	rcall	.+378    	; 0x1a30 <__udivmodsi4>
    18b6:	cc 24       	eor	r12, r12
    18b8:	ca 94       	dec	r12
    18ba:	dc 2c       	mov	r13, r12
    18bc:	76 01       	movw	r14, r12
    18be:	c2 0e       	add	r12, r18
    18c0:	d3 1e       	adc	r13, r19
    18c2:	e4 1e       	adc	r14, r20
    18c4:	f5 1e       	adc	r15, r21
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    18c6:	c1 14       	cp	r12, r1
    18c8:	d1 04       	cpc	r13, r1
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	e8 06       	cpc	r14, r24
    18ce:	f1 04       	cpc	r15, r1
    18d0:	58 f0       	brcs	.+22     	; 0x18e8 <tone+0x74>
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
    18d2:	cd 2c       	mov	r12, r13
    18d4:	de 2c       	mov	r13, r14
    18d6:	ef 2c       	mov	r14, r15
    18d8:	ff 24       	eor	r15, r15
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	c8 1a       	sub	r12, r24
    18de:	d1 08       	sbc	r13, r1
    18e0:	e1 08       	sbc	r14, r1
    18e2:	f1 08       	sbc	r15, r1
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    18e4:	c4 e0       	ldi	r28, 0x04	; 4
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <tone+0x76>
	 power_timer1_enable();
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
    18e8:	c1 e0       	ldi	r28, 0x01	; 1
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
		}
	
		unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
    18ea:	ed 2f       	mov	r30, r29
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	ed 5f       	subi	r30, 0xFD	; 253
    18f0:	fe 4f       	sbci	r31, 0xFE	; 254
    18f2:	20 81       	ld	r18, Z
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	50 e0       	ldi	r21, 0x00	; 0
    18fa:	c7 01       	movw	r24, r14
    18fc:	b6 01       	movw	r22, r12
    18fe:	98 d0       	rcall	.+304    	; 0x1a30 <__udivmodsi4>
		
		ICR1   = top;							// Set the top.
    1900:	d0 92 87 00 	sts	0x0087, r13
    1904:	c0 92 86 00 	sts	0x0086, r12
		if (TCNT1 > top) TCNT1 = top;			// Counter over the top, put within range.
    1908:	80 91 84 00 	lds	r24, 0x0084
    190c:	90 91 85 00 	lds	r25, 0x0085
    1910:	a0 e0       	ldi	r26, 0x00	; 0
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	c8 16       	cp	r12, r24
    1916:	d9 06       	cpc	r13, r25
    1918:	ea 06       	cpc	r14, r26
    191a:	fb 06       	cpc	r15, r27
    191c:	20 f4       	brcc	.+8      	; 0x1926 <tone+0xb2>
    191e:	d0 92 85 00 	sts	0x0085, r13
    1922:	c0 92 84 00 	sts	0x0084, r12
			TCCR1B = _BV(WGM13)  | prescaler;   // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
    1926:	c0 61       	ori	r28, 0x10	; 16
    1928:	c0 93 81 00 	sts	0x0081, r28
			OCR1A  = duty;						// Set the duty cycle (volume).
    192c:	30 93 89 00 	sts	0x0089, r19
    1930:	20 93 88 00 	sts	0x0088, r18
			TCCR1A = _BV(COM1A1);				// Clear OC1A/OC1B on Compare Match (Set output to low level).
    1934:	80 e8       	ldi	r24, 0x80	; 128
    1936:	80 93 80 00 	sts	0x0080, r24
			

}
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	ff 90       	pop	r15
    1940:	ef 90       	pop	r14
    1942:	df 90       	pop	r13
    1944:	cf 90       	pop	r12
    1946:	08 95       	ret

00001948 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1948:	1f 92       	push	r1
    194a:	0f 92       	push	r0
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	0f 92       	push	r0
    1950:	11 24       	eor	r1, r1
    1952:	2f 93       	push	r18
    1954:	3f 93       	push	r19
    1956:	4f 93       	push	r20
    1958:	5f 93       	push	r21
    195a:	8f 93       	push	r24
    195c:	9f 93       	push	r25
    195e:	ef 93       	push	r30
    1960:	ff 93       	push	r31
    uint8_t data;
    uint8_t usr;
    uint8_t lastRxError;
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    1962:	40 91 c0 00 	lds	r20, 0x00C0
    data = UART0_DATA;
    1966:	50 91 c6 00 	lds	r21, 0x00C6
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    196a:	48 71       	andi	r20, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    196c:	80 91 93 01 	lds	r24, 0x0193
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	01 96       	adiw	r24, 0x01	; 1
    1974:	8f 77       	andi	r24, 0x7F	; 127
    1976:	99 27       	eor	r25, r25
    
    if ( tmphead == UART_RxTail ) {
    1978:	20 91 92 01 	lds	r18, 0x0192
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	28 17       	cp	r18, r24
    1980:	39 07       	cpc	r19, r25
    1982:	39 f0       	breq	.+14     	; 0x1992 <__vector_18+0x4a>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    } else {
        /* store new index */
        UART_RxHead = tmphead;
    1984:	80 93 93 01 	sts	0x0193, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1988:	fc 01       	movw	r30, r24
    198a:	ea 56       	subi	r30, 0x6A	; 106
    198c:	fe 4f       	sbci	r31, 0xFE	; 254
    198e:	50 83       	st	Z, r21
    1990:	01 c0       	rjmp	.+2      	; 0x1994 <__vector_18+0x4c>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX0_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1992:	42 e0       	ldi	r20, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
    1994:	40 93 91 01 	sts	0x0191, r20
}
    1998:	ff 91       	pop	r31
    199a:	ef 91       	pop	r30
    199c:	9f 91       	pop	r25
    199e:	8f 91       	pop	r24
    19a0:	5f 91       	pop	r21
    19a2:	4f 91       	pop	r20
    19a4:	3f 91       	pop	r19
    19a6:	2f 91       	pop	r18
    19a8:	0f 90       	pop	r0
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	0f 90       	pop	r0
    19ae:	1f 90       	pop	r1
    19b0:	18 95       	reti

000019b2 <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    19b2:	1f 92       	push	r1
    19b4:	0f 92       	push	r0
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	0f 92       	push	r0
    19ba:	11 24       	eor	r1, r1
    19bc:	8f 93       	push	r24
    19be:	9f 93       	push	r25
    19c0:	ef 93       	push	r30
    19c2:	ff 93       	push	r31
    uint16_t tmptail;

    if ( UART_TxHead != UART_TxTail) {
    19c4:	90 91 95 01 	lds	r25, 0x0195
    19c8:	80 91 94 01 	lds	r24, 0x0194
    19cc:	98 17       	cp	r25, r24
    19ce:	79 f0       	breq	.+30     	; 0x19ee <__vector_19+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX0_BUFFER_MASK;
    19d0:	80 91 94 01 	lds	r24, 0x0194
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	01 96       	adiw	r24, 0x01	; 1
    19d8:	8f 77       	andi	r24, 0x7F	; 127
    19da:	99 27       	eor	r25, r25
        UART_TxTail = tmptail;
    19dc:	80 93 94 01 	sts	0x0194, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    19e0:	fc 01       	movw	r30, r24
    19e2:	ea 5e       	subi	r30, 0xEA	; 234
    19e4:	fd 4f       	sbci	r31, 0xFD	; 253
    19e6:	80 81       	ld	r24, Z
    19e8:	80 93 c6 00 	sts	0x00C6, r24
    19ec:	05 c0       	rjmp	.+10     	; 0x19f8 <__vector_19+0x46>
    } else {
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    19ee:	e1 ec       	ldi	r30, 0xC1	; 193
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	8f 7d       	andi	r24, 0xDF	; 223
    19f6:	80 83       	st	Z, r24
    }
}
    19f8:	ff 91       	pop	r31
    19fa:	ef 91       	pop	r30
    19fc:	9f 91       	pop	r25
    19fe:	8f 91       	pop	r24
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	0f 90       	pop	r0
    1a06:	1f 90       	pop	r1
    1a08:	18 95       	reti

00001a0a <__divmodhi4>:
    1a0a:	97 fb       	bst	r25, 7
    1a0c:	07 2e       	mov	r0, r23
    1a0e:	16 f4       	brtc	.+4      	; 0x1a14 <__divmodhi4+0xa>
    1a10:	00 94       	com	r0
    1a12:	06 d0       	rcall	.+12     	; 0x1a20 <__divmodhi4_neg1>
    1a14:	77 fd       	sbrc	r23, 7
    1a16:	08 d0       	rcall	.+16     	; 0x1a28 <__divmodhi4_neg2>
    1a18:	2d d0       	rcall	.+90     	; 0x1a74 <__udivmodhi4>
    1a1a:	07 fc       	sbrc	r0, 7
    1a1c:	05 d0       	rcall	.+10     	; 0x1a28 <__divmodhi4_neg2>
    1a1e:	3e f4       	brtc	.+14     	; 0x1a2e <__divmodhi4_exit>

00001a20 <__divmodhi4_neg1>:
    1a20:	90 95       	com	r25
    1a22:	81 95       	neg	r24
    1a24:	9f 4f       	sbci	r25, 0xFF	; 255
    1a26:	08 95       	ret

00001a28 <__divmodhi4_neg2>:
    1a28:	70 95       	com	r23
    1a2a:	61 95       	neg	r22
    1a2c:	7f 4f       	sbci	r23, 0xFF	; 255

00001a2e <__divmodhi4_exit>:
    1a2e:	08 95       	ret

00001a30 <__udivmodsi4>:
    1a30:	a1 e2       	ldi	r26, 0x21	; 33
    1a32:	1a 2e       	mov	r1, r26
    1a34:	aa 1b       	sub	r26, r26
    1a36:	bb 1b       	sub	r27, r27
    1a38:	fd 01       	movw	r30, r26
    1a3a:	0d c0       	rjmp	.+26     	; 0x1a56 <__udivmodsi4_ep>

00001a3c <__udivmodsi4_loop>:
    1a3c:	aa 1f       	adc	r26, r26
    1a3e:	bb 1f       	adc	r27, r27
    1a40:	ee 1f       	adc	r30, r30
    1a42:	ff 1f       	adc	r31, r31
    1a44:	a2 17       	cp	r26, r18
    1a46:	b3 07       	cpc	r27, r19
    1a48:	e4 07       	cpc	r30, r20
    1a4a:	f5 07       	cpc	r31, r21
    1a4c:	20 f0       	brcs	.+8      	; 0x1a56 <__udivmodsi4_ep>
    1a4e:	a2 1b       	sub	r26, r18
    1a50:	b3 0b       	sbc	r27, r19
    1a52:	e4 0b       	sbc	r30, r20
    1a54:	f5 0b       	sbc	r31, r21

00001a56 <__udivmodsi4_ep>:
    1a56:	66 1f       	adc	r22, r22
    1a58:	77 1f       	adc	r23, r23
    1a5a:	88 1f       	adc	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	1a 94       	dec	r1
    1a60:	69 f7       	brne	.-38     	; 0x1a3c <__udivmodsi4_loop>
    1a62:	60 95       	com	r22
    1a64:	70 95       	com	r23
    1a66:	80 95       	com	r24
    1a68:	90 95       	com	r25
    1a6a:	9b 01       	movw	r18, r22
    1a6c:	ac 01       	movw	r20, r24
    1a6e:	bd 01       	movw	r22, r26
    1a70:	cf 01       	movw	r24, r30
    1a72:	08 95       	ret

00001a74 <__udivmodhi4>:
    1a74:	aa 1b       	sub	r26, r26
    1a76:	bb 1b       	sub	r27, r27
    1a78:	51 e1       	ldi	r21, 0x11	; 17
    1a7a:	07 c0       	rjmp	.+14     	; 0x1a8a <__udivmodhi4_ep>

00001a7c <__udivmodhi4_loop>:
    1a7c:	aa 1f       	adc	r26, r26
    1a7e:	bb 1f       	adc	r27, r27
    1a80:	a6 17       	cp	r26, r22
    1a82:	b7 07       	cpc	r27, r23
    1a84:	10 f0       	brcs	.+4      	; 0x1a8a <__udivmodhi4_ep>
    1a86:	a6 1b       	sub	r26, r22
    1a88:	b7 0b       	sbc	r27, r23

00001a8a <__udivmodhi4_ep>:
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	5a 95       	dec	r21
    1a90:	a9 f7       	brne	.-22     	; 0x1a7c <__udivmodhi4_loop>
    1a92:	80 95       	com	r24
    1a94:	90 95       	com	r25
    1a96:	bc 01       	movw	r22, r24
    1a98:	cd 01       	movw	r24, r26
    1a9a:	08 95       	ret

00001a9c <memcpy>:
    1a9c:	fb 01       	movw	r30, r22
    1a9e:	dc 01       	movw	r26, r24
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <memcpy+0xa>
    1aa2:	01 90       	ld	r0, Z+
    1aa4:	0d 92       	st	X+, r0
    1aa6:	41 50       	subi	r20, 0x01	; 1
    1aa8:	50 40       	sbci	r21, 0x00	; 0
    1aaa:	d8 f7       	brcc	.-10     	; 0x1aa2 <memcpy+0x6>
    1aac:	08 95       	ret

00001aae <_exit>:
    1aae:	f8 94       	cli

00001ab0 <__stop_program>:
    1ab0:	ff cf       	rjmp	.-2      	; 0x1ab0 <__stop_program>
