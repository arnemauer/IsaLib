
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00001840  000018d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001840  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017b  00800154  00800154  00001928  2**0
                  ALLOC
  3 .stab         00000e4c  00000000  00000000  00001928  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  00002774  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002acf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003a0  00000000  00000000  00002afe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003e02  00000000  00000000  00002e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000126a  00000000  00000000  00006ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002861  00000000  00000000  00007f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009bc  00000000  00000000  0000a76c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ebf  00000000  00000000  0000b128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002a86  00000000  00000000  0000bfe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000398  00000000  00000000  0000ea6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9b c1       	rjmp	.+822    	; 0x338 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__vector_1>
       8:	b3 c1       	rjmp	.+870    	; 0x370 <__bad_interrupt>
       a:	00 00       	nop
       c:	b1 c1       	rjmp	.+866    	; 0x370 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c1       	rjmp	.+862    	; 0x370 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c1       	rjmp	.+858    	; 0x370 <__bad_interrupt>
      16:	00 00       	nop
      18:	ab c1       	rjmp	.+854    	; 0x370 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	dd c5       	rjmp	.+3002   	; 0xbd8 <__vector_7>
      1e:	00 00       	nop
      20:	a7 c1       	rjmp	.+846    	; 0x370 <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c1       	rjmp	.+842    	; 0x370 <__bad_interrupt>
      26:	00 00       	nop
      28:	a3 c1       	rjmp	.+838    	; 0x370 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a1 c1       	rjmp	.+834    	; 0x370 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9f c1       	rjmp	.+830    	; 0x370 <__bad_interrupt>
      32:	00 00       	nop
      34:	9d c1       	rjmp	.+826    	; 0x370 <__bad_interrupt>
      36:	00 00       	nop
      38:	28 c2       	rjmp	.+1104   	; 0x48a <__vector_14>
      3a:	00 00       	nop
      3c:	99 c1       	rjmp	.+818    	; 0x370 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c1       	rjmp	.+814    	; 0x370 <__bad_interrupt>
      42:	00 00       	nop
      44:	95 c1       	rjmp	.+810    	; 0x370 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 2a 0b 	jmp	0x1654	; 0x1654 <__vector_18>
      4c:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__vector_19>
      50:	8f c1       	rjmp	.+798    	; 0x370 <__bad_interrupt>
      52:	00 00       	nop
      54:	8d c1       	rjmp	.+794    	; 0x370 <__bad_interrupt>
      56:	00 00       	nop
      58:	8b c1       	rjmp	.+790    	; 0x370 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	89 c1       	rjmp	.+786    	; 0x370 <__bad_interrupt>
      5e:	00 00       	nop
      60:	87 c1       	rjmp	.+782    	; 0x370 <__bad_interrupt>
      62:	00 00       	nop
      64:	85 c1       	rjmp	.+778    	; 0x370 <__bad_interrupt>
	...

00000068 <_ZL22sound_pattern_doorbell>:
      68:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      78:	b0 04 00 00 f4 01 00 00 00 00 00 00 e8 03 00 00     ................
      88:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      98:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000000a8 <_ZL19sound_pattern_phone>:
      a8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      b8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      c8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      d8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      e8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      f8:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     108:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     118:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     128:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     138:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     148:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     158:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     168:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     178:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     188:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
	...

000001a0 <_ZL18sound_pattern_help>:
     1a0:	dc 05 00 00 f4 01 00 00 00 00 00 00 f4 01 00 00     ................
     1b0:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................
     1c0:	dc 05 00 00 f4 01 00 00 00 00 00 00 f4 01 00 00     ................
     1d0:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000001e0 <_ZL18sound_pattern_fire>:
     1e0:	dc 05 00 00 f4 01 00 00 00 00 00 00 f4 01 00 00     ................
     1f0:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................
     200:	dc 05 00 00 f4 01 00 00 00 00 00 00 f4 01 00 00     ................
     210:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

00000220 <_ZL13flash_pattern>:
     220:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     230:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     240:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     250:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     260:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     270:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     280:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     290:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     2a0:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     2b0:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     2c0:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     2d0:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     2e0:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     2f0:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     300:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     310:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...

00000320 <_ZL11icon_colors>:
     320:	3d f5 00 00 b8 f5 ff 00 00 ff ff 00                 =...........

0000032c <_ZL16icon_led_numbers>:
     32c:	02 01 00 07 08 09 0f 0e 0d 0c 0b 0a                 ............

00000338 <__ctors_end>:
     338:	11 24       	eor	r1, r1
     33a:	1f be       	out	0x3f, r1	; 63
     33c:	cf ef       	ldi	r28, 0xFF	; 255
     33e:	d8 e0       	ldi	r29, 0x08	; 8
     340:	de bf       	out	0x3e, r29	; 62
     342:	cd bf       	out	0x3d, r28	; 61

00000344 <__do_copy_data>:
     344:	11 e0       	ldi	r17, 0x01	; 1
     346:	a0 e0       	ldi	r26, 0x00	; 0
     348:	b1 e0       	ldi	r27, 0x01	; 1
     34a:	e0 e4       	ldi	r30, 0x40	; 64
     34c:	f8 e1       	ldi	r31, 0x18	; 24
     34e:	02 c0       	rjmp	.+4      	; 0x354 <__do_copy_data+0x10>
     350:	05 90       	lpm	r0, Z+
     352:	0d 92       	st	X+, r0
     354:	a4 35       	cpi	r26, 0x54	; 84
     356:	b1 07       	cpc	r27, r17
     358:	d9 f7       	brne	.-10     	; 0x350 <__do_copy_data+0xc>

0000035a <__do_clear_bss>:
     35a:	22 e0       	ldi	r18, 0x02	; 2
     35c:	a4 e5       	ldi	r26, 0x54	; 84
     35e:	b1 e0       	ldi	r27, 0x01	; 1
     360:	01 c0       	rjmp	.+2      	; 0x364 <.do_clear_bss_start>

00000362 <.do_clear_bss_loop>:
     362:	1d 92       	st	X+, r1

00000364 <.do_clear_bss_start>:
     364:	af 3c       	cpi	r26, 0xCF	; 207
     366:	b2 07       	cpc	r27, r18
     368:	e1 f7       	brne	.-8      	; 0x362 <.do_clear_bss_loop>
     36a:	b4 d0       	rcall	.+360    	; 0x4d4 <main>
     36c:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <_exit>

00000370 <__bad_interrupt>:
     370:	47 ce       	rjmp	.-882    	; 0x0 <__vectors>

00000372 <I2C_init>:
     372:	88 e4       	ldi	r24, 0x48	; 72
     374:	80 93 b8 00 	sts	0x00B8, r24
     378:	08 95       	ret

0000037a <I2C_start>:
     37a:	ec eb       	ldi	r30, 0xBC	; 188
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	10 82       	st	Z, r1
     380:	94 ea       	ldi	r25, 0xA4	; 164
     382:	90 83       	st	Z, r25
     384:	90 81       	ld	r25, Z
     386:	99 23       	and	r25, r25
     388:	ec f7       	brge	.-6      	; 0x384 <I2C_start+0xa>
     38a:	90 91 b9 00 	lds	r25, 0x00B9
     38e:	98 7f       	andi	r25, 0xF8	; 248
     390:	98 30       	cpi	r25, 0x08	; 8
     392:	a1 f4       	brne	.+40     	; 0x3bc <I2C_start+0x42>
     394:	80 93 bb 00 	sts	0x00BB, r24
     398:	84 e8       	ldi	r24, 0x84	; 132
     39a:	80 93 bc 00 	sts	0x00BC, r24
     39e:	ec eb       	ldi	r30, 0xBC	; 188
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	80 81       	ld	r24, Z
     3a4:	88 23       	and	r24, r24
     3a6:	ec f7       	brge	.-6      	; 0x3a2 <I2C_start+0x28>
     3a8:	90 91 b9 00 	lds	r25, 0x00B9
     3ac:	98 7f       	andi	r25, 0xF8	; 248
     3ae:	98 31       	cpi	r25, 0x18	; 24
     3b0:	39 f0       	breq	.+14     	; 0x3c0 <I2C_start+0x46>
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	90 34       	cpi	r25, 0x40	; 64
     3b6:	29 f4       	brne	.+10     	; 0x3c2 <I2C_start+0x48>
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	08 95       	ret
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	08 95       	ret
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	08 95       	ret

000003c4 <I2C_write>:
     3c4:	80 93 bb 00 	sts	0x00BB, r24
     3c8:	84 e8       	ldi	r24, 0x84	; 132
     3ca:	80 93 bc 00 	sts	0x00BC, r24
     3ce:	ec eb       	ldi	r30, 0xBC	; 188
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	88 23       	and	r24, r24
     3d6:	ec f7       	brge	.-6      	; 0x3d2 <I2C_write+0xe>
     3d8:	90 91 b9 00 	lds	r25, 0x00B9
     3dc:	98 7f       	andi	r25, 0xF8	; 248
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	98 32       	cpi	r25, 0x28	; 40
     3e2:	09 f4       	brne	.+2      	; 0x3e6 <I2C_write+0x22>
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	08 95       	ret

000003e8 <I2C_read_ack>:
     3e8:	84 ec       	ldi	r24, 0xC4	; 196
     3ea:	80 93 bc 00 	sts	0x00BC, r24
     3ee:	ec eb       	ldi	r30, 0xBC	; 188
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	80 81       	ld	r24, Z
     3f4:	88 23       	and	r24, r24
     3f6:	ec f7       	brge	.-6      	; 0x3f2 <I2C_read_ack+0xa>
     3f8:	80 91 bb 00 	lds	r24, 0x00BB
     3fc:	08 95       	ret

000003fe <I2C_stop>:

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     3fe:	84 e9       	ldi	r24, 0x94	; 148
     400:	80 93 bc 00 	sts	0x00BC, r24
     404:	08 95       	ret

00000406 <log_s>:
 *
 * @param s The specified string
 */
void log_s(const char *s) {
#ifdef LOG_AVAILABLE
    uart0_puts(s);
     406:	0c 94 be 0b 	jmp	0x177c	; 0x177c <uart0_puts>
     40a:	08 95       	ret

0000040c <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	84 bd       	out	0x24, r24	; 36
     410:	93 e0       	ldi	r25, 0x03	; 3
     412:	95 bd       	out	0x25, r25	; 37
     414:	80 93 6e 00 	sts	0x006E, r24
     418:	8a ef       	ldi	r24, 0xFA	; 250
     41a:	87 bd       	out	0x27, r24	; 39
     41c:	08 95       	ret

0000041e <millis_get>:
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	8f b7       	in	r24, 0x3f	; 63
     424:	f8 94       	cli
     426:	00 91 54 01 	lds	r16, 0x0154
     42a:	10 91 55 01 	lds	r17, 0x0155
     42e:	20 91 56 01 	lds	r18, 0x0156
     432:	30 91 57 01 	lds	r19, 0x0157
     436:	8f bf       	out	0x3f, r24	; 63
     438:	60 2f       	mov	r22, r16
     43a:	71 2f       	mov	r23, r17
     43c:	82 2f       	mov	r24, r18
     43e:	93 2f       	mov	r25, r19
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	08 95       	ret

00000446 <millis_resume>:
     446:	e4 e6       	ldi	r30, 0x64	; 100
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8f 7d       	andi	r24, 0xDF	; 223
     44e:	80 83       	st	Z, r24
     450:	ee e6       	ldi	r30, 0x6E	; 110
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	80 81       	ld	r24, Z
     456:	82 60       	ori	r24, 0x02	; 2
     458:	80 83       	st	Z, r24
     45a:	08 95       	ret

0000045c <millis_pause>:
     45c:	ee e6       	ldi	r30, 0x6E	; 110
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	8d 7f       	andi	r24, 0xFD	; 253
     464:	80 83       	st	Z, r24
     466:	e4 e6       	ldi	r30, 0x64	; 100
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	80 62       	ori	r24, 0x20	; 32
     46e:	80 83       	st	Z, r24
     470:	08 95       	ret

00000472 <millis_reset>:
     472:	8f b7       	in	r24, 0x3f	; 63
     474:	f8 94       	cli
     476:	10 92 54 01 	sts	0x0154, r1
     47a:	10 92 55 01 	sts	0x0155, r1
     47e:	10 92 56 01 	sts	0x0156, r1
     482:	10 92 57 01 	sts	0x0157, r1
     486:	8f bf       	out	0x3f, r24	; 63
     488:	08 95       	ret

0000048a <__vector_14>:

ISR(ISR_VECT)
{
     48a:	1f 92       	push	r1
     48c:	0f 92       	push	r0
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	0f 92       	push	r0
     492:	11 24       	eor	r1, r1
     494:	8f 93       	push	r24
     496:	9f 93       	push	r25
     498:	af 93       	push	r26
     49a:	bf 93       	push	r27
	++milliseconds;
     49c:	80 91 54 01 	lds	r24, 0x0154
     4a0:	90 91 55 01 	lds	r25, 0x0155
     4a4:	a0 91 56 01 	lds	r26, 0x0156
     4a8:	b0 91 57 01 	lds	r27, 0x0157
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	a1 1d       	adc	r26, r1
     4b0:	b1 1d       	adc	r27, r1
     4b2:	80 93 54 01 	sts	0x0154, r24
     4b6:	90 93 55 01 	sts	0x0155, r25
     4ba:	a0 93 56 01 	sts	0x0156, r26
     4be:	b0 93 57 01 	sts	0x0157, r27
}
     4c2:	bf 91       	pop	r27
     4c4:	af 91       	pop	r26
     4c6:	9f 91       	pop	r25
     4c8:	8f 91       	pop	r24
     4ca:	0f 90       	pop	r0
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	0f 90       	pop	r0
     4d0:	1f 90       	pop	r1
     4d2:	18 95       	reti

000004d4 <main>:
			 
	
int main() {	

// disable ADC for less power 
  ADCSRA &= ~_BV(ADEN); // ADC off 
     4d4:	ea e7       	ldi	r30, 0x7A	; 122
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	80 81       	ld	r24, Z
     4da:	8f 77       	andi	r24, 0x7F	; 127
     4dc:	80 83       	st	Z, r24


	sei();
     4de:	78 94       	sei
			/* Initialize MILLIS */
	        millis_init();
     4e0:	95 df       	rcall	.-214    	; 0x40c <millis_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e2:	2f ef       	ldi	r18, 0xFF	; 255
     4e4:	8b e7       	ldi	r24, 0x7B	; 123
     4e6:	92 e9       	ldi	r25, 0x92	; 146
     4e8:	21 50       	subi	r18, 0x01	; 1
     4ea:	80 40       	sbci	r24, 0x00	; 0
     4ec:	90 40       	sbci	r25, 0x00	; 0
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <main+0x14>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <main+0x1e>
     4f2:	00 00       	nop
			_delay_ms(3000);
			/* Initialize MILLIS */

			/* Initialize TONE */						
			tone_init();		
     4f4:	0e 94 b8 0a 	call	0x1570	; 0x1570 <tone_init>
			/* Initialize TONE */						
						
			/* Initialize TIMER 2 */
			// Timer settings
			TCCR2A = _BV(WGM21); // prescaler 128
     4f8:	82 e0       	ldi	r24, 0x02	; 2
     4fa:	80 93 b0 00 	sts	0x00B0, r24
			TCCR2B = _BV(CS22)|_BV(CS20);
     4fe:	85 e0       	ldi	r24, 0x05	; 5
     500:	80 93 b1 00 	sts	0x00B1, r24
							 	
			// TIMSK2 = _BV(OCIE2A); // DO NOT ENABLE TIMER2 BY DEFAULT!
			OCR2A = ((F_CPU / 128) / 1000);
     504:	8d e7       	ldi	r24, 0x7D	; 125
     506:	80 93 b3 00 	sts	0x00B3, r24
			power_timer2_disable(); // power timer2 down!
     50a:	e4 e6       	ldi	r30, 0x64	; 100
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	80 81       	ld	r24, Z
     510:	80 64       	ori	r24, 0x40	; 64
     512:	80 83       	st	Z, r24
			/* Initialize TIMER 2 */			
			

			/* Initialize UART */
			uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     514:	80 e1       	ldi	r24, 0x10	; 16
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 8b 0b 	call	0x1716	; 0x1716 <uart0_init>
			uart0_puts("kak");
     51c:	8e e0       	ldi	r24, 0x0E	; 14
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 be 0b 	call	0x177c	; 0x177c <uart0_puts>
     524:	ef ef       	ldi	r30, 0xFF	; 255
     526:	f3 ed       	ldi	r31, 0xD3	; 211
     528:	20 e3       	ldi	r18, 0x30	; 48
     52a:	e1 50       	subi	r30, 0x01	; 1
     52c:	f0 40       	sbci	r31, 0x00	; 0
     52e:	20 40       	sbci	r18, 0x00	; 0
     530:	e1 f7       	brne	.-8      	; 0x52a <main+0x56>
     532:	00 c0       	rjmp	.+0      	; 0x534 <main+0x60>
     534:	00 00       	nop
			_delay_ms(1000);
		
		
			I2C_init();	
     536:	1d df       	rcall	.-454    	; 0x372 <I2C_init>
			pca9635_init();
     538:	99 d3       	rcall	.+1842   	; 0xc6c <pca9635_init>
     53a:	8f ef       	ldi	r24, 0xFF	; 255
     53c:	93 ed       	ldi	r25, 0xD3	; 211
     53e:	e0 e3       	ldi	r30, 0x30	; 48
     540:	81 50       	subi	r24, 0x01	; 1
     542:	90 40       	sbci	r25, 0x00	; 0
     544:	e0 40       	sbci	r30, 0x00	; 0
     546:	e1 f7       	brne	.-8      	; 0x540 <main+0x6c>
     548:	00 c0       	rjmp	.+0      	; 0x54a <main+0x76>
     54a:	00 00       	nop
			_delay_ms(1000);
			pca9635_set_led_mode(0); // put all leds off
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	d4 d3       	rcall	.+1960   	; 0xcf8 <pca9635_set_led_mode>
			log_s("PCA ok");
     550:	82 e1       	ldi	r24, 0x12	; 18
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	58 df       	rcall	.-336    	; 0x406 <log_s>
     556:	ff ef       	ldi	r31, 0xFF	; 255
     558:	23 ed       	ldi	r18, 0xD3	; 211
     55a:	80 e3       	ldi	r24, 0x30	; 48
     55c:	f1 50       	subi	r31, 0x01	; 1
     55e:	20 40       	sbci	r18, 0x00	; 0
     560:	80 40       	sbci	r24, 0x00	; 0
     562:	e1 f7       	brne	.-8      	; 0x55c <main+0x88>
     564:	00 c0       	rjmp	.+0      	; 0x566 <main+0x92>
     566:	00 00       	nop
			_delay_ms(1000);
			
			
  // node id, rfband, group id
    rf12_initialize(2, RF12_868MHZ, 14);
     568:	4e e0       	ldi	r20, 0x0E	; 14
     56a:	62 e0       	ldi	r22, 0x02	; 2
     56c:	82 e0       	ldi	r24, 0x02	; 2
     56e:	18 d6       	rcall	.+3120   	; 0x11a0 <_Z15rf12_initializehhh>
    // see http://tools.jeelabs.org/rfm12b
  //  rf12_control(0xC040); // set low-battery level to 2.2V i.s.o. 3.1V

log_s("initialized!");
     570:	89 e1       	ldi	r24, 0x19	; 25
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	48 df       	rcall	.-368    	; 0x406 <log_s>
     576:	9f ef       	ldi	r25, 0xFF	; 255
     578:	e3 ed       	ldi	r30, 0xD3	; 211
     57a:	f0 e3       	ldi	r31, 0x30	; 48
     57c:	91 50       	subi	r25, 0x01	; 1
     57e:	e0 40       	sbci	r30, 0x00	; 0
     580:	f0 40       	sbci	r31, 0x00	; 0
     582:	e1 f7       	brne	.-8      	; 0x57c <main+0xa8>
     584:	00 c0       	rjmp	.+0      	; 0x586 <main+0xb2>
     586:	00 00       	nop
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
				
			if (RF12_WANTS_ACK) {
     588:	05 e7       	ldi	r16, 0x75	; 117
     58a:	11 e0       	ldi	r17, 0x01	; 1
			
			
		uart0_puts("\n\r -DATA!- ");
		_delay_ms(20);
		        
				for (byte i = 0; i < rf12_len; ++i){
     58c:	c6 e7       	ldi	r28, 0x76	; 118
     58e:	d1 e0       	ldi	r29, 0x01	; 1
				}
				
				
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[0]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     590:	0f 2e       	mov	r0, r31
     592:	f7 e7       	ldi	r31, 0x77	; 119
     594:	ef 2e       	mov	r14, r31
     596:	f1 e0       	ldi	r31, 0x01	; 1
     598:	ff 2e       	mov	r15, r31
     59a:	f0 2d       	mov	r31, r0
				 

				 		// MELDINGSDUUR RESETTEN
				 		active_alarm_time = millis_get() + alarm_duration; 
						 uart0_putc(millis_get());
						uart0_putc(active_alarm_time);
     59c:	0f 2e       	mov	r0, r31
     59e:	f9 e6       	ldi	r31, 0x69	; 105
     5a0:	af 2e       	mov	r10, r31
     5a2:	f1 e0       	ldi	r31, 0x01	; 1
     5a4:	bf 2e       	mov	r11, r31
     5a6:	f0 2d       	mov	r31, r0
							// 2. timer 0 - millis starten
							millis_reset();
							millis_resume();
				 
							// 3. timer 2 - alarm timer starten
							power_timer2_enable();
     5a8:	0f 2e       	mov	r0, r31
     5aa:	f4 e6       	ldi	r31, 0x64	; 100
     5ac:	cf 2e       	mov	r12, r31
     5ae:	d1 2c       	mov	r13, r1
     5b0:	f0 2d       	mov	r31, r0
							TIMSK2 |= _BV(OCIE2A);
     5b2:	0f 2e       	mov	r0, r31
     5b4:	f0 e7       	ldi	r31, 0x70	; 112
     5b6:	8f 2e       	mov	r8, r31
     5b8:	91 2c       	mov	r9, r1
     5ba:	f0 2d       	mov	r31, r0
						 if(active_alarm_time == 0) {
							// Geen alarm actief

							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i < 4; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     5bc:	71 2c       	mov	r7, r1
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
							// Geen alarm actief

							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i < 4; ++i){
     5be:	66 24       	eor	r6, r6
     5c0:	63 94       	inc	r6
     5c2:	68 94       	set
     5c4:	22 24       	eor	r2, r2
     5c6:	21 f8       	bld	r2, 1
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     5c8:	0f 2e       	mov	r0, r31
     5ca:	f3 e0       	ldi	r31, 0x03	; 3
     5cc:	3f 2e       	mov	r3, r31
     5ce:	f0 2d       	mov	r31, r0

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
				
			if (RF12_WANTS_ACK) {
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     5d0:	68 94       	set
     5d2:	55 24       	eor	r5, r5
     5d4:	57 f8       	bld	r5, 7

	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
     5d6:	06 d4       	rcall	.+2060   	; 0xde4 <_Z13rf12_recvDonev>
     5d8:	88 23       	and	r24, r24
     5da:	09 f4       	brne	.+2      	; 0x5de <main+0x10a>
     5dc:	c7 c0       	rjmp	.+398    	; 0x76c <main+0x298>
     5de:	80 91 bb 01 	lds	r24, 0x01BB
     5e2:	90 91 bc 01 	lds	r25, 0x01BC
     5e6:	89 2b       	or	r24, r25
     5e8:	09 f4       	brne	.+2      	; 0x5ec <main+0x118>
     5ea:	bb c0       	rjmp	.+374    	; 0x762 <main+0x28e>
     5ec:	bf c0       	rjmp	.+382    	; 0x76c <main+0x298>
		// process incoming data here
				
			if (RF12_WANTS_ACK) {
     5ee:	f8 01       	movw	r30, r16
     5f0:	80 81       	ld	r24, Z
     5f2:	88 23       	and	r24, r24
     5f4:	0c f0       	brlt	.+2      	; 0x5f8 <main+0x124>
     5f6:	c5 c0       	rjmp	.+394    	; 0x782 <main+0x2ae>
     5f8:	17 c0       	rjmp	.+46     	; 0x628 <main+0x154>
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     5fa:	f8 01       	movw	r30, r16
     5fc:	80 81       	ld	r24, Z
     5fe:	8f 71       	andi	r24, 0x1F	; 31
     600:	80 6c       	ori	r24, 0xC0	; 192
     602:	47 2d       	mov	r20, r7
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	70 e0       	ldi	r23, 0x00	; 0
     608:	43 d5       	rcall	.+2694   	; 0x1090 <_Z14rf12_sendStarthPKvh>
				rf12_sendWait(1); // don't power down too soon
     60a:	86 2d       	mov	r24, r6
     60c:	4f d5       	rcall	.+2718   	; 0x10ac <_Z13rf12_sendWaith>
				uart0_puts("ACK-OK");
     60e:	86 e2       	ldi	r24, 0x26	; 38
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 be 0b 	call	0x177c	; 0x177c <uart0_puts>
     616:	ff ef       	ldi	r31, 0xFF	; 255
     618:	29 ef       	ldi	r18, 0xF9	; 249
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	f1 50       	subi	r31, 0x01	; 1
     61e:	20 40       	sbci	r18, 0x00	; 0
     620:	80 40       	sbci	r24, 0x00	; 0
     622:	e1 f7       	brne	.-8      	; 0x61c <main+0x148>
     624:	00 c0       	rjmp	.+0      	; 0x626 <main+0x152>
     626:	00 00       	nop
				_delay_ms(20);
			}
			
			
		uart0_puts("\n\r -DATA!- ");
     628:	8d e2       	ldi	r24, 0x2D	; 45
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 be 0b 	call	0x177c	; 0x177c <uart0_puts>
     630:	9f ef       	ldi	r25, 0xFF	; 255
     632:	e9 ef       	ldi	r30, 0xF9	; 249
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	91 50       	subi	r25, 0x01	; 1
     638:	e0 40       	sbci	r30, 0x00	; 0
     63a:	f0 40       	sbci	r31, 0x00	; 0
     63c:	e1 f7       	brne	.-8      	; 0x636 <main+0x162>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <main+0x16c>
     640:	00 00       	nop
		_delay_ms(20);
		        
				for (byte i = 0; i < rf12_len; ++i){
     642:	88 81       	ld	r24, Y
     644:	88 23       	and	r24, r24
     646:	61 f0       	breq	.+24     	; 0x660 <main+0x18c>
     648:	47 2c       	mov	r4, r7
		        uart0_putc(rf12_data[i]);
     64a:	e4 2d       	mov	r30, r4
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	e9 58       	subi	r30, 0x89	; 137
     650:	fe 4f       	sbci	r31, 0xFE	; 254
     652:	80 81       	ld	r24, Z
     654:	0e 94 a4 0b 	call	0x1748	; 0x1748 <uart0_putc>
			
			
		uart0_puts("\n\r -DATA!- ");
		_delay_ms(20);
		        
				for (byte i = 0; i < rf12_len; ++i){
     658:	43 94       	inc	r4
     65a:	88 81       	ld	r24, Y
     65c:	48 16       	cp	r4, r24
     65e:	a8 f3       	brcs	.-22     	; 0x64a <main+0x176>
				}
				
				
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[0]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     660:	f7 01       	movw	r30, r14
     662:	40 80       	ld	r4, Z
				uart0_putc(data);
     664:	84 2d       	mov	r24, r4
     666:	0e 94 a4 0b 	call	0x1748	; 0x1748 <uart0_putc>
     66a:	8f e3       	ldi	r24, 0x3F	; 63
     66c:	9c e9       	ldi	r25, 0x9C	; 156
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	f1 f7       	brne	.-4      	; 0x66e <main+0x19a>
     672:	00 c0       	rjmp	.+0      	; 0x674 <main+0x1a0>
     674:	00 00       	nop
				_delay_ms(10);
				 if(data & 0x10){
     676:	44 fe       	sbrs	r4, 4
     678:	0a c0       	rjmp	.+20     	; 0x68e <main+0x1ba>
					 // start alarm	 
					 uart0_puts("START");
     67a:	89 e3       	ldi	r24, 0x39	; 57
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	0e 94 be 0b 	call	0x177c	; 0x177c <uart0_puts>
					 active_alarm = active_alarm | data; // 00001111 
     682:	80 91 6d 01 	lds	r24, 0x016D
     686:	48 2a       	or	r4, r24
     688:	40 92 6d 01 	sts	0x016D, r4
     68c:	0a c0       	rjmp	.+20     	; 0x6a2 <main+0x1ce>
				 }else{
					 // stop alarm
					  uart0_puts("STOP");
     68e:	8f e3       	ldi	r24, 0x3F	; 63
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	0e 94 be 0b 	call	0x177c	; 0x177c <uart0_puts>
					 active_alarm =  active_alarm & (~data); /* invert data, compare with active alarm array to clear the right alarm bit */		 
     696:	40 94       	com	r4
     698:	80 91 6d 01 	lds	r24, 0x016D
     69c:	48 22       	and	r4, r24
     69e:	40 92 6d 01 	sts	0x016D, r4
				 }
				 
				////////////////		Fill alarm array		 ////////////////				 
				
				
					uart0_putc(active_alarm);	 
     6a2:	80 91 6d 01 	lds	r24, 0x016D
     6a6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <uart0_putc>
				 // IS ER EEN ALARM ACTIEF in array active_alarm?
				 if(active_alarm & 0x0F){
     6aa:	80 91 6d 01 	lds	r24, 0x016D
     6ae:	8f 70       	andi	r24, 0x0F	; 15
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <main+0x1e0>
     6b2:	4e c0       	rjmp	.+156    	; 0x750 <main+0x27c>
			  uart0_puts("YES");
     6b4:	84 e4       	ldi	r24, 0x44	; 68
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 be 0b 	call	0x177c	; 0x177c <uart0_puts>
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
     6bc:	80 91 69 01 	lds	r24, 0x0169
     6c0:	90 91 6a 01 	lds	r25, 0x016A
     6c4:	a0 91 6b 01 	lds	r26, 0x016B
     6c8:	b0 91 6c 01 	lds	r27, 0x016C
     6cc:	89 2b       	or	r24, r25
     6ce:	8a 2b       	or	r24, r26
     6d0:	8b 2b       	or	r24, r27
     6d2:	f9 f4       	brne	.+62     	; 0x712 <main+0x23e>
							// Geen alarm actief

							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i < 4; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     6d4:	80 91 6d 01 	lds	r24, 0x016D
     6d8:	83 fd       	sbrc	r24, 3
     6da:	0c c0       	rjmp	.+24     	; 0x6f4 <main+0x220>
     6dc:	82 fd       	sbrc	r24, 2
     6de:	06 c0       	rjmp	.+12     	; 0x6ec <main+0x218>
     6e0:	81 fd       	sbrc	r24, 1
     6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <main+0x21c>
     6e4:	80 ff       	sbrs	r24, 0
     6e6:	0b c0       	rjmp	.+22     	; 0x6fe <main+0x22a>
     6e8:	83 2d       	mov	r24, r3
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <main+0x222>
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
							// Geen alarm actief

							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i < 4; ++i){
     6ec:	86 2d       	mov	r24, r6
     6ee:	03 c0       	rjmp	.+6      	; 0x6f6 <main+0x222>
     6f0:	82 2d       	mov	r24, r2
     6f2:	01 c0       	rjmp	.+2      	; 0x6f6 <main+0x222>
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     6f4:	87 2d       	mov	r24, r7
									sound_current_alarm = i;
     6f6:	80 93 68 01 	sts	0x0168, r24
									icon_current_alarm  = i;
     6fa:	80 93 5d 01 	sts	0x015D, r24
								} 
							 }

					 					
							// 2. timer 0 - millis starten
							millis_reset();
     6fe:	b9 de       	rcall	.-654    	; 0x472 <millis_reset>
							millis_resume();
     700:	a2 de       	rcall	.-700    	; 0x446 <millis_resume>
				 
							// 3. timer 2 - alarm timer starten
							power_timer2_enable();
     702:	f6 01       	movw	r30, r12
     704:	80 81       	ld	r24, Z
     706:	8f 7b       	andi	r24, 0xBF	; 191
     708:	80 83       	st	Z, r24
							TIMSK2 |= _BV(OCIE2A);
     70a:	f4 01       	movw	r30, r8
     70c:	80 81       	ld	r24, Z
     70e:	82 60       	ori	r24, 0x02	; 2
     710:	80 83       	st	Z, r24
			 
						 }
				 

				 		// MELDINGSDUUR RESETTEN
				 		active_alarm_time = millis_get() + alarm_duration; 
     712:	85 de       	rcall	.-758    	; 0x41e <millis_get>
     714:	20 91 00 01 	lds	r18, 0x0100
     718:	30 91 01 01 	lds	r19, 0x0101
     71c:	40 91 02 01 	lds	r20, 0x0102
     720:	50 91 03 01 	lds	r21, 0x0103
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	82 0f       	add	r24, r18
     72a:	93 1f       	adc	r25, r19
     72c:	a4 1f       	adc	r26, r20
     72e:	b5 1f       	adc	r27, r21
     730:	80 93 69 01 	sts	0x0169, r24
     734:	90 93 6a 01 	sts	0x016A, r25
     738:	a0 93 6b 01 	sts	0x016B, r26
     73c:	b0 93 6c 01 	sts	0x016C, r27
						 uart0_putc(millis_get());
     740:	6e de       	rcall	.-804    	; 0x41e <millis_get>
     742:	86 2f       	mov	r24, r22
     744:	0e 94 a4 0b 	call	0x1748	; 0x1748 <uart0_putc>
						uart0_putc(active_alarm_time);
     748:	f5 01       	movw	r30, r10
     74a:	80 81       	ld	r24, Z
     74c:	fd d7       	rcall	.+4090   	; 0x1748 <uart0_putc>
     74e:	43 cf       	rjmp	.-378    	; 0x5d6 <main+0x102>
				 
				 
					}else{ //  if(active_alarm & 0x0F){ // IS ER EEN ALARM ACTIEF in active_alarm?
						// no active alarm in array
												
						active_alarm_time = 0; // set alarm time to zero, timers will be disabled in next timer 2 interrupt
     750:	10 92 69 01 	sts	0x0169, r1
     754:	10 92 6a 01 	sts	0x016A, r1
     758:	10 92 6b 01 	sts	0x016B, r1
     75c:	10 92 6c 01 	sts	0x016C, r1
     760:	3a cf       	rjmp	.-396    	; 0x5d6 <main+0x102>
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
				
			if (RF12_WANTS_ACK) {
     762:	f8 01       	movw	r30, r16
     764:	80 81       	ld	r24, Z
     766:	85 fd       	sbrc	r24, 5
     768:	42 cf       	rjmp	.-380    	; 0x5ee <main+0x11a>
     76a:	5e cf       	rjmp	.-324    	; 0x628 <main+0x154>
					}
						 		
		
	} else {
    // switch into idle mode until the next interrupt - Choose our preferred sleep mode:
    set_sleep_mode(SLEEP_MODE_IDLE);
     76c:	83 b7       	in	r24, 0x33	; 51
     76e:	81 7f       	andi	r24, 0xF1	; 241
     770:	83 bf       	out	0x33, r24	; 51
    
    // Set sleep enable (SE) bit:
    sleep_enable();
     772:	83 b7       	in	r24, 0x33	; 51
     774:	81 60       	ori	r24, 0x01	; 1
     776:	83 bf       	out	0x33, r24	; 51
    
    // Put the device to sleep:
    sleep_cpu();
     778:	88 95       	sleep
	
	// Clear sleep enable (SE) bit:
	sleep_disable();
     77a:	83 b7       	in	r24, 0x33	; 51
     77c:	8e 7f       	andi	r24, 0xFE	; 254
     77e:	83 bf       	out	0x33, r24	; 51
     780:	2a cf       	rjmp	.-428    	; 0x5d6 <main+0x102>

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
				
			if (RF12_WANTS_ACK) {
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     782:	f8 01       	movw	r30, r16
     784:	80 81       	ld	r24, Z
     786:	86 ff       	sbrs	r24, 6
     788:	38 cf       	rjmp	.-400    	; 0x5fa <main+0x126>
     78a:	85 2d       	mov	r24, r5
     78c:	3a cf       	rjmp	.-396    	; 0x602 <main+0x12e>

0000078e <_Z9isr_soundv>:
		isr_light_icon();		
	}
}


	void isr_sound(){
     78e:	ef 92       	push	r14
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
		//	uart0_putc(sound_current_step);
		//	uart0_putc(millis_get());
		//	uart0_putc(_sound_note_time);
			// Stop note if necessary 
			if(_sound_note_time != 0){ // sound already playing?		
     794:	80 91 63 01 	lds	r24, 0x0163
     798:	90 91 64 01 	lds	r25, 0x0164
     79c:	a0 91 65 01 	lds	r26, 0x0165
     7a0:	b0 91 66 01 	lds	r27, 0x0166
     7a4:	89 2b       	or	r24, r25
     7a6:	8a 2b       	or	r24, r26
     7a8:	8b 2b       	or	r24, r27
     7aa:	81 f0       	breq	.+32     	; 0x7cc <_Z9isr_soundv+0x3e>
				//	uart0_puts("GS");
				if(millis_get() < _sound_note_time ){ // Do we need to stop the current note?
     7ac:	38 de       	rcall	.-912    	; 0x41e <millis_get>
     7ae:	00 91 63 01 	lds	r16, 0x0163
     7b2:	10 91 64 01 	lds	r17, 0x0164
     7b6:	20 91 65 01 	lds	r18, 0x0165
     7ba:	30 91 66 01 	lds	r19, 0x0166
     7be:	60 17       	cp	r22, r16
     7c0:	71 07       	cpc	r23, r17
     7c2:	82 07       	cpc	r24, r18
     7c4:	93 07       	cpc	r25, r19
     7c6:	08 f4       	brcc	.+2      	; 0x7ca <_Z9isr_soundv+0x3c>
     7c8:	fd c0       	rjmp	.+506    	; 0x9c4 <__stack+0xc5>
					//uart0_puts("DS");
					return; // dont stop current note
					
				}else{
					noTone(); // stop current note
     7ca:	d4 d6       	rcall	.+3496   	; 0x1574 <noTone>
			
			// play next tone
		//	uart0_puts("PN");
		//	tone(unsigned long frequency, uint8_t volume);
		//uart0_putc(sound_current_alarm);
			if(sound_current_alarm == 0 ){
     7cc:	80 91 68 01 	lds	r24, 0x0168
     7d0:	81 11       	cpse	r24, r1
     7d2:	31 c0       	rjmp	.+98     	; 0x836 <_Z9isr_soundv+0xa8>
				tone(pgm_read_word(&(sound_pattern_doorbell[sound_current_step].frequency)), 10); // freq, volume
     7d4:	e0 91 67 01 	lds	r30, 0x0167
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	ee 0f       	add	r30, r30
     7dc:	ff 1f       	adc	r31, r31
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	e8 59       	subi	r30, 0x98	; 152
     7e8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ea:	65 91       	lpm	r22, Z+
     7ec:	74 91       	lpm	r23, Z
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	e1 2c       	mov	r14, r1
     7f4:	00 e0       	ldi	r16, 0x00	; 0
     7f6:	10 e0       	ldi	r17, 0x00	; 0
     7f8:	98 01       	movw	r18, r16
     7fa:	4a e0       	ldi	r20, 0x0A	; 10
     7fc:	c6 d6       	rcall	.+3468   	; 0x158a <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_doorbell[sound_current_step].time)));
     7fe:	0f de       	rcall	.-994    	; 0x41e <millis_get>
     800:	e0 91 67 01 	lds	r30, 0x0167
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	ee 0f       	add	r30, r30
     808:	ff 1f       	adc	r31, r31
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	ee 0f       	add	r30, r30
     810:	ff 1f       	adc	r31, r31
     812:	e4 59       	subi	r30, 0x94	; 148
     814:	ff 4f       	sbci	r31, 0xFF	; 255
     816:	25 91       	lpm	r18, Z+
     818:	34 91       	lpm	r19, Z
     81a:	dc 01       	movw	r26, r24
     81c:	cb 01       	movw	r24, r22
     81e:	82 0f       	add	r24, r18
     820:	93 1f       	adc	r25, r19
     822:	a1 1d       	adc	r26, r1
     824:	b1 1d       	adc	r27, r1
     826:	80 93 63 01 	sts	0x0163, r24
     82a:	90 93 64 01 	sts	0x0164, r25
     82e:	a0 93 65 01 	sts	0x0165, r26
     832:	b0 93 66 01 	sts	0x0166, r27
			}
			if(sound_current_alarm == 1 ){
     836:	80 91 68 01 	lds	r24, 0x0168
     83a:	81 30       	cpi	r24, 0x01	; 1
     83c:	89 f5       	brne	.+98     	; 0x8a0 <_Z9isr_soundv+0x112>
				tone(pgm_read_word(&(sound_pattern_phone[sound_current_step].frequency)), 10);
     83e:	e0 91 67 01 	lds	r30, 0x0167
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	ee 0f       	add	r30, r30
     84a:	ff 1f       	adc	r31, r31
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	e8 55       	subi	r30, 0x58	; 88
     852:	ff 4f       	sbci	r31, 0xFF	; 255
     854:	65 91       	lpm	r22, Z+
     856:	74 91       	lpm	r23, Z
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	e1 2c       	mov	r14, r1
     85e:	00 e0       	ldi	r16, 0x00	; 0
     860:	10 e0       	ldi	r17, 0x00	; 0
     862:	98 01       	movw	r18, r16
     864:	4a e0       	ldi	r20, 0x0A	; 10
     866:	91 d6       	rcall	.+3362   	; 0x158a <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_phone[sound_current_step].time)));
     868:	da dd       	rcall	.-1100   	; 0x41e <millis_get>
     86a:	e0 91 67 01 	lds	r30, 0x0167
     86e:	f0 e0       	ldi	r31, 0x00	; 0
     870:	ee 0f       	add	r30, r30
     872:	ff 1f       	adc	r31, r31
     874:	ee 0f       	add	r30, r30
     876:	ff 1f       	adc	r31, r31
     878:	ee 0f       	add	r30, r30
     87a:	ff 1f       	adc	r31, r31
     87c:	e4 55       	subi	r30, 0x54	; 84
     87e:	ff 4f       	sbci	r31, 0xFF	; 255
     880:	25 91       	lpm	r18, Z+
     882:	34 91       	lpm	r19, Z
     884:	dc 01       	movw	r26, r24
     886:	cb 01       	movw	r24, r22
     888:	82 0f       	add	r24, r18
     88a:	93 1f       	adc	r25, r19
     88c:	a1 1d       	adc	r26, r1
     88e:	b1 1d       	adc	r27, r1
     890:	80 93 63 01 	sts	0x0163, r24
     894:	90 93 64 01 	sts	0x0164, r25
     898:	a0 93 65 01 	sts	0x0165, r26
     89c:	b0 93 66 01 	sts	0x0166, r27
			}
			if(sound_current_alarm == 2 ){
     8a0:	80 91 68 01 	lds	r24, 0x0168
     8a4:	82 30       	cpi	r24, 0x02	; 2
     8a6:	89 f5       	brne	.+98     	; 0x90a <__stack+0xb>
				tone(pgm_read_word(&(sound_pattern_help[sound_current_step].frequency)), 10);
     8a8:	e0 91 67 01 	lds	r30, 0x0167
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	ee 0f       	add	r30, r30
     8b4:	ff 1f       	adc	r31, r31
     8b6:	ee 0f       	add	r30, r30
     8b8:	ff 1f       	adc	r31, r31
     8ba:	e0 56       	subi	r30, 0x60	; 96
     8bc:	fe 4f       	sbci	r31, 0xFE	; 254
     8be:	65 91       	lpm	r22, Z+
     8c0:	74 91       	lpm	r23, Z
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	e1 2c       	mov	r14, r1
     8c8:	00 e0       	ldi	r16, 0x00	; 0
     8ca:	10 e0       	ldi	r17, 0x00	; 0
     8cc:	98 01       	movw	r18, r16
     8ce:	4a e0       	ldi	r20, 0x0A	; 10
     8d0:	5c d6       	rcall	.+3256   	; 0x158a <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_help[sound_current_step].time)));
     8d2:	a5 dd       	rcall	.-1206   	; 0x41e <millis_get>
     8d4:	e0 91 67 01 	lds	r30, 0x0167
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	ee 0f       	add	r30, r30
     8dc:	ff 1f       	adc	r31, r31
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	ee 0f       	add	r30, r30
     8e4:	ff 1f       	adc	r31, r31
     8e6:	ec 55       	subi	r30, 0x5C	; 92
     8e8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ea:	25 91       	lpm	r18, Z+
     8ec:	34 91       	lpm	r19, Z
     8ee:	dc 01       	movw	r26, r24
     8f0:	cb 01       	movw	r24, r22
     8f2:	82 0f       	add	r24, r18
     8f4:	93 1f       	adc	r25, r19
     8f6:	a1 1d       	adc	r26, r1
     8f8:	b1 1d       	adc	r27, r1
     8fa:	80 93 63 01 	sts	0x0163, r24
     8fe:	90 93 64 01 	sts	0x0164, r25
     902:	a0 93 65 01 	sts	0x0165, r26
     906:	b0 93 66 01 	sts	0x0166, r27
			}
			if(sound_current_alarm == 3 ){
     90a:	80 91 68 01 	lds	r24, 0x0168
     90e:	83 30       	cpi	r24, 0x03	; 3
     910:	89 f5       	brne	.+98     	; 0x974 <__stack+0x75>
				tone(pgm_read_word(&(sound_pattern_fire[sound_current_step].frequency)),10);
     912:	e0 91 67 01 	lds	r30, 0x0167
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	ee 0f       	add	r30, r30
     91a:	ff 1f       	adc	r31, r31
     91c:	ee 0f       	add	r30, r30
     91e:	ff 1f       	adc	r31, r31
     920:	ee 0f       	add	r30, r30
     922:	ff 1f       	adc	r31, r31
     924:	e0 52       	subi	r30, 0x20	; 32
     926:	fe 4f       	sbci	r31, 0xFE	; 254
     928:	65 91       	lpm	r22, Z+
     92a:	74 91       	lpm	r23, Z
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	e1 2c       	mov	r14, r1
     932:	00 e0       	ldi	r16, 0x00	; 0
     934:	10 e0       	ldi	r17, 0x00	; 0
     936:	98 01       	movw	r18, r16
     938:	4a e0       	ldi	r20, 0x0A	; 10
     93a:	27 d6       	rcall	.+3150   	; 0x158a <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_fire[sound_current_step].time)));
     93c:	70 dd       	rcall	.-1312   	; 0x41e <millis_get>
     93e:	e0 91 67 01 	lds	r30, 0x0167
     942:	f0 e0       	ldi	r31, 0x00	; 0
     944:	ee 0f       	add	r30, r30
     946:	ff 1f       	adc	r31, r31
     948:	ee 0f       	add	r30, r30
     94a:	ff 1f       	adc	r31, r31
     94c:	ee 0f       	add	r30, r30
     94e:	ff 1f       	adc	r31, r31
     950:	ec 51       	subi	r30, 0x1C	; 28
     952:	fe 4f       	sbci	r31, 0xFE	; 254
     954:	25 91       	lpm	r18, Z+
     956:	34 91       	lpm	r19, Z
     958:	dc 01       	movw	r26, r24
     95a:	cb 01       	movw	r24, r22
     95c:	82 0f       	add	r24, r18
     95e:	93 1f       	adc	r25, r19
     960:	a1 1d       	adc	r26, r1
     962:	b1 1d       	adc	r27, r1
     964:	80 93 63 01 	sts	0x0163, r24
     968:	90 93 64 01 	sts	0x0164, r25
     96c:	a0 93 65 01 	sts	0x0165, r26
     970:	b0 93 66 01 	sts	0x0166, r27
			}
			
		//_sound_note_time = millis_get() + 1000;
			
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= sound_alarm_keys[sound_current_alarm]){
     974:	80 91 68 01 	lds	r24, 0x0168
     978:	90 91 67 01 	lds	r25, 0x0167
     97c:	e8 2f       	mov	r30, r24
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	e4 5b       	subi	r30, 0xB4	; 180
     982:	fe 4f       	sbci	r31, 0xFE	; 254
     984:	20 81       	ld	r18, Z
     986:	92 17       	cp	r25, r18
     988:	d0 f0       	brcs	.+52     	; 0x9be <__stack+0xbf>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     98a:	30 91 6d 01 	lds	r19, 0x016D
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     98e:	23 2f       	mov	r18, r19
     990:	2f 70       	andi	r18, 0x0F	; 15
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     992:	40 e0       	ldi	r20, 0x00	; 0
			if(sound_current_step >= sound_alarm_keys[sound_current_alarm]){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
     994:	8f 5f       	subi	r24, 0xFF	; 255
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	09 f4       	brne	.+2      	; 0x99c <__stack+0x9d>
     99a:	84 2f       	mov	r24, r20
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     99c:	e8 2f       	mov	r30, r24
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	e8 5b       	subi	r30, 0xB8	; 184
     9a2:	fe 4f       	sbci	r31, 0xFE	; 254
     9a4:	90 81       	ld	r25, Z
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     9a6:	21 11       	cpse	r18, r1
     9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <__stack+0xb1>
     9aa:	80 93 68 01 	sts	0x0168, r24
     9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <__stack+0xb9>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     9b0:	93 23       	and	r25, r19
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= sound_alarm_keys[sound_current_alarm]){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
     9b2:	81 f3       	breq	.-32     	; 0x994 <__stack+0x95>
     9b4:	80 93 68 01 	sts	0x0168, r24
						done = 1; // in case there is no active alarm anymore, just breakout while
					}

				} // while
				
				sound_current_step = 0; // reset sound_current_step to zero to start the next sound	
     9b8:	10 92 67 01 	sts	0x0167, r1
     9bc:	03 c0       	rjmp	.+6      	; 0x9c4 <__stack+0xc5>
				
			}else{
				// set sound_current_step plus one
				sound_current_step++;
     9be:	9f 5f       	subi	r25, 0xFF	; 255
     9c0:	90 93 67 01 	sts	0x0167, r25
			}
	
				
		} //void isr_sound()
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ef 90       	pop	r14
     9ca:	08 95       	ret

000009cc <_Z15isr_light_flashv>:
		
	void isr_light_flash(){
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
			
		// Do we need to go to the next flash?
		if(_flash_time != 0){ // is there already a flash ?
     9d4:	80 91 5e 01 	lds	r24, 0x015E
     9d8:	90 91 5f 01 	lds	r25, 0x015F
     9dc:	a0 91 60 01 	lds	r26, 0x0160
     9e0:	b0 91 61 01 	lds	r27, 0x0161
     9e4:	89 2b       	or	r24, r25
     9e6:	8a 2b       	or	r24, r26
     9e8:	8b 2b       	or	r24, r27
     9ea:	09 f4       	brne	.+2      	; 0x9ee <_Z15isr_light_flashv+0x22>
     9ec:	48 c0       	rjmp	.+144    	; 0xa7e <_Z15isr_light_flashv+0xb2>
			if(millis_get() < _flash_time ){ // Do we need to stop the current note?
     9ee:	17 dd       	rcall	.-1490   	; 0x41e <millis_get>
     9f0:	00 91 5e 01 	lds	r16, 0x015E
     9f4:	10 91 5f 01 	lds	r17, 0x015F
     9f8:	20 91 60 01 	lds	r18, 0x0160
     9fc:	30 91 61 01 	lds	r19, 0x0161
     a00:	60 17       	cp	r22, r16
     a02:	71 07       	cpc	r23, r17
     a04:	82 07       	cpc	r24, r18
     a06:	93 07       	cpc	r25, r19
     a08:	08 f0       	brcs	.+2      	; 0xa0c <_Z15isr_light_flashv+0x40>
     a0a:	39 c0       	rjmp	.+114    	; 0xa7e <_Z15isr_light_flashv+0xb2>
     a0c:	3b c0       	rjmp	.+118    	; 0xa84 <_Z15isr_light_flashv+0xb8>
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
     a0e:	80 91 62 01 	lds	r24, 0x0162
     a12:	fe 01       	movw	r30, r28
     a14:	98 e0       	ldi	r25, 0x08	; 8
     a16:	89 9f       	mul	r24, r25
     a18:	e0 0d       	add	r30, r0
     a1a:	f1 1d       	adc	r31, r1
     a1c:	11 24       	eor	r1, r1
     a1e:	e0 5e       	subi	r30, 0xE0	; 224
     a20:	fd 4f       	sbci	r31, 0xFD	; 253
     a22:	64 91       	lpm	r22, Z
     a24:	8c 2f       	mov	r24, r28
     a26:	8d 5f       	subi	r24, 0xFD	; 253
     a28:	56 d1       	rcall	.+684    	; 0xcd6 <pca9635_set_led_pwm>
     a2a:	21 96       	adiw	r28, 0x01	; 1
			}						
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
     a2c:	c4 30       	cpi	r28, 0x04	; 4
     a2e:	d1 05       	cpc	r29, r1
     a30:	71 f7       	brne	.-36     	; 0xa0e <_Z15isr_light_flashv+0x42>
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
		}
		//pca9635_set_led_pwm_flash(3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[0])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[1])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[2])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[3])) );
		
		_flash_time = millis_get() + pgm_read_word(&(flash_pattern[_flash_current_step].time));
     a32:	f5 dc       	rcall	.-1558   	; 0x41e <millis_get>
     a34:	40 91 62 01 	lds	r20, 0x0162
     a38:	e4 2f       	mov	r30, r20
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	ee 0f       	add	r30, r30
     a3e:	ff 1f       	adc	r31, r31
     a40:	ee 0f       	add	r30, r30
     a42:	ff 1f       	adc	r31, r31
     a44:	ee 0f       	add	r30, r30
     a46:	ff 1f       	adc	r31, r31
     a48:	ec 5d       	subi	r30, 0xDC	; 220
     a4a:	fd 4f       	sbci	r31, 0xFD	; 253
     a4c:	25 91       	lpm	r18, Z+
     a4e:	34 91       	lpm	r19, Z
     a50:	dc 01       	movw	r26, r24
     a52:	cb 01       	movw	r24, r22
     a54:	82 0f       	add	r24, r18
     a56:	93 1f       	adc	r25, r19
     a58:	a1 1d       	adc	r26, r1
     a5a:	b1 1d       	adc	r27, r1
     a5c:	80 93 5e 01 	sts	0x015E, r24
     a60:	90 93 5f 01 	sts	0x015F, r25
     a64:	a0 93 60 01 	sts	0x0160, r26
     a68:	b0 93 61 01 	sts	0x0161, r27
			
		// is variable _flash_current_step equal to total steps?
		if(_flash_current_step == (flash_keys -1 )) {
     a6c:	4f 31       	cpi	r20, 0x1F	; 31
     a6e:	19 f4       	brne	.+6      	; 0xa76 <_Z15isr_light_flashv+0xaa>
			//reset _flash_current_step to 0
			_flash_current_step = 0;				
     a70:	10 92 62 01 	sts	0x0162, r1
     a74:	07 c0       	rjmp	.+14     	; 0xa84 <_Z15isr_light_flashv+0xb8>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
     a76:	4f 5f       	subi	r20, 0xFF	; 255
     a78:	40 93 62 01 	sts	0x0162, r20
     a7c:	03 c0       	rjmp	.+6      	; 0xa84 <_Z15isr_light_flashv+0xb8>
			}
	
				
		} //void isr_sound()
		
	void isr_light_flash(){
     a7e:	c0 e0       	ldi	r28, 0x00	; 0
     a80:	d0 e0       	ldi	r29, 0x00	; 0
     a82:	c5 cf       	rjmp	.-118    	; 0xa0e <_Z15isr_light_flashv+0x42>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
		}
		
	} // END isr_light_flash
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	08 95       	ret

00000a8e <_Z14isr_light_iconv>:
		
		
		
		
		
	void isr_light_icon(){
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
		
		// Do we need to go to the next flash?
		if(_icon_time != 0){ // is there already a flash ?
     a96:	80 91 58 01 	lds	r24, 0x0158
     a9a:	90 91 59 01 	lds	r25, 0x0159
     a9e:	a0 91 5a 01 	lds	r26, 0x015A
     aa2:	b0 91 5b 01 	lds	r27, 0x015B
     aa6:	89 2b       	or	r24, r25
     aa8:	8a 2b       	or	r24, r26
     aaa:	8b 2b       	or	r24, r27
     aac:	79 f0       	breq	.+30     	; 0xacc <_Z14isr_light_iconv+0x3e>
			if(millis_get() < _icon_time ){ // Do we need to stop the current note?
     aae:	b7 dc       	rcall	.-1682   	; 0x41e <millis_get>
     ab0:	00 91 58 01 	lds	r16, 0x0158
     ab4:	10 91 59 01 	lds	r17, 0x0159
     ab8:	20 91 5a 01 	lds	r18, 0x015A
     abc:	30 91 5b 01 	lds	r19, 0x015B
     ac0:	60 17       	cp	r22, r16
     ac2:	71 07       	cpc	r23, r17
     ac4:	82 07       	cpc	r24, r18
     ac6:	93 07       	cpc	r25, r19
     ac8:	08 f4       	brcc	.+2      	; 0xacc <_Z14isr_light_iconv+0x3e>
     aca:	81 c0       	rjmp	.+258    	; 0xbce <_Z14isr_light_iconv+0x140>
	// step 2 = 250 - (2 x 25)  = 200
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){
     acc:	20 91 5c 01 	lds	r18, 0x015C
     ad0:	22 23       	and	r18, r18
     ad2:	19 f0       	breq	.+6      	; 0xada <_Z14isr_light_iconv+0x4c>
     ad4:	2b 30       	cpi	r18, 0x0B	; 11
     ad6:	21 f5       	brne	.+72     	; 0xb20 <_Z14isr_light_iconv+0x92>
     ad8:	12 c0       	rjmp	.+36     	; 0xafe <_Z14isr_light_iconv+0x70>
		intensity = 255;
		if(icon_current_step == 0) _icon_time = millis_get() + 1000;
     ada:	a1 dc       	rcall	.-1726   	; 0x41e <millis_get>
     adc:	dc 01       	movw	r26, r24
     ade:	cb 01       	movw	r24, r22
     ae0:	88 51       	subi	r24, 0x18	; 24
     ae2:	9c 4f       	sbci	r25, 0xFC	; 252
     ae4:	af 4f       	sbci	r26, 0xFF	; 255
     ae6:	bf 4f       	sbci	r27, 0xFF	; 255
     ae8:	80 93 58 01 	sts	0x0158, r24
     aec:	90 93 59 01 	sts	0x0159, r25
     af0:	a0 93 5a 01 	sts	0x015A, r26
     af4:	b0 93 5b 01 	sts	0x015B, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){
		intensity = 255;
     af8:	cf ef       	ldi	r28, 0xFF	; 255
     afa:	d0 e0       	ldi	r29, 0x00	; 0
     afc:	25 c0       	rjmp	.+74     	; 0xb48 <_Z14isr_light_iconv+0xba>
		if(icon_current_step == 0) _icon_time = millis_get() + 1000;
		else if(icon_current_step == 11) _icon_time = millis_get() + 1;
     afe:	8f dc       	rcall	.-1762   	; 0x41e <millis_get>
     b00:	dc 01       	movw	r26, r24
     b02:	cb 01       	movw	r24, r22
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	a1 1d       	adc	r26, r1
     b08:	b1 1d       	adc	r27, r1
     b0a:	80 93 58 01 	sts	0x0158, r24
     b0e:	90 93 59 01 	sts	0x0159, r25
     b12:	a0 93 5a 01 	sts	0x015A, r26
     b16:	b0 93 5b 01 	sts	0x015B, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){
		intensity = 255;
     b1a:	cf ef       	ldi	r28, 0xFF	; 255
     b1c:	d0 e0       	ldi	r29, 0x00	; 0
     b1e:	14 c0       	rjmp	.+40     	; 0xb48 <_Z14isr_light_iconv+0xba>
		if(icon_current_step == 0) _icon_time = millis_get() + 1000;
		else if(icon_current_step == 11) _icon_time = millis_get() + 1;
	}else{
		intensity = (250 - (icon_current_step * 25));
     b20:	37 ee       	ldi	r19, 0xE7	; 231
     b22:	32 03       	mulsu	r19, r18
     b24:	e0 01       	movw	r28, r0
     b26:	11 24       	eor	r1, r1
     b28:	c6 50       	subi	r28, 0x06	; 6
     b2a:	df 4f       	sbci	r29, 0xFF	; 255
		_icon_time = millis_get() + 50;
     b2c:	78 dc       	rcall	.-1808   	; 0x41e <millis_get>
     b2e:	dc 01       	movw	r26, r24
     b30:	cb 01       	movw	r24, r22
     b32:	c2 96       	adiw	r24, 0x32	; 50
     b34:	a1 1d       	adc	r26, r1
     b36:	b1 1d       	adc	r27, r1
     b38:	80 93 58 01 	sts	0x0158, r24
     b3c:	90 93 59 01 	sts	0x0159, r25
     b40:	a0 93 5a 01 	sts	0x015A, r26
     b44:	b0 93 5b 01 	sts	0x015B, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){
		intensity = 255;
     b48:	00 e0       	ldi	r16, 0x00	; 0
     b4a:	10 e0       	ldi	r17, 0x00	; 0
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 3; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     b4c:	80 91 5d 01 	lds	r24, 0x015D
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	9c 01       	movw	r18, r24
     b54:	22 0f       	add	r18, r18
     b56:	33 1f       	adc	r19, r19
     b58:	82 0f       	add	r24, r18
     b5a:	93 1f       	adc	r25, r19
     b5c:	80 0f       	add	r24, r16
     b5e:	91 1f       	adc	r25, r17
     b60:	fc 01       	movw	r30, r24
     b62:	e0 5e       	subi	r30, 0xE0	; 224
     b64:	fc 4f       	sbci	r31, 0xFC	; 252
     b66:	44 91       	lpm	r20, Z
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     b68:	fc 01       	movw	r30, r24
     b6a:	e4 5d       	subi	r30, 0xD4	; 212
     b6c:	fc 4f       	sbci	r31, 0xFC	; 252
     b6e:	84 91       	lpm	r24, Z
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 3; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     b70:	4c 9f       	mul	r20, r28
     b72:	90 01       	movw	r18, r0
     b74:	4d 9f       	mul	r20, r29
     b76:	30 0d       	add	r19, r0
     b78:	11 24       	eor	r1, r1
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     b7a:	63 2f       	mov	r22, r19
     b7c:	ac d0       	rcall	.+344    	; 0xcd6 <pca9635_set_led_pwm>
     b7e:	0f 5f       	subi	r16, 0xFF	; 255
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
		_icon_time = millis_get() + 50;
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 3; j++){
     b82:	04 30       	cpi	r16, 0x04	; 4
     b84:	11 05       	cpc	r17, r1
     b86:	11 f7       	brne	.-60     	; 0xb4c <_Z14isr_light_iconv+0xbe>
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
	}
	

	// is variable _flash_current_step equal to total steps?
	if(icon_current_step == 11) {
     b88:	80 91 5c 01 	lds	r24, 0x015C
     b8c:	8b 30       	cpi	r24, 0x0B	; 11
     b8e:	e1 f4       	brne	.+56     	; 0xbc8 <_Z14isr_light_iconv+0x13a>
		//reset _flash_current_step to 0
		icon_current_step = 0;
     b90:	10 92 5c 01 	sts	0x015C, r1
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     b94:	30 91 6d 01 	lds	r19, 0x016D
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     b98:	23 2f       	mov	r18, r19
     b9a:	2f 70       	andi	r18, 0x0F	; 15
     b9c:	80 91 5d 01 	lds	r24, 0x015D
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     ba0:	40 e0       	ldi	r20, 0x00	; 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
     ba2:	8f 5f       	subi	r24, 0xFF	; 255
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     ba4:	84 30       	cpi	r24, 0x04	; 4
     ba6:	09 f4       	brne	.+2      	; 0xbaa <_Z14isr_light_iconv+0x11c>
     ba8:	84 2f       	mov	r24, r20
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     baa:	e8 2f       	mov	r30, r24
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	e8 5b       	subi	r30, 0xB8	; 184
     bb0:	fe 4f       	sbci	r31, 0xFE	; 254
     bb2:	90 81       	ld	r25, Z
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     bb4:	21 11       	cpse	r18, r1
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <_Z14isr_light_iconv+0x130>
     bb8:	80 93 5d 01 	sts	0x015D, r24
     bbc:	08 c0       	rjmp	.+16     	; 0xbce <_Z14isr_light_iconv+0x140>
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     bbe:	93 23       	and	r25, r19
		//reset _flash_current_step to 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
     bc0:	81 f3       	breq	.-32     	; 0xba2 <_Z14isr_light_iconv+0x114>
     bc2:	80 93 5d 01 	sts	0x015D, r24
     bc6:	03 c0       	rjmp	.+6      	; 0xbce <_Z14isr_light_iconv+0x140>
			} // while
			
			
		}else{
		// set _flash_current_step +1
		icon_current_step++;
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	80 93 5c 01 	sts	0x015C, r24
	}
	
} // END isr_light_icon
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	08 95       	ret

00000bd8 <__vector_7>:

	
	
	
	
ISR (TIMER2_COMPA_vect) {
     bd8:	1f 92       	push	r1
     bda:	0f 92       	push	r0
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	0f 92       	push	r0
     be0:	11 24       	eor	r1, r1
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	2f 93       	push	r18
     be8:	3f 93       	push	r19
     bea:	4f 93       	push	r20
     bec:	5f 93       	push	r21
     bee:	6f 93       	push	r22
     bf0:	7f 93       	push	r23
     bf2:	8f 93       	push	r24
     bf4:	9f 93       	push	r25
     bf6:	af 93       	push	r26
     bf8:	bf 93       	push	r27
     bfa:	ef 93       	push	r30
     bfc:	ff 93       	push	r31
	
	// check if the alarm needs to be stopped
	if(millis_get() > active_alarm_time){
     bfe:	0f dc       	rcall	.-2018   	; 0x41e <millis_get>
     c00:	00 91 69 01 	lds	r16, 0x0169
     c04:	10 91 6a 01 	lds	r17, 0x016A
     c08:	20 91 6b 01 	lds	r18, 0x016B
     c0c:	30 91 6c 01 	lds	r19, 0x016C
     c10:	06 17       	cp	r16, r22
     c12:	17 07       	cpc	r17, r23
     c14:	28 07       	cpc	r18, r24
     c16:	39 07       	cpc	r19, r25
     c18:	98 f4       	brcc	.+38     	; 0xc40 <__vector_7+0x68>
		// stop alarm
		
			// stop timer 0
			millis_pause();
     c1a:	20 dc       	rcall	.-1984   	; 0x45c <millis_pause>
			
			// stop sound
			noTone();
     c1c:	ab d4       	rcall	.+2390   	; 0x1574 <noTone>
			
			// stop timer 2
			TIMSK2 &= ~_BV(OCIE2A);
     c1e:	e0 e7       	ldi	r30, 0x70	; 112
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	80 81       	ld	r24, Z
     c24:	8d 7f       	andi	r24, 0xFD	; 253
     c26:	80 83       	st	Z, r24
			power_timer2_disable();
     c28:	e4 e6       	ldi	r30, 0x64	; 100
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	80 64       	ori	r24, 0x40	; 64
     c30:	80 83       	st	Z, r24
			
			// empty alarm arrray
			active_alarm = 0x00; 
     c32:	10 92 6d 01 	sts	0x016D, r1
			
			// alle leds uit, pca in slaapstand
			pca9635_set_led_mode(0); // put all leds off
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	5f d0       	rcall	.+190    	; 0xcf8 <pca9635_set_led_mode>
			pca9635_set_sleep(1); // put pca9635 in sleep
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	7c d0       	rcall	.+248    	; 0xd36 <pca9635_set_sleep>
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <__vector_7+0x6e>
						
			// automatisch slapen in loop.
			
	}else{
		// continue alarm
		isr_sound();
     c40:	a6 dd       	rcall	.-1204   	; 0x78e <_Z9isr_soundv>
	    isr_light_flash();
     c42:	c4 de       	rcall	.-632    	; 0x9cc <_Z15isr_light_flashv>
		isr_light_icon();		
     c44:	24 df       	rcall	.-440    	; 0xa8e <_Z14isr_light_iconv>
	}
}
     c46:	ff 91       	pop	r31
     c48:	ef 91       	pop	r30
     c4a:	bf 91       	pop	r27
     c4c:	af 91       	pop	r26
     c4e:	9f 91       	pop	r25
     c50:	8f 91       	pop	r24
     c52:	7f 91       	pop	r23
     c54:	6f 91       	pop	r22
     c56:	5f 91       	pop	r21
     c58:	4f 91       	pop	r20
     c5a:	3f 91       	pop	r19
     c5c:	2f 91       	pop	r18
     c5e:	1f 91       	pop	r17
     c60:	0f 91       	pop	r16
     c62:	0f 90       	pop	r0
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	0f 90       	pop	r0
     c68:	1f 90       	pop	r1
     c6a:	18 95       	reti

00000c6c <pca9635_init>:
	  I2C_write(cycle1);
	  I2C_write(cycle2);
	  I2C_write(cycle3);
	  I2C_stop();
	  return;
  }
     c6c:	80 e8       	ldi	r24, 0x80	; 128
     c6e:	85 db       	rcall	.-2294   	; 0x37a <I2C_start>
     c70:	80 e8       	ldi	r24, 0x80	; 128
     c72:	a8 db       	rcall	.-2224   	; 0x3c4 <I2C_write>
     c74:	80 e8       	ldi	r24, 0x80	; 128
     c76:	a6 db       	rcall	.-2228   	; 0x3c4 <I2C_write>
     c78:	82 e0       	ldi	r24, 0x02	; 2
     c7a:	a4 db       	rcall	.-2232   	; 0x3c4 <I2C_write>
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	a2 db       	rcall	.-2236   	; 0x3c4 <I2C_write>
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	a0 db       	rcall	.-2240   	; 0x3c4 <I2C_write>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	9e db       	rcall	.-2244   	; 0x3c4 <I2C_write>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	9c db       	rcall	.-2248   	; 0x3c4 <I2C_write>
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	9a db       	rcall	.-2252   	; 0x3c4 <I2C_write>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	98 db       	rcall	.-2256   	; 0x3c4 <I2C_write>
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	96 db       	rcall	.-2260   	; 0x3c4 <I2C_write>
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	94 db       	rcall	.-2264   	; 0x3c4 <I2C_write>
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	92 db       	rcall	.-2268   	; 0x3c4 <I2C_write>
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 db       	rcall	.-2272   	; 0x3c4 <I2C_write>
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	8e db       	rcall	.-2276   	; 0x3c4 <I2C_write>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8c db       	rcall	.-2280   	; 0x3c4 <I2C_write>
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	8a db       	rcall	.-2284   	; 0x3c4 <I2C_write>
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	88 db       	rcall	.-2288   	; 0x3c4 <I2C_write>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	86 db       	rcall	.-2292   	; 0x3c4 <I2C_write>
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	84 db       	rcall	.-2296   	; 0x3c4 <I2C_write>
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	82 db       	rcall	.-2300   	; 0x3c4 <I2C_write>
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	80 db       	rcall	.-2304   	; 0x3c4 <I2C_write>
     cc4:	8a ea       	ldi	r24, 0xAA	; 170
     cc6:	7e db       	rcall	.-2308   	; 0x3c4 <I2C_write>
     cc8:	8a ea       	ldi	r24, 0xAA	; 170
     cca:	7c db       	rcall	.-2312   	; 0x3c4 <I2C_write>
     ccc:	8a ea       	ldi	r24, 0xAA	; 170
     cce:	7a db       	rcall	.-2316   	; 0x3c4 <I2C_write>
     cd0:	8a ea       	ldi	r24, 0xAA	; 170
     cd2:	78 db       	rcall	.-2320   	; 0x3c4 <I2C_write>
     cd4:	94 cb       	rjmp	.-2264   	; 0x3fe <I2C_stop>

00000cd6 <pca9635_set_led_pwm>:
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	d8 2f       	mov	r29, r24
     cdc:	c6 2f       	mov	r28, r22
     cde:	80 e8       	ldi	r24, 0x80	; 128
     ce0:	4c db       	rcall	.-2408   	; 0x37a <I2C_start>
     ce2:	8d 2f       	mov	r24, r29
     ce4:	8e 5f       	subi	r24, 0xFE	; 254
     ce6:	80 68       	ori	r24, 0x80	; 128
     ce8:	6d db       	rcall	.-2342   	; 0x3c4 <I2C_write>
     cea:	8c 2f       	mov	r24, r28
     cec:	6b db       	rcall	.-2346   	; 0x3c4 <I2C_write>
     cee:	87 db       	rcall	.-2290   	; 0x3fe <I2C_stop>
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	08 95       	ret

00000cf8 <pca9635_set_led_mode>:
* 1=fully on (no PWM)
* 2=individual PWM only
* 3=individual and group PWM
*/
void pca9635_set_led_mode(uint8_t mode)
{
     cf8:	cf 93       	push	r28
	uint8_t value;
	switch (mode)
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	31 f0       	breq	.+12     	; 0xd0a <pca9635_set_led_mode+0x12>
     cfe:	58 f0       	brcs	.+22     	; 0xd16 <pca9635_set_led_mode+0x1e>
     d00:	82 30       	cpi	r24, 0x02	; 2
     d02:	29 f0       	breq	.+10     	; 0xd0e <pca9635_set_led_mode+0x16>
     d04:	83 30       	cpi	r24, 0x03	; 3
     d06:	41 f4       	brne	.+16     	; 0xd18 <pca9635_set_led_mode+0x20>
     d08:	04 c0       	rjmp	.+8      	; 0xd12 <pca9635_set_led_mode+0x1a>
	{
		case 0:
		value = 0x00; // B00000000
		break;
		case 1:
		value = 0x55; //B01010101
     d0a:	c5 e5       	ldi	r28, 0x55	; 85
		break;
     d0c:	05 c0       	rjmp	.+10     	; 0xd18 <pca9635_set_led_mode+0x20>
		case 2:
		value = 0xAA; //B10101010
     d0e:	ca ea       	ldi	r28, 0xAA	; 170
		break;
     d10:	03 c0       	rjmp	.+6      	; 0xd18 <pca9635_set_led_mode+0x20>
		case 3:
		value = 0xFF; //B11111111
     d12:	cf ef       	ldi	r28, 0xFF	; 255
		break;
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <pca9635_set_led_mode+0x20>
{
	uint8_t value;
	switch (mode)
	{
		case 0:
		value = 0x00; // B00000000
     d16:	c0 e0       	ldi	r28, 0x00	; 0
		case 3:
		value = 0xFF; //B11111111
		break;
	}
	
	I2C_start((0x40<<1)+I2C_WRITE);
     d18:	80 e8       	ldi	r24, 0x80	; 128
     d1a:	2f db       	rcall	.-2466   	; 0x37a <I2C_start>
  	I2C_write( 0x94 ); // LEDOUT0 = 0x14 = 10100, autoinc. 0x80 = 10000000, Total= 10010100,
     d1c:	84 e9       	ldi	r24, 0x94	; 148
     d1e:	52 db       	rcall	.-2396   	; 0x3c4 <I2C_write>
  	for (uint8_t i = 0; i <= 3; ++i){
	   I2C_write(value);	
     d20:	8c 2f       	mov	r24, r28
     d22:	50 db       	rcall	.-2400   	; 0x3c4 <I2C_write>
     d24:	8c 2f       	mov	r24, r28
     d26:	4e db       	rcall	.-2404   	; 0x3c4 <I2C_write>
     d28:	8c 2f       	mov	r24, r28
     d2a:	4c db       	rcall	.-2408   	; 0x3c4 <I2C_write>
     d2c:	8c 2f       	mov	r24, r28
     d2e:	4a db       	rcall	.-2412   	; 0x3c4 <I2C_write>
  	}
			  
  	I2C_stop();
     d30:	66 db       	rcall	.-2356   	; 0x3fe <I2C_stop>
		  
}
     d32:	cf 91       	pop	r28
     d34:	08 95       	ret

00000d36 <pca9635_set_sleep>:

/**
* Changes the oscillator mode between sleep (1) and active (0)
*/
uint8_t pca9635_set_sleep(uint8_t sleep)
{
     d36:	cf 93       	push	r28
     d38:	c8 2f       	mov	r28, r24
	I2C_start((0x40<<1)+I2C_READ);
     d3a:	81 e8       	ldi	r24, 0x81	; 129
     d3c:	1e db       	rcall	.-2500   	; 0x37a <I2C_start>
	I2C_write(0x80); // autoincrement, mode 0,
     d3e:	80 e8       	ldi	r24, 0x80	; 128
     d40:	41 db       	rcall	.-2430   	; 0x3c4 <I2C_write>
	// I2C_stop(); ???nodig?
	uint8_t data = I2C_read_ack();
     d42:	52 db       	rcall	.-2396   	; 0x3e8 <I2C_read_ack>
	
	if(sleep){		// set or unset bit 4
     d44:	cc 23       	and	r28, r28
     d46:	11 f0       	breq	.+4      	; 0xd4c <pca9635_set_sleep+0x16>
		data |= (1<<4);
     d48:	80 61       	ori	r24, 0x10	; 16
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <pca9635_set_sleep+0x18>
	}else{
		data &= ~(1<<4);
     d4c:	8f 7e       	andi	r24, 0xEF	; 239
	}
	
	uint8_t ack = I2C_write(data);  
     d4e:	3a db       	rcall	.-2444   	; 0x3c4 <I2C_write>
     d50:	c8 2f       	mov	r28, r24
	I2C_stop();
     d52:	55 db       	rcall	.-2390   	; 0x3fe <I2C_stop>
	return ack;
}
     d54:	8c 2f       	mov	r24, r28
     d56:	cf 91       	pop	r28
     d58:	08 95       	ret

00000d5a <_ZL15blockInterruptsv>:
	rf12_idle();
	else {
		rfmstate &= ~B11111000; // make sure everything is switched off (except bod, wkup, clk)
		rf12_xfer(rfmstate);
	}
	rxstate = TXIDLE;
     d5a:	e8 98       	cbi	0x1d, 0	; 29
     d5c:	08 95       	ret

00000d5e <_ZL15allowInterruptsv>:
     d5e:	e8 9a       	sbi	0x1d, 0	; 29
     d60:	08 95       	ret

00000d62 <_ZL9rf12_byteh>:
     d62:	8e bd       	out	0x2e, r24	; 46
     d64:	0d b4       	in	r0, 0x2d	; 45
     d66:	07 fe       	sbrs	r0, 7
     d68:	fd cf       	rjmp	.-6      	; 0xd64 <_ZL9rf12_byteh+0x2>
     d6a:	8e b5       	in	r24, 0x2e	; 46
     d6c:	08 95       	ret

00000d6e <_ZL9rf12_xferj>:
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	18 2f       	mov	r17, r24
     d76:	c9 2f       	mov	r28, r25
     d78:	f0 df       	rcall	.-32     	; 0xd5a <_ZL15blockInterruptsv>
     d7a:	2a 98       	cbi	0x05, 2	; 5
     d7c:	8c 2f       	mov	r24, r28
     d7e:	f1 df       	rcall	.-30     	; 0xd62 <_ZL9rf12_byteh>
     d80:	d8 2f       	mov	r29, r24
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	c8 2f       	mov	r28, r24
     d86:	81 2f       	mov	r24, r17
     d88:	ec df       	rcall	.-40     	; 0xd62 <_ZL9rf12_byteh>
     d8a:	c8 2b       	or	r28, r24
     d8c:	2a 9a       	sbi	0x05, 2	; 5
     d8e:	e7 df       	rcall	.-50     	; 0xd5e <_ZL15allowInterruptsv>
     d90:	8c 2f       	mov	r24, r28
     d92:	9d 2f       	mov	r25, r29
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	1f 91       	pop	r17
     d9a:	08 95       	ret

00000d9c <_ZL9rf12_idlev>:
     d9c:	80 91 c2 01 	lds	r24, 0x01C2
     da0:	90 91 c3 01 	lds	r25, 0x01C3
     da4:	8f 70       	andi	r24, 0x0F	; 15
     da6:	90 93 c3 01 	sts	0x01C3, r25
     daa:	80 93 c2 01 	sts	0x01C2, r24
     dae:	80 91 c2 01 	lds	r24, 0x01C2
     db2:	90 91 c3 01 	lds	r25, 0x01C3
     db6:	88 60       	ori	r24, 0x08	; 8
     db8:	90 93 c3 01 	sts	0x01C3, r25
     dbc:	80 93 c2 01 	sts	0x01C2, r24
     dc0:	80 91 c2 01 	lds	r24, 0x01C2
     dc4:	90 91 c3 01 	lds	r25, 0x01C3
     dc8:	d2 cf       	rjmp	.-92     	; 0xd6e <_ZL9rf12_xferj>

00000dca <_Z12rf12_spiInitv>:
     dca:	84 b1       	in	r24, 0x04	; 4
     dcc:	8c 62       	ori	r24, 0x2C	; 44
     dce:	84 b9       	out	0x04, r24	; 4
     dd0:	2a 9a       	sbi	0x05, 2	; 5
     dd2:	24 98       	cbi	0x04, 4	; 4
     dd4:	80 e5       	ldi	r24, 0x50	; 80
     dd6:	8c bd       	out	0x2c, r24	; 44
     dd8:	8d b5       	in	r24, 0x2d	; 45
     dda:	81 60       	ori	r24, 0x01	; 1
     ddc:	8d bd       	out	0x2d, r24	; 45
     dde:	52 98       	cbi	0x0a, 2	; 10
     de0:	5a 9a       	sbi	0x0b, 2	; 11
     de2:	08 95       	ret

00000de4 <_Z13rf12_recvDonev>:
     de4:	80 91 c4 01 	lds	r24, 0x01C4
     de8:	87 30       	cpi	r24, 0x07	; 7
     dea:	09 f0       	breq	.+2      	; 0xdee <_Z13rf12_recvDonev+0xa>
     dec:	51 c0       	rjmp	.+162    	; 0xe90 <_Z13rf12_recvDonev+0xac>
     dee:	80 91 c7 01 	lds	r24, 0x01C7
     df2:	88 23       	and	r24, r24
     df4:	a1 f0       	breq	.+40     	; 0xe1e <_Z13rf12_recvDonev+0x3a>
     df6:	90 91 c5 01 	lds	r25, 0x01C5
     dfa:	98 17       	cp	r25, r24
     dfc:	28 f4       	brcc	.+10     	; 0xe08 <_Z13rf12_recvDonev+0x24>
     dfe:	80 91 c5 01 	lds	r24, 0x01C5
     e02:	87 34       	cpi	r24, 0x47	; 71
     e04:	08 f4       	brcc	.+2      	; 0xe08 <_Z13rf12_recvDonev+0x24>
     e06:	44 c0       	rjmp	.+136    	; 0xe90 <_Z13rf12_recvDonev+0xac>
     e08:	84 e0       	ldi	r24, 0x04	; 4
     e0a:	80 93 c4 01 	sts	0x01C4, r24
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	90 93 bc 01 	sts	0x01BC, r25
     e16:	80 93 bb 01 	sts	0x01BB, r24
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	08 95       	ret
     e1e:	20 91 c5 01 	lds	r18, 0x01C5
     e22:	80 91 76 01 	lds	r24, 0x0176
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	05 96       	adiw	r24, 0x05	; 5
     e2c:	28 17       	cp	r18, r24
     e2e:	39 07       	cpc	r19, r25
     e30:	24 f4       	brge	.+8      	; 0xe3a <_Z13rf12_recvDonev+0x56>
     e32:	80 91 c5 01 	lds	r24, 0x01C5
     e36:	87 34       	cpi	r24, 0x47	; 71
     e38:	58 f1       	brcs	.+86     	; 0xe90 <_Z13rf12_recvDonev+0xac>
     e3a:	84 e0       	ldi	r24, 0x04	; 4
     e3c:	80 93 c4 01 	sts	0x01C4, r24
     e40:	80 91 76 01 	lds	r24, 0x0176
     e44:	83 34       	cpi	r24, 0x43	; 67
     e46:	30 f0       	brcs	.+12     	; 0xe54 <_Z13rf12_recvDonev+0x70>
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	90 93 bc 01 	sts	0x01BC, r25
     e50:	80 93 bb 01 	sts	0x01BB, r24
     e54:	80 91 75 01 	lds	r24, 0x0175
     e58:	86 ff       	sbrs	r24, 6
     e5a:	0b c0       	rjmp	.+22     	; 0xe72 <_Z13rf12_recvDonev+0x8e>
     e5c:	80 91 c8 01 	lds	r24, 0x01C8
     e60:	98 2f       	mov	r25, r24
     e62:	9f 71       	andi	r25, 0x1F	; 31
     e64:	9f 31       	cpi	r25, 0x1F	; 31
     e66:	29 f0       	breq	.+10     	; 0xe72 <_Z13rf12_recvDonev+0x8e>
     e68:	90 91 75 01 	lds	r25, 0x0175
     e6c:	89 27       	eor	r24, r25
     e6e:	8f 71       	andi	r24, 0x1F	; 31
     e70:	79 f4       	brne	.+30     	; 0xe90 <_Z13rf12_recvDonev+0xac>
     e72:	80 91 bb 01 	lds	r24, 0x01BB
     e76:	90 91 bc 01 	lds	r25, 0x01BC
     e7a:	89 2b       	or	r24, r25
     e7c:	09 f0       	breq	.+2      	; 0xe80 <_Z13rf12_recvDonev+0x9c>
     e7e:	55 c0       	rjmp	.+170    	; 0xf2a <_Z13rf12_recvDonev+0x146>
     e80:	e0 91 6e 01 	lds	r30, 0x016E
     e84:	f0 91 6f 01 	lds	r31, 0x016F
     e88:	30 97       	sbiw	r30, 0x00	; 0
     e8a:	09 f0       	breq	.+2      	; 0xe8e <_Z13rf12_recvDonev+0xaa>
     e8c:	4a c0       	rjmp	.+148    	; 0xf22 <_Z13rf12_recvDonev+0x13e>
     e8e:	4d c0       	rjmp	.+154    	; 0xf2a <_Z13rf12_recvDonev+0x146>
     e90:	80 91 c4 01 	lds	r24, 0x01C4
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	09 f0       	breq	.+2      	; 0xe9a <_Z13rf12_recvDonev+0xb6>
     e98:	42 c0       	rjmp	.+132    	; 0xf1e <_Z13rf12_recvDonev+0x13a>
     e9a:	10 92 76 01 	sts	0x0176, r1
     e9e:	10 92 c5 01 	sts	0x01C5, r1
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	9f ef       	ldi	r25, 0xFF	; 255
     ea6:	90 93 bc 01 	sts	0x01BC, r25
     eaa:	80 93 bb 01 	sts	0x01BB, r24
     eae:	20 91 c6 01 	lds	r18, 0x01C6
     eb2:	22 23       	and	r18, r18
     eb4:	d9 f0       	breq	.+54     	; 0xeec <_Z13rf12_recvDonev+0x108>
     eb6:	82 27       	eor	r24, r18
     eb8:	28 2f       	mov	r18, r24
     eba:	22 95       	swap	r18
     ebc:	28 27       	eor	r18, r24
     ebe:	02 2e       	mov	r0, r18
     ec0:	26 95       	lsr	r18
     ec2:	26 95       	lsr	r18
     ec4:	20 25       	eor	r18, r0
     ec6:	02 2e       	mov	r0, r18
     ec8:	26 95       	lsr	r18
     eca:	20 25       	eor	r18, r0
     ecc:	27 70       	andi	r18, 0x07	; 7
     ece:	08 2e       	mov	r0, r24
     ed0:	89 2f       	mov	r24, r25
     ed2:	26 95       	lsr	r18
     ed4:	07 94       	ror	r0
     ed6:	27 95       	ror	r18
     ed8:	90 2d       	mov	r25, r0
     eda:	82 27       	eor	r24, r18
     edc:	06 94       	lsr	r0
     ede:	27 95       	ror	r18
     ee0:	90 25       	eor	r25, r0
     ee2:	82 27       	eor	r24, r18
     ee4:	90 93 bc 01 	sts	0x01BC, r25
     ee8:	80 93 bb 01 	sts	0x01BB, r24
     eec:	87 e0       	ldi	r24, 0x07	; 7
     eee:	80 93 c4 01 	sts	0x01C4, r24
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	80 93 be 01 	sts	0x01BE, r24
     ef8:	83 ea       	ldi	r24, 0xA3	; 163
     efa:	94 e9       	ldi	r25, 0x94	; 148
     efc:	38 df       	rcall	.-400    	; 0xd6e <_ZL9rf12_xferj>
     efe:	80 91 c2 01 	lds	r24, 0x01C2
     f02:	90 91 c3 01 	lds	r25, 0x01C3
     f06:	88 6d       	ori	r24, 0xD8	; 216
     f08:	90 93 c3 01 	sts	0x01C3, r25
     f0c:	80 93 c2 01 	sts	0x01C2, r24
     f10:	80 91 c2 01 	lds	r24, 0x01C2
     f14:	90 91 c3 01 	lds	r25, 0x01C3
     f18:	2a df       	rcall	.-428    	; 0xd6e <_ZL9rf12_xferj>
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	08 95       	ret
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	08 95       	ret
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	09 95       	icall
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	08 95       	ret
     f2a:	8f ef       	ldi	r24, 0xFF	; 255
     f2c:	9f ef       	ldi	r25, 0xFF	; 255
     f2e:	dc 01       	movw	r26, r24
     f30:	80 93 70 01 	sts	0x0170, r24
     f34:	90 93 71 01 	sts	0x0171, r25
     f38:	a0 93 72 01 	sts	0x0172, r26
     f3c:	b0 93 73 01 	sts	0x0173, r27
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	08 95       	ret

00000f44 <_Z15rf12_setBitrateh>:
     f44:	cf 92       	push	r12
     f46:	df 92       	push	r13
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	cf 93       	push	r28
     f52:	c8 2f       	mov	r28, r24
     f54:	08 2f       	mov	r16, r24
     f56:	10 e0       	ldi	r17, 0x00	; 0
     f58:	c8 01       	movw	r24, r16
     f5a:	96 6c       	ori	r25, 0xC6	; 198
     f5c:	08 df       	rcall	.-496    	; 0xd6e <_ZL9rf12_xferj>
     f5e:	cf 77       	andi	r28, 0x7F	; 127
     f60:	2c 2f       	mov	r18, r28
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	2f 5f       	subi	r18, 0xFF	; 255
     f66:	3f 4f       	sbci	r19, 0xFF	; 255
     f68:	44 27       	eor	r20, r20
     f6a:	37 fd       	sbrc	r19, 7
     f6c:	40 95       	com	r20
     f6e:	54 2f       	mov	r21, r20
     f70:	6b ef       	ldi	r22, 0xFB	; 251
     f72:	72 e4       	ldi	r23, 0x42	; 66
     f74:	85 e0       	ldi	r24, 0x05	; 5
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	22 d4       	rcall	.+2116   	; 0x17be <__udivmodsi4>
     f7a:	69 01       	movw	r12, r18
     f7c:	7a 01       	movw	r14, r20
     f7e:	c8 01       	movw	r24, r16
     f80:	88 0f       	add	r24, r24
     f82:	89 2f       	mov	r24, r25
     f84:	88 1f       	adc	r24, r24
     f86:	99 0b       	sbc	r25, r25
     f88:	8c 01       	movw	r16, r24
     f8a:	00 0f       	add	r16, r16
     f8c:	11 1f       	adc	r17, r17
     f8e:	00 0f       	add	r16, r16
     f90:	11 1f       	adc	r17, r17
     f92:	00 0f       	add	r16, r16
     f94:	11 1f       	adc	r17, r17
     f96:	08 1b       	sub	r16, r24
     f98:	19 0b       	sbc	r17, r25
     f9a:	0f 5f       	subi	r16, 0xFF	; 255
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
     f9e:	98 01       	movw	r18, r16
     fa0:	44 27       	eor	r20, r20
     fa2:	37 fd       	sbrc	r19, 7
     fa4:	40 95       	com	r20
     fa6:	54 2f       	mov	r21, r20
     fa8:	c7 01       	movw	r24, r14
     faa:	b6 01       	movw	r22, r12
     fac:	08 d4       	rcall	.+2064   	; 0x17be <__udivmodsi4>
     fae:	da 01       	movw	r26, r20
     fb0:	c9 01       	movw	r24, r18
     fb2:	68 94       	set
     fb4:	12 f8       	bld	r1, 2
     fb6:	b6 95       	lsr	r27
     fb8:	a7 95       	ror	r26
     fba:	97 95       	ror	r25
     fbc:	87 95       	ror	r24
     fbe:	16 94       	lsr	r1
     fc0:	d1 f7       	brne	.-12     	; 0xfb6 <_Z15rf12_setBitrateh+0x72>
     fc2:	bc 01       	movw	r22, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	6d 57       	subi	r22, 0x7D	; 125
     fc8:	7c 4f       	sbci	r23, 0xFC	; 252
     fca:	8f 4f       	sbci	r24, 0xFF	; 255
     fcc:	9f 4f       	sbci	r25, 0xFF	; 255
     fce:	24 e8       	ldi	r18, 0x84	; 132
     fd0:	33 e0       	ldi	r19, 0x03	; 3
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	f3 d3       	rcall	.+2022   	; 0x17be <__udivmodsi4>
     fd8:	20 93 bd 01 	sts	0x01BD, r18
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	ff 90       	pop	r15
     fe4:	ef 90       	pop	r14
     fe6:	df 90       	pop	r13
     fe8:	cf 90       	pop	r12
     fea:	08 95       	ret

00000fec <_Z19rf12_setFixedLengthh>:
     fec:	81 11       	cpse	r24, r1
     fee:	03 c0       	rjmp	.+6      	; 0xff6 <_Z19rf12_setFixedLengthh+0xa>
     ff0:	10 92 c7 01 	sts	0x01C7, r1
     ff4:	08 95       	ret
     ff6:	8f 5f       	subi	r24, 0xFF	; 255
     ff8:	80 93 c7 01 	sts	0x01C7, r24
     ffc:	08 95       	ret

00000ffe <_Z14rf12_sendStarth>:
     ffe:	86 fd       	sbrc	r24, 6
    1000:	05 c0       	rjmp	.+10     	; 0x100c <_Z14rf12_sendStarth+0xe>
    1002:	80 7e       	andi	r24, 0xE0	; 224
    1004:	90 91 c8 01 	lds	r25, 0x01C8
    1008:	9f 71       	andi	r25, 0x1F	; 31
    100a:	89 0f       	add	r24, r25
    100c:	80 93 75 01 	sts	0x0175, r24
    1010:	e0 91 6e 01 	lds	r30, 0x016E
    1014:	f0 91 6f 01 	lds	r31, 0x016F
    1018:	30 97       	sbiw	r30, 0x00	; 0
    101a:	11 f0       	breq	.+4      	; 0x1020 <_Z14rf12_sendStarth+0x22>
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	09 95       	icall
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	9f ef       	ldi	r25, 0xFF	; 255
    1024:	90 93 bc 01 	sts	0x01BC, r25
    1028:	80 93 bb 01 	sts	0x01BB, r24
    102c:	80 91 bb 01 	lds	r24, 0x01BB
    1030:	90 91 bc 01 	lds	r25, 0x01BC
    1034:	20 91 c6 01 	lds	r18, 0x01C6
    1038:	82 27       	eor	r24, r18
    103a:	28 2f       	mov	r18, r24
    103c:	22 95       	swap	r18
    103e:	28 27       	eor	r18, r24
    1040:	02 2e       	mov	r0, r18
    1042:	26 95       	lsr	r18
    1044:	26 95       	lsr	r18
    1046:	20 25       	eor	r18, r0
    1048:	02 2e       	mov	r0, r18
    104a:	26 95       	lsr	r18
    104c:	20 25       	eor	r18, r0
    104e:	27 70       	andi	r18, 0x07	; 7
    1050:	08 2e       	mov	r0, r24
    1052:	89 2f       	mov	r24, r25
    1054:	26 95       	lsr	r18
    1056:	07 94       	ror	r0
    1058:	27 95       	ror	r18
    105a:	90 2d       	mov	r25, r0
    105c:	82 27       	eor	r24, r18
    105e:	06 94       	lsr	r0
    1060:	27 95       	ror	r18
    1062:	90 25       	eor	r25, r0
    1064:	82 27       	eor	r24, r18
    1066:	90 93 bc 01 	sts	0x01BC, r25
    106a:	80 93 bb 01 	sts	0x01BB, r24
    106e:	88 e0       	ldi	r24, 0x08	; 8
    1070:	80 93 c4 01 	sts	0x01C4, r24
    1074:	80 91 c2 01 	lds	r24, 0x01C2
    1078:	90 91 c3 01 	lds	r25, 0x01C3
    107c:	88 63       	ori	r24, 0x38	; 56
    107e:	90 93 c3 01 	sts	0x01C3, r25
    1082:	80 93 c2 01 	sts	0x01C2, r24
    1086:	80 91 c2 01 	lds	r24, 0x01C2
    108a:	90 91 c3 01 	lds	r25, 0x01C3
    108e:	6f ce       	rjmp	.-802    	; 0xd6e <_ZL9rf12_xferj>

00001090 <_Z14rf12_sendStarthPKvh>:
    1090:	cf 93       	push	r28
    1092:	c8 2f       	mov	r28, r24
    1094:	40 93 76 01 	sts	0x0176, r20
    1098:	27 e7       	ldi	r18, 0x77	; 119
    109a:	31 e0       	ldi	r19, 0x01	; 1
    109c:	50 e0       	ldi	r21, 0x00	; 0
    109e:	82 2f       	mov	r24, r18
    10a0:	93 2f       	mov	r25, r19
    10a2:	c3 d3       	rcall	.+1926   	; 0x182a <memcpy>
    10a4:	8c 2f       	mov	r24, r28
    10a6:	ab df       	rcall	.-170    	; 0xffe <_Z14rf12_sendStarth>
    10a8:	cf 91       	pop	r28
    10aa:	08 95       	ret

000010ac <_Z13rf12_sendWaith>:
    10ac:	44 e0       	ldi	r20, 0x04	; 4
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	5c e0       	ldi	r21, 0x0C	; 12
    10b2:	16 c0       	rjmp	.+44     	; 0x10e0 <_Z13rf12_sendWaith+0x34>
    10b4:	88 23       	and	r24, r24
    10b6:	a1 f0       	breq	.+40     	; 0x10e0 <_Z13rf12_sendWaith+0x34>
    10b8:	93 b7       	in	r25, 0x33	; 51
    10ba:	91 7f       	andi	r25, 0xF1	; 241
    10bc:	83 30       	cpi	r24, 0x03	; 3
    10be:	21 f0       	breq	.+8      	; 0x10c8 <_Z13rf12_sendWaith+0x1c>
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	21 f4       	brne	.+8      	; 0x10cc <_Z13rf12_sendWaith+0x20>
    10c4:	25 2f       	mov	r18, r21
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <_Z13rf12_sendWaith+0x22>
    10c8:	24 2f       	mov	r18, r20
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <_Z13rf12_sendWaith+0x22>
    10cc:	23 2f       	mov	r18, r19
    10ce:	92 2b       	or	r25, r18
    10d0:	93 bf       	out	0x33, r25	; 51
    10d2:	93 b7       	in	r25, 0x33	; 51
    10d4:	91 60       	ori	r25, 0x01	; 1
    10d6:	93 bf       	out	0x33, r25	; 51
    10d8:	88 95       	sleep
    10da:	93 b7       	in	r25, 0x33	; 51
    10dc:	9e 7f       	andi	r25, 0xFE	; 254
    10de:	93 bf       	out	0x33, r25	; 51
    10e0:	90 91 c4 01 	lds	r25, 0x01C4
    10e4:	94 30       	cpi	r25, 0x04	; 4
    10e6:	31 f7       	brne	.-52     	; 0x10b4 <_Z13rf12_sendWaith+0x8>
    10e8:	08 95       	ret

000010ea <_Z21rf12_interruptcontrolv>:
    10ea:	e8 9a       	sbi	0x1d, 0	; 29
    10ec:	e9 e6       	ldi	r30, 0x69	; 105
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	8d 7f       	andi	r24, 0xFD	; 253
    10f4:	80 83       	st	Z, r24
    10f6:	08 95       	ret

000010f8 <_Z12rf12_restorehhh>:
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	d6 2f       	mov	r29, r22
    10fe:	c4 2f       	mov	r28, r20
    1100:	80 93 c8 01 	sts	0x01C8, r24
    1104:	40 93 c6 01 	sts	0x01C6, r20
    1108:	60 93 c9 01 	sts	0x01C9, r22
    110c:	ee df       	rcall	.-36     	; 0x10ea <_Z21rf12_interruptcontrolv>
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	6d df       	rcall	.-294    	; 0xfec <_Z19rf12_setFixedLengthh>
    1112:	23 de       	rcall	.-954    	; 0xd5a <_ZL15blockInterruptsv>
    1114:	25 e0       	ldi	r18, 0x05	; 5
    1116:	32 e8       	ldi	r19, 0x82	; 130
    1118:	30 93 c3 01 	sts	0x01C3, r19
    111c:	20 93 c2 01 	sts	0x01C2, r18
    1120:	80 91 c2 01 	lds	r24, 0x01C2
    1124:	90 91 c3 01 	lds	r25, 0x01C3
    1128:	22 de       	rcall	.-956    	; 0xd6e <_ZL9rf12_xferj>
    112a:	20 e1       	ldi	r18, 0x10	; 16
    112c:	d2 9f       	mul	r29, r18
    112e:	c0 01       	movw	r24, r0
    1130:	11 24       	eor	r1, r1
    1132:	87 6c       	ori	r24, 0xC7	; 199
    1134:	90 68       	ori	r25, 0x80	; 128
    1136:	1b de       	rcall	.-970    	; 0xd6e <_ZL9rf12_xferj>
    1138:	80 e4       	ldi	r24, 0x40	; 64
    113a:	96 ea       	ldi	r25, 0xA6	; 166
    113c:	18 de       	rcall	.-976    	; 0xd6e <_ZL9rf12_xferj>
    113e:	86 e0       	ldi	r24, 0x06	; 6
    1140:	01 df       	rcall	.-510    	; 0xf44 <_Z15rf12_setBitrateh>
    1142:	82 ea       	ldi	r24, 0xA2	; 162
    1144:	94 e9       	ldi	r25, 0x94	; 148
    1146:	13 de       	rcall	.-986    	; 0xd6e <_ZL9rf12_xferj>
    1148:	8c ea       	ldi	r24, 0xAC	; 172
    114a:	92 ec       	ldi	r25, 0xC2	; 194
    114c:	10 de       	rcall	.-992    	; 0xd6e <_ZL9rf12_xferj>
    114e:	cc 23       	and	r28, r28
    1150:	41 f0       	breq	.+16     	; 0x1162 <_Z12rf12_restorehhh+0x6a>
    1152:	83 e8       	ldi	r24, 0x83	; 131
    1154:	9a ec       	ldi	r25, 0xCA	; 202
    1156:	0b de       	rcall	.-1002   	; 0xd6e <_ZL9rf12_xferj>
    1158:	8c 2f       	mov	r24, r28
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	9e 6c       	ori	r25, 0xCE	; 206
    115e:	07 de       	rcall	.-1010   	; 0xd6e <_ZL9rf12_xferj>
    1160:	06 c0       	rjmp	.+12     	; 0x116e <_Z12rf12_restorehhh+0x76>
    1162:	8b e8       	ldi	r24, 0x8B	; 139
    1164:	9a ec       	ldi	r25, 0xCA	; 202
    1166:	03 de       	rcall	.-1018   	; 0xd6e <_ZL9rf12_xferj>
    1168:	8d e2       	ldi	r24, 0x2D	; 45
    116a:	9e ec       	ldi	r25, 0xCE	; 206
    116c:	00 de       	rcall	.-1024   	; 0xd6e <_ZL9rf12_xferj>
    116e:	83 e8       	ldi	r24, 0x83	; 131
    1170:	94 ec       	ldi	r25, 0xC4	; 196
    1172:	fd dd       	rcall	.-1030   	; 0xd6e <_ZL9rf12_xferj>
    1174:	80 e5       	ldi	r24, 0x50	; 80
    1176:	98 e9       	ldi	r25, 0x98	; 152
    1178:	fa dd       	rcall	.-1036   	; 0xd6e <_ZL9rf12_xferj>
    117a:	87 e7       	ldi	r24, 0x77	; 119
    117c:	9c ec       	ldi	r25, 0xCC	; 204
    117e:	f7 dd       	rcall	.-1042   	; 0xd6e <_ZL9rf12_xferj>
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 ee       	ldi	r25, 0xE0	; 224
    1184:	f4 dd       	rcall	.-1048   	; 0xd6e <_ZL9rf12_xferj>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	98 ec       	ldi	r25, 0xC8	; 200
    118a:	f1 dd       	rcall	.-1054   	; 0xd6e <_ZL9rf12_xferj>
    118c:	89 e4       	ldi	r24, 0x49	; 73
    118e:	90 ec       	ldi	r25, 0xC0	; 192
    1190:	ee dd       	rcall	.-1060   	; 0xd6e <_ZL9rf12_xferj>
    1192:	84 e0       	ldi	r24, 0x04	; 4
    1194:	80 93 c4 01 	sts	0x01C4, r24
    1198:	e2 dd       	rcall	.-1084   	; 0xd5e <_ZL15allowInterruptsv>
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	08 95       	ret

000011a0 <_Z15rf12_initializehhh>:
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	c8 2f       	mov	r28, r24
    11a8:	d6 2f       	mov	r29, r22
    11aa:	14 2f       	mov	r17, r20
    11ac:	80 93 c8 01 	sts	0x01C8, r24
    11b0:	40 93 c6 01 	sts	0x01C6, r20
    11b4:	60 93 c9 01 	sts	0x01C9, r22
    11b8:	08 de       	rcall	.-1008   	; 0xdca <_Z12rf12_spiInitv>
    11ba:	97 df       	rcall	.-210    	; 0x10ea <_Z21rf12_interruptcontrolv>
    11bc:	82 e8       	ldi	r24, 0x82	; 130
    11be:	9a ec       	ldi	r25, 0xCA	; 202
    11c0:	d6 dd       	rcall	.-1108   	; 0xd6e <_ZL9rf12_xferj>
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	9e ef       	ldi	r25, 0xFE	; 254
    11c6:	d3 dd       	rcall	.-1114   	; 0xd6e <_ZL9rf12_xferj>
    11c8:	85 e0       	ldi	r24, 0x05	; 5
    11ca:	80 93 c4 01 	sts	0x01C4, r24
    11ce:	83 b7       	in	r24, 0x33	; 51
    11d0:	81 7f       	andi	r24, 0xF1	; 241
    11d2:	83 bf       	out	0x33, r24	; 51
    11d4:	80 91 c4 01 	lds	r24, 0x01C4
    11d8:	85 30       	cpi	r24, 0x05	; 5
    11da:	59 f4       	brne	.+22     	; 0x11f2 <_Z15rf12_initializehhh+0x52>
    11dc:	93 b7       	in	r25, 0x33	; 51
    11de:	91 60       	ori	r25, 0x01	; 1
    11e0:	93 bf       	out	0x33, r25	; 51
    11e2:	88 95       	sleep
    11e4:	93 b7       	in	r25, 0x33	; 51
    11e6:	9e 7f       	andi	r25, 0xFE	; 254
    11e8:	93 bf       	out	0x33, r25	; 51
    11ea:	90 91 c4 01 	lds	r25, 0x01C4
    11ee:	95 30       	cpi	r25, 0x05	; 5
    11f0:	a9 f3       	breq	.-22     	; 0x11dc <_Z15rf12_initializehhh+0x3c>
    11f2:	41 2f       	mov	r20, r17
    11f4:	6d 2f       	mov	r22, r29
    11f6:	8c 2f       	mov	r24, r28
    11f8:	7f df       	rcall	.-258    	; 0x10f8 <_Z12rf12_restorehhh>
    11fa:	80 91 c8 01 	lds	r24, 0x01C8
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	08 95       	ret

00001206 <_Z16rf12_setWatchdogm>:
/// interrupt in the RFM12 module. Use rf12_wakeup() to check if the wakeup-interrupt
/// fired. This allows very deep sleep states (timer off) while still being able to wakeup
/// because of the external interrupt. The RFM12b wakeup-timer only needs about 1.5µA.
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
    1206:	cf 92       	push	r12
    1208:	df 92       	push	r13
    120a:	ef 92       	push	r14
    120c:	ff 92       	push	r15
    120e:	cf 93       	push	r28
    1210:	6b 01       	movw	r12, r22
    1212:	7c 01       	movw	r14, r24
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	c8 16       	cp	r12, r24
    1218:	d1 04       	cpc	r13, r1
    121a:	e1 04       	cpc	r14, r1
    121c:	f1 04       	cpc	r15, r1
    121e:	79 f0       	breq	.+30     	; 0x123e <_Z16rf12_setWatchdogm+0x38>
    1220:	70 f0       	brcs	.+28     	; 0x123e <_Z16rf12_setWatchdogm+0x38>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    1222:	c0 e0       	ldi	r28, 0x00	; 0
	while (m > 255) {
		r  += 1;
    1224:	cf 5f       	subi	r28, 0xFF	; 255
		m >>= 1;
    1226:	f6 94       	lsr	r15
    1228:	e7 94       	ror	r14
    122a:	d7 94       	ror	r13
    122c:	c7 94       	ror	r12
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    122e:	8f ef       	ldi	r24, 0xFF	; 255
    1230:	c8 16       	cp	r12, r24
    1232:	d1 04       	cpc	r13, r1
    1234:	e1 04       	cpc	r14, r1
    1236:	f1 04       	cpc	r15, r1
    1238:	09 f0       	breq	.+2      	; 0x123c <_Z16rf12_setWatchdogm+0x36>
    123a:	a0 f7       	brcc	.-24     	; 0x1224 <_Z16rf12_setWatchdogm+0x1e>
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <_Z16rf12_setWatchdogm+0x3a>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    123e:	c0 e0       	ldi	r28, 0x00	; 0
		m >>= 1;
	}
	
	// Disable old wakeup-timer if enabled
//	if (bitRead(rfmstate,1)) {
	if ((rfmstate>>1)&0x01){
    1240:	80 91 c2 01 	lds	r24, 0x01C2
    1244:	90 91 c3 01 	lds	r25, 0x01C3
    1248:	81 ff       	sbrs	r24, 1
    124a:	0e c0       	rjmp	.+28     	; 0x1268 <_Z16rf12_setWatchdogm+0x62>
		//bitClear(rfmstate,1);
		rfmstate &= ~(1 << 1);
    124c:	80 91 c2 01 	lds	r24, 0x01C2
    1250:	90 91 c3 01 	lds	r25, 0x01C3
    1254:	8d 7f       	andi	r24, 0xFD	; 253
    1256:	90 93 c3 01 	sts	0x01C3, r25
    125a:	80 93 c2 01 	sts	0x01C2, r24
		rf12_xfer(rfmstate);
    125e:	80 91 c2 01 	lds	r24, 0x01C2
    1262:	90 91 c3 01 	lds	r25, 0x01C3
    1266:	83 dd       	rcall	.-1274   	; 0xd6e <_ZL9rf12_xferj>
	}
	
	// enable wakeup call if we have to
	if (m>0) {
    1268:	c1 14       	cp	r12, r1
    126a:	d1 04       	cpc	r13, r1
    126c:	e1 04       	cpc	r14, r1
    126e:	f1 04       	cpc	r15, r1
    1270:	b1 f0       	breq	.+44     	; 0x129e <_Z16rf12_setWatchdogm+0x98>
		// write time to wakeup-register
		rf12_xfer(RF_WAKEUP_TIMER | (r<<8) | m);
    1272:	3c 2f       	mov	r19, r28
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	d7 01       	movw	r26, r14
    1278:	c6 01       	movw	r24, r12
    127a:	90 6e       	ori	r25, 0xE0	; 224
    127c:	82 2b       	or	r24, r18
    127e:	93 2b       	or	r25, r19
    1280:	76 dd       	rcall	.-1300   	; 0xd6e <_ZL9rf12_xferj>
		// enable wakeup
		//bitSet(rfmstate,1);
		rfmstate |= (1 << 1);
    1282:	80 91 c2 01 	lds	r24, 0x01C2
    1286:	90 91 c3 01 	lds	r25, 0x01C3
    128a:	82 60       	ori	r24, 0x02	; 2
    128c:	90 93 c3 01 	sts	0x01C3, r25
    1290:	80 93 c2 01 	sts	0x01C2, r24
		rf12_xfer(rfmstate);
    1294:	80 91 c2 01 	lds	r24, 0x01C2
    1298:	90 91 c3 01 	lds	r25, 0x01C3
    129c:	68 dd       	rcall	.-1328   	; 0xd6e <_ZL9rf12_xferj>
	}
}
    129e:	cf 91       	pop	r28
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	df 90       	pop	r13
    12a6:	cf 90       	pop	r12
    12a8:	08 95       	ret

000012aa <__vector_1>:
	while (!bitRead(PINB, RFM_IRQ - 8))
	rf12_interrupt();
}
#else
*/
ISR(INT0_vect) {
    12aa:	1f 92       	push	r1
    12ac:	0f 92       	push	r0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	1f 93       	push	r17
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	4f 93       	push	r20
    12bc:	5f 93       	push	r21
    12be:	6f 93       	push	r22
    12c0:	7f 93       	push	r23
    12c2:	8f 93       	push	r24
    12c4:	9f 93       	push	r25
    12c6:	af 93       	push	r26
    12c8:	bf 93       	push	r27
    12ca:	cf 93       	push	r28
    12cc:	df 93       	push	r29
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
/// Requests RFM12 state from RF module and reads back a waiting data byte if there is
/// any.
/// One of two commands accessing SPI, so interrupts disabled in here
/// @param *data Pointer to  byte where to write the received data to (if any)
static uint16_t rf12_xferState (uint8_t *data) {
	blockInterrupts();
    12d2:	43 dd       	rcall	.-1402   	; 0xd5a <_ZL15blockInterruptsv>

	// writing can take place at full speed, even 8 MHz works
	//bitClear(SS_PORT, cs_pin);
	PORT_RFM_CS &= ~(1<<BIT_RFM_CS); //clear CS
    12d4:	2a 98       	cbi	0x05, 2	; 5
	uint16_t res = rf12_byte(0x00) << 8;
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	44 dd       	rcall	.-1400   	; 0xd62 <_ZL9rf12_byteh>
    12da:	d8 2f       	mov	r29, r24
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	c8 2f       	mov	r28, r24
	res |= rf12_byte(0x00);
    12e0:	40 dd       	rcall	.-1408   	; 0xd62 <_ZL9rf12_byteh>
    12e2:	c8 2b       	or	r28, r24
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
    12e4:	dd 23       	and	r29, r29
    12e6:	2c f4       	brge	.+10     	; 0x12f2 <__vector_1+0x48>
    12e8:	80 91 c4 01 	lds	r24, 0x01C4
    12ec:	87 30       	cpi	r24, 0x07	; 7
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <__vector_1+0x48>
    12f0:	0f c1       	rjmp	.+542    	; 0x1510 <__vector_1+0x266>
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
		#endif
	}
	
	//bitSet(SS_PORT, cs_pin);
	PORT_RFM_CS |= (1 << BIT_RFM_CS); //  bitSet(SS_PORT, cs_pin);
    12f2:	2a 9a       	sbi	0x05, 2	; 5

	allowInterrupts();
    12f4:	34 dd       	rcall	.-1432   	; 0xd5e <_ZL15allowInterruptsv>
/// @details
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uint8_t in;
	state = rf12_xferState(&in);
    12f6:	d0 93 c1 01 	sts	0x01C1, r29
    12fa:	c0 93 c0 01 	sts	0x01C0, r28

	// data received or byte needed for sending
	if (state & RF_FIFO_BIT) {
    12fe:	20 91 c0 01 	lds	r18, 0x01C0
    1302:	30 91 c1 01 	lds	r19, 0x01C1
    1306:	33 23       	and	r19, r19
    1308:	0c f0       	brlt	.+2      	; 0x130c <__vector_1+0x62>
    130a:	e1 c0       	rjmp	.+450    	; 0x14ce <__vector_1+0x224>
		
		if (rxstate == TXRECV) {  // we are receiving
    130c:	80 91 c4 01 	lds	r24, 0x01C4
    1310:	87 30       	cpi	r24, 0x07	; 7
    1312:	09 f0       	breq	.+2      	; 0x1316 <__vector_1+0x6c>
    1314:	78 c0       	rjmp	.+240    	; 0x1406 <__vector_1+0x15c>

			if (rxfill == 0 && group != 0)
    1316:	80 91 c5 01 	lds	r24, 0x01C5
    131a:	81 11       	cpse	r24, r1
    131c:	04 c0       	rjmp	.+8      	; 0x1326 <__vector_1+0x7c>
    131e:	80 91 c6 01 	lds	r24, 0x01C6
    1322:	81 11       	cpse	r24, r1
    1324:	ff c0       	rjmp	.+510    	; 0x1524 <__vector_1+0x27a>
			rf12_buf[rxfill++] = group;

			rf12_buf[rxfill++] = in;
    1326:	80 91 c5 01 	lds	r24, 0x01C5
    132a:	e8 2f       	mov	r30, r24
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	ec 58       	subi	r30, 0x8C	; 140
    1330:	fe 4f       	sbci	r31, 0xFE	; 254
    1332:	10 83       	st	Z, r17
    1334:	8f 5f       	subi	r24, 0xFF	; 255
    1336:	80 93 c5 01 	sts	0x01C5, r24
			rf12_crc = _crc16_update(rf12_crc, in);
    133a:	20 91 bb 01 	lds	r18, 0x01BB
    133e:	30 91 bc 01 	lds	r19, 0x01BC
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    1342:	21 27       	eor	r18, r17
    1344:	12 2f       	mov	r17, r18
    1346:	12 95       	swap	r17
    1348:	12 27       	eor	r17, r18
    134a:	01 2e       	mov	r0, r17
    134c:	16 95       	lsr	r17
    134e:	16 95       	lsr	r17
    1350:	10 25       	eor	r17, r0
    1352:	01 2e       	mov	r0, r17
    1354:	16 95       	lsr	r17
    1356:	10 25       	eor	r17, r0
    1358:	17 70       	andi	r17, 0x07	; 7
    135a:	02 2e       	mov	r0, r18
    135c:	23 2f       	mov	r18, r19
    135e:	16 95       	lsr	r17
    1360:	07 94       	ror	r0
    1362:	17 95       	ror	r17
    1364:	30 2d       	mov	r19, r0
    1366:	21 27       	eor	r18, r17
    1368:	06 94       	lsr	r0
    136a:	17 95       	ror	r17
    136c:	30 25       	eor	r19, r0
    136e:	21 27       	eor	r18, r17
    1370:	30 93 bc 01 	sts	0x01BC, r19
    1374:	20 93 bb 01 	sts	0x01BB, r18

			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
    1378:	e0 91 be 01 	lds	r30, 0x01BE
    137c:	e3 30       	cpi	r30, 0x03	; 3
    137e:	18 f5       	brcc	.+70     	; 0x13c6 <__vector_1+0x11c>
    1380:	80 91 c5 01 	lds	r24, 0x01C5
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 97       	sbiw	r24, 0x02	; 2
    1388:	60 91 bd 01 	lds	r22, 0x01BD
    138c:	70 e0       	ldi	r23, 0x00	; 0
    138e:	04 d2       	rcall	.+1032   	; 0x1798 <__divmodhi4>
    1390:	89 2b       	or	r24, r25
    1392:	09 f4       	brne	.+2      	; 0x1396 <__vector_1+0xec>
    1394:	d2 c0       	rjmp	.+420    	; 0x153a <__vector_1+0x290>
    1396:	17 c0       	rjmp	.+46     	; 0x13c6 <__vector_1+0x11c>
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    1398:	f0 e0       	ldi	r31, 0x00	; 0
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
    139a:	e0 5b       	subi	r30, 0xB0	; 176
    139c:	fe 4f       	sbci	r31, 0xFE	; 254
				: (drssi_dec_tree[drssi] >> 4);
    139e:	80 81       	ld	r24, Z
    13a0:	8f 70       	andi	r24, 0x0F	; 15
    13a2:	06 c0       	rjmp	.+12     	; 0x13b0 <__vector_1+0x106>
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	e0 5b       	subi	r30, 0xB0	; 176
    13a8:	fe 4f       	sbci	r31, 0xFE	; 254
    13aa:	80 81       	ld	r24, Z
    13ac:	82 95       	swap	r24
    13ae:	8f 70       	andi	r24, 0x0F	; 15
    13b0:	80 93 be 01 	sts	0x01BE, r24
				if ( drssi < 3 ) {     // not yet final destination, set new threshold
    13b4:	83 30       	cpi	r24, 0x03	; 3
    13b6:	38 f4       	brcc	.+14     	; 0x13c6 <__vector_1+0x11c>
					rf12_xfer(RF_RECV_CONTROL | drssi*2+1);
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	01 96       	adiw	r24, 0x01	; 1
    13c0:	80 6a       	ori	r24, 0xA0	; 160
    13c2:	94 69       	ori	r25, 0x94	; 148
    13c4:	d4 dc       	rcall	.-1624   	; 0xd6e <_ZL9rf12_xferj>
				}
			}

			// check if we got all the bytes (or maximum packet length was reached)
			if (fixedLength) {
    13c6:	80 91 c7 01 	lds	r24, 0x01C7
    13ca:	88 23       	and	r24, r24
    13cc:	59 f0       	breq	.+22     	; 0x13e4 <__vector_1+0x13a>
				if (rxfill >= fixedLength || rxfill >= RF_MAX) {
    13ce:	90 91 c5 01 	lds	r25, 0x01C5
    13d2:	98 17       	cp	r25, r24
    13d4:	28 f4       	brcc	.+10     	; 0x13e0 <__vector_1+0x136>
    13d6:	80 91 c5 01 	lds	r24, 0x01C5
    13da:	87 34       	cpi	r24, 0x47	; 71
    13dc:	08 f4       	brcc	.+2      	; 0x13e0 <__vector_1+0x136>
    13de:	77 c0       	rjmp	.+238    	; 0x14ce <__vector_1+0x224>
					rf12_idle();
    13e0:	dd dc       	rcall	.-1606   	; 0xd9c <_ZL9rf12_idlev>
    13e2:	75 c0       	rjmp	.+234    	; 0x14ce <__vector_1+0x224>
				}
				} else if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX) {
    13e4:	20 91 c5 01 	lds	r18, 0x01C5
    13e8:	80 91 76 01 	lds	r24, 0x0176
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	05 96       	adiw	r24, 0x05	; 5
    13f2:	28 17       	cp	r18, r24
    13f4:	39 07       	cpc	r19, r25
    13f6:	2c f4       	brge	.+10     	; 0x1402 <__vector_1+0x158>
    13f8:	80 91 c5 01 	lds	r24, 0x01C5
    13fc:	87 34       	cpi	r24, 0x47	; 71
    13fe:	08 f4       	brcc	.+2      	; 0x1402 <__vector_1+0x158>
    1400:	66 c0       	rjmp	.+204    	; 0x14ce <__vector_1+0x224>
				rf12_idle();
    1402:	cc dc       	rcall	.-1640   	; 0xd9c <_ZL9rf12_idlev>
    1404:	64 c0       	rjmp	.+200    	; 0x14ce <__vector_1+0x224>
			}
			} else {                  // we are sending
			uint8_t out;

			if (rxstate < 0) {
    1406:	80 91 c4 01 	lds	r24, 0x01C4
    140a:	88 23       	and	r24, r24
    140c:	0c f0       	brlt	.+2      	; 0x1410 <__vector_1+0x166>
    140e:	2f c0       	rjmp	.+94     	; 0x146e <__vector_1+0x1c4>
				uint8_t pos = 3 + rf12_len + rxstate++;
    1410:	e0 91 76 01 	lds	r30, 0x0176
    1414:	80 91 c4 01 	lds	r24, 0x01C4
    1418:	98 2f       	mov	r25, r24
    141a:	9f 5f       	subi	r25, 0xFF	; 255
    141c:	90 93 c4 01 	sts	0x01C4, r25
    1420:	ed 5f       	subi	r30, 0xFD	; 253
    1422:	8e 0f       	add	r24, r30
				out = rf12_buf[pos];
    1424:	e8 2f       	mov	r30, r24
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	ec 58       	subi	r30, 0x8C	; 140
    142a:	fe 4f       	sbci	r31, 0xFE	; 254
    142c:	80 81       	ld	r24, Z
				rf12_crc = _crc16_update(rf12_crc, out);
    142e:	20 91 bb 01 	lds	r18, 0x01BB
    1432:	30 91 bc 01 	lds	r19, 0x01BC
    1436:	28 27       	eor	r18, r24
    1438:	92 2f       	mov	r25, r18
    143a:	92 95       	swap	r25
    143c:	92 27       	eor	r25, r18
    143e:	09 2e       	mov	r0, r25
    1440:	96 95       	lsr	r25
    1442:	96 95       	lsr	r25
    1444:	90 25       	eor	r25, r0
    1446:	09 2e       	mov	r0, r25
    1448:	96 95       	lsr	r25
    144a:	90 25       	eor	r25, r0
    144c:	97 70       	andi	r25, 0x07	; 7
    144e:	02 2e       	mov	r0, r18
    1450:	23 2f       	mov	r18, r19
    1452:	96 95       	lsr	r25
    1454:	07 94       	ror	r0
    1456:	97 95       	ror	r25
    1458:	30 2d       	mov	r19, r0
    145a:	29 27       	eor	r18, r25
    145c:	06 94       	lsr	r0
    145e:	97 95       	ror	r25
    1460:	30 25       	eor	r19, r0
    1462:	29 27       	eor	r18, r25
    1464:	30 93 bc 01 	sts	0x01BC, r19
    1468:	20 93 bb 01 	sts	0x01BB, r18
    146c:	2d c0       	rjmp	.+90     	; 0x14c8 <__vector_1+0x21e>
			} else
			switch (rxstate++) {
    146e:	80 91 c4 01 	lds	r24, 0x01C4
    1472:	98 2f       	mov	r25, r24
    1474:	9f 5f       	subi	r25, 0xFF	; 255
    1476:	90 93 c4 01 	sts	0x01C4, r25
    147a:	83 30       	cpi	r24, 0x03	; 3
    147c:	09 f1       	breq	.+66     	; 0x14c0 <__vector_1+0x216>
    147e:	2c f4       	brge	.+10     	; 0x148a <__vector_1+0x1e0>
    1480:	88 23       	and	r24, r24
    1482:	99 f0       	breq	.+38     	; 0x14aa <__vector_1+0x200>
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	f9 f4       	brne	.+62     	; 0x14c6 <__vector_1+0x21c>
    1488:	15 c0       	rjmp	.+42     	; 0x14b4 <__vector_1+0x20a>
    148a:	8b 30       	cpi	r24, 0x0B	; 11
    148c:	19 f0       	breq	.+6      	; 0x1494 <__vector_1+0x1ea>
    148e:	8c 30       	cpi	r24, 0x0C	; 12
    1490:	d1 f4       	brne	.+52     	; 0x14c6 <__vector_1+0x21c>
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <__vector_1+0x1ee>
				case TXSYN1: out = 0x2D; break;
    1494:	8d e2       	ldi	r24, 0x2D	; 45
    1496:	18 c0       	rjmp	.+48     	; 0x14c8 <__vector_1+0x21e>
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
    1498:	80 91 c6 01 	lds	r24, 0x01C6
    149c:	20 91 76 01 	lds	r18, 0x0176
    14a0:	9e ef       	ldi	r25, 0xFE	; 254
    14a2:	92 1b       	sub	r25, r18
    14a4:	90 93 c4 01 	sts	0x01C4, r25
    14a8:	0f c0       	rjmp	.+30     	; 0x14c8 <__vector_1+0x21e>
				case TXCRC1: out = rf12_crc; break;
    14aa:	80 91 bb 01 	lds	r24, 0x01BB
    14ae:	90 91 bc 01 	lds	r25, 0x01BC
    14b2:	0a c0       	rjmp	.+20     	; 0x14c8 <__vector_1+0x21e>
				case TXCRC2: out = rf12_crc >> 8; break;
    14b4:	80 91 bb 01 	lds	r24, 0x01BB
    14b8:	90 91 bc 01 	lds	r25, 0x01BC
    14bc:	89 2f       	mov	r24, r25
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <__vector_1+0x21e>
				case TXDONE: rf12_idle(); // fall through
    14c0:	6d dc       	rcall	.-1830   	; 0xd9c <_ZL9rf12_idlev>
				default:     out = 0xAA;
    14c2:	8a ea       	ldi	r24, 0xAA	; 170
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <__vector_1+0x21e>
    14c6:	8a ea       	ldi	r24, 0xAA	; 170
			}

			rf12_xfer(RF_TXREG_WRITE | out);
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	98 6b       	ori	r25, 0xB8	; 184
    14cc:	50 dc       	rcall	.-1888   	; 0xd6e <_ZL9rf12_xferj>
		}
	}
	
	// power-on reset
	if (state & RF_POR_BIT) {
    14ce:	80 91 c0 01 	lds	r24, 0x01C0
    14d2:	90 91 c1 01 	lds	r25, 0x01C1
    14d6:	96 ff       	sbrs	r25, 6
    14d8:	03 c0       	rjmp	.+6      	; 0x14e0 <__vector_1+0x236>
		rxstate = POR_RECEIVED;
    14da:	86 e0       	ldi	r24, 0x06	; 6
    14dc:	80 93 c4 01 	sts	0x01C4, r24
	}

	// got wakeup call
	if (state & RF_WDG_BIT) {
    14e0:	80 91 c0 01 	lds	r24, 0x01C0
    14e4:	90 91 c1 01 	lds	r25, 0x01C1
    14e8:	94 ff       	sbrs	r25, 4
    14ea:	07 c0       	rjmp	.+14     	; 0x14fa <__vector_1+0x250>
		rf12_setWatchdog(0);
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	cb 01       	movw	r24, r22
    14f2:	89 de       	rcall	.-750    	; 0x1206 <_Z16rf12_setWatchdogm>
		rf12_gotwakeup = 1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	80 93 bf 01 	sts	0x01BF, r24
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
    14fa:	80 91 c0 01 	lds	r24, 0x01C0
    14fe:	90 91 c1 01 	lds	r25, 0x01C1
    1502:	95 ff       	sbrs	r25, 5
    1504:	21 c0       	rjmp	.+66     	; 0x1548 <__vector_1+0x29e>
		rf12_idle();
    1506:	4a dc       	rcall	.-1900   	; 0xd9c <_ZL9rf12_idlev>
		rxstate = TXIDLE;
    1508:	84 e0       	ldi	r24, 0x04	; 4
    150a:	80 93 c4 01 	sts	0x01C4, r24
    150e:	1c c0       	rjmp	.+56     	; 0x1548 <__vector_1+0x29e>
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
		// slow down to under 2.5 MHz
		#if F_CPU > 10000000
		//bitSet(SPCR, SPR0);
		SPCR |= (1 << SPR0); //  bitSet(SPCR, SPR0);
    1510:	8c b5       	in	r24, 0x2c	; 44
    1512:	81 60       	ori	r24, 0x01	; 1
    1514:	8c bd       	out	0x2c, r24	; 44
		#endif
		*data = rf12_byte(0x00);
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	24 dc       	rcall	.-1976   	; 0xd62 <_ZL9rf12_byteh>
    151a:	18 2f       	mov	r17, r24
		#if F_CPU > 10000000
		//bitClear(SPCR, SPR0);
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
    151c:	8c b5       	in	r24, 0x2c	; 44
    151e:	8e 7f       	andi	r24, 0xFE	; 254
    1520:	8c bd       	out	0x2c, r24	; 44
    1522:	e7 ce       	rjmp	.-562    	; 0x12f2 <__vector_1+0x48>
	if (state & RF_FIFO_BIT) {
		
		if (rxstate == TXRECV) {  // we are receiving

			if (rxfill == 0 && group != 0)
			rf12_buf[rxfill++] = group;
    1524:	90 91 c5 01 	lds	r25, 0x01C5
    1528:	e9 2f       	mov	r30, r25
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	ec 58       	subi	r30, 0x8C	; 140
    152e:	fe 4f       	sbci	r31, 0xFE	; 254
    1530:	80 83       	st	Z, r24
    1532:	9f 5f       	subi	r25, 0xFF	; 255
    1534:	90 93 c5 01 	sts	0x01C5, r25
    1538:	f6 ce       	rjmp	.-532    	; 0x1326 <__vector_1+0x7c>
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    153a:	80 91 c0 01 	lds	r24, 0x01C0
    153e:	90 91 c1 01 	lds	r25, 0x01C1
    1542:	90 fd       	sbrc	r25, 0
    1544:	29 cf       	rjmp	.-430    	; 0x1398 <__vector_1+0xee>
    1546:	2e cf       	rjmp	.-420    	; 0x13a4 <__vector_1+0xfa>
#else
*/
ISR(INT0_vect) {
	//uart0_puts("I");
	rf12_interrupt();
}
    1548:	ff 91       	pop	r31
    154a:	ef 91       	pop	r30
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	bf 91       	pop	r27
    1552:	af 91       	pop	r26
    1554:	9f 91       	pop	r25
    1556:	8f 91       	pop	r24
    1558:	7f 91       	pop	r23
    155a:	6f 91       	pop	r22
    155c:	5f 91       	pop	r21
    155e:	4f 91       	pop	r20
    1560:	3f 91       	pop	r19
    1562:	2f 91       	pop	r18
    1564:	1f 91       	pop	r17
    1566:	0f 90       	pop	r0
    1568:	0f be       	out	0x3f, r0	; 63
    156a:	0f 90       	pop	r0
    156c:	1f 90       	pop	r1
    156e:	18 95       	reti

00001570 <tone_init>:
#include <avr/io.h>

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume counsigned long _tAC_time;ntrol.

void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
    1570:	21 9a       	sbi	0x04, 1	; 4
    1572:	08 95       	ret

00001574 <noTone>:

}


	void noTone() {
		uart0_puts("STOP");
    1574:	8f e3       	ldi	r24, 0x3F	; 63
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	01 d1       	rcall	.+514    	; 0x177c <uart0_puts>
	//	TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
		 TCCR1B  &= ~(1<<0) | ~(1<<1) | ~(1<<2) ;        // No clock source (Timer/Counter stopped).
    157a:	e1 e8       	ldi	r30, 0x81	; 129
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	80 83       	st	Z, r24
		 TCCR1A  = 0x00;       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
    1582:	10 92 80 00 	sts	0x0080, r1
		PORTB &= ~(1 << 1); // Set pin PB1 to LOW.
    1586:	29 98       	cbi	0x05, 1	; 5
    1588:	08 95       	ret

0000158a <tone>:
void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
	
}

void tone(unsigned long frequency, uint8_t volume) {
    158a:	cf 92       	push	r12
    158c:	df 92       	push	r13
    158e:	ef 92       	push	r14
    1590:	ff 92       	push	r15
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	6b 01       	movw	r12, r22
    1598:	7c 01       	movw	r14, r24
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
    159a:	61 15       	cp	r22, r1
    159c:	71 05       	cpc	r23, r1
    159e:	81 05       	cpc	r24, r1
    15a0:	91 05       	cpc	r25, r1
    15a2:	11 f0       	breq	.+4      	; 0x15a8 <tone+0x1e>
    15a4:	41 11       	cpse	r20, r1
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <tone+0x22>
    15a8:	e5 df       	rcall	.-54     	; 0x1574 <noTone>
    15aa:	4d c0       	rjmp	.+154    	; 0x1646 <tone+0xbc>
    15ac:	d4 2f       	mov	r29, r20
    15ae:	4b 30       	cpi	r20, 0x0B	; 11
    15b0:	08 f0       	brcs	.+2      	; 0x15b4 <tone+0x2a>
    15b2:	da e0       	ldi	r29, 0x0A	; 10
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	72 e1       	ldi	r23, 0x12	; 18
    15b8:	8a e7       	ldi	r24, 0x7A	; 122
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	a7 01       	movw	r20, r14
    15be:	96 01       	movw	r18, r12
    15c0:	fe d0       	rcall	.+508    	; 0x17be <__udivmodsi4>
    15c2:	cc 24       	eor	r12, r12
    15c4:	ca 94       	dec	r12
    15c6:	dc 2c       	mov	r13, r12
    15c8:	76 01       	movw	r14, r12
    15ca:	c2 0e       	add	r12, r18
    15cc:	d3 1e       	adc	r13, r19
    15ce:	e4 1e       	adc	r14, r20
    15d0:	f5 1e       	adc	r15, r21
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    15d2:	c1 14       	cp	r12, r1
    15d4:	d1 04       	cpc	r13, r1
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	e8 06       	cpc	r14, r24
    15da:	f1 04       	cpc	r15, r1
    15dc:	58 f0       	brcs	.+22     	; 0x15f4 <tone+0x6a>
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
    15de:	cd 2c       	mov	r12, r13
    15e0:	de 2c       	mov	r13, r14
    15e2:	ef 2c       	mov	r14, r15
    15e4:	ff 24       	eor	r15, r15
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	c8 1a       	sub	r12, r24
    15ea:	d1 08       	sbc	r13, r1
    15ec:	e1 08       	sbc	r14, r1
    15ee:	f1 08       	sbc	r15, r1
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    15f0:	c4 e0       	ldi	r28, 0x04	; 4
    15f2:	01 c0       	rjmp	.+2      	; 0x15f6 <tone+0x6c>
void tone(unsigned long frequency, uint8_t volume) {
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
    15f4:	c1 e0       	ldi	r28, 0x01	; 1
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
		}
	
		unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
    15f6:	ed 2f       	mov	r30, r29
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	ed 5f       	subi	r30, 0xFD	; 253
    15fc:	fe 4f       	sbci	r31, 0xFE	; 254
    15fe:	20 81       	ld	r18, Z
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	c7 01       	movw	r24, r14
    1608:	b6 01       	movw	r22, r12
    160a:	d9 d0       	rcall	.+434    	; 0x17be <__udivmodsi4>
		
		ICR1   = top;							// Set the top.
    160c:	d0 92 87 00 	sts	0x0087, r13
    1610:	c0 92 86 00 	sts	0x0086, r12
		if (TCNT1 > top) TCNT1 = top;			// Counter over the top, put within range.
    1614:	80 91 84 00 	lds	r24, 0x0084
    1618:	90 91 85 00 	lds	r25, 0x0085
    161c:	a0 e0       	ldi	r26, 0x00	; 0
    161e:	b0 e0       	ldi	r27, 0x00	; 0
    1620:	c8 16       	cp	r12, r24
    1622:	d9 06       	cpc	r13, r25
    1624:	ea 06       	cpc	r14, r26
    1626:	fb 06       	cpc	r15, r27
    1628:	20 f4       	brcc	.+8      	; 0x1632 <tone+0xa8>
    162a:	d0 92 85 00 	sts	0x0085, r13
    162e:	c0 92 84 00 	sts	0x0084, r12
			TCCR1B = _BV(WGM13)  | prescaler;   // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
    1632:	c0 61       	ori	r28, 0x10	; 16
    1634:	c0 93 81 00 	sts	0x0081, r28
			OCR1A  = duty;						// Set the duty cycle (volume).
    1638:	30 93 89 00 	sts	0x0089, r19
    163c:	20 93 88 00 	sts	0x0088, r18
			TCCR1A = _BV(COM1A1);				// Clear OC1A/OC1B on Compare Match (Set output to low level).
    1640:	80 e8       	ldi	r24, 0x80	; 128
    1642:	80 93 80 00 	sts	0x0080, r24

}
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	ff 90       	pop	r15
    164c:	ef 90       	pop	r14
    164e:	df 90       	pop	r13
    1650:	cf 90       	pop	r12
    1652:	08 95       	ret

00001654 <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    1654:	1f 92       	push	r1
    1656:	0f 92       	push	r0
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	0f 92       	push	r0
    165c:	11 24       	eor	r1, r1
    165e:	2f 93       	push	r18
    1660:	3f 93       	push	r19
    1662:	4f 93       	push	r20
    1664:	5f 93       	push	r21
    1666:	8f 93       	push	r24
    1668:	9f 93       	push	r25
    166a:	ef 93       	push	r30
    166c:	ff 93       	push	r31
    166e:	40 91 c0 00 	lds	r20, 0x00C0
    1672:	50 91 c6 00 	lds	r21, 0x00C6
    1676:	48 71       	andi	r20, 0x18	; 24
    1678:	80 91 cc 01 	lds	r24, 0x01CC
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	8f 77       	andi	r24, 0x7F	; 127
    1682:	99 27       	eor	r25, r25
    1684:	20 91 cb 01 	lds	r18, 0x01CB
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	28 17       	cp	r18, r24
    168c:	39 07       	cpc	r19, r25
    168e:	39 f0       	breq	.+14     	; 0x169e <__vector_18+0x4a>
    1690:	80 93 cc 01 	sts	0x01CC, r24
    1694:	fc 01       	movw	r30, r24
    1696:	e1 53       	subi	r30, 0x31	; 49
    1698:	fe 4f       	sbci	r31, 0xFE	; 254
    169a:	50 83       	st	Z, r21
    169c:	01 c0       	rjmp	.+2      	; 0x16a0 <__vector_18+0x4c>
    169e:	42 e0       	ldi	r20, 0x02	; 2
    16a0:	40 93 ca 01 	sts	0x01CA, r20
    16a4:	ff 91       	pop	r31
    16a6:	ef 91       	pop	r30
    16a8:	9f 91       	pop	r25
    16aa:	8f 91       	pop	r24
    16ac:	5f 91       	pop	r21
    16ae:	4f 91       	pop	r20
    16b0:	3f 91       	pop	r19
    16b2:	2f 91       	pop	r18
    16b4:	0f 90       	pop	r0
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	0f 90       	pop	r0
    16ba:	1f 90       	pop	r1
    16bc:	18 95       	reti

000016be <__vector_19>:
    16be:	1f 92       	push	r1
    16c0:	0f 92       	push	r0
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	0f 92       	push	r0
    16c6:	11 24       	eor	r1, r1
    16c8:	8f 93       	push	r24
    16ca:	9f 93       	push	r25
    16cc:	ef 93       	push	r30
    16ce:	ff 93       	push	r31
    16d0:	90 91 ce 01 	lds	r25, 0x01CE
    16d4:	80 91 cd 01 	lds	r24, 0x01CD
    16d8:	98 17       	cp	r25, r24
    16da:	79 f0       	breq	.+30     	; 0x16fa <__vector_19+0x3c>
    16dc:	80 91 cd 01 	lds	r24, 0x01CD
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	01 96       	adiw	r24, 0x01	; 1
    16e4:	8f 77       	andi	r24, 0x7F	; 127
    16e6:	99 27       	eor	r25, r25
    16e8:	80 93 cd 01 	sts	0x01CD, r24
    16ec:	fc 01       	movw	r30, r24
    16ee:	e1 5b       	subi	r30, 0xB1	; 177
    16f0:	fd 4f       	sbci	r31, 0xFD	; 253
    16f2:	80 81       	ld	r24, Z
    16f4:	80 93 c6 00 	sts	0x00C6, r24
    16f8:	05 c0       	rjmp	.+10     	; 0x1704 <__vector_19+0x46>
    16fa:	e1 ec       	ldi	r30, 0xC1	; 193
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8f 7d       	andi	r24, 0xDF	; 223
    1702:	80 83       	st	Z, r24
    1704:	ff 91       	pop	r31
    1706:	ef 91       	pop	r30
    1708:	9f 91       	pop	r25
    170a:	8f 91       	pop	r24
    170c:	0f 90       	pop	r0
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	0f 90       	pop	r0
    1712:	1f 90       	pop	r1
    1714:	18 95       	reti

00001716 <uart0_init>:
    1716:	10 92 ce 01 	sts	0x01CE, r1
    171a:	10 92 cd 01 	sts	0x01CD, r1
    171e:	10 92 cc 01 	sts	0x01CC, r1
    1722:	10 92 cb 01 	sts	0x01CB, r1
    1726:	99 23       	and	r25, r25
    1728:	24 f4       	brge	.+8      	; 0x1732 <uart0_init+0x1c>
    172a:	22 e0       	ldi	r18, 0x02	; 2
    172c:	20 93 c0 00 	sts	0x00C0, r18
    1730:	9f 77       	andi	r25, 0x7F	; 127
    1732:	90 93 c5 00 	sts	0x00C5, r25
    1736:	80 93 c4 00 	sts	0x00C4, r24
    173a:	88 e9       	ldi	r24, 0x98	; 152
    173c:	80 93 c1 00 	sts	0x00C1, r24
    1740:	86 e0       	ldi	r24, 0x06	; 6
    1742:	80 93 c2 00 	sts	0x00C2, r24
    1746:	08 95       	ret

00001748 <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    1748:	60 91 ce 01 	lds	r22, 0x01CE
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	6f 5f       	subi	r22, 0xFF	; 255
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	6f 77       	andi	r22, 0x7F	; 127
    1754:	77 27       	eor	r23, r23
    1756:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
    1758:	20 91 cd 01 	lds	r18, 0x01CD
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	24 17       	cp	r18, r20
    1760:	35 07       	cpc	r19, r21
    1762:	d1 f3       	breq	.-12     	; 0x1758 <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    1764:	fb 01       	movw	r30, r22
    1766:	e1 5b       	subi	r30, 0xB1	; 177
    1768:	fd 4f       	sbci	r31, 0xFD	; 253
    176a:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    176c:	60 93 ce 01 	sts	0x01CE, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
    1770:	e1 ec       	ldi	r30, 0xC1	; 193
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	80 62       	ori	r24, 0x20	; 32
    1778:	80 83       	st	Z, r24
    177a:	08 95       	ret

0000177c <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	ec 01       	movw	r28, r24
	while (*s) {
    1782:	88 81       	ld	r24, Y
    1784:	88 23       	and	r24, r24
    1786:	29 f0       	breq	.+10     	; 0x1792 <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
    1788:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
    178a:	de df       	rcall	.-68     	; 0x1748 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
    178c:	89 91       	ld	r24, Y+
    178e:	81 11       	cpse	r24, r1
    1790:	fc cf       	rjmp	.-8      	; 0x178a <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	08 95       	ret

00001798 <__divmodhi4>:
    1798:	97 fb       	bst	r25, 7
    179a:	07 2e       	mov	r0, r23
    179c:	16 f4       	brtc	.+4      	; 0x17a2 <__divmodhi4+0xa>
    179e:	00 94       	com	r0
    17a0:	06 d0       	rcall	.+12     	; 0x17ae <__divmodhi4_neg1>
    17a2:	77 fd       	sbrc	r23, 7
    17a4:	08 d0       	rcall	.+16     	; 0x17b6 <__divmodhi4_neg2>
    17a6:	2d d0       	rcall	.+90     	; 0x1802 <__udivmodhi4>
    17a8:	07 fc       	sbrc	r0, 7
    17aa:	05 d0       	rcall	.+10     	; 0x17b6 <__divmodhi4_neg2>
    17ac:	3e f4       	brtc	.+14     	; 0x17bc <__divmodhi4_exit>

000017ae <__divmodhi4_neg1>:
    17ae:	90 95       	com	r25
    17b0:	81 95       	neg	r24
    17b2:	9f 4f       	sbci	r25, 0xFF	; 255
    17b4:	08 95       	ret

000017b6 <__divmodhi4_neg2>:
    17b6:	70 95       	com	r23
    17b8:	61 95       	neg	r22
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255

000017bc <__divmodhi4_exit>:
    17bc:	08 95       	ret

000017be <__udivmodsi4>:
    17be:	a1 e2       	ldi	r26, 0x21	; 33
    17c0:	1a 2e       	mov	r1, r26
    17c2:	aa 1b       	sub	r26, r26
    17c4:	bb 1b       	sub	r27, r27
    17c6:	fd 01       	movw	r30, r26
    17c8:	0d c0       	rjmp	.+26     	; 0x17e4 <__udivmodsi4_ep>

000017ca <__udivmodsi4_loop>:
    17ca:	aa 1f       	adc	r26, r26
    17cc:	bb 1f       	adc	r27, r27
    17ce:	ee 1f       	adc	r30, r30
    17d0:	ff 1f       	adc	r31, r31
    17d2:	a2 17       	cp	r26, r18
    17d4:	b3 07       	cpc	r27, r19
    17d6:	e4 07       	cpc	r30, r20
    17d8:	f5 07       	cpc	r31, r21
    17da:	20 f0       	brcs	.+8      	; 0x17e4 <__udivmodsi4_ep>
    17dc:	a2 1b       	sub	r26, r18
    17de:	b3 0b       	sbc	r27, r19
    17e0:	e4 0b       	sbc	r30, r20
    17e2:	f5 0b       	sbc	r31, r21

000017e4 <__udivmodsi4_ep>:
    17e4:	66 1f       	adc	r22, r22
    17e6:	77 1f       	adc	r23, r23
    17e8:	88 1f       	adc	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	1a 94       	dec	r1
    17ee:	69 f7       	brne	.-38     	; 0x17ca <__udivmodsi4_loop>
    17f0:	60 95       	com	r22
    17f2:	70 95       	com	r23
    17f4:	80 95       	com	r24
    17f6:	90 95       	com	r25
    17f8:	9b 01       	movw	r18, r22
    17fa:	ac 01       	movw	r20, r24
    17fc:	bd 01       	movw	r22, r26
    17fe:	cf 01       	movw	r24, r30
    1800:	08 95       	ret

00001802 <__udivmodhi4>:
    1802:	aa 1b       	sub	r26, r26
    1804:	bb 1b       	sub	r27, r27
    1806:	51 e1       	ldi	r21, 0x11	; 17
    1808:	07 c0       	rjmp	.+14     	; 0x1818 <__udivmodhi4_ep>

0000180a <__udivmodhi4_loop>:
    180a:	aa 1f       	adc	r26, r26
    180c:	bb 1f       	adc	r27, r27
    180e:	a6 17       	cp	r26, r22
    1810:	b7 07       	cpc	r27, r23
    1812:	10 f0       	brcs	.+4      	; 0x1818 <__udivmodhi4_ep>
    1814:	a6 1b       	sub	r26, r22
    1816:	b7 0b       	sbc	r27, r23

00001818 <__udivmodhi4_ep>:
    1818:	88 1f       	adc	r24, r24
    181a:	99 1f       	adc	r25, r25
    181c:	5a 95       	dec	r21
    181e:	a9 f7       	brne	.-22     	; 0x180a <__udivmodhi4_loop>
    1820:	80 95       	com	r24
    1822:	90 95       	com	r25
    1824:	bc 01       	movw	r22, r24
    1826:	cd 01       	movw	r24, r26
    1828:	08 95       	ret

0000182a <memcpy>:
    182a:	fb 01       	movw	r30, r22
    182c:	dc 01       	movw	r26, r24
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <memcpy+0xa>
    1830:	01 90       	ld	r0, Z+
    1832:	0d 92       	st	X+, r0
    1834:	41 50       	subi	r20, 0x01	; 1
    1836:	50 40       	sbci	r21, 0x00	; 0
    1838:	d8 f7       	brcc	.-10     	; 0x1830 <memcpy+0x6>
    183a:	08 95       	ret

0000183c <_exit>:
    183c:	f8 94       	cli

0000183e <__stop_program>:
    183e:	ff cf       	rjmp	.-2      	; 0x183e <__stop_program>
