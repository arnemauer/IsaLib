
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000a72  00000b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015f  00800122  00800122  00000b28  2**0
                  ALLOC
  3 .stab         00000e4c  00000000  00000000  00000b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  00001974  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001ccf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  00001cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003079  00000000  00000000  00002036  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000102c  00000000  00000000  000050af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002246  00000000  00000000  000060db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000834  00000000  00000000  00008324  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000cdb  00000000  00000000  00008b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000215e  00000000  00000000  00009833  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000358  00000000  00000000  0000b991  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	42 c0       	rjmp	.+132    	; 0x86 <__ctors_end>
   2:	00 00       	nop
   4:	e6 c2       	rjmp	.+1484   	; 0x5d2 <__vector_1>
   6:	00 00       	nop
   8:	59 c0       	rjmp	.+178    	; 0xbc <__bad_interrupt>
   a:	00 00       	nop
   c:	57 c0       	rjmp	.+174    	; 0xbc <__bad_interrupt>
   e:	00 00       	nop
  10:	55 c0       	rjmp	.+170    	; 0xbc <__bad_interrupt>
  12:	00 00       	nop
  14:	53 c0       	rjmp	.+166    	; 0xbc <__bad_interrupt>
  16:	00 00       	nop
  18:	51 c0       	rjmp	.+162    	; 0xbc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	91 c0       	rjmp	.+290    	; 0x140 <__vector_7>
  1e:	00 00       	nop
  20:	4d c0       	rjmp	.+154    	; 0xbc <__bad_interrupt>
  22:	00 00       	nop
  24:	4b c0       	rjmp	.+150    	; 0xbc <__bad_interrupt>
  26:	00 00       	nop
  28:	49 c0       	rjmp	.+146    	; 0xbc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	47 c0       	rjmp	.+142    	; 0xbc <__bad_interrupt>
  2e:	00 00       	nop
  30:	45 c0       	rjmp	.+138    	; 0xbc <__bad_interrupt>
  32:	00 00       	nop
  34:	43 c0       	rjmp	.+134    	; 0xbc <__bad_interrupt>
  36:	00 00       	nop
  38:	41 c0       	rjmp	.+130    	; 0xbc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3f c0       	rjmp	.+126    	; 0xbc <__bad_interrupt>
  3e:	00 00       	nop
  40:	3d c0       	rjmp	.+122    	; 0xbc <__bad_interrupt>
  42:	00 00       	nop
  44:	3b c0       	rjmp	.+118    	; 0xbc <__bad_interrupt>
  46:	00 00       	nop
  48:	27 c4       	rjmp	.+2126   	; 0x898 <__vector_18>
  4a:	00 00       	nop
  4c:	5a c4       	rjmp	.+2228   	; 0x902 <__vector_19>
  4e:	00 00       	nop
  50:	35 c0       	rjmp	.+106    	; 0xbc <__bad_interrupt>
  52:	00 00       	nop
  54:	33 c0       	rjmp	.+102    	; 0xbc <__bad_interrupt>
  56:	00 00       	nop
  58:	31 c0       	rjmp	.+98     	; 0xbc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2f c0       	rjmp	.+94     	; 0xbc <__bad_interrupt>
  5e:	00 00       	nop
  60:	2d c0       	rjmp	.+90     	; 0xbc <__bad_interrupt>
  62:	00 00       	nop
  64:	2b c0       	rjmp	.+86     	; 0xbc <__bad_interrupt>
	...

00000068 <_ZZ4mainE13flash_pattern>:
  68:	ff ff ff ff ff 00 ff ff ff ff ff 00 ff ff ff ff     ................
  78:	ff 00 ff ff ff ff ff 00 ff ff ff ff ff 00           ..............

00000086 <__ctors_end>:
  86:	11 24       	eor	r1, r1
  88:	1f be       	out	0x3f, r1	; 63
  8a:	cf ef       	ldi	r28, 0xFF	; 255
  8c:	d8 e0       	ldi	r29, 0x08	; 8
  8e:	de bf       	out	0x3e, r29	; 62
  90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	e2 e7       	ldi	r30, 0x72	; 114
  9a:	fa e0       	ldi	r31, 0x0A	; 10
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a2 32       	cpi	r26, 0x22	; 34
  a4:	b1 07       	cpc	r27, r17
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
  a8:	22 e0       	ldi	r18, 0x02	; 2
  aa:	a2 e2       	ldi	r26, 0x22	; 34
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a1 38       	cpi	r26, 0x81	; 129
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	68 d0       	rcall	.+208    	; 0x18a <main>
  ba:	d9 c4       	rjmp	.+2482   	; 0xa6e <_exit>

000000bc <__bad_interrupt>:
  bc:	a1 cf       	rjmp	.-190    	; 0x0 <__vectors>

000000be <I2C_init>:
  be:	88 e4       	ldi	r24, 0x48	; 72
  c0:	80 93 b8 00 	sts	0x00B8, r24
  c4:	08 95       	ret

000000c6 <I2C_start>:
  c6:	ec eb       	ldi	r30, 0xBC	; 188
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	10 82       	st	Z, r1
  cc:	94 ea       	ldi	r25, 0xA4	; 164
  ce:	90 83       	st	Z, r25
  d0:	90 81       	ld	r25, Z
  d2:	99 23       	and	r25, r25
  d4:	ec f7       	brge	.-6      	; 0xd0 <I2C_start+0xa>
  d6:	90 91 b9 00 	lds	r25, 0x00B9
  da:	98 7f       	andi	r25, 0xF8	; 248
  dc:	98 30       	cpi	r25, 0x08	; 8
  de:	a1 f4       	brne	.+40     	; 0x108 <I2C_start+0x42>
  e0:	80 93 bb 00 	sts	0x00BB, r24
  e4:	84 e8       	ldi	r24, 0x84	; 132
  e6:	80 93 bc 00 	sts	0x00BC, r24
  ea:	ec eb       	ldi	r30, 0xBC	; 188
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	ec f7       	brge	.-6      	; 0xee <I2C_start+0x28>
  f4:	90 91 b9 00 	lds	r25, 0x00B9
  f8:	98 7f       	andi	r25, 0xF8	; 248
  fa:	98 31       	cpi	r25, 0x18	; 24
  fc:	39 f0       	breq	.+14     	; 0x10c <I2C_start+0x46>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	90 34       	cpi	r25, 0x40	; 64
 102:	29 f4       	brne	.+10     	; 0x10e <I2C_start+0x48>
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	08 95       	ret
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	08 95       	ret
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 95       	ret

00000110 <I2C_write>:
 110:	80 93 bb 00 	sts	0x00BB, r24
 114:	84 e8       	ldi	r24, 0x84	; 132
 116:	80 93 bc 00 	sts	0x00BC, r24
 11a:	ec eb       	ldi	r30, 0xBC	; 188
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	88 23       	and	r24, r24
 122:	ec f7       	brge	.-6      	; 0x11e <I2C_write+0xe>
 124:	90 91 b9 00 	lds	r25, 0x00B9
 128:	98 7f       	andi	r25, 0xF8	; 248
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	98 32       	cpi	r25, 0x28	; 40
 12e:	09 f4       	brne	.+2      	; 0x132 <I2C_write+0x22>
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	08 95       	ret

00000134 <I2C_stop>:
 134:	84 e9       	ldi	r24, 0x94	; 148
 136:	80 93 bc 00 	sts	0x00BC, r24
 13a:	08 95       	ret

0000013c <log_s>:
 13c:	41 c4       	rjmp	.+2178   	; 0x9c0 <uart0_puts>
 13e:	08 95       	ret

00000140 <__vector_7>:
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	8f 93       	push	r24
 14c:	9f 93       	push	r25
 14e:	af 93       	push	r26
 150:	bf 93       	push	r27
 152:	80 91 22 01 	lds	r24, 0x0122
 156:	90 91 23 01 	lds	r25, 0x0123
 15a:	a0 91 24 01 	lds	r26, 0x0124
 15e:	b0 91 25 01 	lds	r27, 0x0125
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	a1 1d       	adc	r26, r1
 166:	b1 1d       	adc	r27, r1
 168:	80 93 22 01 	sts	0x0122, r24
 16c:	90 93 23 01 	sts	0x0123, r25
 170:	a0 93 24 01 	sts	0x0124, r26
 174:	b0 93 25 01 	sts	0x0125, r27
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <main>:
 18a:	ea e7       	ldi	r30, 0x7A	; 122
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	8f 77       	andi	r24, 0x7F	; 127
 192:	80 83       	st	Z, r24
 194:	78 94       	sei
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	8b e7       	ldi	r24, 0x7B	; 123
 19a:	92 e9       	ldi	r25, 0x92	; 146
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x12>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x1c>
 1a6:	00 00       	nop
 1a8:	80 e1       	ldi	r24, 0x10	; 16
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	d6 d3       	rcall	.+1964   	; 0x95a <uart0_init>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	06 d4       	rcall	.+2060   	; 0x9c0 <uart0_puts>
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	83 ed       	ldi	r24, 0xD3	; 211
 1b8:	90 e3       	ldi	r25, 0x30	; 48
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x30>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x3a>
 1c4:	00 00       	nop
 1c6:	7b df       	rcall	.-266    	; 0xbe <I2C_init>
 1c8:	4d d0       	rcall	.+154    	; 0x264 <pca9635_init>
 1ca:	84 e0       	ldi	r24, 0x04	; 4
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	b6 df       	rcall	.-148    	; 0x13c <log_s>
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	83 ed       	ldi	r24, 0xD3	; 211
 1d4:	90 e3       	ldi	r25, 0x30	; 48
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <main+0x4c>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0x56>
 1e0:	00 00       	nop
 1e2:	4e e0       	ldi	r20, 0x0E	; 14
 1e4:	62 e0       	ldi	r22, 0x02	; 2
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	6f d1       	rcall	.+734    	; 0x4c8 <_Z15rf12_initializehhh>
 1ea:	8b e0       	ldi	r24, 0x0B	; 11
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	a6 df       	rcall	.-180    	; 0x13c <log_s>
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	83 ed       	ldi	r24, 0xD3	; 211
 1f4:	90 e3       	ldi	r25, 0x30	; 48
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <main+0x6c>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <main+0x76>
 200:	00 00       	nop
 202:	00 e0       	ldi	r16, 0x00	; 0
 204:	10 e0       	ldi	r17, 0x00	; 0
 206:	c1 2c       	mov	r12, r1
 208:	d1 2c       	mov	r13, r1
 20a:	19 c0       	rjmp	.+50     	; 0x23e <main+0xb4>
 20c:	f7 01       	movw	r30, r14
 20e:	ec 0f       	add	r30, r28
 210:	fd 1f       	adc	r31, r29
 212:	e8 59       	subi	r30, 0x98	; 152
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	84 91       	lpm	r24, Z
 218:	b9 d3       	rcall	.+1906   	; 0x98c <uart0_putc>
 21a:	8c e1       	ldi	r24, 0x1C	; 28
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	d0 d3       	rcall	.+1952   	; 0x9c0 <uart0_puts>
 220:	8f e3       	ldi	r24, 0x3F	; 63
 222:	9c e9       	ldi	r25, 0x9C	; 156
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <main+0x9a>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0xa0>
 22a:	00 00       	nop
 22c:	21 96       	adiw	r28, 0x01	; 1
 22e:	c4 30       	cpi	r28, 0x04	; 4
 230:	d1 05       	cpc	r29, r1
 232:	61 f7       	brne	.-40     	; 0x20c <main+0x82>
 234:	0f 5f       	subi	r16, 0xFF	; 255
 236:	1f 4f       	sbci	r17, 0xFF	; 255
 238:	05 30       	cpi	r16, 0x05	; 5
 23a:	11 05       	cpc	r17, r1
 23c:	49 f0       	breq	.+18     	; 0x250 <main+0xc6>
 23e:	e6 01       	movw	r28, r12
 240:	78 01       	movw	r14, r16
 242:	ee 0c       	add	r14, r14
 244:	ff 1c       	adc	r15, r15
 246:	e0 0e       	add	r14, r16
 248:	f1 1e       	adc	r15, r17
 24a:	ee 0c       	add	r14, r14
 24c:	ff 1c       	adc	r15, r15
 24e:	de cf       	rjmp	.-68     	; 0x20c <main+0x82>
 250:	9f ef       	ldi	r25, 0xFF	; 255
 252:	21 ee       	ldi	r18, 0xE1	; 225
 254:	84 e0       	ldi	r24, 0x04	; 4
 256:	91 50       	subi	r25, 0x01	; 1
 258:	20 40       	sbci	r18, 0x00	; 0
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <main+0xcc>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <main+0xd6>
 260:	00 00       	nop
 262:	ff cf       	rjmp	.-2      	; 0x262 <main+0xd8>

00000264 <pca9635_init>:
 264:	80 e8       	ldi	r24, 0x80	; 128
 266:	2f df       	rcall	.-418    	; 0xc6 <I2C_start>
 268:	80 e8       	ldi	r24, 0x80	; 128
 26a:	52 df       	rcall	.-348    	; 0x110 <I2C_write>
 26c:	80 e8       	ldi	r24, 0x80	; 128
 26e:	50 df       	rcall	.-352    	; 0x110 <I2C_write>
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	4e df       	rcall	.-356    	; 0x110 <I2C_write>
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	4c df       	rcall	.-360    	; 0x110 <I2C_write>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	4a df       	rcall	.-364    	; 0x110 <I2C_write>
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	48 df       	rcall	.-368    	; 0x110 <I2C_write>
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	46 df       	rcall	.-372    	; 0x110 <I2C_write>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	44 df       	rcall	.-376    	; 0x110 <I2C_write>
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	42 df       	rcall	.-380    	; 0x110 <I2C_write>
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	40 df       	rcall	.-384    	; 0x110 <I2C_write>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	3e df       	rcall	.-388    	; 0x110 <I2C_write>
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	3c df       	rcall	.-392    	; 0x110 <I2C_write>
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	3a df       	rcall	.-396    	; 0x110 <I2C_write>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	38 df       	rcall	.-400    	; 0x110 <I2C_write>
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	36 df       	rcall	.-404    	; 0x110 <I2C_write>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	34 df       	rcall	.-408    	; 0x110 <I2C_write>
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	32 df       	rcall	.-412    	; 0x110 <I2C_write>
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	30 df       	rcall	.-416    	; 0x110 <I2C_write>
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	2e df       	rcall	.-420    	; 0x110 <I2C_write>
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	2c df       	rcall	.-424    	; 0x110 <I2C_write>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	2a df       	rcall	.-428    	; 0x110 <I2C_write>
 2bc:	8a ea       	ldi	r24, 0xAA	; 170
 2be:	28 df       	rcall	.-432    	; 0x110 <I2C_write>
 2c0:	8a ea       	ldi	r24, 0xAA	; 170
 2c2:	26 df       	rcall	.-436    	; 0x110 <I2C_write>
 2c4:	8a ea       	ldi	r24, 0xAA	; 170
 2c6:	24 df       	rcall	.-440    	; 0x110 <I2C_write>
 2c8:	8a ea       	ldi	r24, 0xAA	; 170
 2ca:	22 df       	rcall	.-444    	; 0x110 <I2C_write>
 2cc:	33 cf       	rjmp	.-410    	; 0x134 <I2C_stop>

000002ce <_ZL15blockInterruptsv>:
 2ce:	e8 98       	cbi	0x1d, 0	; 29
 2d0:	08 95       	ret

000002d2 <_ZL15allowInterruptsv>:
 2d2:	e8 9a       	sbi	0x1d, 0	; 29
 2d4:	08 95       	ret

000002d6 <_ZL9rf12_byteh>:
 2d6:	8e bd       	out	0x2e, r24	; 46
 2d8:	0d b4       	in	r0, 0x2d	; 45
 2da:	07 fe       	sbrs	r0, 7
 2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <_ZL9rf12_byteh+0x2>
 2de:	8e b5       	in	r24, 0x2e	; 46
 2e0:	08 95       	ret

000002e2 <_ZL9rf12_xferj>:
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	18 2f       	mov	r17, r24
 2ea:	c9 2f       	mov	r28, r25
 2ec:	f0 df       	rcall	.-32     	; 0x2ce <_ZL15blockInterruptsv>
 2ee:	2a 98       	cbi	0x05, 2	; 5
 2f0:	8c 2f       	mov	r24, r28
 2f2:	f1 df       	rcall	.-30     	; 0x2d6 <_ZL9rf12_byteh>
 2f4:	d8 2f       	mov	r29, r24
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	c8 2f       	mov	r28, r24
 2fa:	81 2f       	mov	r24, r17
 2fc:	ec df       	rcall	.-40     	; 0x2d6 <_ZL9rf12_byteh>
 2fe:	c8 2b       	or	r28, r24
 300:	2a 9a       	sbi	0x05, 2	; 5
 302:	e7 df       	rcall	.-50     	; 0x2d2 <_ZL15allowInterruptsv>
 304:	8c 2f       	mov	r24, r28
 306:	9d 2f       	mov	r25, r29
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	08 95       	ret

00000310 <_ZL9rf12_idlev>:
 310:	80 91 74 01 	lds	r24, 0x0174
 314:	90 91 75 01 	lds	r25, 0x0175
 318:	8f 70       	andi	r24, 0x0F	; 15
 31a:	90 93 75 01 	sts	0x0175, r25
 31e:	80 93 74 01 	sts	0x0174, r24
 322:	80 91 74 01 	lds	r24, 0x0174
 326:	90 91 75 01 	lds	r25, 0x0175
 32a:	88 60       	ori	r24, 0x08	; 8
 32c:	90 93 75 01 	sts	0x0175, r25
 330:	80 93 74 01 	sts	0x0174, r24
 334:	80 91 74 01 	lds	r24, 0x0174
 338:	90 91 75 01 	lds	r25, 0x0175
 33c:	d2 cf       	rjmp	.-92     	; 0x2e2 <_ZL9rf12_xferj>

0000033e <_Z12rf12_spiInitv>:
 33e:	84 b1       	in	r24, 0x04	; 4
 340:	8c 62       	ori	r24, 0x2C	; 44
 342:	84 b9       	out	0x04, r24	; 4
 344:	2a 9a       	sbi	0x05, 2	; 5
 346:	24 98       	cbi	0x04, 4	; 4
 348:	80 e5       	ldi	r24, 0x50	; 80
 34a:	8c bd       	out	0x2c, r24	; 44
 34c:	8d b5       	in	r24, 0x2d	; 45
 34e:	81 60       	ori	r24, 0x01	; 1
 350:	8d bd       	out	0x2d, r24	; 45
 352:	52 98       	cbi	0x0a, 2	; 10
 354:	5a 9a       	sbi	0x0b, 2	; 11
 356:	08 95       	ret

00000358 <_Z15rf12_setBitrateh>:
 358:	cf 92       	push	r12
 35a:	df 92       	push	r13
 35c:	ef 92       	push	r14
 35e:	ff 92       	push	r15
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	c8 2f       	mov	r28, r24
 368:	08 2f       	mov	r16, r24
 36a:	10 e0       	ldi	r17, 0x00	; 0
 36c:	c8 01       	movw	r24, r16
 36e:	96 6c       	ori	r25, 0xC6	; 198
 370:	b8 df       	rcall	.-144    	; 0x2e2 <_ZL9rf12_xferj>
 372:	cf 77       	andi	r28, 0x7F	; 127
 374:	2c 2f       	mov	r18, r28
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	2f 5f       	subi	r18, 0xFF	; 255
 37a:	3f 4f       	sbci	r19, 0xFF	; 255
 37c:	44 27       	eor	r20, r20
 37e:	37 fd       	sbrc	r19, 7
 380:	40 95       	com	r20
 382:	54 2f       	mov	r21, r20
 384:	6b ef       	ldi	r22, 0xFB	; 251
 386:	72 e4       	ldi	r23, 0x42	; 66
 388:	85 e0       	ldi	r24, 0x05	; 5
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	3a d3       	rcall	.+1652   	; 0xa02 <__udivmodsi4>
 38e:	69 01       	movw	r12, r18
 390:	7a 01       	movw	r14, r20
 392:	c8 01       	movw	r24, r16
 394:	88 0f       	add	r24, r24
 396:	89 2f       	mov	r24, r25
 398:	88 1f       	adc	r24, r24
 39a:	99 0b       	sbc	r25, r25
 39c:	8c 01       	movw	r16, r24
 39e:	00 0f       	add	r16, r16
 3a0:	11 1f       	adc	r17, r17
 3a2:	00 0f       	add	r16, r16
 3a4:	11 1f       	adc	r17, r17
 3a6:	00 0f       	add	r16, r16
 3a8:	11 1f       	adc	r17, r17
 3aa:	08 1b       	sub	r16, r24
 3ac:	19 0b       	sbc	r17, r25
 3ae:	0f 5f       	subi	r16, 0xFF	; 255
 3b0:	1f 4f       	sbci	r17, 0xFF	; 255
 3b2:	98 01       	movw	r18, r16
 3b4:	44 27       	eor	r20, r20
 3b6:	37 fd       	sbrc	r19, 7
	rf12_idle();
	else {
		rfmstate &= ~B11111000; // make sure everything is switched off (except bod, wkup, clk)
		rf12_xfer(rfmstate);
	}
	rxstate = TXIDLE;
 3b8:	40 95       	com	r20
 3ba:	54 2f       	mov	r21, r20
 3bc:	c7 01       	movw	r24, r14
 3be:	b6 01       	movw	r22, r12
 3c0:	20 d3       	rcall	.+1600   	; 0xa02 <__udivmodsi4>
 3c2:	da 01       	movw	r26, r20
 3c4:	c9 01       	movw	r24, r18
 3c6:	68 94       	set
 3c8:	12 f8       	bld	r1, 2
 3ca:	b6 95       	lsr	r27
 3cc:	a7 95       	ror	r26
 3ce:	97 95       	ror	r25
 3d0:	87 95       	ror	r24
 3d2:	16 94       	lsr	r1
 3d4:	d1 f7       	brne	.-12     	; 0x3ca <_Z15rf12_setBitrateh+0x72>
 3d6:	bc 01       	movw	r22, r24
 3d8:	cd 01       	movw	r24, r26
 3da:	6d 57       	subi	r22, 0x7D	; 125
 3dc:	7c 4f       	sbci	r23, 0xFC	; 252
 3de:	8f 4f       	sbci	r24, 0xFF	; 255
 3e0:	9f 4f       	sbci	r25, 0xFF	; 255
 3e2:	24 e8       	ldi	r18, 0x84	; 132
 3e4:	33 e0       	ldi	r19, 0x03	; 3
 3e6:	40 e0       	ldi	r20, 0x00	; 0
 3e8:	50 e0       	ldi	r21, 0x00	; 0
 3ea:	0b d3       	rcall	.+1558   	; 0xa02 <__udivmodsi4>
 3ec:	20 93 6f 01 	sts	0x016F, r18
 3f0:	cf 91       	pop	r28
 3f2:	1f 91       	pop	r17
 3f4:	0f 91       	pop	r16
 3f6:	ff 90       	pop	r15
 3f8:	ef 90       	pop	r14
 3fa:	df 90       	pop	r13
 3fc:	cf 90       	pop	r12
 3fe:	08 95       	ret

00000400 <_Z19rf12_setFixedLengthh>:
 400:	81 11       	cpse	r24, r1
 402:	03 c0       	rjmp	.+6      	; 0x40a <_Z19rf12_setFixedLengthh+0xa>
 404:	10 92 79 01 	sts	0x0179, r1
 408:	08 95       	ret
 40a:	8f 5f       	subi	r24, 0xFF	; 255
 40c:	80 93 79 01 	sts	0x0179, r24
 410:	08 95       	ret

00000412 <_Z21rf12_interruptcontrolv>:
 412:	e8 9a       	sbi	0x1d, 0	; 29
 414:	e9 e6       	ldi	r30, 0x69	; 105
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	8d 7f       	andi	r24, 0xFD	; 253
 41c:	80 83       	st	Z, r24
 41e:	08 95       	ret

00000420 <_Z12rf12_restorehhh>:
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	d6 2f       	mov	r29, r22
 426:	c4 2f       	mov	r28, r20
 428:	80 93 7a 01 	sts	0x017A, r24
 42c:	40 93 78 01 	sts	0x0178, r20
 430:	60 93 7b 01 	sts	0x017B, r22
 434:	ee df       	rcall	.-36     	; 0x412 <_Z21rf12_interruptcontrolv>
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	e3 df       	rcall	.-58     	; 0x400 <_Z19rf12_setFixedLengthh>
 43a:	49 df       	rcall	.-366    	; 0x2ce <_ZL15blockInterruptsv>
 43c:	25 e0       	ldi	r18, 0x05	; 5
 43e:	32 e8       	ldi	r19, 0x82	; 130
 440:	30 93 75 01 	sts	0x0175, r19
 444:	20 93 74 01 	sts	0x0174, r18
 448:	80 91 74 01 	lds	r24, 0x0174
 44c:	90 91 75 01 	lds	r25, 0x0175
 450:	48 df       	rcall	.-368    	; 0x2e2 <_ZL9rf12_xferj>
 452:	20 e1       	ldi	r18, 0x10	; 16
 454:	d2 9f       	mul	r29, r18
 456:	c0 01       	movw	r24, r0
 458:	11 24       	eor	r1, r1
 45a:	87 6c       	ori	r24, 0xC7	; 199
 45c:	90 68       	ori	r25, 0x80	; 128
 45e:	41 df       	rcall	.-382    	; 0x2e2 <_ZL9rf12_xferj>
 460:	80 e4       	ldi	r24, 0x40	; 64
 462:	96 ea       	ldi	r25, 0xA6	; 166
 464:	3e df       	rcall	.-388    	; 0x2e2 <_ZL9rf12_xferj>
 466:	86 e0       	ldi	r24, 0x06	; 6
 468:	77 df       	rcall	.-274    	; 0x358 <_Z15rf12_setBitrateh>
 46a:	82 ea       	ldi	r24, 0xA2	; 162
 46c:	94 e9       	ldi	r25, 0x94	; 148
 46e:	39 df       	rcall	.-398    	; 0x2e2 <_ZL9rf12_xferj>
 470:	8c ea       	ldi	r24, 0xAC	; 172
 472:	92 ec       	ldi	r25, 0xC2	; 194
 474:	36 df       	rcall	.-404    	; 0x2e2 <_ZL9rf12_xferj>
 476:	cc 23       	and	r28, r28
 478:	41 f0       	breq	.+16     	; 0x48a <_Z12rf12_restorehhh+0x6a>
 47a:	83 e8       	ldi	r24, 0x83	; 131
 47c:	9a ec       	ldi	r25, 0xCA	; 202
 47e:	31 df       	rcall	.-414    	; 0x2e2 <_ZL9rf12_xferj>
 480:	8c 2f       	mov	r24, r28
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	9e 6c       	ori	r25, 0xCE	; 206
 486:	2d df       	rcall	.-422    	; 0x2e2 <_ZL9rf12_xferj>
 488:	06 c0       	rjmp	.+12     	; 0x496 <_Z12rf12_restorehhh+0x76>
 48a:	8b e8       	ldi	r24, 0x8B	; 139
 48c:	9a ec       	ldi	r25, 0xCA	; 202
 48e:	29 df       	rcall	.-430    	; 0x2e2 <_ZL9rf12_xferj>
 490:	8d e2       	ldi	r24, 0x2D	; 45
 492:	9e ec       	ldi	r25, 0xCE	; 206
 494:	26 df       	rcall	.-436    	; 0x2e2 <_ZL9rf12_xferj>
 496:	83 e8       	ldi	r24, 0x83	; 131
 498:	94 ec       	ldi	r25, 0xC4	; 196
 49a:	23 df       	rcall	.-442    	; 0x2e2 <_ZL9rf12_xferj>
 49c:	80 e5       	ldi	r24, 0x50	; 80
 49e:	98 e9       	ldi	r25, 0x98	; 152
 4a0:	20 df       	rcall	.-448    	; 0x2e2 <_ZL9rf12_xferj>
 4a2:	87 e7       	ldi	r24, 0x77	; 119
 4a4:	9c ec       	ldi	r25, 0xCC	; 204
 4a6:	1d df       	rcall	.-454    	; 0x2e2 <_ZL9rf12_xferj>
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 ee       	ldi	r25, 0xE0	; 224
 4ac:	1a df       	rcall	.-460    	; 0x2e2 <_ZL9rf12_xferj>
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	98 ec       	ldi	r25, 0xC8	; 200
 4b2:	17 df       	rcall	.-466    	; 0x2e2 <_ZL9rf12_xferj>
 4b4:	89 e4       	ldi	r24, 0x49	; 73
 4b6:	90 ec       	ldi	r25, 0xC0	; 192
 4b8:	14 df       	rcall	.-472    	; 0x2e2 <_ZL9rf12_xferj>
 4ba:	84 e0       	ldi	r24, 0x04	; 4
 4bc:	80 93 76 01 	sts	0x0176, r24
 4c0:	08 df       	rcall	.-496    	; 0x2d2 <_ZL15allowInterruptsv>
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <_Z15rf12_initializehhh>:
 4c8:	1f 93       	push	r17
 4ca:	cf 93       	push	r28
 4cc:	df 93       	push	r29
 4ce:	c8 2f       	mov	r28, r24
 4d0:	d6 2f       	mov	r29, r22
 4d2:	14 2f       	mov	r17, r20
 4d4:	80 93 7a 01 	sts	0x017A, r24
 4d8:	40 93 78 01 	sts	0x0178, r20
 4dc:	60 93 7b 01 	sts	0x017B, r22
 4e0:	2e df       	rcall	.-420    	; 0x33e <_Z12rf12_spiInitv>
 4e2:	97 df       	rcall	.-210    	; 0x412 <_Z21rf12_interruptcontrolv>
 4e4:	82 e8       	ldi	r24, 0x82	; 130
 4e6:	9a ec       	ldi	r25, 0xCA	; 202
 4e8:	fc de       	rcall	.-520    	; 0x2e2 <_ZL9rf12_xferj>
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	9e ef       	ldi	r25, 0xFE	; 254
 4ee:	f9 de       	rcall	.-526    	; 0x2e2 <_ZL9rf12_xferj>
 4f0:	85 e0       	ldi	r24, 0x05	; 5
 4f2:	80 93 76 01 	sts	0x0176, r24
 4f6:	83 b7       	in	r24, 0x33	; 51
 4f8:	81 7f       	andi	r24, 0xF1	; 241
 4fa:	83 bf       	out	0x33, r24	; 51
 4fc:	80 91 76 01 	lds	r24, 0x0176
 500:	85 30       	cpi	r24, 0x05	; 5
 502:	59 f4       	brne	.+22     	; 0x51a <_Z15rf12_initializehhh+0x52>
 504:	93 b7       	in	r25, 0x33	; 51
 506:	91 60       	ori	r25, 0x01	; 1
 508:	93 bf       	out	0x33, r25	; 51
 50a:	88 95       	sleep
 50c:	93 b7       	in	r25, 0x33	; 51
 50e:	9e 7f       	andi	r25, 0xFE	; 254
 510:	93 bf       	out	0x33, r25	; 51
 512:	90 91 76 01 	lds	r25, 0x0176
 516:	95 30       	cpi	r25, 0x05	; 5
 518:	a9 f3       	breq	.-22     	; 0x504 <_Z15rf12_initializehhh+0x3c>
 51a:	41 2f       	mov	r20, r17
 51c:	6d 2f       	mov	r22, r29
 51e:	8c 2f       	mov	r24, r28
 520:	7f df       	rcall	.-258    	; 0x420 <_Z12rf12_restorehhh>
 522:	80 91 7a 01 	lds	r24, 0x017A
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	08 95       	ret

0000052e <_Z16rf12_setWatchdogm>:
/// interrupt in the RFM12 module. Use rf12_wakeup() to check if the wakeup-interrupt
/// fired. This allows very deep sleep states (timer off) while still being able to wakeup
/// because of the external interrupt. The RFM12b wakeup-timer only needs about 1.5µA.
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
 52e:	cf 92       	push	r12
 530:	df 92       	push	r13
 532:	ef 92       	push	r14
 534:	ff 92       	push	r15
 536:	cf 93       	push	r28
 538:	6b 01       	movw	r12, r22
 53a:	7c 01       	movw	r14, r24
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
 53c:	8f ef       	ldi	r24, 0xFF	; 255
 53e:	c8 16       	cp	r12, r24
 540:	d1 04       	cpc	r13, r1
 542:	e1 04       	cpc	r14, r1
 544:	f1 04       	cpc	r15, r1
 546:	79 f0       	breq	.+30     	; 0x566 <_Z16rf12_setWatchdogm+0x38>
 548:	70 f0       	brcs	.+28     	; 0x566 <_Z16rf12_setWatchdogm+0x38>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
 54a:	c0 e0       	ldi	r28, 0x00	; 0
	while (m > 255) {
		r  += 1;
 54c:	cf 5f       	subi	r28, 0xFF	; 255
		m >>= 1;
 54e:	f6 94       	lsr	r15
 550:	e7 94       	ror	r14
 552:	d7 94       	ror	r13
 554:	c7 94       	ror	r12
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	c8 16       	cp	r12, r24
 55a:	d1 04       	cpc	r13, r1
 55c:	e1 04       	cpc	r14, r1
 55e:	f1 04       	cpc	r15, r1
 560:	09 f0       	breq	.+2      	; 0x564 <_Z16rf12_setWatchdogm+0x36>
 562:	a0 f7       	brcc	.-24     	; 0x54c <_Z16rf12_setWatchdogm+0x1e>
 564:	01 c0       	rjmp	.+2      	; 0x568 <_Z16rf12_setWatchdogm+0x3a>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
 566:	c0 e0       	ldi	r28, 0x00	; 0
		m >>= 1;
	}
	
	// Disable old wakeup-timer if enabled
//	if (bitRead(rfmstate,1)) {
	if ((rfmstate>>1)&0x01){
 568:	80 91 74 01 	lds	r24, 0x0174
 56c:	90 91 75 01 	lds	r25, 0x0175
 570:	81 ff       	sbrs	r24, 1
 572:	0e c0       	rjmp	.+28     	; 0x590 <_Z16rf12_setWatchdogm+0x62>
		//bitClear(rfmstate,1);
		rfmstate &= ~(1 << 1);
 574:	80 91 74 01 	lds	r24, 0x0174
 578:	90 91 75 01 	lds	r25, 0x0175
 57c:	8d 7f       	andi	r24, 0xFD	; 253
 57e:	90 93 75 01 	sts	0x0175, r25
 582:	80 93 74 01 	sts	0x0174, r24
		rf12_xfer(rfmstate);
 586:	80 91 74 01 	lds	r24, 0x0174
 58a:	90 91 75 01 	lds	r25, 0x0175
 58e:	a9 de       	rcall	.-686    	; 0x2e2 <_ZL9rf12_xferj>
	}
	
	// enable wakeup call if we have to
	if (m>0) {
 590:	c1 14       	cp	r12, r1
 592:	d1 04       	cpc	r13, r1
 594:	e1 04       	cpc	r14, r1
 596:	f1 04       	cpc	r15, r1
 598:	b1 f0       	breq	.+44     	; 0x5c6 <_Z16rf12_setWatchdogm+0x98>
		// write time to wakeup-register
		rf12_xfer(RF_WAKEUP_TIMER | (r<<8) | m);
 59a:	3c 2f       	mov	r19, r28
 59c:	20 e0       	ldi	r18, 0x00	; 0
 59e:	d7 01       	movw	r26, r14
 5a0:	c6 01       	movw	r24, r12
 5a2:	90 6e       	ori	r25, 0xE0	; 224
 5a4:	82 2b       	or	r24, r18
 5a6:	93 2b       	or	r25, r19
 5a8:	9c de       	rcall	.-712    	; 0x2e2 <_ZL9rf12_xferj>
		// enable wakeup
		//bitSet(rfmstate,1);
		rfmstate |= (1 << 1);
 5aa:	80 91 74 01 	lds	r24, 0x0174
 5ae:	90 91 75 01 	lds	r25, 0x0175
 5b2:	82 60       	ori	r24, 0x02	; 2
 5b4:	90 93 75 01 	sts	0x0175, r25
 5b8:	80 93 74 01 	sts	0x0174, r24
		rf12_xfer(rfmstate);
 5bc:	80 91 74 01 	lds	r24, 0x0174
 5c0:	90 91 75 01 	lds	r25, 0x0175
 5c4:	8e de       	rcall	.-740    	; 0x2e2 <_ZL9rf12_xferj>
	}
}
 5c6:	cf 91       	pop	r28
 5c8:	ff 90       	pop	r15
 5ca:	ef 90       	pop	r14
 5cc:	df 90       	pop	r13
 5ce:	cf 90       	pop	r12
 5d0:	08 95       	ret

000005d2 <__vector_1>:
	while (!bitRead(PINB, RFM_IRQ - 8))
	rf12_interrupt();
}
#else
*/
ISR(INT0_vect) {
 5d2:	1f 92       	push	r1
 5d4:	0f 92       	push	r0
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	0f 92       	push	r0
 5da:	11 24       	eor	r1, r1
 5dc:	1f 93       	push	r17
 5de:	2f 93       	push	r18
 5e0:	3f 93       	push	r19
 5e2:	4f 93       	push	r20
 5e4:	5f 93       	push	r21
 5e6:	6f 93       	push	r22
 5e8:	7f 93       	push	r23
 5ea:	8f 93       	push	r24
 5ec:	9f 93       	push	r25
 5ee:	af 93       	push	r26
 5f0:	bf 93       	push	r27
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	ef 93       	push	r30
 5f8:	ff 93       	push	r31
/// Requests RFM12 state from RF module and reads back a waiting data byte if there is
/// any.
/// One of two commands accessing SPI, so interrupts disabled in here
/// @param *data Pointer to  byte where to write the received data to (if any)
static uint16_t rf12_xferState (uint8_t *data) {
	blockInterrupts();
 5fa:	69 de       	rcall	.-814    	; 0x2ce <_ZL15blockInterruptsv>

	// writing can take place at full speed, even 8 MHz works
	//bitClear(SS_PORT, cs_pin);
	PORT_RFM_CS &= ~(1<<BIT_RFM_CS); //clear CS
 5fc:	2a 98       	cbi	0x05, 2	; 5
	uint16_t res = rf12_byte(0x00) << 8;
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	6a de       	rcall	.-812    	; 0x2d6 <_ZL9rf12_byteh>
 602:	d8 2f       	mov	r29, r24
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	c8 2f       	mov	r28, r24
	res |= rf12_byte(0x00);
 608:	66 de       	rcall	.-820    	; 0x2d6 <_ZL9rf12_byteh>
 60a:	c8 2b       	or	r28, r24
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
 60c:	dd 23       	and	r29, r29
 60e:	2c f4       	brge	.+10     	; 0x61a <__vector_1+0x48>
 610:	80 91 76 01 	lds	r24, 0x0176
 614:	87 30       	cpi	r24, 0x07	; 7
 616:	09 f4       	brne	.+2      	; 0x61a <__vector_1+0x48>
 618:	0f c1       	rjmp	.+542    	; 0x838 <__vector_1+0x266>
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
		#endif
	}
	
	//bitSet(SS_PORT, cs_pin);
	PORT_RFM_CS |= (1 << BIT_RFM_CS); //  bitSet(SS_PORT, cs_pin);
 61a:	2a 9a       	sbi	0x05, 2	; 5

	allowInterrupts();
 61c:	5a de       	rcall	.-844    	; 0x2d2 <_ZL15allowInterruptsv>
/// @details
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uint8_t in;
	state = rf12_xferState(&in);
 61e:	d0 93 73 01 	sts	0x0173, r29
 622:	c0 93 72 01 	sts	0x0172, r28

	// data received or byte needed for sending
	if (state & RF_FIFO_BIT) {
 626:	20 91 72 01 	lds	r18, 0x0172
 62a:	30 91 73 01 	lds	r19, 0x0173
 62e:	33 23       	and	r19, r19
 630:	0c f0       	brlt	.+2      	; 0x634 <__vector_1+0x62>
 632:	e1 c0       	rjmp	.+450    	; 0x7f6 <__vector_1+0x224>
		
		if (rxstate == TXRECV) {  // we are receiving
 634:	80 91 76 01 	lds	r24, 0x0176
 638:	87 30       	cpi	r24, 0x07	; 7
 63a:	09 f0       	breq	.+2      	; 0x63e <__vector_1+0x6c>
 63c:	78 c0       	rjmp	.+240    	; 0x72e <__vector_1+0x15c>

			if (rxfill == 0 && group != 0)
 63e:	80 91 77 01 	lds	r24, 0x0177
 642:	81 11       	cpse	r24, r1
 644:	04 c0       	rjmp	.+8      	; 0x64e <__vector_1+0x7c>
 646:	80 91 78 01 	lds	r24, 0x0178
 64a:	81 11       	cpse	r24, r1
 64c:	ff c0       	rjmp	.+510    	; 0x84c <__vector_1+0x27a>
			rf12_buf[rxfill++] = group;

			rf12_buf[rxfill++] = in;
 64e:	80 91 77 01 	lds	r24, 0x0177
 652:	e8 2f       	mov	r30, r24
 654:	f0 e0       	ldi	r31, 0x00	; 0
 656:	ea 5d       	subi	r30, 0xDA	; 218
 658:	fe 4f       	sbci	r31, 0xFE	; 254
 65a:	10 83       	st	Z, r17
 65c:	8f 5f       	subi	r24, 0xFF	; 255
 65e:	80 93 77 01 	sts	0x0177, r24
			rf12_crc = _crc16_update(rf12_crc, in);
 662:	20 91 6d 01 	lds	r18, 0x016D
 666:	30 91 6e 01 	lds	r19, 0x016E
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
 66a:	21 27       	eor	r18, r17
 66c:	12 2f       	mov	r17, r18
 66e:	12 95       	swap	r17
 670:	12 27       	eor	r17, r18
 672:	01 2e       	mov	r0, r17
 674:	16 95       	lsr	r17
 676:	16 95       	lsr	r17
 678:	10 25       	eor	r17, r0
 67a:	01 2e       	mov	r0, r17
 67c:	16 95       	lsr	r17
 67e:	10 25       	eor	r17, r0
 680:	17 70       	andi	r17, 0x07	; 7
 682:	02 2e       	mov	r0, r18
 684:	23 2f       	mov	r18, r19
 686:	16 95       	lsr	r17
 688:	07 94       	ror	r0
 68a:	17 95       	ror	r17
 68c:	30 2d       	mov	r19, r0
 68e:	21 27       	eor	r18, r17
 690:	06 94       	lsr	r0
 692:	17 95       	ror	r17
 694:	30 25       	eor	r19, r0
 696:	21 27       	eor	r18, r17
 698:	30 93 6e 01 	sts	0x016E, r19
 69c:	20 93 6d 01 	sts	0x016D, r18

			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
 6a0:	e0 91 70 01 	lds	r30, 0x0170
 6a4:	e3 30       	cpi	r30, 0x03	; 3
 6a6:	18 f5       	brcc	.+70     	; 0x6ee <__vector_1+0x11c>
 6a8:	80 91 77 01 	lds	r24, 0x0177
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 97       	sbiw	r24, 0x02	; 2
 6b0:	60 91 6f 01 	lds	r22, 0x016F
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	92 d1       	rcall	.+804    	; 0x9dc <__divmodhi4>
 6b8:	89 2b       	or	r24, r25
 6ba:	09 f4       	brne	.+2      	; 0x6be <__vector_1+0xec>
 6bc:	d2 c0       	rjmp	.+420    	; 0x862 <__vector_1+0x290>
 6be:	17 c0       	rjmp	.+46     	; 0x6ee <__vector_1+0x11c>
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
 6c2:	e2 5e       	subi	r30, 0xE2	; 226
 6c4:	fe 4f       	sbci	r31, 0xFE	; 254
				: (drssi_dec_tree[drssi] >> 4);
 6c6:	80 81       	ld	r24, Z
 6c8:	8f 70       	andi	r24, 0x0F	; 15
 6ca:	06 c0       	rjmp	.+12     	; 0x6d8 <__vector_1+0x106>
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	e2 5e       	subi	r30, 0xE2	; 226
 6d0:	fe 4f       	sbci	r31, 0xFE	; 254
 6d2:	80 81       	ld	r24, Z
 6d4:	82 95       	swap	r24
 6d6:	8f 70       	andi	r24, 0x0F	; 15
 6d8:	80 93 70 01 	sts	0x0170, r24
				if ( drssi < 3 ) {     // not yet final destination, set new threshold
 6dc:	83 30       	cpi	r24, 0x03	; 3
 6de:	38 f4       	brcc	.+14     	; 0x6ee <__vector_1+0x11c>
					rf12_xfer(RF_RECV_CONTROL | drssi*2+1);
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	88 0f       	add	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	80 6a       	ori	r24, 0xA0	; 160
 6ea:	94 69       	ori	r25, 0x94	; 148
 6ec:	fa dd       	rcall	.-1036   	; 0x2e2 <_ZL9rf12_xferj>
				}
			}

			// check if we got all the bytes (or maximum packet length was reached)
			if (fixedLength) {
 6ee:	80 91 79 01 	lds	r24, 0x0179
 6f2:	88 23       	and	r24, r24
 6f4:	59 f0       	breq	.+22     	; 0x70c <__vector_1+0x13a>
				if (rxfill >= fixedLength || rxfill >= RF_MAX) {
 6f6:	90 91 77 01 	lds	r25, 0x0177
 6fa:	98 17       	cp	r25, r24
 6fc:	28 f4       	brcc	.+10     	; 0x708 <__vector_1+0x136>
 6fe:	80 91 77 01 	lds	r24, 0x0177
 702:	87 34       	cpi	r24, 0x47	; 71
 704:	08 f4       	brcc	.+2      	; 0x708 <__vector_1+0x136>
 706:	77 c0       	rjmp	.+238    	; 0x7f6 <__vector_1+0x224>
					rf12_idle();
 708:	03 de       	rcall	.-1018   	; 0x310 <_ZL9rf12_idlev>
 70a:	75 c0       	rjmp	.+234    	; 0x7f6 <__vector_1+0x224>
				}
				} else if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX) {
 70c:	20 91 77 01 	lds	r18, 0x0177
 710:	80 91 28 01 	lds	r24, 0x0128
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	05 96       	adiw	r24, 0x05	; 5
 71a:	28 17       	cp	r18, r24
 71c:	39 07       	cpc	r19, r25
 71e:	2c f4       	brge	.+10     	; 0x72a <__vector_1+0x158>
 720:	80 91 77 01 	lds	r24, 0x0177
 724:	87 34       	cpi	r24, 0x47	; 71
 726:	08 f4       	brcc	.+2      	; 0x72a <__vector_1+0x158>
 728:	66 c0       	rjmp	.+204    	; 0x7f6 <__vector_1+0x224>
				rf12_idle();
 72a:	f2 dd       	rcall	.-1052   	; 0x310 <_ZL9rf12_idlev>
 72c:	64 c0       	rjmp	.+200    	; 0x7f6 <__vector_1+0x224>
			}
			} else {                  // we are sending
			uint8_t out;

			if (rxstate < 0) {
 72e:	80 91 76 01 	lds	r24, 0x0176
 732:	88 23       	and	r24, r24
 734:	0c f0       	brlt	.+2      	; 0x738 <__vector_1+0x166>
 736:	2f c0       	rjmp	.+94     	; 0x796 <__vector_1+0x1c4>
				uint8_t pos = 3 + rf12_len + rxstate++;
 738:	e0 91 28 01 	lds	r30, 0x0128
 73c:	80 91 76 01 	lds	r24, 0x0176
 740:	98 2f       	mov	r25, r24
 742:	9f 5f       	subi	r25, 0xFF	; 255
 744:	90 93 76 01 	sts	0x0176, r25
 748:	ed 5f       	subi	r30, 0xFD	; 253
 74a:	8e 0f       	add	r24, r30
				out = rf12_buf[pos];
 74c:	e8 2f       	mov	r30, r24
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	ea 5d       	subi	r30, 0xDA	; 218
 752:	fe 4f       	sbci	r31, 0xFE	; 254
 754:	80 81       	ld	r24, Z
				rf12_crc = _crc16_update(rf12_crc, out);
 756:	20 91 6d 01 	lds	r18, 0x016D
 75a:	30 91 6e 01 	lds	r19, 0x016E
 75e:	28 27       	eor	r18, r24
 760:	92 2f       	mov	r25, r18
 762:	92 95       	swap	r25
 764:	92 27       	eor	r25, r18
 766:	09 2e       	mov	r0, r25
 768:	96 95       	lsr	r25
 76a:	96 95       	lsr	r25
 76c:	90 25       	eor	r25, r0
 76e:	09 2e       	mov	r0, r25
 770:	96 95       	lsr	r25
 772:	90 25       	eor	r25, r0
 774:	97 70       	andi	r25, 0x07	; 7
 776:	02 2e       	mov	r0, r18
 778:	23 2f       	mov	r18, r19
 77a:	96 95       	lsr	r25
 77c:	07 94       	ror	r0
 77e:	97 95       	ror	r25
 780:	30 2d       	mov	r19, r0
 782:	29 27       	eor	r18, r25
 784:	06 94       	lsr	r0
 786:	97 95       	ror	r25
 788:	30 25       	eor	r19, r0
 78a:	29 27       	eor	r18, r25
 78c:	30 93 6e 01 	sts	0x016E, r19
 790:	20 93 6d 01 	sts	0x016D, r18
 794:	2d c0       	rjmp	.+90     	; 0x7f0 <__vector_1+0x21e>
			} else
			switch (rxstate++) {
 796:	80 91 76 01 	lds	r24, 0x0176
 79a:	98 2f       	mov	r25, r24
 79c:	9f 5f       	subi	r25, 0xFF	; 255
 79e:	90 93 76 01 	sts	0x0176, r25
 7a2:	83 30       	cpi	r24, 0x03	; 3
 7a4:	09 f1       	breq	.+66     	; 0x7e8 <__vector_1+0x216>
 7a6:	2c f4       	brge	.+10     	; 0x7b2 <__vector_1+0x1e0>
 7a8:	88 23       	and	r24, r24
 7aa:	99 f0       	breq	.+38     	; 0x7d2 <__vector_1+0x200>
 7ac:	81 30       	cpi	r24, 0x01	; 1
 7ae:	f9 f4       	brne	.+62     	; 0x7ee <__vector_1+0x21c>
 7b0:	15 c0       	rjmp	.+42     	; 0x7dc <__vector_1+0x20a>
 7b2:	8b 30       	cpi	r24, 0x0B	; 11
 7b4:	19 f0       	breq	.+6      	; 0x7bc <__vector_1+0x1ea>
 7b6:	8c 30       	cpi	r24, 0x0C	; 12
 7b8:	d1 f4       	brne	.+52     	; 0x7ee <__vector_1+0x21c>
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <__vector_1+0x1ee>
				case TXSYN1: out = 0x2D; break;
 7bc:	8d e2       	ldi	r24, 0x2D	; 45
 7be:	18 c0       	rjmp	.+48     	; 0x7f0 <__vector_1+0x21e>
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
 7c0:	80 91 78 01 	lds	r24, 0x0178
 7c4:	20 91 28 01 	lds	r18, 0x0128
 7c8:	9e ef       	ldi	r25, 0xFE	; 254
 7ca:	92 1b       	sub	r25, r18
 7cc:	90 93 76 01 	sts	0x0176, r25
 7d0:	0f c0       	rjmp	.+30     	; 0x7f0 <__vector_1+0x21e>
				case TXCRC1: out = rf12_crc; break;
 7d2:	80 91 6d 01 	lds	r24, 0x016D
 7d6:	90 91 6e 01 	lds	r25, 0x016E
 7da:	0a c0       	rjmp	.+20     	; 0x7f0 <__vector_1+0x21e>
				case TXCRC2: out = rf12_crc >> 8; break;
 7dc:	80 91 6d 01 	lds	r24, 0x016D
 7e0:	90 91 6e 01 	lds	r25, 0x016E
 7e4:	89 2f       	mov	r24, r25
 7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <__vector_1+0x21e>
				case TXDONE: rf12_idle(); // fall through
 7e8:	93 dd       	rcall	.-1242   	; 0x310 <_ZL9rf12_idlev>
				default:     out = 0xAA;
 7ea:	8a ea       	ldi	r24, 0xAA	; 170
 7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <__vector_1+0x21e>
 7ee:	8a ea       	ldi	r24, 0xAA	; 170
			}

			rf12_xfer(RF_TXREG_WRITE | out);
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	98 6b       	ori	r25, 0xB8	; 184
 7f4:	76 dd       	rcall	.-1300   	; 0x2e2 <_ZL9rf12_xferj>
		}
	}
	
	// power-on reset
	if (state & RF_POR_BIT) {
 7f6:	80 91 72 01 	lds	r24, 0x0172
 7fa:	90 91 73 01 	lds	r25, 0x0173
 7fe:	96 ff       	sbrs	r25, 6
 800:	03 c0       	rjmp	.+6      	; 0x808 <__vector_1+0x236>
		rxstate = POR_RECEIVED;
 802:	86 e0       	ldi	r24, 0x06	; 6
 804:	80 93 76 01 	sts	0x0176, r24
	}

	// got wakeup call
	if (state & RF_WDG_BIT) {
 808:	80 91 72 01 	lds	r24, 0x0172
 80c:	90 91 73 01 	lds	r25, 0x0173
 810:	94 ff       	sbrs	r25, 4
 812:	07 c0       	rjmp	.+14     	; 0x822 <__vector_1+0x250>
		rf12_setWatchdog(0);
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	70 e0       	ldi	r23, 0x00	; 0
 818:	cb 01       	movw	r24, r22
 81a:	89 de       	rcall	.-750    	; 0x52e <_Z16rf12_setWatchdogm>
		rf12_gotwakeup = 1;
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	80 93 71 01 	sts	0x0171, r24
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
 822:	80 91 72 01 	lds	r24, 0x0172
 826:	90 91 73 01 	lds	r25, 0x0173
 82a:	95 ff       	sbrs	r25, 5
 82c:	21 c0       	rjmp	.+66     	; 0x870 <__vector_1+0x29e>
		rf12_idle();
 82e:	70 dd       	rcall	.-1312   	; 0x310 <_ZL9rf12_idlev>
		rxstate = TXIDLE;
 830:	84 e0       	ldi	r24, 0x04	; 4
 832:	80 93 76 01 	sts	0x0176, r24
 836:	1c c0       	rjmp	.+56     	; 0x870 <__vector_1+0x29e>
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
		// slow down to under 2.5 MHz
		#if F_CPU > 10000000
		//bitSet(SPCR, SPR0);
		SPCR |= (1 << SPR0); //  bitSet(SPCR, SPR0);
 838:	8c b5       	in	r24, 0x2c	; 44
 83a:	81 60       	ori	r24, 0x01	; 1
 83c:	8c bd       	out	0x2c, r24	; 44
		#endif
		*data = rf12_byte(0x00);
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	4a dd       	rcall	.-1388   	; 0x2d6 <_ZL9rf12_byteh>
 842:	18 2f       	mov	r17, r24
		#if F_CPU > 10000000
		//bitClear(SPCR, SPR0);
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
 844:	8c b5       	in	r24, 0x2c	; 44
 846:	8e 7f       	andi	r24, 0xFE	; 254
 848:	8c bd       	out	0x2c, r24	; 44
 84a:	e7 ce       	rjmp	.-562    	; 0x61a <__vector_1+0x48>
	if (state & RF_FIFO_BIT) {
		
		if (rxstate == TXRECV) {  // we are receiving

			if (rxfill == 0 && group != 0)
			rf12_buf[rxfill++] = group;
 84c:	90 91 77 01 	lds	r25, 0x0177
 850:	e9 2f       	mov	r30, r25
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	ea 5d       	subi	r30, 0xDA	; 218
 856:	fe 4f       	sbci	r31, 0xFE	; 254
 858:	80 83       	st	Z, r24
 85a:	9f 5f       	subi	r25, 0xFF	; 255
 85c:	90 93 77 01 	sts	0x0177, r25
 860:	f6 ce       	rjmp	.-532    	; 0x64e <__vector_1+0x7c>
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
 862:	80 91 72 01 	lds	r24, 0x0172
 866:	90 91 73 01 	lds	r25, 0x0173
 86a:	90 fd       	sbrc	r25, 0
 86c:	29 cf       	rjmp	.-430    	; 0x6c0 <__vector_1+0xee>
 86e:	2e cf       	rjmp	.-420    	; 0x6cc <__vector_1+0xfa>
#else
*/
ISR(INT0_vect) {
	//uart0_puts("I");
	rf12_interrupt();
}
 870:	ff 91       	pop	r31
 872:	ef 91       	pop	r30
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	bf 91       	pop	r27
 87a:	af 91       	pop	r26
 87c:	9f 91       	pop	r25
 87e:	8f 91       	pop	r24
 880:	7f 91       	pop	r23
 882:	6f 91       	pop	r22
 884:	5f 91       	pop	r21
 886:	4f 91       	pop	r20
 888:	3f 91       	pop	r19
 88a:	2f 91       	pop	r18
 88c:	1f 91       	pop	r17
 88e:	0f 90       	pop	r0
 890:	0f be       	out	0x3f, r0	; 63
 892:	0f 90       	pop	r0
 894:	1f 90       	pop	r1
 896:	18 95       	reti

00000898 <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
 898:	1f 92       	push	r1
 89a:	0f 92       	push	r0
 89c:	0f b6       	in	r0, 0x3f	; 63
 89e:	0f 92       	push	r0
 8a0:	11 24       	eor	r1, r1
 8a2:	2f 93       	push	r18
 8a4:	3f 93       	push	r19
 8a6:	4f 93       	push	r20
 8a8:	5f 93       	push	r21
 8aa:	8f 93       	push	r24
 8ac:	9f 93       	push	r25
 8ae:	ef 93       	push	r30
 8b0:	ff 93       	push	r31
 8b2:	40 91 c0 00 	lds	r20, 0x00C0
 8b6:	50 91 c6 00 	lds	r21, 0x00C6
 8ba:	48 71       	andi	r20, 0x18	; 24
 8bc:	80 91 7e 01 	lds	r24, 0x017E
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	01 96       	adiw	r24, 0x01	; 1
 8c4:	8f 77       	andi	r24, 0x7F	; 127
 8c6:	99 27       	eor	r25, r25
 8c8:	20 91 7d 01 	lds	r18, 0x017D
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	28 17       	cp	r18, r24
 8d0:	39 07       	cpc	r19, r25
 8d2:	39 f0       	breq	.+14     	; 0x8e2 <__vector_18+0x4a>
 8d4:	80 93 7e 01 	sts	0x017E, r24
 8d8:	fc 01       	movw	r30, r24
 8da:	ef 57       	subi	r30, 0x7F	; 127
 8dc:	fe 4f       	sbci	r31, 0xFE	; 254
 8de:	50 83       	st	Z, r21
 8e0:	01 c0       	rjmp	.+2      	; 0x8e4 <__vector_18+0x4c>
 8e2:	42 e0       	ldi	r20, 0x02	; 2
 8e4:	40 93 7c 01 	sts	0x017C, r20
 8e8:	ff 91       	pop	r31
 8ea:	ef 91       	pop	r30
 8ec:	9f 91       	pop	r25
 8ee:	8f 91       	pop	r24
 8f0:	5f 91       	pop	r21
 8f2:	4f 91       	pop	r20
 8f4:	3f 91       	pop	r19
 8f6:	2f 91       	pop	r18
 8f8:	0f 90       	pop	r0
 8fa:	0f be       	out	0x3f, r0	; 63
 8fc:	0f 90       	pop	r0
 8fe:	1f 90       	pop	r1
 900:	18 95       	reti

00000902 <__vector_19>:
 902:	1f 92       	push	r1
 904:	0f 92       	push	r0
 906:	0f b6       	in	r0, 0x3f	; 63
 908:	0f 92       	push	r0
 90a:	11 24       	eor	r1, r1
 90c:	8f 93       	push	r24
 90e:	9f 93       	push	r25
 910:	ef 93       	push	r30
 912:	ff 93       	push	r31
 914:	90 91 80 01 	lds	r25, 0x0180
 918:	80 91 7f 01 	lds	r24, 0x017F
 91c:	98 17       	cp	r25, r24
 91e:	79 f0       	breq	.+30     	; 0x93e <__vector_19+0x3c>
 920:	80 91 7f 01 	lds	r24, 0x017F
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	01 96       	adiw	r24, 0x01	; 1
 928:	8f 77       	andi	r24, 0x7F	; 127
 92a:	99 27       	eor	r25, r25
 92c:	80 93 7f 01 	sts	0x017F, r24
 930:	fc 01       	movw	r30, r24
 932:	ef 5f       	subi	r30, 0xFF	; 255
 934:	fd 4f       	sbci	r31, 0xFD	; 253
 936:	80 81       	ld	r24, Z
 938:	80 93 c6 00 	sts	0x00C6, r24
 93c:	05 c0       	rjmp	.+10     	; 0x948 <__vector_19+0x46>
 93e:	e1 ec       	ldi	r30, 0xC1	; 193
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	80 81       	ld	r24, Z
 944:	8f 7d       	andi	r24, 0xDF	; 223
 946:	80 83       	st	Z, r24
 948:	ff 91       	pop	r31
 94a:	ef 91       	pop	r30
 94c:	9f 91       	pop	r25
 94e:	8f 91       	pop	r24
 950:	0f 90       	pop	r0
 952:	0f be       	out	0x3f, r0	; 63
 954:	0f 90       	pop	r0
 956:	1f 90       	pop	r1
 958:	18 95       	reti

0000095a <uart0_init>:
 95a:	10 92 80 01 	sts	0x0180, r1
 95e:	10 92 7f 01 	sts	0x017F, r1
 962:	10 92 7e 01 	sts	0x017E, r1
 966:	10 92 7d 01 	sts	0x017D, r1
 96a:	99 23       	and	r25, r25
 96c:	24 f4       	brge	.+8      	; 0x976 <uart0_init+0x1c>
 96e:	22 e0       	ldi	r18, 0x02	; 2
 970:	20 93 c0 00 	sts	0x00C0, r18
 974:	9f 77       	andi	r25, 0x7F	; 127
 976:	90 93 c5 00 	sts	0x00C5, r25
 97a:	80 93 c4 00 	sts	0x00C4, r24
 97e:	88 e9       	ldi	r24, 0x98	; 152
 980:	80 93 c1 00 	sts	0x00C1, r24
 984:	86 e0       	ldi	r24, 0x06	; 6
 986:	80 93 c2 00 	sts	0x00C2, r24
 98a:	08 95       	ret

0000098c <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
 98c:	60 91 80 01 	lds	r22, 0x0180
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	6f 5f       	subi	r22, 0xFF	; 255
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	6f 77       	andi	r22, 0x7F	; 127
 998:	77 27       	eor	r23, r23
 99a:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
 99c:	20 91 7f 01 	lds	r18, 0x017F
 9a0:	30 e0       	ldi	r19, 0x00	; 0
 9a2:	24 17       	cp	r18, r20
 9a4:	35 07       	cpc	r19, r21
 9a6:	d1 f3       	breq	.-12     	; 0x99c <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
 9a8:	fb 01       	movw	r30, r22
 9aa:	ef 5f       	subi	r30, 0xFF	; 255
 9ac:	fd 4f       	sbci	r31, 0xFD	; 253
 9ae:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
 9b0:	60 93 80 01 	sts	0x0180, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
 9b4:	e1 ec       	ldi	r30, 0xC1	; 193
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	80 81       	ld	r24, Z
 9ba:	80 62       	ori	r24, 0x20	; 32
 9bc:	80 83       	st	Z, r24
 9be:	08 95       	ret

000009c0 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
 9c0:	cf 93       	push	r28
 9c2:	df 93       	push	r29
 9c4:	ec 01       	movw	r28, r24
	while (*s) {
 9c6:	88 81       	ld	r24, Y
 9c8:	88 23       	and	r24, r24
 9ca:	29 f0       	breq	.+10     	; 0x9d6 <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
 9cc:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
 9ce:	de df       	rcall	.-68     	; 0x98c <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
 9d0:	89 91       	ld	r24, Y+
 9d2:	81 11       	cpse	r24, r1
 9d4:	fc cf       	rjmp	.-8      	; 0x9ce <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
 9d6:	df 91       	pop	r29
 9d8:	cf 91       	pop	r28
 9da:	08 95       	ret

000009dc <__divmodhi4>:
 9dc:	97 fb       	bst	r25, 7
 9de:	07 2e       	mov	r0, r23
 9e0:	16 f4       	brtc	.+4      	; 0x9e6 <__divmodhi4+0xa>
 9e2:	00 94       	com	r0
 9e4:	06 d0       	rcall	.+12     	; 0x9f2 <__divmodhi4_neg1>
 9e6:	77 fd       	sbrc	r23, 7
 9e8:	08 d0       	rcall	.+16     	; 0x9fa <__divmodhi4_neg2>
 9ea:	2d d0       	rcall	.+90     	; 0xa46 <__udivmodhi4>
 9ec:	07 fc       	sbrc	r0, 7
 9ee:	05 d0       	rcall	.+10     	; 0x9fa <__divmodhi4_neg2>
 9f0:	3e f4       	brtc	.+14     	; 0xa00 <__divmodhi4_exit>

000009f2 <__divmodhi4_neg1>:
 9f2:	90 95       	com	r25
 9f4:	81 95       	neg	r24
 9f6:	9f 4f       	sbci	r25, 0xFF	; 255
 9f8:	08 95       	ret

000009fa <__divmodhi4_neg2>:
 9fa:	70 95       	com	r23
 9fc:	61 95       	neg	r22
 9fe:	7f 4f       	sbci	r23, 0xFF	; 255

00000a00 <__divmodhi4_exit>:
 a00:	08 95       	ret

00000a02 <__udivmodsi4>:
 a02:	a1 e2       	ldi	r26, 0x21	; 33
 a04:	1a 2e       	mov	r1, r26
 a06:	aa 1b       	sub	r26, r26
 a08:	bb 1b       	sub	r27, r27
 a0a:	fd 01       	movw	r30, r26
 a0c:	0d c0       	rjmp	.+26     	; 0xa28 <__udivmodsi4_ep>

00000a0e <__udivmodsi4_loop>:
 a0e:	aa 1f       	adc	r26, r26
 a10:	bb 1f       	adc	r27, r27
 a12:	ee 1f       	adc	r30, r30
 a14:	ff 1f       	adc	r31, r31
 a16:	a2 17       	cp	r26, r18
 a18:	b3 07       	cpc	r27, r19
 a1a:	e4 07       	cpc	r30, r20
 a1c:	f5 07       	cpc	r31, r21
 a1e:	20 f0       	brcs	.+8      	; 0xa28 <__udivmodsi4_ep>
 a20:	a2 1b       	sub	r26, r18
 a22:	b3 0b       	sbc	r27, r19
 a24:	e4 0b       	sbc	r30, r20
 a26:	f5 0b       	sbc	r31, r21

00000a28 <__udivmodsi4_ep>:
 a28:	66 1f       	adc	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	99 1f       	adc	r25, r25
 a30:	1a 94       	dec	r1
 a32:	69 f7       	brne	.-38     	; 0xa0e <__udivmodsi4_loop>
 a34:	60 95       	com	r22
 a36:	70 95       	com	r23
 a38:	80 95       	com	r24
 a3a:	90 95       	com	r25
 a3c:	9b 01       	movw	r18, r22
 a3e:	ac 01       	movw	r20, r24
 a40:	bd 01       	movw	r22, r26
 a42:	cf 01       	movw	r24, r30
 a44:	08 95       	ret

00000a46 <__udivmodhi4>:
 a46:	aa 1b       	sub	r26, r26
 a48:	bb 1b       	sub	r27, r27
 a4a:	51 e1       	ldi	r21, 0x11	; 17
 a4c:	07 c0       	rjmp	.+14     	; 0xa5c <__udivmodhi4_ep>

00000a4e <__udivmodhi4_loop>:
 a4e:	aa 1f       	adc	r26, r26
 a50:	bb 1f       	adc	r27, r27
 a52:	a6 17       	cp	r26, r22
 a54:	b7 07       	cpc	r27, r23
 a56:	10 f0       	brcs	.+4      	; 0xa5c <__udivmodhi4_ep>
 a58:	a6 1b       	sub	r26, r22
 a5a:	b7 0b       	sbc	r27, r23

00000a5c <__udivmodhi4_ep>:
 a5c:	88 1f       	adc	r24, r24
 a5e:	99 1f       	adc	r25, r25
 a60:	5a 95       	dec	r21
 a62:	a9 f7       	brne	.-22     	; 0xa4e <__udivmodhi4_loop>
 a64:	80 95       	com	r24
 a66:	90 95       	com	r25
 a68:	bc 01       	movw	r22, r24
 a6a:	cd 01       	movw	r24, r26
 a6c:	08 95       	ret

00000a6e <_exit>:
 a6e:	f8 94       	cli

00000a70 <__stop_program>:
 a70:	ff cf       	rjmp	.-2      	; 0xa70 <__stop_program>
