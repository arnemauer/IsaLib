
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00000d0a  00000d9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000165  00800132  00800132  00000dd0  2**0
                  ALLOC
  3 .stab         00000e4c  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001f77  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000338  00000000  00000000  00001fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000303f  00000000  00000000  000022de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000101f  00000000  00000000  0000531d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000022b5  00000000  00000000  0000633c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000834  00000000  00000000  000085f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000bde  00000000  00000000  00008e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000215e  00000000  00000000  00009a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000310  00000000  00000000  0000bb64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	29 c4       	rjmp	.+2130   	; 0x858 <__vector_1>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__vector_7>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	6a c5       	rjmp	.+2772   	; 0xb1e <__vector_18>
  4a:	00 00       	nop
  4c:	9d c5       	rjmp	.+2874   	; 0xb88 <__vector_19>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e0       	ldi	r30, 0x0A	; 10
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 39       	cpi	r26, 0x97	; 151
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	68 d0       	rcall	.+208    	; 0x16c <main>
  9c:	34 c6       	rjmp	.+3176   	; 0xd06 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <I2C_init>:
  a0:	88 e4       	ldi	r24, 0x48	; 72
  a2:	80 93 b8 00 	sts	0x00B8, r24
  a6:	08 95       	ret

000000a8 <I2C_start>:
  a8:	ec eb       	ldi	r30, 0xBC	; 188
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	10 82       	st	Z, r1
  ae:	94 ea       	ldi	r25, 0xA4	; 164
  b0:	90 83       	st	Z, r25
  b2:	90 81       	ld	r25, Z
  b4:	99 23       	and	r25, r25
  b6:	ec f7       	brge	.-6      	; 0xb2 <I2C_start+0xa>
  b8:	90 91 b9 00 	lds	r25, 0x00B9
  bc:	98 7f       	andi	r25, 0xF8	; 248
  be:	98 30       	cpi	r25, 0x08	; 8
  c0:	a1 f4       	brne	.+40     	; 0xea <I2C_start+0x42>
  c2:	80 93 bb 00 	sts	0x00BB, r24
  c6:	84 e8       	ldi	r24, 0x84	; 132
  c8:	80 93 bc 00 	sts	0x00BC, r24
  cc:	ec eb       	ldi	r30, 0xBC	; 188
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	88 23       	and	r24, r24
  d4:	ec f7       	brge	.-6      	; 0xd0 <I2C_start+0x28>
  d6:	90 91 b9 00 	lds	r25, 0x00B9
  da:	98 7f       	andi	r25, 0xF8	; 248
  dc:	98 31       	cpi	r25, 0x18	; 24
  de:	39 f0       	breq	.+14     	; 0xee <I2C_start+0x46>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 34       	cpi	r25, 0x40	; 64
  e4:	29 f4       	brne	.+10     	; 0xf0 <I2C_start+0x48>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	08 95       	ret
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	08 95       	ret

000000f2 <I2C_write>:
  f2:	80 93 bb 00 	sts	0x00BB, r24
  f6:	84 e8       	ldi	r24, 0x84	; 132
  f8:	80 93 bc 00 	sts	0x00BC, r24
  fc:	ec eb       	ldi	r30, 0xBC	; 188
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 23       	and	r24, r24
 104:	ec f7       	brge	.-6      	; 0x100 <I2C_write+0xe>
 106:	90 91 b9 00 	lds	r25, 0x00B9
 10a:	98 7f       	andi	r25, 0xF8	; 248
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	98 32       	cpi	r25, 0x28	; 40
 110:	09 f4       	brne	.+2      	; 0x114 <I2C_write+0x22>
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	08 95       	ret

00000116 <I2C_stop>:
 116:	84 e9       	ldi	r24, 0x94	; 148
 118:	80 93 bc 00 	sts	0x00BC, r24
 11c:	08 95       	ret

0000011e <log_s>:
 11e:	93 c5       	rjmp	.+2854   	; 0xc46 <uart0_puts>
 120:	08 95       	ret

00000122 <__vector_7>:
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	af 93       	push	r26
 132:	bf 93       	push	r27
 134:	80 91 32 01 	lds	r24, 0x0132
 138:	90 91 33 01 	lds	r25, 0x0133
 13c:	a0 91 34 01 	lds	r26, 0x0134
 140:	b0 91 35 01 	lds	r27, 0x0135
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	a1 1d       	adc	r26, r1
 148:	b1 1d       	adc	r27, r1
 14a:	80 93 32 01 	sts	0x0132, r24
 14e:	90 93 33 01 	sts	0x0133, r25
 152:	a0 93 34 01 	sts	0x0134, r26
 156:	b0 93 35 01 	sts	0x0135, r27
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <main>:
 16c:	ea e7       	ldi	r30, 0x7A	; 122
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	8f 77       	andi	r24, 0x7F	; 127
 174:	80 83       	st	Z, r24
 176:	78 94       	sei
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	8b e7       	ldi	r24, 0x7B	; 123
 17c:	92 e9       	ldi	r25, 0x92	; 146
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x12>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x1c>
 188:	00 00       	nop
 18a:	80 e1       	ldi	r24, 0x10	; 16
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	28 d5       	rcall	.+2640   	; 0xbe0 <uart0_init>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	58 d5       	rcall	.+2736   	; 0xc46 <uart0_puts>
 196:	ef ef       	ldi	r30, 0xFF	; 255
 198:	f3 ed       	ldi	r31, 0xD3	; 211
 19a:	20 e3       	ldi	r18, 0x30	; 48
 19c:	e1 50       	subi	r30, 0x01	; 1
 19e:	f0 40       	sbci	r31, 0x00	; 0
 1a0:	20 40       	sbci	r18, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x30>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0x3a>
 1a6:	00 00       	nop
 1a8:	7b df       	rcall	.-266    	; 0xa0 <I2C_init>
 1aa:	79 d0       	rcall	.+242    	; 0x29e <pca9635_init>
 1ac:	84 e0       	ldi	r24, 0x04	; 4
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	b6 df       	rcall	.-148    	; 0x11e <log_s>
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	93 ed       	ldi	r25, 0xD3	; 211
 1b6:	e0 e3       	ldi	r30, 0x30	; 48
 1b8:	81 50       	subi	r24, 0x01	; 1
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e0 40       	sbci	r30, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x4c>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x56>
 1c2:	00 00       	nop
 1c4:	4e e0       	ldi	r20, 0x0E	; 14
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	c1 d2       	rcall	.+1410   	; 0x74e <_Z15rf12_initializehhh>
 1cc:	8b e0       	ldi	r24, 0x0B	; 11
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	a6 df       	rcall	.-180    	; 0x11e <log_s>
 1d2:	ff ef       	ldi	r31, 0xFF	; 255
 1d4:	23 ed       	ldi	r18, 0xD3	; 211
 1d6:	80 e3       	ldi	r24, 0x30	; 48
 1d8:	f1 50       	subi	r31, 0x01	; 1
 1da:	20 40       	sbci	r18, 0x00	; 0
 1dc:	80 40       	sbci	r24, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <main+0x6c>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x76>
 1e2:	00 00       	nop
 1e4:	ce e3       	ldi	r28, 0x3E	; 62
 1e6:	d1 e0       	ldi	r29, 0x01	; 1
 1e8:	0d e3       	ldi	r16, 0x3D	; 61
 1ea:	11 e0       	ldi	r17, 0x01	; 1
 1ec:	68 94       	set
 1ee:	ee 24       	eor	r14, r14
 1f0:	e7 f8       	bld	r14, 7
 1f2:	cf d0       	rcall	.+414    	; 0x392 <_Z13rf12_recvDonev>
 1f4:	88 23       	and	r24, r24
 1f6:	09 f4       	brne	.+2      	; 0x1fa <main+0x8e>
 1f8:	41 c0       	rjmp	.+130    	; 0x27c <main+0x110>
 1fa:	80 91 83 01 	lds	r24, 0x0183
 1fe:	90 91 84 01 	lds	r25, 0x0184
 202:	89 2b       	or	r24, r25
 204:	59 f1       	breq	.+86     	; 0x25c <main+0xf0>
 206:	3a c0       	rjmp	.+116    	; 0x27c <main+0x110>
 208:	f1 2c       	mov	r15, r1
 20a:	ef 2d       	mov	r30, r15
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	e1 5c       	subi	r30, 0xC1	; 193
 210:	fe 4f       	sbci	r31, 0xFE	; 254
 212:	80 81       	ld	r24, Z
 214:	fe d4       	rcall	.+2556   	; 0xc12 <uart0_putc>
 216:	f3 94       	inc	r15
 218:	88 81       	ld	r24, Y
 21a:	f8 16       	cp	r15, r24
 21c:	b0 f3       	brcs	.-20     	; 0x20a <main+0x9e>
 21e:	f8 01       	movw	r30, r16
 220:	80 81       	ld	r24, Z
 222:	85 ff       	sbrs	r24, 5
 224:	e6 cf       	rjmp	.-52     	; 0x1f2 <main+0x86>
 226:	80 81       	ld	r24, Z
 228:	88 23       	and	r24, r24
 22a:	9c f5       	brge	.+102    	; 0x292 <main+0x126>
 22c:	e2 cf       	rjmp	.-60     	; 0x1f2 <main+0x86>
 22e:	f8 01       	movw	r30, r16
 230:	80 81       	ld	r24, Z
 232:	8f 71       	andi	r24, 0x1F	; 31
 234:	80 6c       	ori	r24, 0xC0	; 192
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	00 d2       	rcall	.+1024   	; 0x63e <_Z14rf12_sendStarthPKvh>
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0c d2       	rcall	.+1048   	; 0x65a <_Z13rf12_sendWaith>
 242:	8c e1       	ldi	r24, 0x1C	; 28
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	ff d4       	rcall	.+2558   	; 0xc46 <uart0_puts>
 248:	ff ef       	ldi	r31, 0xFF	; 255
 24a:	29 ef       	ldi	r18, 0xF9	; 249
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	f1 50       	subi	r31, 0x01	; 1
 250:	20 40       	sbci	r18, 0x00	; 0
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	e1 f7       	brne	.-8      	; 0x24e <main+0xe2>
 256:	00 c0       	rjmp	.+0      	; 0x258 <main+0xec>
 258:	00 00       	nop
 25a:	cb cf       	rjmp	.-106    	; 0x1f2 <main+0x86>
 25c:	83 e2       	ldi	r24, 0x23	; 35
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	f2 d4       	rcall	.+2532   	; 0xc46 <uart0_puts>
 262:	9f ef       	ldi	r25, 0xFF	; 255
 264:	e9 ef       	ldi	r30, 0xF9	; 249
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	91 50       	subi	r25, 0x01	; 1
 26a:	e0 40       	sbci	r30, 0x00	; 0
 26c:	f0 40       	sbci	r31, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0xfc>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x106>
 272:	00 00       	nop
 274:	88 81       	ld	r24, Y
 276:	81 11       	cpse	r24, r1
 278:	c7 cf       	rjmp	.-114    	; 0x208 <main+0x9c>
 27a:	d1 cf       	rjmp	.-94     	; 0x21e <main+0xb2>
 27c:	83 b7       	in	r24, 0x33	; 51
 27e:	81 7f       	andi	r24, 0xF1	; 241
 280:	83 bf       	out	0x33, r24	; 51
 282:	83 b7       	in	r24, 0x33	; 51
 284:	81 60       	ori	r24, 0x01	; 1
 286:	83 bf       	out	0x33, r24	; 51
 288:	88 95       	sleep
 28a:	83 b7       	in	r24, 0x33	; 51
 28c:	8e 7f       	andi	r24, 0xFE	; 254
 28e:	83 bf       	out	0x33, r24	; 51
 290:	b0 cf       	rjmp	.-160    	; 0x1f2 <main+0x86>
 292:	f8 01       	movw	r30, r16
 294:	80 81       	ld	r24, Z
 296:	86 ff       	sbrs	r24, 6
 298:	ca cf       	rjmp	.-108    	; 0x22e <main+0xc2>
 29a:	8e 2d       	mov	r24, r14
 29c:	cc cf       	rjmp	.-104    	; 0x236 <main+0xca>

0000029e <pca9635_init>:
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	03 df       	rcall	.-506    	; 0xa8 <I2C_start>
 2a2:	80 e8       	ldi	r24, 0x80	; 128
 2a4:	26 df       	rcall	.-436    	; 0xf2 <I2C_write>
 2a6:	80 e8       	ldi	r24, 0x80	; 128
 2a8:	24 df       	rcall	.-440    	; 0xf2 <I2C_write>
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	22 df       	rcall	.-444    	; 0xf2 <I2C_write>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	20 df       	rcall	.-448    	; 0xf2 <I2C_write>
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	1e df       	rcall	.-452    	; 0xf2 <I2C_write>
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	1c df       	rcall	.-456    	; 0xf2 <I2C_write>
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	1a df       	rcall	.-460    	; 0xf2 <I2C_write>
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	18 df       	rcall	.-464    	; 0xf2 <I2C_write>
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	16 df       	rcall	.-468    	; 0xf2 <I2C_write>
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	14 df       	rcall	.-472    	; 0xf2 <I2C_write>
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	12 df       	rcall	.-476    	; 0xf2 <I2C_write>
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	10 df       	rcall	.-480    	; 0xf2 <I2C_write>
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e df       	rcall	.-484    	; 0xf2 <I2C_write>
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0c df       	rcall	.-488    	; 0xf2 <I2C_write>
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	0a df       	rcall	.-492    	; 0xf2 <I2C_write>
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	08 df       	rcall	.-496    	; 0xf2 <I2C_write>
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	06 df       	rcall	.-500    	; 0xf2 <I2C_write>
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	04 df       	rcall	.-504    	; 0xf2 <I2C_write>
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	02 df       	rcall	.-508    	; 0xf2 <I2C_write>
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	00 df       	rcall	.-512    	; 0xf2 <I2C_write>
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	fe de       	rcall	.-516    	; 0xf2 <I2C_write>
 2f6:	8a ea       	ldi	r24, 0xAA	; 170
 2f8:	fc de       	rcall	.-520    	; 0xf2 <I2C_write>
 2fa:	8a ea       	ldi	r24, 0xAA	; 170
 2fc:	fa de       	rcall	.-524    	; 0xf2 <I2C_write>
 2fe:	8a ea       	ldi	r24, 0xAA	; 170
 300:	f8 de       	rcall	.-528    	; 0xf2 <I2C_write>
 302:	8a ea       	ldi	r24, 0xAA	; 170
 304:	f6 de       	rcall	.-532    	; 0xf2 <I2C_write>
 306:	07 cf       	rjmp	.-498    	; 0x116 <I2C_stop>

00000308 <_ZL15blockInterruptsv>:
 308:	e8 98       	cbi	0x1d, 0	; 29
 30a:	08 95       	ret

0000030c <_ZL15allowInterruptsv>:
 30c:	e8 9a       	sbi	0x1d, 0	; 29
 30e:	08 95       	ret

00000310 <_ZL9rf12_byteh>:
 310:	8e bd       	out	0x2e, r24	; 46
 312:	0d b4       	in	r0, 0x2d	; 45
 314:	07 fe       	sbrs	r0, 7
 316:	fd cf       	rjmp	.-6      	; 0x312 <_ZL9rf12_byteh+0x2>
 318:	8e b5       	in	r24, 0x2e	; 46
 31a:	08 95       	ret

0000031c <_ZL9rf12_xferj>:
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	18 2f       	mov	r17, r24
 324:	c9 2f       	mov	r28, r25
 326:	f0 df       	rcall	.-32     	; 0x308 <_ZL15blockInterruptsv>
 328:	2a 98       	cbi	0x05, 2	; 5
 32a:	8c 2f       	mov	r24, r28
 32c:	f1 df       	rcall	.-30     	; 0x310 <_ZL9rf12_byteh>
 32e:	d8 2f       	mov	r29, r24
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	c8 2f       	mov	r28, r24
 334:	81 2f       	mov	r24, r17
 336:	ec df       	rcall	.-40     	; 0x310 <_ZL9rf12_byteh>
 338:	c8 2b       	or	r28, r24
 33a:	2a 9a       	sbi	0x05, 2	; 5
 33c:	e7 df       	rcall	.-50     	; 0x30c <_ZL15allowInterruptsv>
 33e:	8c 2f       	mov	r24, r28
 340:	9d 2f       	mov	r25, r29
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	08 95       	ret

0000034a <_ZL9rf12_idlev>:
 34a:	80 91 8a 01 	lds	r24, 0x018A
 34e:	90 91 8b 01 	lds	r25, 0x018B
 352:	8f 70       	andi	r24, 0x0F	; 15
 354:	90 93 8b 01 	sts	0x018B, r25
 358:	80 93 8a 01 	sts	0x018A, r24
 35c:	80 91 8a 01 	lds	r24, 0x018A
 360:	90 91 8b 01 	lds	r25, 0x018B
 364:	88 60       	ori	r24, 0x08	; 8
 366:	90 93 8b 01 	sts	0x018B, r25
 36a:	80 93 8a 01 	sts	0x018A, r24
 36e:	80 91 8a 01 	lds	r24, 0x018A
 372:	90 91 8b 01 	lds	r25, 0x018B
 376:	d2 cf       	rjmp	.-92     	; 0x31c <_ZL9rf12_xferj>

00000378 <_Z12rf12_spiInitv>:
 378:	84 b1       	in	r24, 0x04	; 4
 37a:	8c 62       	ori	r24, 0x2C	; 44
 37c:	84 b9       	out	0x04, r24	; 4
 37e:	2a 9a       	sbi	0x05, 2	; 5
 380:	24 98       	cbi	0x04, 4	; 4
 382:	80 e5       	ldi	r24, 0x50	; 80
 384:	8c bd       	out	0x2c, r24	; 44
 386:	8d b5       	in	r24, 0x2d	; 45
 388:	81 60       	ori	r24, 0x01	; 1
 38a:	8d bd       	out	0x2d, r24	; 45
 38c:	52 98       	cbi	0x0a, 2	; 10
 38e:	5a 9a       	sbi	0x0b, 2	; 11
 390:	08 95       	ret

00000392 <_Z13rf12_recvDonev>:
 392:	80 91 8c 01 	lds	r24, 0x018C
 396:	87 30       	cpi	r24, 0x07	; 7
 398:	09 f0       	breq	.+2      	; 0x39c <_Z13rf12_recvDonev+0xa>
 39a:	51 c0       	rjmp	.+162    	; 0x43e <_Z13rf12_recvDonev+0xac>
 39c:	80 91 8f 01 	lds	r24, 0x018F
 3a0:	88 23       	and	r24, r24
 3a2:	a1 f0       	breq	.+40     	; 0x3cc <_Z13rf12_recvDonev+0x3a>
 3a4:	90 91 8d 01 	lds	r25, 0x018D
 3a8:	98 17       	cp	r25, r24
 3aa:	28 f4       	brcc	.+10     	; 0x3b6 <_Z13rf12_recvDonev+0x24>
 3ac:	80 91 8d 01 	lds	r24, 0x018D
 3b0:	87 34       	cpi	r24, 0x47	; 71
 3b2:	08 f4       	brcc	.+2      	; 0x3b6 <_Z13rf12_recvDonev+0x24>
 3b4:	44 c0       	rjmp	.+136    	; 0x43e <_Z13rf12_recvDonev+0xac>
 3b6:	84 e0       	ldi	r24, 0x04	; 4
	rf12_idle();
	else {
		rfmstate &= ~B11111000; // make sure everything is switched off (except bod, wkup, clk)
		rf12_xfer(rfmstate);
	}
	rxstate = TXIDLE;
 3b8:	80 93 8c 01 	sts	0x018C, r24
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	90 93 84 01 	sts	0x0184, r25
 3c4:	80 93 83 01 	sts	0x0183, r24
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	08 95       	ret
 3cc:	20 91 8d 01 	lds	r18, 0x018D
 3d0:	80 91 3e 01 	lds	r24, 0x013E
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	05 96       	adiw	r24, 0x05	; 5
 3da:	28 17       	cp	r18, r24
 3dc:	39 07       	cpc	r19, r25
 3de:	24 f4       	brge	.+8      	; 0x3e8 <_Z13rf12_recvDonev+0x56>
 3e0:	80 91 8d 01 	lds	r24, 0x018D
 3e4:	87 34       	cpi	r24, 0x47	; 71
 3e6:	58 f1       	brcs	.+86     	; 0x43e <_Z13rf12_recvDonev+0xac>
 3e8:	84 e0       	ldi	r24, 0x04	; 4
 3ea:	80 93 8c 01 	sts	0x018C, r24
 3ee:	80 91 3e 01 	lds	r24, 0x013E
 3f2:	83 34       	cpi	r24, 0x43	; 67
 3f4:	30 f0       	brcs	.+12     	; 0x402 <_Z13rf12_recvDonev+0x70>
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	90 93 84 01 	sts	0x0184, r25
 3fe:	80 93 83 01 	sts	0x0183, r24
 402:	80 91 3d 01 	lds	r24, 0x013D
 406:	86 ff       	sbrs	r24, 6
 408:	0b c0       	rjmp	.+22     	; 0x420 <_Z13rf12_recvDonev+0x8e>
 40a:	80 91 90 01 	lds	r24, 0x0190
 40e:	98 2f       	mov	r25, r24
 410:	9f 71       	andi	r25, 0x1F	; 31
 412:	9f 31       	cpi	r25, 0x1F	; 31
 414:	29 f0       	breq	.+10     	; 0x420 <_Z13rf12_recvDonev+0x8e>
 416:	90 91 3d 01 	lds	r25, 0x013D
 41a:	89 27       	eor	r24, r25
 41c:	8f 71       	andi	r24, 0x1F	; 31
 41e:	79 f4       	brne	.+30     	; 0x43e <_Z13rf12_recvDonev+0xac>
 420:	80 91 83 01 	lds	r24, 0x0183
 424:	90 91 84 01 	lds	r25, 0x0184
 428:	89 2b       	or	r24, r25
 42a:	09 f0       	breq	.+2      	; 0x42e <_Z13rf12_recvDonev+0x9c>
 42c:	55 c0       	rjmp	.+170    	; 0x4d8 <_Z13rf12_recvDonev+0x146>
 42e:	e0 91 36 01 	lds	r30, 0x0136
 432:	f0 91 37 01 	lds	r31, 0x0137
 436:	30 97       	sbiw	r30, 0x00	; 0
 438:	09 f0       	breq	.+2      	; 0x43c <_Z13rf12_recvDonev+0xaa>
 43a:	4a c0       	rjmp	.+148    	; 0x4d0 <_Z13rf12_recvDonev+0x13e>
 43c:	4d c0       	rjmp	.+154    	; 0x4d8 <_Z13rf12_recvDonev+0x146>
 43e:	80 91 8c 01 	lds	r24, 0x018C
 442:	84 30       	cpi	r24, 0x04	; 4
 444:	09 f0       	breq	.+2      	; 0x448 <_Z13rf12_recvDonev+0xb6>
 446:	42 c0       	rjmp	.+132    	; 0x4cc <_Z13rf12_recvDonev+0x13a>
 448:	10 92 3e 01 	sts	0x013E, r1
 44c:	10 92 8d 01 	sts	0x018D, r1
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	9f ef       	ldi	r25, 0xFF	; 255
 454:	90 93 84 01 	sts	0x0184, r25
 458:	80 93 83 01 	sts	0x0183, r24
 45c:	20 91 8e 01 	lds	r18, 0x018E
 460:	22 23       	and	r18, r18
 462:	d9 f0       	breq	.+54     	; 0x49a <_Z13rf12_recvDonev+0x108>
 464:	82 27       	eor	r24, r18
 466:	28 2f       	mov	r18, r24
 468:	22 95       	swap	r18
 46a:	28 27       	eor	r18, r24
 46c:	02 2e       	mov	r0, r18
 46e:	26 95       	lsr	r18
 470:	26 95       	lsr	r18
 472:	20 25       	eor	r18, r0
 474:	02 2e       	mov	r0, r18
 476:	26 95       	lsr	r18
 478:	20 25       	eor	r18, r0
 47a:	27 70       	andi	r18, 0x07	; 7
 47c:	08 2e       	mov	r0, r24
 47e:	89 2f       	mov	r24, r25
 480:	26 95       	lsr	r18
 482:	07 94       	ror	r0
 484:	27 95       	ror	r18
 486:	90 2d       	mov	r25, r0
 488:	82 27       	eor	r24, r18
 48a:	06 94       	lsr	r0
 48c:	27 95       	ror	r18
 48e:	90 25       	eor	r25, r0
 490:	82 27       	eor	r24, r18
 492:	90 93 84 01 	sts	0x0184, r25
 496:	80 93 83 01 	sts	0x0183, r24
 49a:	87 e0       	ldi	r24, 0x07	; 7
 49c:	80 93 8c 01 	sts	0x018C, r24
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	80 93 86 01 	sts	0x0186, r24
 4a6:	83 ea       	ldi	r24, 0xA3	; 163
 4a8:	94 e9       	ldi	r25, 0x94	; 148
 4aa:	38 df       	rcall	.-400    	; 0x31c <_ZL9rf12_xferj>
 4ac:	80 91 8a 01 	lds	r24, 0x018A
 4b0:	90 91 8b 01 	lds	r25, 0x018B
 4b4:	88 6d       	ori	r24, 0xD8	; 216
 4b6:	90 93 8b 01 	sts	0x018B, r25
 4ba:	80 93 8a 01 	sts	0x018A, r24
 4be:	80 91 8a 01 	lds	r24, 0x018A
 4c2:	90 91 8b 01 	lds	r25, 0x018B
 4c6:	2a df       	rcall	.-428    	; 0x31c <_ZL9rf12_xferj>
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	08 95       	ret
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	08 95       	ret
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	09 95       	icall
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	08 95       	ret
 4d8:	8f ef       	ldi	r24, 0xFF	; 255
 4da:	9f ef       	ldi	r25, 0xFF	; 255
 4dc:	dc 01       	movw	r26, r24
 4de:	80 93 38 01 	sts	0x0138, r24
 4e2:	90 93 39 01 	sts	0x0139, r25
 4e6:	a0 93 3a 01 	sts	0x013A, r26
 4ea:	b0 93 3b 01 	sts	0x013B, r27
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	08 95       	ret

000004f2 <_Z15rf12_setBitrateh>:
 4f2:	cf 92       	push	r12
 4f4:	df 92       	push	r13
 4f6:	ef 92       	push	r14
 4f8:	ff 92       	push	r15
 4fa:	0f 93       	push	r16
 4fc:	1f 93       	push	r17
 4fe:	cf 93       	push	r28
 500:	c8 2f       	mov	r28, r24
 502:	08 2f       	mov	r16, r24
 504:	10 e0       	ldi	r17, 0x00	; 0
 506:	c8 01       	movw	r24, r16
 508:	96 6c       	ori	r25, 0xC6	; 198
 50a:	08 df       	rcall	.-496    	; 0x31c <_ZL9rf12_xferj>
 50c:	cf 77       	andi	r28, 0x7F	; 127
 50e:	2c 2f       	mov	r18, r28
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	2f 5f       	subi	r18, 0xFF	; 255
 514:	3f 4f       	sbci	r19, 0xFF	; 255
 516:	44 27       	eor	r20, r20
 518:	37 fd       	sbrc	r19, 7
 51a:	40 95       	com	r20
 51c:	54 2f       	mov	r21, r20
 51e:	6b ef       	ldi	r22, 0xFB	; 251
 520:	72 e4       	ldi	r23, 0x42	; 66
 522:	85 e0       	ldi	r24, 0x05	; 5
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	b0 d3       	rcall	.+1888   	; 0xc88 <__udivmodsi4>
 528:	69 01       	movw	r12, r18
 52a:	7a 01       	movw	r14, r20
 52c:	c8 01       	movw	r24, r16
 52e:	88 0f       	add	r24, r24
 530:	89 2f       	mov	r24, r25
 532:	88 1f       	adc	r24, r24
 534:	99 0b       	sbc	r25, r25
 536:	8c 01       	movw	r16, r24
 538:	00 0f       	add	r16, r16
 53a:	11 1f       	adc	r17, r17
 53c:	00 0f       	add	r16, r16
 53e:	11 1f       	adc	r17, r17
 540:	00 0f       	add	r16, r16
 542:	11 1f       	adc	r17, r17
 544:	08 1b       	sub	r16, r24
 546:	19 0b       	sbc	r17, r25
 548:	0f 5f       	subi	r16, 0xFF	; 255
 54a:	1f 4f       	sbci	r17, 0xFF	; 255
 54c:	98 01       	movw	r18, r16
 54e:	44 27       	eor	r20, r20
 550:	37 fd       	sbrc	r19, 7
 552:	40 95       	com	r20
 554:	54 2f       	mov	r21, r20
 556:	c7 01       	movw	r24, r14
 558:	b6 01       	movw	r22, r12
 55a:	96 d3       	rcall	.+1836   	; 0xc88 <__udivmodsi4>
 55c:	da 01       	movw	r26, r20
 55e:	c9 01       	movw	r24, r18
 560:	68 94       	set
 562:	12 f8       	bld	r1, 2
 564:	b6 95       	lsr	r27
 566:	a7 95       	ror	r26
 568:	97 95       	ror	r25
 56a:	87 95       	ror	r24
 56c:	16 94       	lsr	r1
 56e:	d1 f7       	brne	.-12     	; 0x564 <_Z15rf12_setBitrateh+0x72>
 570:	bc 01       	movw	r22, r24
 572:	cd 01       	movw	r24, r26
 574:	6d 57       	subi	r22, 0x7D	; 125
 576:	7c 4f       	sbci	r23, 0xFC	; 252
 578:	8f 4f       	sbci	r24, 0xFF	; 255
 57a:	9f 4f       	sbci	r25, 0xFF	; 255
 57c:	24 e8       	ldi	r18, 0x84	; 132
 57e:	33 e0       	ldi	r19, 0x03	; 3
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	81 d3       	rcall	.+1794   	; 0xc88 <__udivmodsi4>
 586:	20 93 85 01 	sts	0x0185, r18
 58a:	cf 91       	pop	r28
 58c:	1f 91       	pop	r17
 58e:	0f 91       	pop	r16
 590:	ff 90       	pop	r15
 592:	ef 90       	pop	r14
 594:	df 90       	pop	r13
 596:	cf 90       	pop	r12
 598:	08 95       	ret

0000059a <_Z19rf12_setFixedLengthh>:
 59a:	81 11       	cpse	r24, r1
 59c:	03 c0       	rjmp	.+6      	; 0x5a4 <_Z19rf12_setFixedLengthh+0xa>
 59e:	10 92 8f 01 	sts	0x018F, r1
 5a2:	08 95       	ret
 5a4:	8f 5f       	subi	r24, 0xFF	; 255
 5a6:	80 93 8f 01 	sts	0x018F, r24
 5aa:	08 95       	ret

000005ac <_Z14rf12_sendStarth>:
 5ac:	86 fd       	sbrc	r24, 6
 5ae:	05 c0       	rjmp	.+10     	; 0x5ba <_Z14rf12_sendStarth+0xe>
 5b0:	80 7e       	andi	r24, 0xE0	; 224
 5b2:	90 91 90 01 	lds	r25, 0x0190
 5b6:	9f 71       	andi	r25, 0x1F	; 31
 5b8:	89 0f       	add	r24, r25
 5ba:	80 93 3d 01 	sts	0x013D, r24
 5be:	e0 91 36 01 	lds	r30, 0x0136
 5c2:	f0 91 37 01 	lds	r31, 0x0137
 5c6:	30 97       	sbiw	r30, 0x00	; 0
 5c8:	11 f0       	breq	.+4      	; 0x5ce <_Z14rf12_sendStarth+0x22>
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	09 95       	icall
 5ce:	8f ef       	ldi	r24, 0xFF	; 255
 5d0:	9f ef       	ldi	r25, 0xFF	; 255
 5d2:	90 93 84 01 	sts	0x0184, r25
 5d6:	80 93 83 01 	sts	0x0183, r24
 5da:	80 91 83 01 	lds	r24, 0x0183
 5de:	90 91 84 01 	lds	r25, 0x0184
 5e2:	20 91 8e 01 	lds	r18, 0x018E
 5e6:	82 27       	eor	r24, r18
 5e8:	28 2f       	mov	r18, r24
 5ea:	22 95       	swap	r18
 5ec:	28 27       	eor	r18, r24
 5ee:	02 2e       	mov	r0, r18
 5f0:	26 95       	lsr	r18
 5f2:	26 95       	lsr	r18
 5f4:	20 25       	eor	r18, r0
 5f6:	02 2e       	mov	r0, r18
 5f8:	26 95       	lsr	r18
 5fa:	20 25       	eor	r18, r0
 5fc:	27 70       	andi	r18, 0x07	; 7
 5fe:	08 2e       	mov	r0, r24
 600:	89 2f       	mov	r24, r25
 602:	26 95       	lsr	r18
 604:	07 94       	ror	r0
 606:	27 95       	ror	r18
 608:	90 2d       	mov	r25, r0
 60a:	82 27       	eor	r24, r18
 60c:	06 94       	lsr	r0
 60e:	27 95       	ror	r18
 610:	90 25       	eor	r25, r0
 612:	82 27       	eor	r24, r18
 614:	90 93 84 01 	sts	0x0184, r25
 618:	80 93 83 01 	sts	0x0183, r24
 61c:	88 e0       	ldi	r24, 0x08	; 8
 61e:	80 93 8c 01 	sts	0x018C, r24
 622:	80 91 8a 01 	lds	r24, 0x018A
 626:	90 91 8b 01 	lds	r25, 0x018B
 62a:	88 63       	ori	r24, 0x38	; 56
 62c:	90 93 8b 01 	sts	0x018B, r25
 630:	80 93 8a 01 	sts	0x018A, r24
 634:	80 91 8a 01 	lds	r24, 0x018A
 638:	90 91 8b 01 	lds	r25, 0x018B
 63c:	6f ce       	rjmp	.-802    	; 0x31c <_ZL9rf12_xferj>

0000063e <_Z14rf12_sendStarthPKvh>:
 63e:	cf 93       	push	r28
 640:	c8 2f       	mov	r28, r24
 642:	40 93 3e 01 	sts	0x013E, r20
 646:	2f e3       	ldi	r18, 0x3F	; 63
 648:	31 e0       	ldi	r19, 0x01	; 1
 64a:	50 e0       	ldi	r21, 0x00	; 0
 64c:	82 2f       	mov	r24, r18
 64e:	93 2f       	mov	r25, r19
 650:	51 d3       	rcall	.+1698   	; 0xcf4 <memcpy>
 652:	8c 2f       	mov	r24, r28
 654:	ab df       	rcall	.-170    	; 0x5ac <_Z14rf12_sendStarth>
 656:	cf 91       	pop	r28
 658:	08 95       	ret

0000065a <_Z13rf12_sendWaith>:
 65a:	44 e0       	ldi	r20, 0x04	; 4
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	5c e0       	ldi	r21, 0x0C	; 12
 660:	16 c0       	rjmp	.+44     	; 0x68e <_Z13rf12_sendWaith+0x34>
 662:	88 23       	and	r24, r24
 664:	a1 f0       	breq	.+40     	; 0x68e <_Z13rf12_sendWaith+0x34>
 666:	93 b7       	in	r25, 0x33	; 51
 668:	91 7f       	andi	r25, 0xF1	; 241
 66a:	83 30       	cpi	r24, 0x03	; 3
 66c:	21 f0       	breq	.+8      	; 0x676 <_Z13rf12_sendWaith+0x1c>
 66e:	82 30       	cpi	r24, 0x02	; 2
 670:	21 f4       	brne	.+8      	; 0x67a <_Z13rf12_sendWaith+0x20>
 672:	25 2f       	mov	r18, r21
 674:	03 c0       	rjmp	.+6      	; 0x67c <_Z13rf12_sendWaith+0x22>
 676:	24 2f       	mov	r18, r20
 678:	01 c0       	rjmp	.+2      	; 0x67c <_Z13rf12_sendWaith+0x22>
 67a:	23 2f       	mov	r18, r19
 67c:	92 2b       	or	r25, r18
 67e:	93 bf       	out	0x33, r25	; 51
 680:	93 b7       	in	r25, 0x33	; 51
 682:	91 60       	ori	r25, 0x01	; 1
 684:	93 bf       	out	0x33, r25	; 51
 686:	88 95       	sleep
 688:	93 b7       	in	r25, 0x33	; 51
 68a:	9e 7f       	andi	r25, 0xFE	; 254
 68c:	93 bf       	out	0x33, r25	; 51
 68e:	90 91 8c 01 	lds	r25, 0x018C
 692:	94 30       	cpi	r25, 0x04	; 4
 694:	31 f7       	brne	.-52     	; 0x662 <_Z13rf12_sendWaith+0x8>
 696:	08 95       	ret

00000698 <_Z21rf12_interruptcontrolv>:
 698:	e8 9a       	sbi	0x1d, 0	; 29
 69a:	e9 e6       	ldi	r30, 0x69	; 105
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	8d 7f       	andi	r24, 0xFD	; 253
 6a2:	80 83       	st	Z, r24
 6a4:	08 95       	ret

000006a6 <_Z12rf12_restorehhh>:
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	d6 2f       	mov	r29, r22
 6ac:	c4 2f       	mov	r28, r20
 6ae:	80 93 90 01 	sts	0x0190, r24
 6b2:	40 93 8e 01 	sts	0x018E, r20
 6b6:	60 93 91 01 	sts	0x0191, r22
 6ba:	ee df       	rcall	.-36     	; 0x698 <_Z21rf12_interruptcontrolv>
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	6d df       	rcall	.-294    	; 0x59a <_Z19rf12_setFixedLengthh>
 6c0:	23 de       	rcall	.-954    	; 0x308 <_ZL15blockInterruptsv>
 6c2:	25 e0       	ldi	r18, 0x05	; 5
 6c4:	32 e8       	ldi	r19, 0x82	; 130
 6c6:	30 93 8b 01 	sts	0x018B, r19
 6ca:	20 93 8a 01 	sts	0x018A, r18
 6ce:	80 91 8a 01 	lds	r24, 0x018A
 6d2:	90 91 8b 01 	lds	r25, 0x018B
 6d6:	22 de       	rcall	.-956    	; 0x31c <_ZL9rf12_xferj>
 6d8:	20 e1       	ldi	r18, 0x10	; 16
 6da:	d2 9f       	mul	r29, r18
 6dc:	c0 01       	movw	r24, r0
 6de:	11 24       	eor	r1, r1
 6e0:	87 6c       	ori	r24, 0xC7	; 199
 6e2:	90 68       	ori	r25, 0x80	; 128
 6e4:	1b de       	rcall	.-970    	; 0x31c <_ZL9rf12_xferj>
 6e6:	80 e4       	ldi	r24, 0x40	; 64
 6e8:	96 ea       	ldi	r25, 0xA6	; 166
 6ea:	18 de       	rcall	.-976    	; 0x31c <_ZL9rf12_xferj>
 6ec:	86 e0       	ldi	r24, 0x06	; 6
 6ee:	01 df       	rcall	.-510    	; 0x4f2 <_Z15rf12_setBitrateh>
 6f0:	82 ea       	ldi	r24, 0xA2	; 162
 6f2:	94 e9       	ldi	r25, 0x94	; 148
 6f4:	13 de       	rcall	.-986    	; 0x31c <_ZL9rf12_xferj>
 6f6:	8c ea       	ldi	r24, 0xAC	; 172
 6f8:	92 ec       	ldi	r25, 0xC2	; 194
 6fa:	10 de       	rcall	.-992    	; 0x31c <_ZL9rf12_xferj>
 6fc:	cc 23       	and	r28, r28
 6fe:	41 f0       	breq	.+16     	; 0x710 <_Z12rf12_restorehhh+0x6a>
 700:	83 e8       	ldi	r24, 0x83	; 131
 702:	9a ec       	ldi	r25, 0xCA	; 202
 704:	0b de       	rcall	.-1002   	; 0x31c <_ZL9rf12_xferj>
 706:	8c 2f       	mov	r24, r28
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	9e 6c       	ori	r25, 0xCE	; 206
 70c:	07 de       	rcall	.-1010   	; 0x31c <_ZL9rf12_xferj>
 70e:	06 c0       	rjmp	.+12     	; 0x71c <_Z12rf12_restorehhh+0x76>
 710:	8b e8       	ldi	r24, 0x8B	; 139
 712:	9a ec       	ldi	r25, 0xCA	; 202
 714:	03 de       	rcall	.-1018   	; 0x31c <_ZL9rf12_xferj>
 716:	8d e2       	ldi	r24, 0x2D	; 45
 718:	9e ec       	ldi	r25, 0xCE	; 206
 71a:	00 de       	rcall	.-1024   	; 0x31c <_ZL9rf12_xferj>
 71c:	83 e8       	ldi	r24, 0x83	; 131
 71e:	94 ec       	ldi	r25, 0xC4	; 196
 720:	fd dd       	rcall	.-1030   	; 0x31c <_ZL9rf12_xferj>
 722:	80 e5       	ldi	r24, 0x50	; 80
 724:	98 e9       	ldi	r25, 0x98	; 152
 726:	fa dd       	rcall	.-1036   	; 0x31c <_ZL9rf12_xferj>
 728:	87 e7       	ldi	r24, 0x77	; 119
 72a:	9c ec       	ldi	r25, 0xCC	; 204
 72c:	f7 dd       	rcall	.-1042   	; 0x31c <_ZL9rf12_xferj>
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	90 ee       	ldi	r25, 0xE0	; 224
 732:	f4 dd       	rcall	.-1048   	; 0x31c <_ZL9rf12_xferj>
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	98 ec       	ldi	r25, 0xC8	; 200
 738:	f1 dd       	rcall	.-1054   	; 0x31c <_ZL9rf12_xferj>
 73a:	89 e4       	ldi	r24, 0x49	; 73
 73c:	90 ec       	ldi	r25, 0xC0	; 192
 73e:	ee dd       	rcall	.-1060   	; 0x31c <_ZL9rf12_xferj>
 740:	84 e0       	ldi	r24, 0x04	; 4
 742:	80 93 8c 01 	sts	0x018C, r24
 746:	e2 dd       	rcall	.-1084   	; 0x30c <_ZL15allowInterruptsv>
 748:	df 91       	pop	r29
 74a:	cf 91       	pop	r28
 74c:	08 95       	ret

0000074e <_Z15rf12_initializehhh>:
 74e:	1f 93       	push	r17
 750:	cf 93       	push	r28
 752:	df 93       	push	r29
 754:	c8 2f       	mov	r28, r24
 756:	d6 2f       	mov	r29, r22
 758:	14 2f       	mov	r17, r20
 75a:	80 93 90 01 	sts	0x0190, r24
 75e:	40 93 8e 01 	sts	0x018E, r20
 762:	60 93 91 01 	sts	0x0191, r22
 766:	08 de       	rcall	.-1008   	; 0x378 <_Z12rf12_spiInitv>
 768:	97 df       	rcall	.-210    	; 0x698 <_Z21rf12_interruptcontrolv>
 76a:	82 e8       	ldi	r24, 0x82	; 130
 76c:	9a ec       	ldi	r25, 0xCA	; 202
 76e:	d6 dd       	rcall	.-1108   	; 0x31c <_ZL9rf12_xferj>
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	9e ef       	ldi	r25, 0xFE	; 254
 774:	d3 dd       	rcall	.-1114   	; 0x31c <_ZL9rf12_xferj>
 776:	85 e0       	ldi	r24, 0x05	; 5
 778:	80 93 8c 01 	sts	0x018C, r24
 77c:	83 b7       	in	r24, 0x33	; 51
 77e:	81 7f       	andi	r24, 0xF1	; 241
 780:	83 bf       	out	0x33, r24	; 51
 782:	80 91 8c 01 	lds	r24, 0x018C
 786:	85 30       	cpi	r24, 0x05	; 5
 788:	59 f4       	brne	.+22     	; 0x7a0 <_Z15rf12_initializehhh+0x52>
 78a:	93 b7       	in	r25, 0x33	; 51
 78c:	91 60       	ori	r25, 0x01	; 1
 78e:	93 bf       	out	0x33, r25	; 51
 790:	88 95       	sleep
 792:	93 b7       	in	r25, 0x33	; 51
 794:	9e 7f       	andi	r25, 0xFE	; 254
 796:	93 bf       	out	0x33, r25	; 51
 798:	90 91 8c 01 	lds	r25, 0x018C
 79c:	95 30       	cpi	r25, 0x05	; 5
 79e:	a9 f3       	breq	.-22     	; 0x78a <_Z15rf12_initializehhh+0x3c>
 7a0:	41 2f       	mov	r20, r17
 7a2:	6d 2f       	mov	r22, r29
 7a4:	8c 2f       	mov	r24, r28
 7a6:	7f df       	rcall	.-258    	; 0x6a6 <_Z12rf12_restorehhh>
 7a8:	80 91 90 01 	lds	r24, 0x0190
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	1f 91       	pop	r17
 7b2:	08 95       	ret

000007b4 <_Z16rf12_setWatchdogm>:
/// interrupt in the RFM12 module. Use rf12_wakeup() to check if the wakeup-interrupt
/// fired. This allows very deep sleep states (timer off) while still being able to wakeup
/// because of the external interrupt. The RFM12b wakeup-timer only needs about 1.5µA.
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
 7b4:	cf 92       	push	r12
 7b6:	df 92       	push	r13
 7b8:	ef 92       	push	r14
 7ba:	ff 92       	push	r15
 7bc:	cf 93       	push	r28
 7be:	6b 01       	movw	r12, r22
 7c0:	7c 01       	movw	r14, r24
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
 7c2:	8f ef       	ldi	r24, 0xFF	; 255
 7c4:	c8 16       	cp	r12, r24
 7c6:	d1 04       	cpc	r13, r1
 7c8:	e1 04       	cpc	r14, r1
 7ca:	f1 04       	cpc	r15, r1
 7cc:	79 f0       	breq	.+30     	; 0x7ec <_Z16rf12_setWatchdogm+0x38>
 7ce:	70 f0       	brcs	.+28     	; 0x7ec <_Z16rf12_setWatchdogm+0x38>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
 7d0:	c0 e0       	ldi	r28, 0x00	; 0
	while (m > 255) {
		r  += 1;
 7d2:	cf 5f       	subi	r28, 0xFF	; 255
		m >>= 1;
 7d4:	f6 94       	lsr	r15
 7d6:	e7 94       	ror	r14
 7d8:	d7 94       	ror	r13
 7da:	c7 94       	ror	r12
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
 7dc:	8f ef       	ldi	r24, 0xFF	; 255
 7de:	c8 16       	cp	r12, r24
 7e0:	d1 04       	cpc	r13, r1
 7e2:	e1 04       	cpc	r14, r1
 7e4:	f1 04       	cpc	r15, r1
 7e6:	09 f0       	breq	.+2      	; 0x7ea <_Z16rf12_setWatchdogm+0x36>
 7e8:	a0 f7       	brcc	.-24     	; 0x7d2 <_Z16rf12_setWatchdogm+0x1e>
 7ea:	01 c0       	rjmp	.+2      	; 0x7ee <_Z16rf12_setWatchdogm+0x3a>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
 7ec:	c0 e0       	ldi	r28, 0x00	; 0
		m >>= 1;
	}
	
	// Disable old wakeup-timer if enabled
//	if (bitRead(rfmstate,1)) {
	if ((rfmstate>>1)&0x01){
 7ee:	80 91 8a 01 	lds	r24, 0x018A
 7f2:	90 91 8b 01 	lds	r25, 0x018B
 7f6:	81 ff       	sbrs	r24, 1
 7f8:	0e c0       	rjmp	.+28     	; 0x816 <_Z16rf12_setWatchdogm+0x62>
		//bitClear(rfmstate,1);
		rfmstate &= ~(1 << 1);
 7fa:	80 91 8a 01 	lds	r24, 0x018A
 7fe:	90 91 8b 01 	lds	r25, 0x018B
 802:	8d 7f       	andi	r24, 0xFD	; 253
 804:	90 93 8b 01 	sts	0x018B, r25
 808:	80 93 8a 01 	sts	0x018A, r24
		rf12_xfer(rfmstate);
 80c:	80 91 8a 01 	lds	r24, 0x018A
 810:	90 91 8b 01 	lds	r25, 0x018B
 814:	83 dd       	rcall	.-1274   	; 0x31c <_ZL9rf12_xferj>
	}
	
	// enable wakeup call if we have to
	if (m>0) {
 816:	c1 14       	cp	r12, r1
 818:	d1 04       	cpc	r13, r1
 81a:	e1 04       	cpc	r14, r1
 81c:	f1 04       	cpc	r15, r1
 81e:	b1 f0       	breq	.+44     	; 0x84c <_Z16rf12_setWatchdogm+0x98>
		// write time to wakeup-register
		rf12_xfer(RF_WAKEUP_TIMER | (r<<8) | m);
 820:	3c 2f       	mov	r19, r28
 822:	20 e0       	ldi	r18, 0x00	; 0
 824:	d7 01       	movw	r26, r14
 826:	c6 01       	movw	r24, r12
 828:	90 6e       	ori	r25, 0xE0	; 224
 82a:	82 2b       	or	r24, r18
 82c:	93 2b       	or	r25, r19
 82e:	76 dd       	rcall	.-1300   	; 0x31c <_ZL9rf12_xferj>
		// enable wakeup
		//bitSet(rfmstate,1);
		rfmstate |= (1 << 1);
 830:	80 91 8a 01 	lds	r24, 0x018A
 834:	90 91 8b 01 	lds	r25, 0x018B
 838:	82 60       	ori	r24, 0x02	; 2
 83a:	90 93 8b 01 	sts	0x018B, r25
 83e:	80 93 8a 01 	sts	0x018A, r24
		rf12_xfer(rfmstate);
 842:	80 91 8a 01 	lds	r24, 0x018A
 846:	90 91 8b 01 	lds	r25, 0x018B
 84a:	68 dd       	rcall	.-1328   	; 0x31c <_ZL9rf12_xferj>
	}
}
 84c:	cf 91       	pop	r28
 84e:	ff 90       	pop	r15
 850:	ef 90       	pop	r14
 852:	df 90       	pop	r13
 854:	cf 90       	pop	r12
 856:	08 95       	ret

00000858 <__vector_1>:
	while (!bitRead(PINB, RFM_IRQ - 8))
	rf12_interrupt();
}
#else
*/
ISR(INT0_vect) {
 858:	1f 92       	push	r1
 85a:	0f 92       	push	r0
 85c:	0f b6       	in	r0, 0x3f	; 63
 85e:	0f 92       	push	r0
 860:	11 24       	eor	r1, r1
 862:	1f 93       	push	r17
 864:	2f 93       	push	r18
 866:	3f 93       	push	r19
 868:	4f 93       	push	r20
 86a:	5f 93       	push	r21
 86c:	6f 93       	push	r22
 86e:	7f 93       	push	r23
 870:	8f 93       	push	r24
 872:	9f 93       	push	r25
 874:	af 93       	push	r26
 876:	bf 93       	push	r27
 878:	cf 93       	push	r28
 87a:	df 93       	push	r29
 87c:	ef 93       	push	r30
 87e:	ff 93       	push	r31
/// Requests RFM12 state from RF module and reads back a waiting data byte if there is
/// any.
/// One of two commands accessing SPI, so interrupts disabled in here
/// @param *data Pointer to  byte where to write the received data to (if any)
static uint16_t rf12_xferState (uint8_t *data) {
	blockInterrupts();
 880:	43 dd       	rcall	.-1402   	; 0x308 <_ZL15blockInterruptsv>

	// writing can take place at full speed, even 8 MHz works
	//bitClear(SS_PORT, cs_pin);
	PORT_RFM_CS &= ~(1<<BIT_RFM_CS); //clear CS
 882:	2a 98       	cbi	0x05, 2	; 5
	uint16_t res = rf12_byte(0x00) << 8;
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	44 dd       	rcall	.-1400   	; 0x310 <_ZL9rf12_byteh>
 888:	d8 2f       	mov	r29, r24
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	c8 2f       	mov	r28, r24
	res |= rf12_byte(0x00);
 88e:	40 dd       	rcall	.-1408   	; 0x310 <_ZL9rf12_byteh>
 890:	c8 2b       	or	r28, r24
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
 892:	dd 23       	and	r29, r29
 894:	2c f4       	brge	.+10     	; 0x8a0 <__vector_1+0x48>
 896:	80 91 8c 01 	lds	r24, 0x018C
 89a:	87 30       	cpi	r24, 0x07	; 7
 89c:	09 f4       	brne	.+2      	; 0x8a0 <__vector_1+0x48>
 89e:	0f c1       	rjmp	.+542    	; 0xabe <__stack+0x1bf>
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
		#endif
	}
	
	//bitSet(SS_PORT, cs_pin);
	PORT_RFM_CS |= (1 << BIT_RFM_CS); //  bitSet(SS_PORT, cs_pin);
 8a0:	2a 9a       	sbi	0x05, 2	; 5

	allowInterrupts();
 8a2:	34 dd       	rcall	.-1432   	; 0x30c <_ZL15allowInterruptsv>
/// @details
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uint8_t in;
	state = rf12_xferState(&in);
 8a4:	d0 93 89 01 	sts	0x0189, r29
 8a8:	c0 93 88 01 	sts	0x0188, r28

	// data received or byte needed for sending
	if (state & RF_FIFO_BIT) {
 8ac:	20 91 88 01 	lds	r18, 0x0188
 8b0:	30 91 89 01 	lds	r19, 0x0189
 8b4:	33 23       	and	r19, r19
 8b6:	0c f0       	brlt	.+2      	; 0x8ba <__vector_1+0x62>
 8b8:	e1 c0       	rjmp	.+450    	; 0xa7c <__stack+0x17d>
		
		if (rxstate == TXRECV) {  // we are receiving
 8ba:	80 91 8c 01 	lds	r24, 0x018C
 8be:	87 30       	cpi	r24, 0x07	; 7
 8c0:	09 f0       	breq	.+2      	; 0x8c4 <__vector_1+0x6c>
 8c2:	78 c0       	rjmp	.+240    	; 0x9b4 <__stack+0xb5>

			if (rxfill == 0 && group != 0)
 8c4:	80 91 8d 01 	lds	r24, 0x018D
 8c8:	81 11       	cpse	r24, r1
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <__vector_1+0x7c>
 8cc:	80 91 8e 01 	lds	r24, 0x018E
 8d0:	81 11       	cpse	r24, r1
 8d2:	ff c0       	rjmp	.+510    	; 0xad2 <__stack+0x1d3>
			rf12_buf[rxfill++] = group;

			rf12_buf[rxfill++] = in;
 8d4:	80 91 8d 01 	lds	r24, 0x018D
 8d8:	e8 2f       	mov	r30, r24
 8da:	f0 e0       	ldi	r31, 0x00	; 0
 8dc:	e4 5c       	subi	r30, 0xC4	; 196
 8de:	fe 4f       	sbci	r31, 0xFE	; 254
 8e0:	10 83       	st	Z, r17
 8e2:	8f 5f       	subi	r24, 0xFF	; 255
 8e4:	80 93 8d 01 	sts	0x018D, r24
			rf12_crc = _crc16_update(rf12_crc, in);
 8e8:	20 91 83 01 	lds	r18, 0x0183
 8ec:	30 91 84 01 	lds	r19, 0x0184
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
 8f0:	21 27       	eor	r18, r17
 8f2:	12 2f       	mov	r17, r18
 8f4:	12 95       	swap	r17
 8f6:	12 27       	eor	r17, r18
 8f8:	01 2e       	mov	r0, r17
 8fa:	16 95       	lsr	r17
 8fc:	16 95       	lsr	r17
 8fe:	10 25       	eor	r17, r0
 900:	01 2e       	mov	r0, r17
 902:	16 95       	lsr	r17
 904:	10 25       	eor	r17, r0
 906:	17 70       	andi	r17, 0x07	; 7
 908:	02 2e       	mov	r0, r18
 90a:	23 2f       	mov	r18, r19
 90c:	16 95       	lsr	r17
 90e:	07 94       	ror	r0
 910:	17 95       	ror	r17
 912:	30 2d       	mov	r19, r0
 914:	21 27       	eor	r18, r17
 916:	06 94       	lsr	r0
 918:	17 95       	ror	r17
 91a:	30 25       	eor	r19, r0
 91c:	21 27       	eor	r18, r17
 91e:	30 93 84 01 	sts	0x0184, r19
 922:	20 93 83 01 	sts	0x0183, r18

			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
 926:	e0 91 86 01 	lds	r30, 0x0186
 92a:	e3 30       	cpi	r30, 0x03	; 3
 92c:	18 f5       	brcc	.+70     	; 0x974 <__stack+0x75>
 92e:	80 91 8d 01 	lds	r24, 0x018D
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	02 97       	sbiw	r24, 0x02	; 2
 936:	60 91 85 01 	lds	r22, 0x0185
 93a:	70 e0       	ldi	r23, 0x00	; 0
 93c:	92 d1       	rcall	.+804    	; 0xc62 <__divmodhi4>
 93e:	89 2b       	or	r24, r25
 940:	09 f4       	brne	.+2      	; 0x944 <__stack+0x45>
 942:	d2 c0       	rjmp	.+420    	; 0xae8 <__stack+0x1e9>
 944:	17 c0       	rjmp	.+46     	; 0x974 <__stack+0x75>
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
 946:	f0 e0       	ldi	r31, 0x00	; 0
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
 948:	e1 5d       	subi	r30, 0xD1	; 209
 94a:	fe 4f       	sbci	r31, 0xFE	; 254
				: (drssi_dec_tree[drssi] >> 4);
 94c:	80 81       	ld	r24, Z
 94e:	8f 70       	andi	r24, 0x0F	; 15
 950:	06 c0       	rjmp	.+12     	; 0x95e <__stack+0x5f>
 952:	f0 e0       	ldi	r31, 0x00	; 0
 954:	e1 5d       	subi	r30, 0xD1	; 209
 956:	fe 4f       	sbci	r31, 0xFE	; 254
 958:	80 81       	ld	r24, Z
 95a:	82 95       	swap	r24
 95c:	8f 70       	andi	r24, 0x0F	; 15
 95e:	80 93 86 01 	sts	0x0186, r24
				if ( drssi < 3 ) {     // not yet final destination, set new threshold
 962:	83 30       	cpi	r24, 0x03	; 3
 964:	38 f4       	brcc	.+14     	; 0x974 <__stack+0x75>
					rf12_xfer(RF_RECV_CONTROL | drssi*2+1);
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	88 0f       	add	r24, r24
 96a:	99 1f       	adc	r25, r25
 96c:	01 96       	adiw	r24, 0x01	; 1
 96e:	80 6a       	ori	r24, 0xA0	; 160
 970:	94 69       	ori	r25, 0x94	; 148
 972:	d4 dc       	rcall	.-1624   	; 0x31c <_ZL9rf12_xferj>
				}
			}

			// check if we got all the bytes (or maximum packet length was reached)
			if (fixedLength) {
 974:	80 91 8f 01 	lds	r24, 0x018F
 978:	88 23       	and	r24, r24
 97a:	59 f0       	breq	.+22     	; 0x992 <__stack+0x93>
				if (rxfill >= fixedLength || rxfill >= RF_MAX) {
 97c:	90 91 8d 01 	lds	r25, 0x018D
 980:	98 17       	cp	r25, r24
 982:	28 f4       	brcc	.+10     	; 0x98e <__stack+0x8f>
 984:	80 91 8d 01 	lds	r24, 0x018D
 988:	87 34       	cpi	r24, 0x47	; 71
 98a:	08 f4       	brcc	.+2      	; 0x98e <__stack+0x8f>
 98c:	77 c0       	rjmp	.+238    	; 0xa7c <__stack+0x17d>
					rf12_idle();
 98e:	dd dc       	rcall	.-1606   	; 0x34a <_ZL9rf12_idlev>
 990:	75 c0       	rjmp	.+234    	; 0xa7c <__stack+0x17d>
				}
				} else if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX) {
 992:	20 91 8d 01 	lds	r18, 0x018D
 996:	80 91 3e 01 	lds	r24, 0x013E
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	05 96       	adiw	r24, 0x05	; 5
 9a0:	28 17       	cp	r18, r24
 9a2:	39 07       	cpc	r19, r25
 9a4:	2c f4       	brge	.+10     	; 0x9b0 <__stack+0xb1>
 9a6:	80 91 8d 01 	lds	r24, 0x018D
 9aa:	87 34       	cpi	r24, 0x47	; 71
 9ac:	08 f4       	brcc	.+2      	; 0x9b0 <__stack+0xb1>
 9ae:	66 c0       	rjmp	.+204    	; 0xa7c <__stack+0x17d>
				rf12_idle();
 9b0:	cc dc       	rcall	.-1640   	; 0x34a <_ZL9rf12_idlev>
 9b2:	64 c0       	rjmp	.+200    	; 0xa7c <__stack+0x17d>
			}
			} else {                  // we are sending
			uint8_t out;

			if (rxstate < 0) {
 9b4:	80 91 8c 01 	lds	r24, 0x018C
 9b8:	88 23       	and	r24, r24
 9ba:	0c f0       	brlt	.+2      	; 0x9be <__stack+0xbf>
 9bc:	2f c0       	rjmp	.+94     	; 0xa1c <__stack+0x11d>
				uint8_t pos = 3 + rf12_len + rxstate++;
 9be:	e0 91 3e 01 	lds	r30, 0x013E
 9c2:	80 91 8c 01 	lds	r24, 0x018C
 9c6:	98 2f       	mov	r25, r24
 9c8:	9f 5f       	subi	r25, 0xFF	; 255
 9ca:	90 93 8c 01 	sts	0x018C, r25
 9ce:	ed 5f       	subi	r30, 0xFD	; 253
 9d0:	8e 0f       	add	r24, r30
				out = rf12_buf[pos];
 9d2:	e8 2f       	mov	r30, r24
 9d4:	f0 e0       	ldi	r31, 0x00	; 0
 9d6:	e4 5c       	subi	r30, 0xC4	; 196
 9d8:	fe 4f       	sbci	r31, 0xFE	; 254
 9da:	80 81       	ld	r24, Z
				rf12_crc = _crc16_update(rf12_crc, out);
 9dc:	20 91 83 01 	lds	r18, 0x0183
 9e0:	30 91 84 01 	lds	r19, 0x0184
 9e4:	28 27       	eor	r18, r24
 9e6:	92 2f       	mov	r25, r18
 9e8:	92 95       	swap	r25
 9ea:	92 27       	eor	r25, r18
 9ec:	09 2e       	mov	r0, r25
 9ee:	96 95       	lsr	r25
 9f0:	96 95       	lsr	r25
 9f2:	90 25       	eor	r25, r0
 9f4:	09 2e       	mov	r0, r25
 9f6:	96 95       	lsr	r25
 9f8:	90 25       	eor	r25, r0
 9fa:	97 70       	andi	r25, 0x07	; 7
 9fc:	02 2e       	mov	r0, r18
 9fe:	23 2f       	mov	r18, r19
 a00:	96 95       	lsr	r25
 a02:	07 94       	ror	r0
 a04:	97 95       	ror	r25
 a06:	30 2d       	mov	r19, r0
 a08:	29 27       	eor	r18, r25
 a0a:	06 94       	lsr	r0
 a0c:	97 95       	ror	r25
 a0e:	30 25       	eor	r19, r0
 a10:	29 27       	eor	r18, r25
 a12:	30 93 84 01 	sts	0x0184, r19
 a16:	20 93 83 01 	sts	0x0183, r18
 a1a:	2d c0       	rjmp	.+90     	; 0xa76 <__stack+0x177>
			} else
			switch (rxstate++) {
 a1c:	80 91 8c 01 	lds	r24, 0x018C
 a20:	98 2f       	mov	r25, r24
 a22:	9f 5f       	subi	r25, 0xFF	; 255
 a24:	90 93 8c 01 	sts	0x018C, r25
 a28:	83 30       	cpi	r24, 0x03	; 3
 a2a:	09 f1       	breq	.+66     	; 0xa6e <__stack+0x16f>
 a2c:	2c f4       	brge	.+10     	; 0xa38 <__stack+0x139>
 a2e:	88 23       	and	r24, r24
 a30:	99 f0       	breq	.+38     	; 0xa58 <__stack+0x159>
 a32:	81 30       	cpi	r24, 0x01	; 1
 a34:	f9 f4       	brne	.+62     	; 0xa74 <__stack+0x175>
 a36:	15 c0       	rjmp	.+42     	; 0xa62 <__stack+0x163>
 a38:	8b 30       	cpi	r24, 0x0B	; 11
 a3a:	19 f0       	breq	.+6      	; 0xa42 <__stack+0x143>
 a3c:	8c 30       	cpi	r24, 0x0C	; 12
 a3e:	d1 f4       	brne	.+52     	; 0xa74 <__stack+0x175>
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <__stack+0x147>
				case TXSYN1: out = 0x2D; break;
 a42:	8d e2       	ldi	r24, 0x2D	; 45
 a44:	18 c0       	rjmp	.+48     	; 0xa76 <__stack+0x177>
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
 a46:	80 91 8e 01 	lds	r24, 0x018E
 a4a:	20 91 3e 01 	lds	r18, 0x013E
 a4e:	9e ef       	ldi	r25, 0xFE	; 254
 a50:	92 1b       	sub	r25, r18
 a52:	90 93 8c 01 	sts	0x018C, r25
 a56:	0f c0       	rjmp	.+30     	; 0xa76 <__stack+0x177>
				case TXCRC1: out = rf12_crc; break;
 a58:	80 91 83 01 	lds	r24, 0x0183
 a5c:	90 91 84 01 	lds	r25, 0x0184
 a60:	0a c0       	rjmp	.+20     	; 0xa76 <__stack+0x177>
				case TXCRC2: out = rf12_crc >> 8; break;
 a62:	80 91 83 01 	lds	r24, 0x0183
 a66:	90 91 84 01 	lds	r25, 0x0184
 a6a:	89 2f       	mov	r24, r25
 a6c:	04 c0       	rjmp	.+8      	; 0xa76 <__stack+0x177>
				case TXDONE: rf12_idle(); // fall through
 a6e:	6d dc       	rcall	.-1830   	; 0x34a <_ZL9rf12_idlev>
				default:     out = 0xAA;
 a70:	8a ea       	ldi	r24, 0xAA	; 170
 a72:	01 c0       	rjmp	.+2      	; 0xa76 <__stack+0x177>
 a74:	8a ea       	ldi	r24, 0xAA	; 170
			}

			rf12_xfer(RF_TXREG_WRITE | out);
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	98 6b       	ori	r25, 0xB8	; 184
 a7a:	50 dc       	rcall	.-1888   	; 0x31c <_ZL9rf12_xferj>
		}
	}
	
	// power-on reset
	if (state & RF_POR_BIT) {
 a7c:	80 91 88 01 	lds	r24, 0x0188
 a80:	90 91 89 01 	lds	r25, 0x0189
 a84:	96 ff       	sbrs	r25, 6
 a86:	03 c0       	rjmp	.+6      	; 0xa8e <__stack+0x18f>
		rxstate = POR_RECEIVED;
 a88:	86 e0       	ldi	r24, 0x06	; 6
 a8a:	80 93 8c 01 	sts	0x018C, r24
	}

	// got wakeup call
	if (state & RF_WDG_BIT) {
 a8e:	80 91 88 01 	lds	r24, 0x0188
 a92:	90 91 89 01 	lds	r25, 0x0189
 a96:	94 ff       	sbrs	r25, 4
 a98:	07 c0       	rjmp	.+14     	; 0xaa8 <__stack+0x1a9>
		rf12_setWatchdog(0);
 a9a:	60 e0       	ldi	r22, 0x00	; 0
 a9c:	70 e0       	ldi	r23, 0x00	; 0
 a9e:	cb 01       	movw	r24, r22
 aa0:	89 de       	rcall	.-750    	; 0x7b4 <_Z16rf12_setWatchdogm>
		rf12_gotwakeup = 1;
 aa2:	81 e0       	ldi	r24, 0x01	; 1
 aa4:	80 93 87 01 	sts	0x0187, r24
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
 aa8:	80 91 88 01 	lds	r24, 0x0188
 aac:	90 91 89 01 	lds	r25, 0x0189
 ab0:	95 ff       	sbrs	r25, 5
 ab2:	21 c0       	rjmp	.+66     	; 0xaf6 <__stack+0x1f7>
		rf12_idle();
 ab4:	4a dc       	rcall	.-1900   	; 0x34a <_ZL9rf12_idlev>
		rxstate = TXIDLE;
 ab6:	84 e0       	ldi	r24, 0x04	; 4
 ab8:	80 93 8c 01 	sts	0x018C, r24
 abc:	1c c0       	rjmp	.+56     	; 0xaf6 <__stack+0x1f7>
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
		// slow down to under 2.5 MHz
		#if F_CPU > 10000000
		//bitSet(SPCR, SPR0);
		SPCR |= (1 << SPR0); //  bitSet(SPCR, SPR0);
 abe:	8c b5       	in	r24, 0x2c	; 44
 ac0:	81 60       	ori	r24, 0x01	; 1
 ac2:	8c bd       	out	0x2c, r24	; 44
		#endif
		*data = rf12_byte(0x00);
 ac4:	80 e0       	ldi	r24, 0x00	; 0
 ac6:	24 dc       	rcall	.-1976   	; 0x310 <_ZL9rf12_byteh>
 ac8:	18 2f       	mov	r17, r24
		#if F_CPU > 10000000
		//bitClear(SPCR, SPR0);
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
 aca:	8c b5       	in	r24, 0x2c	; 44
 acc:	8e 7f       	andi	r24, 0xFE	; 254
 ace:	8c bd       	out	0x2c, r24	; 44
 ad0:	e7 ce       	rjmp	.-562    	; 0x8a0 <__vector_1+0x48>
	if (state & RF_FIFO_BIT) {
		
		if (rxstate == TXRECV) {  // we are receiving

			if (rxfill == 0 && group != 0)
			rf12_buf[rxfill++] = group;
 ad2:	90 91 8d 01 	lds	r25, 0x018D
 ad6:	e9 2f       	mov	r30, r25
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	e4 5c       	subi	r30, 0xC4	; 196
 adc:	fe 4f       	sbci	r31, 0xFE	; 254
 ade:	80 83       	st	Z, r24
 ae0:	9f 5f       	subi	r25, 0xFF	; 255
 ae2:	90 93 8d 01 	sts	0x018D, r25
 ae6:	f6 ce       	rjmp	.-532    	; 0x8d4 <__vector_1+0x7c>
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
 ae8:	80 91 88 01 	lds	r24, 0x0188
 aec:	90 91 89 01 	lds	r25, 0x0189
 af0:	90 fd       	sbrc	r25, 0
 af2:	29 cf       	rjmp	.-430    	; 0x946 <__stack+0x47>
 af4:	2e cf       	rjmp	.-420    	; 0x952 <__stack+0x53>
#else
*/
ISR(INT0_vect) {
	//uart0_puts("I");
	rf12_interrupt();
}
 af6:	ff 91       	pop	r31
 af8:	ef 91       	pop	r30
 afa:	df 91       	pop	r29
 afc:	cf 91       	pop	r28
 afe:	bf 91       	pop	r27
 b00:	af 91       	pop	r26
 b02:	9f 91       	pop	r25
 b04:	8f 91       	pop	r24
 b06:	7f 91       	pop	r23
 b08:	6f 91       	pop	r22
 b0a:	5f 91       	pop	r21
 b0c:	4f 91       	pop	r20
 b0e:	3f 91       	pop	r19
 b10:	2f 91       	pop	r18
 b12:	1f 91       	pop	r17
 b14:	0f 90       	pop	r0
 b16:	0f be       	out	0x3f, r0	; 63
 b18:	0f 90       	pop	r0
 b1a:	1f 90       	pop	r1
 b1c:	18 95       	reti

00000b1e <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
 b1e:	1f 92       	push	r1
 b20:	0f 92       	push	r0
 b22:	0f b6       	in	r0, 0x3f	; 63
 b24:	0f 92       	push	r0
 b26:	11 24       	eor	r1, r1
 b28:	2f 93       	push	r18
 b2a:	3f 93       	push	r19
 b2c:	4f 93       	push	r20
 b2e:	5f 93       	push	r21
 b30:	8f 93       	push	r24
 b32:	9f 93       	push	r25
 b34:	ef 93       	push	r30
 b36:	ff 93       	push	r31
 b38:	40 91 c0 00 	lds	r20, 0x00C0
 b3c:	50 91 c6 00 	lds	r21, 0x00C6
 b40:	48 71       	andi	r20, 0x18	; 24
 b42:	80 91 94 01 	lds	r24, 0x0194
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	01 96       	adiw	r24, 0x01	; 1
 b4a:	8f 77       	andi	r24, 0x7F	; 127
 b4c:	99 27       	eor	r25, r25
 b4e:	20 91 93 01 	lds	r18, 0x0193
 b52:	30 e0       	ldi	r19, 0x00	; 0
 b54:	28 17       	cp	r18, r24
 b56:	39 07       	cpc	r19, r25
 b58:	39 f0       	breq	.+14     	; 0xb68 <__vector_18+0x4a>
 b5a:	80 93 94 01 	sts	0x0194, r24
 b5e:	fc 01       	movw	r30, r24
 b60:	e9 56       	subi	r30, 0x69	; 105
 b62:	fe 4f       	sbci	r31, 0xFE	; 254
 b64:	50 83       	st	Z, r21
 b66:	01 c0       	rjmp	.+2      	; 0xb6a <__vector_18+0x4c>
 b68:	42 e0       	ldi	r20, 0x02	; 2
 b6a:	40 93 92 01 	sts	0x0192, r20
 b6e:	ff 91       	pop	r31
 b70:	ef 91       	pop	r30
 b72:	9f 91       	pop	r25
 b74:	8f 91       	pop	r24
 b76:	5f 91       	pop	r21
 b78:	4f 91       	pop	r20
 b7a:	3f 91       	pop	r19
 b7c:	2f 91       	pop	r18
 b7e:	0f 90       	pop	r0
 b80:	0f be       	out	0x3f, r0	; 63
 b82:	0f 90       	pop	r0
 b84:	1f 90       	pop	r1
 b86:	18 95       	reti

00000b88 <__vector_19>:
 b88:	1f 92       	push	r1
 b8a:	0f 92       	push	r0
 b8c:	0f b6       	in	r0, 0x3f	; 63
 b8e:	0f 92       	push	r0
 b90:	11 24       	eor	r1, r1
 b92:	8f 93       	push	r24
 b94:	9f 93       	push	r25
 b96:	ef 93       	push	r30
 b98:	ff 93       	push	r31
 b9a:	90 91 96 01 	lds	r25, 0x0196
 b9e:	80 91 95 01 	lds	r24, 0x0195
 ba2:	98 17       	cp	r25, r24
 ba4:	79 f0       	breq	.+30     	; 0xbc4 <__vector_19+0x3c>
 ba6:	80 91 95 01 	lds	r24, 0x0195
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	01 96       	adiw	r24, 0x01	; 1
 bae:	8f 77       	andi	r24, 0x7F	; 127
 bb0:	99 27       	eor	r25, r25
 bb2:	80 93 95 01 	sts	0x0195, r24
 bb6:	fc 01       	movw	r30, r24
 bb8:	e9 5e       	subi	r30, 0xE9	; 233
 bba:	fd 4f       	sbci	r31, 0xFD	; 253
 bbc:	80 81       	ld	r24, Z
 bbe:	80 93 c6 00 	sts	0x00C6, r24
 bc2:	05 c0       	rjmp	.+10     	; 0xbce <__vector_19+0x46>
 bc4:	e1 ec       	ldi	r30, 0xC1	; 193
 bc6:	f0 e0       	ldi	r31, 0x00	; 0
 bc8:	80 81       	ld	r24, Z
 bca:	8f 7d       	andi	r24, 0xDF	; 223
 bcc:	80 83       	st	Z, r24
 bce:	ff 91       	pop	r31
 bd0:	ef 91       	pop	r30
 bd2:	9f 91       	pop	r25
 bd4:	8f 91       	pop	r24
 bd6:	0f 90       	pop	r0
 bd8:	0f be       	out	0x3f, r0	; 63
 bda:	0f 90       	pop	r0
 bdc:	1f 90       	pop	r1
 bde:	18 95       	reti

00000be0 <uart0_init>:
 be0:	10 92 96 01 	sts	0x0196, r1
 be4:	10 92 95 01 	sts	0x0195, r1
 be8:	10 92 94 01 	sts	0x0194, r1
 bec:	10 92 93 01 	sts	0x0193, r1
 bf0:	99 23       	and	r25, r25
 bf2:	24 f4       	brge	.+8      	; 0xbfc <uart0_init+0x1c>
 bf4:	22 e0       	ldi	r18, 0x02	; 2
 bf6:	20 93 c0 00 	sts	0x00C0, r18
 bfa:	9f 77       	andi	r25, 0x7F	; 127
 bfc:	90 93 c5 00 	sts	0x00C5, r25
 c00:	80 93 c4 00 	sts	0x00C4, r24
 c04:	88 e9       	ldi	r24, 0x98	; 152
 c06:	80 93 c1 00 	sts	0x00C1, r24
 c0a:	86 e0       	ldi	r24, 0x06	; 6
 c0c:	80 93 c2 00 	sts	0x00C2, r24
 c10:	08 95       	ret

00000c12 <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
 c12:	60 91 96 01 	lds	r22, 0x0196
 c16:	70 e0       	ldi	r23, 0x00	; 0
 c18:	6f 5f       	subi	r22, 0xFF	; 255
 c1a:	7f 4f       	sbci	r23, 0xFF	; 255
 c1c:	6f 77       	andi	r22, 0x7F	; 127
 c1e:	77 27       	eor	r23, r23
 c20:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
 c22:	20 91 95 01 	lds	r18, 0x0195
 c26:	30 e0       	ldi	r19, 0x00	; 0
 c28:	24 17       	cp	r18, r20
 c2a:	35 07       	cpc	r19, r21
 c2c:	d1 f3       	breq	.-12     	; 0xc22 <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
 c2e:	fb 01       	movw	r30, r22
 c30:	e9 5e       	subi	r30, 0xE9	; 233
 c32:	fd 4f       	sbci	r31, 0xFD	; 253
 c34:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
 c36:	60 93 96 01 	sts	0x0196, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
 c3a:	e1 ec       	ldi	r30, 0xC1	; 193
 c3c:	f0 e0       	ldi	r31, 0x00	; 0
 c3e:	80 81       	ld	r24, Z
 c40:	80 62       	ori	r24, 0x20	; 32
 c42:	80 83       	st	Z, r24
 c44:	08 95       	ret

00000c46 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
 c46:	cf 93       	push	r28
 c48:	df 93       	push	r29
 c4a:	ec 01       	movw	r28, r24
	while (*s) {
 c4c:	88 81       	ld	r24, Y
 c4e:	88 23       	and	r24, r24
 c50:	29 f0       	breq	.+10     	; 0xc5c <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
 c52:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
 c54:	de df       	rcall	.-68     	; 0xc12 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
 c56:	89 91       	ld	r24, Y+
 c58:	81 11       	cpse	r24, r1
 c5a:	fc cf       	rjmp	.-8      	; 0xc54 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
 c5c:	df 91       	pop	r29
 c5e:	cf 91       	pop	r28
 c60:	08 95       	ret

00000c62 <__divmodhi4>:
 c62:	97 fb       	bst	r25, 7
 c64:	07 2e       	mov	r0, r23
 c66:	16 f4       	brtc	.+4      	; 0xc6c <__divmodhi4+0xa>
 c68:	00 94       	com	r0
 c6a:	06 d0       	rcall	.+12     	; 0xc78 <__divmodhi4_neg1>
 c6c:	77 fd       	sbrc	r23, 7
 c6e:	08 d0       	rcall	.+16     	; 0xc80 <__divmodhi4_neg2>
 c70:	2d d0       	rcall	.+90     	; 0xccc <__udivmodhi4>
 c72:	07 fc       	sbrc	r0, 7
 c74:	05 d0       	rcall	.+10     	; 0xc80 <__divmodhi4_neg2>
 c76:	3e f4       	brtc	.+14     	; 0xc86 <__divmodhi4_exit>

00000c78 <__divmodhi4_neg1>:
 c78:	90 95       	com	r25
 c7a:	81 95       	neg	r24
 c7c:	9f 4f       	sbci	r25, 0xFF	; 255
 c7e:	08 95       	ret

00000c80 <__divmodhi4_neg2>:
 c80:	70 95       	com	r23
 c82:	61 95       	neg	r22
 c84:	7f 4f       	sbci	r23, 0xFF	; 255

00000c86 <__divmodhi4_exit>:
 c86:	08 95       	ret

00000c88 <__udivmodsi4>:
 c88:	a1 e2       	ldi	r26, 0x21	; 33
 c8a:	1a 2e       	mov	r1, r26
 c8c:	aa 1b       	sub	r26, r26
 c8e:	bb 1b       	sub	r27, r27
 c90:	fd 01       	movw	r30, r26
 c92:	0d c0       	rjmp	.+26     	; 0xcae <__udivmodsi4_ep>

00000c94 <__udivmodsi4_loop>:
 c94:	aa 1f       	adc	r26, r26
 c96:	bb 1f       	adc	r27, r27
 c98:	ee 1f       	adc	r30, r30
 c9a:	ff 1f       	adc	r31, r31
 c9c:	a2 17       	cp	r26, r18
 c9e:	b3 07       	cpc	r27, r19
 ca0:	e4 07       	cpc	r30, r20
 ca2:	f5 07       	cpc	r31, r21
 ca4:	20 f0       	brcs	.+8      	; 0xcae <__udivmodsi4_ep>
 ca6:	a2 1b       	sub	r26, r18
 ca8:	b3 0b       	sbc	r27, r19
 caa:	e4 0b       	sbc	r30, r20
 cac:	f5 0b       	sbc	r31, r21

00000cae <__udivmodsi4_ep>:
 cae:	66 1f       	adc	r22, r22
 cb0:	77 1f       	adc	r23, r23
 cb2:	88 1f       	adc	r24, r24
 cb4:	99 1f       	adc	r25, r25
 cb6:	1a 94       	dec	r1
 cb8:	69 f7       	brne	.-38     	; 0xc94 <__udivmodsi4_loop>
 cba:	60 95       	com	r22
 cbc:	70 95       	com	r23
 cbe:	80 95       	com	r24
 cc0:	90 95       	com	r25
 cc2:	9b 01       	movw	r18, r22
 cc4:	ac 01       	movw	r20, r24
 cc6:	bd 01       	movw	r22, r26
 cc8:	cf 01       	movw	r24, r30
 cca:	08 95       	ret

00000ccc <__udivmodhi4>:
 ccc:	aa 1b       	sub	r26, r26
 cce:	bb 1b       	sub	r27, r27
 cd0:	51 e1       	ldi	r21, 0x11	; 17
 cd2:	07 c0       	rjmp	.+14     	; 0xce2 <__udivmodhi4_ep>

00000cd4 <__udivmodhi4_loop>:
 cd4:	aa 1f       	adc	r26, r26
 cd6:	bb 1f       	adc	r27, r27
 cd8:	a6 17       	cp	r26, r22
 cda:	b7 07       	cpc	r27, r23
 cdc:	10 f0       	brcs	.+4      	; 0xce2 <__udivmodhi4_ep>
 cde:	a6 1b       	sub	r26, r22
 ce0:	b7 0b       	sbc	r27, r23

00000ce2 <__udivmodhi4_ep>:
 ce2:	88 1f       	adc	r24, r24
 ce4:	99 1f       	adc	r25, r25
 ce6:	5a 95       	dec	r21
 ce8:	a9 f7       	brne	.-22     	; 0xcd4 <__udivmodhi4_loop>
 cea:	80 95       	com	r24
 cec:	90 95       	com	r25
 cee:	bc 01       	movw	r22, r24
 cf0:	cd 01       	movw	r24, r26
 cf2:	08 95       	ret

00000cf4 <memcpy>:
 cf4:	fb 01       	movw	r30, r22
 cf6:	dc 01       	movw	r26, r24
 cf8:	02 c0       	rjmp	.+4      	; 0xcfe <memcpy+0xa>
 cfa:	01 90       	ld	r0, Z+
 cfc:	0d 92       	st	X+, r0
 cfe:	41 50       	subi	r20, 0x01	; 1
 d00:	50 40       	sbci	r21, 0x00	; 0
 d02:	d8 f7       	brcc	.-10     	; 0xcfa <memcpy+0x6>
 d04:	08 95       	ret

00000d06 <_exit>:
 d06:	f8 94       	cli

00000d08 <__stop_program>:
 d08:	ff cf       	rjmp	.-2      	; 0xd08 <__stop_program>
