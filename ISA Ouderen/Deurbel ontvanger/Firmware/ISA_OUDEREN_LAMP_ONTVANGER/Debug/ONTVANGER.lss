
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  00001a86  00001b1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017b  00800150  00800150  00001b6a  2**0
                  ALLOC
  3 .stab         00000e4c  00000000  00000000  00001b6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  000029b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002d13  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003a0  00000000  00000000  00002d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003dab  00000000  00000000  000030e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001295  00000000  00000000  00006e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000028ba  00000000  00000000  00008122  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009ac  00000000  00000000  0000a9dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000e9c  00000000  00000000  0000b388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000028dd  00000000  00000000  0000c224  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003a0  00000000  00000000  0000eb01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c3 c2       	rjmp	.+1414   	; 0x588 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 7b 0a 	jmp	0x14f6	; 0x14f6 <__vector_1>
       8:	db c2       	rjmp	.+1462   	; 0x5c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d9 c2       	rjmp	.+1458   	; 0x5c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	d7 c2       	rjmp	.+1454   	; 0x5c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	d5 c2       	rjmp	.+1450   	; 0x5c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	d3 c2       	rjmp	.+1446   	; 0x5c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ea c6       	rjmp	.+3540   	; 0xdf2 <__vector_7>
      1e:	00 00       	nop
      20:	cf c2       	rjmp	.+1438   	; 0x5c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	cd c2       	rjmp	.+1434   	; 0x5c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	cb c2       	rjmp	.+1430   	; 0x5c0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c9 c2       	rjmp	.+1426   	; 0x5c0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c7 c2       	rjmp	.+1422   	; 0x5c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c2       	rjmp	.+1418   	; 0x5c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	50 c3       	rjmp	.+1696   	; 0x6da <__vector_14>
      3a:	00 00       	nop
      3c:	c1 c2       	rjmp	.+1410   	; 0x5c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bf c2       	rjmp	.+1406   	; 0x5c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	bd c2       	rjmp	.+1402   	; 0x5c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <__vector_18>
      4c:	0c 94 82 0c 	jmp	0x1904	; 0x1904 <__vector_19>
      50:	b7 c2       	rjmp	.+1390   	; 0x5c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	b5 c2       	rjmp	.+1386   	; 0x5c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	b3 c2       	rjmp	.+1382   	; 0x5c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b1 c2       	rjmp	.+1378   	; 0x5c0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	af c2       	rjmp	.+1374   	; 0x5c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	ad c2       	rjmp	.+1370   	; 0x5c0 <__bad_interrupt>
	...

00000068 <_ZL16icon_led_numbers>:
      68:	0c 0b 0a 0f 0e 0d 07 08 09 02 01 00                 ............

00000074 <_ZL22sound_pattern_doorbell>:
      74:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      84:	b0 04 00 00 f4 01 00 00 00 00 00 00 e8 03 00 00     ................
      94:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      a4:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000000b4 <_ZL19sound_pattern_phone>:
      b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     104:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     114:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     124:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     134:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     144:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     154:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     164:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     174:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     184:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     194:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     1a4:	00 00 00 00 e8 03 00 00 e8 03 00 00 28 00 00 00     ............(...
     1b4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1c4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1d4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1e4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1f4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     204:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     214:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     224:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     234:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     244:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     254:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     264:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     274:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     284:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     294:	ee 02 00 00 28 00 00 00 00 00 00 00 e8 03 00 00     ....(...........
     2a4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     304:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     314:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     324:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     334:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     344:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     354:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     364:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     374:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     384:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     394:	00 00 00 00 e8 03 00 00 00 00 00 00 00 00 00 00     ................
	...

000003b4 <_ZL18sound_pattern_fire>:
     3b4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3c4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3d4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3e4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3f4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     404:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     414:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     424:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...

00000434 <_ZL18sound_pattern_help>:
     434:	bf 04 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     444:	1c 07 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     454:	bf 04 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     464:	1c 07 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     474:	00 00 00 00 e8 03 00 00                             ........

0000047c <_ZL13flash_pattern>:
     47c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     48c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     49c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4ac:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4bc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4cc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4dc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4ec:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4fc:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     50c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     51c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     52c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     53c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     54c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     55c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     56c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...

0000057c <_ZL11icon_colors>:
     57c:	3d f5 00 00 b8 f5 ff 00 00 ff ff 00                 =...........

00000588 <__ctors_end>:
     588:	11 24       	eor	r1, r1
     58a:	1f be       	out	0x3f, r1	; 63
     58c:	cf ef       	ldi	r28, 0xFF	; 255
     58e:	d8 e0       	ldi	r29, 0x08	; 8
     590:	de bf       	out	0x3e, r29	; 62
     592:	cd bf       	out	0x3d, r28	; 61

00000594 <__do_copy_data>:
     594:	11 e0       	ldi	r17, 0x01	; 1
     596:	a0 e0       	ldi	r26, 0x00	; 0
     598:	b1 e0       	ldi	r27, 0x01	; 1
     59a:	e6 e8       	ldi	r30, 0x86	; 134
     59c:	fa e1       	ldi	r31, 0x1A	; 26
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__do_copy_data+0x10>
     5a0:	05 90       	lpm	r0, Z+
     5a2:	0d 92       	st	X+, r0
     5a4:	a0 35       	cpi	r26, 0x50	; 80
     5a6:	b1 07       	cpc	r27, r17
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <__do_copy_data+0xc>

000005aa <__do_clear_bss>:
     5aa:	22 e0       	ldi	r18, 0x02	; 2
     5ac:	a0 e5       	ldi	r26, 0x50	; 80
     5ae:	b1 e0       	ldi	r27, 0x01	; 1
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <.do_clear_bss_start>

000005b2 <.do_clear_bss_loop>:
     5b2:	1d 92       	st	X+, r1

000005b4 <.do_clear_bss_start>:
     5b4:	ab 3c       	cpi	r26, 0xCB	; 203
     5b6:	b2 07       	cpc	r27, r18
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <.do_clear_bss_loop>
     5ba:	b4 d0       	rcall	.+360    	; 0x724 <main>
     5bc:	0c 94 41 0d 	jmp	0x1a82	; 0x1a82 <_exit>

000005c0 <__bad_interrupt>:
     5c0:	1f cd       	rjmp	.-1474   	; 0x0 <__vectors>

000005c2 <I2C_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
     5c2:	88 e4       	ldi	r24, 0x48	; 72
     5c4:	80 93 b8 00 	sts	0x00B8, r24
     5c8:	08 95       	ret

000005ca <I2C_start>:
     5ca:	ec eb       	ldi	r30, 0xBC	; 188
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	10 82       	st	Z, r1
     5d0:	94 ea       	ldi	r25, 0xA4	; 164
     5d2:	90 83       	st	Z, r25
     5d4:	90 81       	ld	r25, Z
     5d6:	99 23       	and	r25, r25
     5d8:	ec f7       	brge	.-6      	; 0x5d4 <I2C_start+0xa>
     5da:	90 91 b9 00 	lds	r25, 0x00B9
     5de:	98 7f       	andi	r25, 0xF8	; 248
     5e0:	98 30       	cpi	r25, 0x08	; 8
     5e2:	a1 f4       	brne	.+40     	; 0x60c <I2C_start+0x42>
     5e4:	80 93 bb 00 	sts	0x00BB, r24
     5e8:	84 e8       	ldi	r24, 0x84	; 132
     5ea:	80 93 bc 00 	sts	0x00BC, r24
     5ee:	ec eb       	ldi	r30, 0xBC	; 188
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	88 23       	and	r24, r24
     5f6:	ec f7       	brge	.-6      	; 0x5f2 <I2C_start+0x28>
     5f8:	90 91 b9 00 	lds	r25, 0x00B9
     5fc:	98 7f       	andi	r25, 0xF8	; 248
     5fe:	98 31       	cpi	r25, 0x18	; 24
     600:	39 f0       	breq	.+14     	; 0x610 <I2C_start+0x46>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 34       	cpi	r25, 0x40	; 64
     606:	29 f4       	brne	.+10     	; 0x612 <I2C_start+0x48>
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	08 95       	ret
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	08 95       	ret
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	08 95       	ret

00000614 <I2C_write>:
     614:	80 93 bb 00 	sts	0x00BB, r24
     618:	84 e8       	ldi	r24, 0x84	; 132
     61a:	80 93 bc 00 	sts	0x00BC, r24
     61e:	ec eb       	ldi	r30, 0xBC	; 188
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	88 23       	and	r24, r24
     626:	ec f7       	brge	.-6      	; 0x622 <I2C_write+0xe>
     628:	90 91 b9 00 	lds	r25, 0x00B9
     62c:	98 7f       	andi	r25, 0xF8	; 248
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	98 32       	cpi	r25, 0x28	; 40
     632:	09 f4       	brne	.+2      	; 0x636 <I2C_write+0x22>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	08 95       	ret

00000638 <I2C_read_ack>:
     638:	84 ec       	ldi	r24, 0xC4	; 196
     63a:	80 93 bc 00 	sts	0x00BC, r24
     63e:	ec eb       	ldi	r30, 0xBC	; 188
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	88 23       	and	r24, r24
     646:	ec f7       	brge	.-6      	; 0x642 <I2C_read_ack+0xa>
     648:	80 91 bb 00 	lds	r24, 0x00BB
     64c:	08 95       	ret

0000064e <I2C_stop>:

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     64e:	84 e9       	ldi	r24, 0x94	; 148
     650:	80 93 bc 00 	sts	0x00BC, r24
     654:	08 95       	ret

00000656 <log_s>:
 *
 * @param s The specified string
 */
void log_s(const char *s) {
#ifdef LOG_AVAILABLE
    uart0_puts(s);
     656:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <uart0_puts>
     65a:	08 95       	ret

0000065c <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	84 bd       	out	0x24, r24	; 36
     660:	93 e0       	ldi	r25, 0x03	; 3
     662:	95 bd       	out	0x25, r25	; 37
     664:	80 93 6e 00 	sts	0x006E, r24
     668:	8a ef       	ldi	r24, 0xFA	; 250
     66a:	87 bd       	out	0x27, r24	; 39
     66c:	08 95       	ret

0000066e <millis_get>:
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	8f b7       	in	r24, 0x3f	; 63
     674:	f8 94       	cli
     676:	00 91 50 01 	lds	r16, 0x0150
     67a:	10 91 51 01 	lds	r17, 0x0151
     67e:	20 91 52 01 	lds	r18, 0x0152
     682:	30 91 53 01 	lds	r19, 0x0153
     686:	8f bf       	out	0x3f, r24	; 63
     688:	60 2f       	mov	r22, r16
     68a:	71 2f       	mov	r23, r17
     68c:	82 2f       	mov	r24, r18
     68e:	93 2f       	mov	r25, r19
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	08 95       	ret

00000696 <millis_resume>:
     696:	e4 e6       	ldi	r30, 0x64	; 100
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	8f 7d       	andi	r24, 0xDF	; 223
     69e:	80 83       	st	Z, r24
     6a0:	ee e6       	ldi	r30, 0x6E	; 110
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	82 60       	ori	r24, 0x02	; 2
     6a8:	80 83       	st	Z, r24
     6aa:	08 95       	ret

000006ac <millis_pause>:
     6ac:	ee e6       	ldi	r30, 0x6E	; 110
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 81       	ld	r24, Z
     6b2:	8d 7f       	andi	r24, 0xFD	; 253
     6b4:	80 83       	st	Z, r24
     6b6:	e4 e6       	ldi	r30, 0x64	; 100
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	80 81       	ld	r24, Z
     6bc:	80 62       	ori	r24, 0x20	; 32
     6be:	80 83       	st	Z, r24
     6c0:	08 95       	ret

000006c2 <millis_reset>:
     6c2:	8f b7       	in	r24, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	10 92 50 01 	sts	0x0150, r1
     6ca:	10 92 51 01 	sts	0x0151, r1
     6ce:	10 92 52 01 	sts	0x0152, r1
     6d2:	10 92 53 01 	sts	0x0153, r1
     6d6:	8f bf       	out	0x3f, r24	; 63
     6d8:	08 95       	ret

000006da <__vector_14>:

ISR(ISR_VECT)
{
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	8f 93       	push	r24
     6e6:	9f 93       	push	r25
     6e8:	af 93       	push	r26
     6ea:	bf 93       	push	r27
	++milliseconds;
     6ec:	80 91 50 01 	lds	r24, 0x0150
     6f0:	90 91 51 01 	lds	r25, 0x0151
     6f4:	a0 91 52 01 	lds	r26, 0x0152
     6f8:	b0 91 53 01 	lds	r27, 0x0153
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	a1 1d       	adc	r26, r1
     700:	b1 1d       	adc	r27, r1
     702:	80 93 50 01 	sts	0x0150, r24
     706:	90 93 51 01 	sts	0x0151, r25
     70a:	a0 93 52 01 	sts	0x0152, r26
     70e:	b0 93 53 01 	sts	0x0153, r27
}
     712:	bf 91       	pop	r27
     714:	af 91       	pop	r26
     716:	9f 91       	pop	r25
     718:	8f 91       	pop	r24
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <main>:
			 
	
int main() {	

// disable ADC for less power 
	ADCSRA &= ~_BV(ADEN); // ADC off 
     724:	ea e7       	ldi	r30, 0x7A	; 122
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	80 81       	ld	r24, Z
     72a:	8f 77       	andi	r24, 0x7F	; 127
     72c:	80 83       	st	Z, r24
	sei();
     72e:	78 94       	sei
			/* Initialize MILLIS */
	        millis_init();
     730:	95 df       	rcall	.-214    	; 0x65c <millis_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     732:	2f ef       	ldi	r18, 0xFF	; 255
     734:	8b e7       	ldi	r24, 0x7B	; 123
     736:	92 e9       	ldi	r25, 0x92	; 146
     738:	21 50       	subi	r18, 0x01	; 1
     73a:	80 40       	sbci	r24, 0x00	; 0
     73c:	90 40       	sbci	r25, 0x00	; 0
     73e:	e1 f7       	brne	.-8      	; 0x738 <main+0x14>
     740:	00 c0       	rjmp	.+0      	; 0x742 <main+0x1e>
     742:	00 00       	nop
			_delay_ms(3000);
			/* Initialize MILLIS */

			/* Initialize TONE */						
			tone_init();		
     744:	0e 94 de 0b 	call	0x17bc	; 0x17bc <tone_init>
			/* Initialize TONE */						
						
			/* Initialize TIMER 2 */
			// Timer settings
			TCCR2A = _BV(WGM21); // prescaler 128
     748:	82 e0       	ldi	r24, 0x02	; 2
     74a:	80 93 b0 00 	sts	0x00B0, r24
			TCCR2B = _BV(CS22)|_BV(CS20);
     74e:	85 e0       	ldi	r24, 0x05	; 5
     750:	80 93 b1 00 	sts	0x00B1, r24
							 	
			// TIMSK2 = _BV(OCIE2A); // DO NOT ENABLE TIMER2 BY DEFAULT!
			OCR2A = ((F_CPU / 128) / 1000);
     754:	8d e7       	ldi	r24, 0x7D	; 125
     756:	80 93 b3 00 	sts	0x00B3, r24
			//power_timer2_disable(); // power timer2 down!
			/* Initialize TIMER 2 */			
			

			/* Initialize UART */
			uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
     75a:	80 e1       	ldi	r24, 0x10	; 16
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 ae 0c 	call	0x195c	; 0x195c <uart0_init>
			uart0_puts("kak");
     762:	8e e0       	ldi	r24, 0x0E	; 14
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <uart0_puts>
     76a:	ef ef       	ldi	r30, 0xFF	; 255
     76c:	f3 ed       	ldi	r31, 0xD3	; 211
     76e:	20 e3       	ldi	r18, 0x30	; 48
     770:	e1 50       	subi	r30, 0x01	; 1
     772:	f0 40       	sbci	r31, 0x00	; 0
     774:	20 40       	sbci	r18, 0x00	; 0
     776:	e1 f7       	brne	.-8      	; 0x770 <main+0x4c>
     778:	00 c0       	rjmp	.+0      	; 0x77a <main+0x56>
     77a:	00 00       	nop
			_delay_ms(1000);
		
		
			I2C_init();	
     77c:	22 df       	rcall	.-444    	; 0x5c2 <I2C_init>
			pca9635_init();
     77e:	ab d3       	rcall	.+1878   	; 0xed6 <pca9635_init>
			pca9635_set_all_led_pwm(255);
     780:	8f ef       	ldi	r24, 0xFF	; 255
     782:	ef d3       	rcall	.+2014   	; 0xf62 <pca9635_set_all_led_pwm>
     784:	8f ef       	ldi	r24, 0xFF	; 255
     786:	93 ed       	ldi	r25, 0xD3	; 211
     788:	e0 e3       	ldi	r30, 0x30	; 48
     78a:	81 50       	subi	r24, 0x01	; 1
     78c:	90 40       	sbci	r25, 0x00	; 0
     78e:	e0 40       	sbci	r30, 0x00	; 0
     790:	e1 f7       	brne	.-8      	; 0x78a <main+0x66>
     792:	00 c0       	rjmp	.+0      	; 0x794 <main+0x70>
     794:	00 00       	nop
			_delay_ms(1000);
			//pca9635_set_led_mode(0); // put all leds off
			pca9635_set_all_led_pwm(0);
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	e4 d3       	rcall	.+1992   	; 0xf62 <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1);
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	f2 d3       	rcall	.+2020   	; 0xf82 <pca9635_set_sleep>
			log_s("PCA ok");
     79e:	82 e1       	ldi	r24, 0x12	; 18
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	59 df       	rcall	.-334    	; 0x656 <log_s>
     7a4:	ff ef       	ldi	r31, 0xFF	; 255
     7a6:	23 ed       	ldi	r18, 0xD3	; 211
     7a8:	80 e3       	ldi	r24, 0x30	; 48
     7aa:	f1 50       	subi	r31, 0x01	; 1
     7ac:	20 40       	sbci	r18, 0x00	; 0
     7ae:	80 40       	sbci	r24, 0x00	; 0
     7b0:	e1 f7       	brne	.-8      	; 0x7aa <main+0x86>
     7b2:	00 c0       	rjmp	.+0      	; 0x7b4 <main+0x90>
     7b4:	00 00       	nop
			_delay_ms(1000);
			
			
  // node id, rfband, group id
    rf12_initialize(2, RF12_868MHZ, 14);
     7b6:	4e e0       	ldi	r20, 0x0E	; 14
     7b8:	62 e0       	ldi	r22, 0x02	; 2
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	17 d6       	rcall	.+3118   	; 0x13ec <_Z15rf12_initializehhh>
    // see http://tools.jeelabs.org/rfm12b
  //  rf12_control(0xC040); // set low-battery level to 2.2V i.s.o. 3.1V

log_s("initialized!");
     7be:	89 e1       	ldi	r24, 0x19	; 25
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	49 df       	rcall	.-366    	; 0x656 <log_s>
     7c4:	9f ef       	ldi	r25, 0xFF	; 255
     7c6:	e3 ed       	ldi	r30, 0xD3	; 211
     7c8:	f0 e3       	ldi	r31, 0x30	; 48
     7ca:	91 50       	subi	r25, 0x01	; 1
     7cc:	e0 40       	sbci	r30, 0x00	; 0
     7ce:	f0 40       	sbci	r31, 0x00	; 0
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <main+0xa6>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <main+0xb0>
     7d4:	00 00       	nop
     7d6:	0f 2e       	mov	r0, r31
     7d8:	f5 e4       	ldi	r31, 0x45	; 69
     7da:	4f 2e       	mov	r4, r31
     7dc:	f1 e0       	ldi	r31, 0x01	; 1
     7de:	5f 2e       	mov	r5, r31
     7e0:	f0 2d       	mov	r31, r0
							pca9635_set_sleep(0);
						//	pca9635_set_led_mode(2);
							
						 }else{
							 
							if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     7e2:	81 2c       	mov	r8, r1
     7e4:	91 2c       	mov	r9, r1
								// put leds off!
								for (byte i = 0; i <= 3; ++i){
									if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     7e6:	68 2c       	mov	r6, r8
     7e8:	79 2c       	mov	r7, r9
							millis_reset();
							millis_resume();
				 
							// 3. timer 2 - alarm timer starten
							//power_timer2_enable();
							TIMSK2 |= _BV(OCIE2A);
     7ea:	0f 2e       	mov	r0, r31
     7ec:	f0 e7       	ldi	r31, 0x70	; 112
     7ee:	af 2e       	mov	r10, r31
     7f0:	b1 2c       	mov	r11, r1
     7f2:	f0 2d       	mov	r31, r0

	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
     7f4:	1d d4       	rcall	.+2106   	; 0x1030 <_Z13rf12_recvDonev>
     7f6:	88 23       	and	r24, r24
     7f8:	09 f4       	brne	.+2      	; 0x7fc <main+0xd8>
     7fa:	c0 c0       	rjmp	.+384    	; 0x97c <__stack+0x7d>
     7fc:	80 91 b7 01 	lds	r24, 0x01B7
     800:	90 91 b8 01 	lds	r25, 0x01B8
     804:	89 2b       	or	r24, r25
     806:	09 f4       	brne	.+2      	; 0x80a <main+0xe6>
     808:	b3 c0       	rjmp	.+358    	; 0x970 <__stack+0x71>
     80a:	b8 c0       	rjmp	.+368    	; 0x97c <__stack+0x7d>
		// process incoming data here
				
			if (RF12_WANTS_ACK) {
     80c:	e1 e7       	ldi	r30, 0x71	; 113
     80e:	f1 e0       	ldi	r31, 0x01	; 1
     810:	80 81       	ld	r24, Z
     812:	88 23       	and	r24, r24
     814:	0c f0       	brlt	.+2      	; 0x818 <main+0xf4>
     816:	bd c0       	rjmp	.+378    	; 0x992 <__stack+0x93>
     818:	0e c0       	rjmp	.+28     	; 0x836 <main+0x112>
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     81a:	e1 e7       	ldi	r30, 0x71	; 113
     81c:	f1 e0       	ldi	r31, 0x01	; 1
     81e:	80 81       	ld	r24, Z
     820:	8f 71       	andi	r24, 0x1F	; 31
     822:	80 6c       	ori	r24, 0xC0	; 192
     824:	40 e0       	ldi	r20, 0x00	; 0
     826:	b4 01       	movw	r22, r8
     828:	59 d5       	rcall	.+2738   	; 0x12dc <_Z14rf12_sendStarthPKvh>
				rf12_sendWait(1); // don't power down too soon
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	65 d5       	rcall	.+2762   	; 0x12f8 <_Z13rf12_sendWaith>
				uart0_puts("ACK-OK");
     82e:	86 e2       	ldi	r24, 0x26	; 38
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <uart0_puts>
				//_delay_ms(10);
			}
			
			
		uart0_puts("DATA");
     836:	8d e2       	ldi	r24, 0x2D	; 45
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <uart0_puts>
		//		}
				
				
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[0]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     83e:	e3 e7       	ldi	r30, 0x73	; 115
     840:	f1 e0       	ldi	r31, 0x01	; 1
     842:	20 80       	ld	r2, Z
				uart0_putc(data);
     844:	82 2d       	mov	r24, r2
     846:	0e 94 c7 0c 	call	0x198e	; 0x198e <uart0_putc>
				//_delay_ms(10);
				 if(data & 0x10){
     84a:	c2 2d       	mov	r28, r2
     84c:	c0 71       	andi	r28, 0x10	; 16
     84e:	24 fe       	sbrs	r2, 4
     850:	0a c0       	rjmp	.+20     	; 0x866 <main+0x142>
					 // start alarm	 
					 uart0_puts("START");
     852:	82 e3       	ldi	r24, 0x32	; 50
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <uart0_puts>
					 active_alarm = active_alarm | data; // 00001111 
     85a:	80 91 69 01 	lds	r24, 0x0169
     85e:	82 29       	or	r24, r2
     860:	80 93 69 01 	sts	0x0169, r24
     864:	0b c0       	rjmp	.+22     	; 0x87c <main+0x158>
				 }else{
					 // stop alarm
					  uart0_puts("STOP");
     866:	88 e3       	ldi	r24, 0x38	; 56
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <uart0_puts>
					 active_alarm =  active_alarm & (~data); /* invert data, compare with active alarm array to clear the right alarm bit */		 
     86e:	82 2d       	mov	r24, r2
     870:	80 95       	com	r24
     872:	90 91 69 01 	lds	r25, 0x0169
     876:	89 23       	and	r24, r25
     878:	80 93 69 01 	sts	0x0169, r24
				 }
				 
				////////////////		Fill alarm array		 ////////////////				 
				
				// strip first 4 bytes
				uart0_putc(active_alarm);
     87c:	80 91 69 01 	lds	r24, 0x0169
     880:	0e 94 c7 0c 	call	0x198e	; 0x198e <uart0_putc>
	
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     884:	3f b6       	in	r3, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     886:	f8 94       	cli
		{ 
				 // IS ER EEN ALARM ACTIEF in array active_alarm?
				 if(active_alarm & 0x0F){
     888:	20 91 69 01 	lds	r18, 0x0169
     88c:	82 2f       	mov	r24, r18
     88e:	8f 70       	andi	r24, 0x0F	; 15
     890:	09 f4       	brne	.+2      	; 0x894 <main+0x170>
     892:	65 c0       	rjmp	.+202    	; 0x95e <__stack+0x5f>
			  	
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
     894:	80 91 65 01 	lds	r24, 0x0165
     898:	90 91 66 01 	lds	r25, 0x0166
     89c:	a0 91 67 01 	lds	r26, 0x0167
     8a0:	b0 91 68 01 	lds	r27, 0x0168
     8a4:	89 2b       	or	r24, r25
     8a6:	8a 2b       	or	r24, r26
     8a8:	8b 2b       	or	r24, r27
     8aa:	f9 f4       	brne	.+62     	; 0x8ea <main+0x1c6>
							// Geen alarm actief

							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     8ac:	23 fd       	sbrc	r18, 3
     8ae:	0c c0       	rjmp	.+24     	; 0x8c8 <main+0x1a4>
     8b0:	22 fd       	sbrc	r18, 2
     8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <main+0x19c>
     8b4:	21 fd       	sbrc	r18, 1
     8b6:	06 c0       	rjmp	.+12     	; 0x8c4 <main+0x1a0>
     8b8:	20 ff       	sbrs	r18, 0
     8ba:	0b c0       	rjmp	.+22     	; 0x8d2 <main+0x1ae>
     8bc:	83 e0       	ldi	r24, 0x03	; 3
     8be:	05 c0       	rjmp	.+10     	; 0x8ca <main+0x1a6>
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
							// Geen alarm actief

							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	03 c0       	rjmp	.+6      	; 0x8ca <main+0x1a6>
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	01 c0       	rjmp	.+2      	; 0x8ca <main+0x1a6>
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     8c8:	80 e0       	ldi	r24, 0x00	; 0
									sound_current_alarm = i;
     8ca:	80 93 64 01 	sts	0x0164, r24
									icon_current_alarm  = i;
     8ce:	80 93 59 01 	sts	0x0159, r24
									break;
								} 
							 }

							// 2. timer 0 - millis starten
							millis_reset();
     8d2:	f7 de       	rcall	.-530    	; 0x6c2 <millis_reset>
							millis_resume();
     8d4:	e0 de       	rcall	.-576    	; 0x696 <millis_resume>
				 
							// 3. timer 2 - alarm timer starten
							//power_timer2_enable();
							TIMSK2 |= _BV(OCIE2A);
     8d6:	f5 01       	movw	r30, r10
     8d8:	80 81       	ld	r24, Z
     8da:	82 60       	ori	r24, 0x02	; 2
     8dc:	80 83       	st	Z, r24
			 
							// wake up pca9635!
							pca9635_set_sleep(0);
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	50 d3       	rcall	.+1696   	; 0xf82 <pca9635_set_sleep>
							}
						 }
				 

				 		// Only reset active alarm timer if there was a new alarm...
						if(data & 0x10){
     8e2:	cc 23       	and	r28, r28
     8e4:	09 f4       	brne	.+2      	; 0x8e8 <main+0x1c4>
     8e6:	5c c0       	rjmp	.+184    	; 0x9a0 <__stack+0xa1>
     8e8:	22 c0       	rjmp	.+68     	; 0x92e <__stack+0x2f>
							pca9635_set_sleep(0);
						//	pca9635_set_led_mode(2);
							
						 }else{
							 
							if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     8ea:	c1 11       	cpse	r28, r1
     8ec:	20 c0       	rjmp	.+64     	; 0x92e <__stack+0x2f>
     8ee:	72 01       	movw	r14, r4
     8f0:	84 01       	movw	r16, r8
								// put leds off!
								for (byte i = 0; i <= 3; ++i){
									if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     8f2:	f7 01       	movw	r30, r14
     8f4:	21 91       	ld	r18, Z+
     8f6:	7f 01       	movw	r14, r30
     8f8:	22 21       	and	r18, r2
     8fa:	99 f0       	breq	.+38     	; 0x922 <__stack+0x23>
     8fc:	c6 2d       	mov	r28, r6
     8fe:	d7 2d       	mov	r29, r7
										for (byte j = 0; j <= 2; j++){
											pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[i].lednr[j])), 0); // leds off!
     900:	68 01       	movw	r12, r16
     902:	cc 0c       	add	r12, r12
     904:	dd 1c       	adc	r13, r13
     906:	c0 0e       	add	r12, r16
     908:	d1 1e       	adc	r13, r17
     90a:	f6 01       	movw	r30, r12
     90c:	ec 0f       	add	r30, r28
     90e:	fd 1f       	adc	r31, r29
     910:	e8 59       	subi	r30, 0x98	; 152
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	84 91       	lpm	r24, Z
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	13 d3       	rcall	.+1574   	; 0xf40 <pca9635_set_led_pwm>
     91a:	21 96       	adiw	r28, 0x01	; 1
							 
							if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
								// put leds off!
								for (byte i = 0; i <= 3; ++i){
									if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
										for (byte j = 0; j <= 2; j++){
     91c:	c3 30       	cpi	r28, 0x03	; 3
     91e:	d1 05       	cpc	r29, r1
     920:	a1 f7       	brne	.-24     	; 0x90a <__stack+0xb>
     922:	0f 5f       	subi	r16, 0xFF	; 255
     924:	1f 4f       	sbci	r17, 0xFF	; 255
							
						 }else{
							 
							if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
								// put leds off!
								for (byte i = 0; i <= 3; ++i){
     926:	04 30       	cpi	r16, 0x04	; 4
     928:	11 05       	cpc	r17, r1
     92a:	19 f7       	brne	.-58     	; 0x8f2 <main+0x1ce>
     92c:	39 c0       	rjmp	.+114    	; 0x9a0 <__stack+0xa1>
						 }
				 

				 		// Only reset active alarm timer if there was a new alarm...
						if(data & 0x10){
				 			active_alarm_time = millis_get() + alarm_duration; 		 
     92e:	9f de       	rcall	.-706    	; 0x66e <millis_get>
     930:	00 91 00 01 	lds	r16, 0x0100
     934:	10 91 01 01 	lds	r17, 0x0101
     938:	20 91 02 01 	lds	r18, 0x0102
     93c:	30 91 03 01 	lds	r19, 0x0103
     940:	dc 01       	movw	r26, r24
     942:	cb 01       	movw	r24, r22
     944:	80 0f       	add	r24, r16
     946:	91 1f       	adc	r25, r17
     948:	a2 1f       	adc	r26, r18
     94a:	b3 1f       	adc	r27, r19
     94c:	80 93 65 01 	sts	0x0165, r24
     950:	90 93 66 01 	sts	0x0166, r25
     954:	a0 93 67 01 	sts	0x0167, r26
     958:	b0 93 68 01 	sts	0x0168, r27
     95c:	21 c0       	rjmp	.+66     	; 0x9a0 <__stack+0xa1>
						 }

				}else{ //  if(active_alarm & 0x0F){ // IS ER EEN ALARM ACTIEF in active_alarm?
						// no active alarm in array
												
						active_alarm_time = 0; // set alarm time to zero, timers will be disabled in next timer 2 interrupt
     95e:	10 92 65 01 	sts	0x0165, r1
     962:	10 92 66 01 	sts	0x0166, r1
     966:	10 92 67 01 	sts	0x0167, r1
     96a:	10 92 68 01 	sts	0x0168, r1
     96e:	18 c0       	rjmp	.+48     	; 0x9a0 <__stack+0xa1>
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
				
			if (RF12_WANTS_ACK) {
     970:	e1 e7       	ldi	r30, 0x71	; 113
     972:	f1 e0       	ldi	r31, 0x01	; 1
     974:	80 81       	ld	r24, Z
     976:	85 fd       	sbrc	r24, 5
     978:	49 cf       	rjmp	.-366    	; 0x80c <main+0xe8>
     97a:	5d cf       	rjmp	.-326    	; 0x836 <main+0x112>
	 }// 	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
					 
									
	} else {
    // switch into idle mode until the next interrupt - Choose our preferred sleep mode:
    set_sleep_mode(SLEEP_MODE_IDLE);
     97c:	83 b7       	in	r24, 0x33	; 51
     97e:	81 7f       	andi	r24, 0xF1	; 241
     980:	83 bf       	out	0x33, r24	; 51
    
    // Set sleep enable (SE) bit:
    sleep_enable();
     982:	83 b7       	in	r24, 0x33	; 51
     984:	81 60       	ori	r24, 0x01	; 1
     986:	83 bf       	out	0x33, r24	; 51
    
    // Put the device to sleep:
    sleep_cpu();
     988:	88 95       	sleep
	
	// Clear sleep enable (SE) bit:
	sleep_disable();
     98a:	83 b7       	in	r24, 0x33	; 51
     98c:	8e 7f       	andi	r24, 0xFE	; 254
     98e:	83 bf       	out	0x33, r24	; 51
     990:	31 cf       	rjmp	.-414    	; 0x7f4 <main+0xd0>

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
				
			if (RF12_WANTS_ACK) {
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     992:	e1 e7       	ldi	r30, 0x71	; 113
     994:	f1 e0       	ldi	r31, 0x01	; 1
     996:	80 81       	ld	r24, Z
     998:	86 ff       	sbrs	r24, 6
     99a:	3f cf       	rjmp	.-386    	; 0x81a <main+0xf6>
     99c:	80 e8       	ldi	r24, 0x80	; 128
     99e:	42 cf       	rjmp	.-380    	; 0x824 <main+0x100>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     9a0:	3f be       	out	0x3f, r3	; 63
    __asm__ volatile ("" ::: "memory");
     9a2:	28 cf       	rjmp	.-432    	; 0x7f4 <main+0xd0>

000009a4 <_Z9isr_soundv>:
	}
						
}


	void isr_sound(){
     9a4:	ef 92       	push	r14
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
		//	uart0_putc(sound_current_step);
		//	uart0_putc(millis_get());
		//	uart0_putc(_sound_note_time);
			// Stop note if necessary 
			if(_sound_note_time != 0){ // sound already playing?		
     9aa:	80 91 5f 01 	lds	r24, 0x015F
     9ae:	90 91 60 01 	lds	r25, 0x0160
     9b2:	a0 91 61 01 	lds	r26, 0x0161
     9b6:	b0 91 62 01 	lds	r27, 0x0162
     9ba:	89 2b       	or	r24, r25
     9bc:	8a 2b       	or	r24, r26
     9be:	8b 2b       	or	r24, r27
     9c0:	81 f0       	breq	.+32     	; 0x9e2 <_Z9isr_soundv+0x3e>
				//	uart0_puts("GS");
				if(millis_get() < _sound_note_time ){ // Do we need to stop the current note?
     9c2:	55 de       	rcall	.-854    	; 0x66e <millis_get>
     9c4:	00 91 5f 01 	lds	r16, 0x015F
     9c8:	10 91 60 01 	lds	r17, 0x0160
     9cc:	20 91 61 01 	lds	r18, 0x0161
     9d0:	30 91 62 01 	lds	r19, 0x0162
     9d4:	60 17       	cp	r22, r16
     9d6:	71 07       	cpc	r23, r17
     9d8:	82 07       	cpc	r24, r18
     9da:	93 07       	cpc	r25, r19
     9dc:	08 f4       	brcc	.+2      	; 0x9e0 <_Z9isr_soundv+0x3c>
     9de:	ff c0       	rjmp	.+510    	; 0xbde <_Z9isr_soundv+0x23a>
					//uart0_puts("DS");
					return; // dont stop current note
					
				}else{
					noTone(); // stop current note
     9e0:	ef d6       	rcall	.+3550   	; 0x17c0 <noTone>
			
			// play next tone
		//	uart0_puts("PN");
		//	tone(unsigned long frequency, uint8_t volume);
		//uart0_putc(sound_current_alarm);
			if(sound_current_alarm == 0 ){
     9e2:	80 91 64 01 	lds	r24, 0x0164
     9e6:	81 11       	cpse	r24, r1
     9e8:	32 c0       	rjmp	.+100    	; 0xa4e <_Z9isr_soundv+0xaa>
				tone(pgm_read_word(&(sound_pattern_doorbell[sound_current_step].frequency)), 10); // freq, volume
     9ea:	e0 91 63 01 	lds	r30, 0x0163
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	ee 0f       	add	r30, r30
     9f2:	ff 1f       	adc	r31, r31
     9f4:	ee 0f       	add	r30, r30
     9f6:	ff 1f       	adc	r31, r31
     9f8:	ee 0f       	add	r30, r30
     9fa:	ff 1f       	adc	r31, r31
     9fc:	ec 58       	subi	r30, 0x8C	; 140
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	65 91       	lpm	r22, Z+
     a02:	74 91       	lpm	r23, Z
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	e1 2c       	mov	r14, r1
     a0a:	00 e0       	ldi	r16, 0x00	; 0
     a0c:	10 e0       	ldi	r17, 0x00	; 0
     a0e:	98 01       	movw	r18, r16
     a10:	4a e0       	ldi	r20, 0x0A	; 10
     a12:	de d6       	rcall	.+3516   	; 0x17d0 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_doorbell[sound_current_step].time)));
     a14:	2c de       	rcall	.-936    	; 0x66e <millis_get>
     a16:	e0 91 63 01 	lds	r30, 0x0163
     a1a:	f0 e0       	ldi	r31, 0x00	; 0
     a1c:	ee 0f       	add	r30, r30
     a1e:	ff 1f       	adc	r31, r31
     a20:	ee 0f       	add	r30, r30
     a22:	ff 1f       	adc	r31, r31
     a24:	ee 0f       	add	r30, r30
     a26:	ff 1f       	adc	r31, r31
     a28:	e8 58       	subi	r30, 0x88	; 136
     a2a:	ff 4f       	sbci	r31, 0xFF	; 255
     a2c:	25 91       	lpm	r18, Z+
     a2e:	34 91       	lpm	r19, Z
     a30:	dc 01       	movw	r26, r24
     a32:	cb 01       	movw	r24, r22
     a34:	82 0f       	add	r24, r18
     a36:	93 1f       	adc	r25, r19
     a38:	a1 1d       	adc	r26, r1
     a3a:	b1 1d       	adc	r27, r1
     a3c:	80 93 5f 01 	sts	0x015F, r24
     a40:	90 93 60 01 	sts	0x0160, r25
     a44:	a0 93 61 01 	sts	0x0161, r26
     a48:	b0 93 62 01 	sts	0x0162, r27
     a4c:	9b c0       	rjmp	.+310    	; 0xb84 <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 1 ){
     a4e:	81 30       	cpi	r24, 0x01	; 1
     a50:	91 f5       	brne	.+100    	; 0xab6 <_Z9isr_soundv+0x112>
				tone(pgm_read_word(&(sound_pattern_phone[sound_current_step].frequency)), 10);
     a52:	e0 91 63 01 	lds	r30, 0x0163
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ee 0f       	add	r30, r30
     a5e:	ff 1f       	adc	r31, r31
     a60:	ee 0f       	add	r30, r30
     a62:	ff 1f       	adc	r31, r31
     a64:	ec 54       	subi	r30, 0x4C	; 76
     a66:	ff 4f       	sbci	r31, 0xFF	; 255
     a68:	65 91       	lpm	r22, Z+
     a6a:	74 91       	lpm	r23, Z
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	e1 2c       	mov	r14, r1
     a72:	00 e0       	ldi	r16, 0x00	; 0
     a74:	10 e0       	ldi	r17, 0x00	; 0
     a76:	98 01       	movw	r18, r16
     a78:	4a e0       	ldi	r20, 0x0A	; 10
     a7a:	aa d6       	rcall	.+3412   	; 0x17d0 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_phone[sound_current_step].time)));
     a7c:	f8 dd       	rcall	.-1040   	; 0x66e <millis_get>
     a7e:	e0 91 63 01 	lds	r30, 0x0163
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	ee 0f       	add	r30, r30
     a86:	ff 1f       	adc	r31, r31
     a88:	ee 0f       	add	r30, r30
     a8a:	ff 1f       	adc	r31, r31
     a8c:	ee 0f       	add	r30, r30
     a8e:	ff 1f       	adc	r31, r31
     a90:	e8 54       	subi	r30, 0x48	; 72
     a92:	ff 4f       	sbci	r31, 0xFF	; 255
     a94:	25 91       	lpm	r18, Z+
     a96:	34 91       	lpm	r19, Z
     a98:	dc 01       	movw	r26, r24
     a9a:	cb 01       	movw	r24, r22
     a9c:	82 0f       	add	r24, r18
     a9e:	93 1f       	adc	r25, r19
     aa0:	a1 1d       	adc	r26, r1
     aa2:	b1 1d       	adc	r27, r1
     aa4:	80 93 5f 01 	sts	0x015F, r24
     aa8:	90 93 60 01 	sts	0x0160, r25
     aac:	a0 93 61 01 	sts	0x0161, r26
     ab0:	b0 93 62 01 	sts	0x0162, r27
     ab4:	67 c0       	rjmp	.+206    	; 0xb84 <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 2 ){
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	91 f5       	brne	.+100    	; 0xb1e <_Z9isr_soundv+0x17a>
				tone(pgm_read_word(&(sound_pattern_fire[sound_current_step].frequency)), 10);
     aba:	e0 91 63 01 	lds	r30, 0x0163
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	ee 0f       	add	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	ee 0f       	add	r30, r30
     ac6:	ff 1f       	adc	r31, r31
     ac8:	ee 0f       	add	r30, r30
     aca:	ff 1f       	adc	r31, r31
     acc:	ec 54       	subi	r30, 0x4C	; 76
     ace:	fc 4f       	sbci	r31, 0xFC	; 252
     ad0:	65 91       	lpm	r22, Z+
     ad2:	74 91       	lpm	r23, Z
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	e1 2c       	mov	r14, r1
     ada:	00 e0       	ldi	r16, 0x00	; 0
     adc:	10 e0       	ldi	r17, 0x00	; 0
     ade:	98 01       	movw	r18, r16
     ae0:	4a e0       	ldi	r20, 0x0A	; 10
     ae2:	76 d6       	rcall	.+3308   	; 0x17d0 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_fire[sound_current_step].time)));
     ae4:	c4 dd       	rcall	.-1144   	; 0x66e <millis_get>
     ae6:	e0 91 63 01 	lds	r30, 0x0163
     aea:	f0 e0       	ldi	r31, 0x00	; 0
     aec:	ee 0f       	add	r30, r30
     aee:	ff 1f       	adc	r31, r31
     af0:	ee 0f       	add	r30, r30
     af2:	ff 1f       	adc	r31, r31
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	e8 54       	subi	r30, 0x48	; 72
     afa:	fc 4f       	sbci	r31, 0xFC	; 252
     afc:	25 91       	lpm	r18, Z+
     afe:	34 91       	lpm	r19, Z
     b00:	dc 01       	movw	r26, r24
     b02:	cb 01       	movw	r24, r22
     b04:	82 0f       	add	r24, r18
     b06:	93 1f       	adc	r25, r19
     b08:	a1 1d       	adc	r26, r1
     b0a:	b1 1d       	adc	r27, r1
     b0c:	80 93 5f 01 	sts	0x015F, r24
     b10:	90 93 60 01 	sts	0x0160, r25
     b14:	a0 93 61 01 	sts	0x0161, r26
     b18:	b0 93 62 01 	sts	0x0162, r27
     b1c:	33 c0       	rjmp	.+102    	; 0xb84 <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 3 ){
     b1e:	83 30       	cpi	r24, 0x03	; 3
     b20:	89 f5       	brne	.+98     	; 0xb84 <_Z9isr_soundv+0x1e0>
				tone(pgm_read_word(&(sound_pattern_help[sound_current_step].frequency)),10);
     b22:	e0 91 63 01 	lds	r30, 0x0163
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	ee 0f       	add	r30, r30
     b2e:	ff 1f       	adc	r31, r31
     b30:	ee 0f       	add	r30, r30
     b32:	ff 1f       	adc	r31, r31
     b34:	ec 5c       	subi	r30, 0xCC	; 204
     b36:	fb 4f       	sbci	r31, 0xFB	; 251
     b38:	65 91       	lpm	r22, Z+
     b3a:	74 91       	lpm	r23, Z
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	e1 2c       	mov	r14, r1
     b42:	00 e0       	ldi	r16, 0x00	; 0
     b44:	10 e0       	ldi	r17, 0x00	; 0
     b46:	98 01       	movw	r18, r16
     b48:	4a e0       	ldi	r20, 0x0A	; 10
     b4a:	42 d6       	rcall	.+3204   	; 0x17d0 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_help[sound_current_step].time)));
     b4c:	90 dd       	rcall	.-1248   	; 0x66e <millis_get>
     b4e:	e0 91 63 01 	lds	r30, 0x0163
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	ee 0f       	add	r30, r30
     b5a:	ff 1f       	adc	r31, r31
     b5c:	ee 0f       	add	r30, r30
     b5e:	ff 1f       	adc	r31, r31
     b60:	e8 5c       	subi	r30, 0xC8	; 200
     b62:	fb 4f       	sbci	r31, 0xFB	; 251
     b64:	25 91       	lpm	r18, Z+
     b66:	34 91       	lpm	r19, Z
     b68:	dc 01       	movw	r26, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	82 0f       	add	r24, r18
     b6e:	93 1f       	adc	r25, r19
     b70:	a1 1d       	adc	r26, r1
     b72:	b1 1d       	adc	r27, r1
     b74:	80 93 5f 01 	sts	0x015F, r24
     b78:	90 93 60 01 	sts	0x0160, r25
     b7c:	a0 93 61 01 	sts	0x0161, r26
     b80:	b0 93 62 01 	sts	0x0162, r27
			}
			
		//_sound_note_time = millis_get() + 1000;
			
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
     b84:	50 91 63 01 	lds	r21, 0x0163
     b88:	40 91 64 01 	lds	r20, 0x0164
     b8c:	25 2f       	mov	r18, r21
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	e4 2f       	mov	r30, r20
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	e7 5b       	subi	r30, 0xB7	; 183
     b96:	fe 4f       	sbci	r31, 0xFE	; 254
     b98:	80 81       	ld	r24, Z
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	28 17       	cp	r18, r24
     ba0:	39 07       	cpc	r19, r25
     ba2:	d4 f0       	brlt	.+52     	; 0xbd8 <_Z9isr_soundv+0x234>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     ba4:	20 91 69 01 	lds	r18, 0x0169
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     ba8:	92 2f       	mov	r25, r18
     baa:	9f 70       	andi	r25, 0x0F	; 15
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
     bae:	4f 5f       	subi	r20, 0xFF	; 255
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     bb0:	44 30       	cpi	r20, 0x04	; 4
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <_Z9isr_soundv+0x212>
     bb4:	43 2f       	mov	r20, r19
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     bb6:	e4 2f       	mov	r30, r20
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	eb 5b       	subi	r30, 0xBB	; 187
     bbc:	fe 4f       	sbci	r31, 0xFE	; 254
     bbe:	80 81       	ld	r24, Z
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     bc0:	91 11       	cpse	r25, r1
     bc2:	03 c0       	rjmp	.+6      	; 0xbca <_Z9isr_soundv+0x226>
     bc4:	40 93 64 01 	sts	0x0164, r20
     bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <_Z9isr_soundv+0x22e>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     bca:	82 23       	and	r24, r18
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
     bcc:	81 f3       	breq	.-32     	; 0xbae <_Z9isr_soundv+0x20a>
     bce:	40 93 64 01 	sts	0x0164, r20
						done = 1; // in case there is no active alarm anymore, just breakout while
					}

				} // while
				
				sound_current_step = 0; // reset sound_current_step to zero to start the next sound	
     bd2:	10 92 63 01 	sts	0x0163, r1
     bd6:	03 c0       	rjmp	.+6      	; 0xbde <_Z9isr_soundv+0x23a>
				
			}else{
				// set sound_current_step plus one
				sound_current_step++;
     bd8:	5f 5f       	subi	r21, 0xFF	; 255
     bda:	50 93 63 01 	sts	0x0163, r21
			}
	
				
		} //void isr_sound()
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ef 90       	pop	r14
     be4:	08 95       	ret

00000be6 <_Z15isr_light_flashv>:
		
	void isr_light_flash(){
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
			
		// Do we need to go to the next flash?
		if(_flash_time != 0){ // is there already a flash ?
     bee:	80 91 5a 01 	lds	r24, 0x015A
     bf2:	90 91 5b 01 	lds	r25, 0x015B
     bf6:	a0 91 5c 01 	lds	r26, 0x015C
     bfa:	b0 91 5d 01 	lds	r27, 0x015D
     bfe:	89 2b       	or	r24, r25
     c00:	8a 2b       	or	r24, r26
     c02:	8b 2b       	or	r24, r27
     c04:	09 f4       	brne	.+2      	; 0xc08 <_Z15isr_light_flashv+0x22>
     c06:	48 c0       	rjmp	.+144    	; 0xc98 <_Z15isr_light_flashv+0xb2>
			if(millis_get() < _flash_time ){ // Do we need to stop the current note?
     c08:	32 dd       	rcall	.-1436   	; 0x66e <millis_get>
     c0a:	00 91 5a 01 	lds	r16, 0x015A
     c0e:	10 91 5b 01 	lds	r17, 0x015B
     c12:	20 91 5c 01 	lds	r18, 0x015C
     c16:	30 91 5d 01 	lds	r19, 0x015D
     c1a:	60 17       	cp	r22, r16
     c1c:	71 07       	cpc	r23, r17
     c1e:	82 07       	cpc	r24, r18
     c20:	93 07       	cpc	r25, r19
     c22:	08 f0       	brcs	.+2      	; 0xc26 <_Z15isr_light_flashv+0x40>
     c24:	39 c0       	rjmp	.+114    	; 0xc98 <_Z15isr_light_flashv+0xb2>
     c26:	3b c0       	rjmp	.+118    	; 0xc9e <_Z15isr_light_flashv+0xb8>
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
     c28:	80 91 5e 01 	lds	r24, 0x015E
     c2c:	fe 01       	movw	r30, r28
     c2e:	98 e0       	ldi	r25, 0x08	; 8
     c30:	89 9f       	mul	r24, r25
     c32:	e0 0d       	add	r30, r0
     c34:	f1 1d       	adc	r31, r1
     c36:	11 24       	eor	r1, r1
     c38:	e4 58       	subi	r30, 0x84	; 132
     c3a:	fb 4f       	sbci	r31, 0xFB	; 251
     c3c:	64 91       	lpm	r22, Z
     c3e:	8c 2f       	mov	r24, r28
     c40:	8d 5f       	subi	r24, 0xFD	; 253
     c42:	7e d1       	rcall	.+764    	; 0xf40 <pca9635_set_led_pwm>
     c44:	21 96       	adiw	r28, 0x01	; 1
			}						
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
     c46:	c4 30       	cpi	r28, 0x04	; 4
     c48:	d1 05       	cpc	r29, r1
     c4a:	71 f7       	brne	.-36     	; 0xc28 <_Z15isr_light_flashv+0x42>
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
		}
		//pca9635_set_led_pwm_flash(3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[0])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[1])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[2])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[3])) );
		
		_flash_time = millis_get() + pgm_read_word(&(flash_pattern[_flash_current_step].time));
     c4c:	10 dd       	rcall	.-1504   	; 0x66e <millis_get>
     c4e:	40 91 5e 01 	lds	r20, 0x015E
     c52:	e4 2f       	mov	r30, r20
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	ee 0f       	add	r30, r30
     c58:	ff 1f       	adc	r31, r31
     c5a:	ee 0f       	add	r30, r30
     c5c:	ff 1f       	adc	r31, r31
     c5e:	ee 0f       	add	r30, r30
     c60:	ff 1f       	adc	r31, r31
     c62:	e0 58       	subi	r30, 0x80	; 128
     c64:	fb 4f       	sbci	r31, 0xFB	; 251
     c66:	25 91       	lpm	r18, Z+
     c68:	34 91       	lpm	r19, Z
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	82 0f       	add	r24, r18
     c70:	93 1f       	adc	r25, r19
     c72:	a1 1d       	adc	r26, r1
     c74:	b1 1d       	adc	r27, r1
     c76:	80 93 5a 01 	sts	0x015A, r24
     c7a:	90 93 5b 01 	sts	0x015B, r25
     c7e:	a0 93 5c 01 	sts	0x015C, r26
     c82:	b0 93 5d 01 	sts	0x015D, r27
			
		// is variable _flash_current_step equal to total steps?
		if(_flash_current_step == (flash_keys -1 )) {
     c86:	4f 31       	cpi	r20, 0x1F	; 31
     c88:	19 f4       	brne	.+6      	; 0xc90 <_Z15isr_light_flashv+0xaa>
			//reset _flash_current_step to 0
			_flash_current_step = 0;				
     c8a:	10 92 5e 01 	sts	0x015E, r1
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <_Z15isr_light_flashv+0xb8>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
     c90:	4f 5f       	subi	r20, 0xFF	; 255
     c92:	40 93 5e 01 	sts	0x015E, r20
     c96:	03 c0       	rjmp	.+6      	; 0xc9e <_Z15isr_light_flashv+0xb8>
			}
	
				
		} //void isr_sound()
		
	void isr_light_flash(){
     c98:	c0 e0       	ldi	r28, 0x00	; 0
     c9a:	d0 e0       	ldi	r29, 0x00	; 0
     c9c:	c5 cf       	rjmp	.-118    	; 0xc28 <_Z15isr_light_flashv+0x42>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
		}
		
	} // END isr_light_flash
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	08 95       	ret

00000ca8 <_Z14isr_light_iconv>:
		
		
		
		
		
	void isr_light_icon(){
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
		
		// Do we need to go to the next flash?
		if(_icon_time != 0){ // is there already a flash ?
     cb0:	80 91 54 01 	lds	r24, 0x0154
     cb4:	90 91 55 01 	lds	r25, 0x0155
     cb8:	a0 91 56 01 	lds	r26, 0x0156
     cbc:	b0 91 57 01 	lds	r27, 0x0157
     cc0:	89 2b       	or	r24, r25
     cc2:	8a 2b       	or	r24, r26
     cc4:	8b 2b       	or	r24, r27
     cc6:	79 f0       	breq	.+30     	; 0xce6 <_Z14isr_light_iconv+0x3e>
			if(millis_get() < _icon_time ){ // Do we need to stop the current note?
     cc8:	d2 dc       	rcall	.-1628   	; 0x66e <millis_get>
     cca:	00 91 54 01 	lds	r16, 0x0154
     cce:	10 91 55 01 	lds	r17, 0x0155
     cd2:	20 91 56 01 	lds	r18, 0x0156
     cd6:	30 91 57 01 	lds	r19, 0x0157
     cda:	60 17       	cp	r22, r16
     cdc:	71 07       	cpc	r23, r17
     cde:	82 07       	cpc	r24, r18
     ce0:	93 07       	cpc	r25, r19
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <_Z14isr_light_iconv+0x3e>
     ce4:	81 c0       	rjmp	.+258    	; 0xde8 <_Z14isr_light_iconv+0x140>
	// step 2 = 250 - (2 x 25)  = 200
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
     ce6:	20 91 58 01 	lds	r18, 0x0158
     cea:	22 23       	and	r18, r18
     cec:	19 f0       	breq	.+6      	; 0xcf4 <_Z14isr_light_iconv+0x4c>
     cee:	2b 30       	cpi	r18, 0x0B	; 11
     cf0:	21 f5       	brne	.+72     	; 0xd3a <_Z14isr_light_iconv+0x92>
     cf2:	12 c0       	rjmp	.+36     	; 0xd18 <_Z14isr_light_iconv+0x70>
		intensity = 255;
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 1000;
     cf4:	bc dc       	rcall	.-1672   	; 0x66e <millis_get>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	88 51       	subi	r24, 0x18	; 24
     cfc:	9c 4f       	sbci	r25, 0xFC	; 252
     cfe:	af 4f       	sbci	r26, 0xFF	; 255
     d00:	bf 4f       	sbci	r27, 0xFF	; 255
     d02:	80 93 54 01 	sts	0x0154, r24
     d06:	90 93 55 01 	sts	0x0155, r25
     d0a:	a0 93 56 01 	sts	0x0156, r26
     d0e:	b0 93 57 01 	sts	0x0157, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     d12:	cf ef       	ldi	r28, 0xFF	; 255
     d14:	d0 e0       	ldi	r29, 0x00	; 0
     d16:	25 c0       	rjmp	.+74     	; 0xd62 <_Z14isr_light_iconv+0xba>
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 1000;
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
     d18:	aa dc       	rcall	.-1708   	; 0x66e <millis_get>
     d1a:	dc 01       	movw	r26, r24
     d1c:	cb 01       	movw	r24, r22
     d1e:	01 96       	adiw	r24, 0x01	; 1
     d20:	a1 1d       	adc	r26, r1
     d22:	b1 1d       	adc	r27, r1
     d24:	80 93 54 01 	sts	0x0154, r24
     d28:	90 93 55 01 	sts	0x0155, r25
     d2c:	a0 93 56 01 	sts	0x0156, r26
     d30:	b0 93 57 01 	sts	0x0157, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     d34:	cf ef       	ldi	r28, 0xFF	; 255
     d36:	d0 e0       	ldi	r29, 0x00	; 0
     d38:	14 c0       	rjmp	.+40     	; 0xd62 <_Z14isr_light_iconv+0xba>
			_icon_time = millis_get() + 1;
		}
		
		
	}else{
		intensity = (250 - (icon_current_step * 25)); // step 1 to 10, 
     d3a:	37 ee       	ldi	r19, 0xE7	; 231
     d3c:	32 03       	mulsu	r19, r18
     d3e:	e0 01       	movw	r28, r0
     d40:	11 24       	eor	r1, r1
     d42:	c6 50       	subi	r28, 0x06	; 6
     d44:	df 4f       	sbci	r29, 0xFF	; 255
		_icon_time = millis_get() + 50;
     d46:	93 dc       	rcall	.-1754   	; 0x66e <millis_get>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	c2 96       	adiw	r24, 0x32	; 50
     d4e:	a1 1d       	adc	r26, r1
     d50:	b1 1d       	adc	r27, r1
     d52:	80 93 54 01 	sts	0x0154, r24
     d56:	90 93 55 01 	sts	0x0155, r25
     d5a:	a0 93 56 01 	sts	0x0156, r26
     d5e:	b0 93 57 01 	sts	0x0157, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     d62:	00 e0       	ldi	r16, 0x00	; 0
     d64:	10 e0       	ldi	r17, 0x00	; 0
	//	intensity = 0;
	//}
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     d66:	80 91 59 01 	lds	r24, 0x0159
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	9c 01       	movw	r18, r24
     d6e:	22 0f       	add	r18, r18
     d70:	33 1f       	adc	r19, r19
     d72:	82 0f       	add	r24, r18
     d74:	93 1f       	adc	r25, r19
     d76:	80 0f       	add	r24, r16
     d78:	91 1f       	adc	r25, r17
     d7a:	fc 01       	movw	r30, r24
     d7c:	e4 58       	subi	r30, 0x84	; 132
     d7e:	fa 4f       	sbci	r31, 0xFA	; 250
     d80:	44 91       	lpm	r20, Z
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     d82:	fc 01       	movw	r30, r24
     d84:	e8 59       	subi	r30, 0x98	; 152
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	84 91       	lpm	r24, Z
	//	intensity = 0;
	//}
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     d8a:	4c 9f       	mul	r20, r28
     d8c:	90 01       	movw	r18, r0
     d8e:	4d 9f       	mul	r20, r29
     d90:	30 0d       	add	r19, r0
     d92:	11 24       	eor	r1, r1
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     d94:	63 2f       	mov	r22, r19
     d96:	d4 d0       	rcall	.+424    	; 0xf40 <pca9635_set_led_pwm>
     d98:	0f 5f       	subi	r16, 0xFF	; 255
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
		//icon_current_step = 11;
	//	intensity = 0;
	//}
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
     d9c:	03 30       	cpi	r16, 0x03	; 3
     d9e:	11 05       	cpc	r17, r1
     da0:	11 f7       	brne	.-60     	; 0xd66 <_Z14isr_light_iconv+0xbe>
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
	}
	

	// is variable _flash_current_step equal to total steps?
	if(icon_current_step == 11) {
     da2:	80 91 58 01 	lds	r24, 0x0158
     da6:	8b 30       	cpi	r24, 0x0B	; 11
     da8:	e1 f4       	brne	.+56     	; 0xde2 <_Z14isr_light_iconv+0x13a>
		//reset _flash_current_step to 0
		icon_current_step = 0;
     daa:	10 92 58 01 	sts	0x0158, r1
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     dae:	30 91 69 01 	lds	r19, 0x0169
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     db2:	23 2f       	mov	r18, r19
     db4:	2f 70       	andi	r18, 0x0F	; 15
     db6:	80 91 59 01 	lds	r24, 0x0159
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     dba:	40 e0       	ldi	r20, 0x00	; 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     dbe:	84 30       	cpi	r24, 0x04	; 4
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <_Z14isr_light_iconv+0x11c>
     dc2:	84 2f       	mov	r24, r20
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     dc4:	e8 2f       	mov	r30, r24
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	eb 5b       	subi	r30, 0xBB	; 187
     dca:	fe 4f       	sbci	r31, 0xFE	; 254
     dcc:	90 81       	ld	r25, Z
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     dce:	21 11       	cpse	r18, r1
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <_Z14isr_light_iconv+0x130>
     dd2:	80 93 59 01 	sts	0x0159, r24
     dd6:	08 c0       	rjmp	.+16     	; 0xde8 <_Z14isr_light_iconv+0x140>
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     dd8:	93 23       	and	r25, r19
		//reset _flash_current_step to 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
     dda:	81 f3       	breq	.-32     	; 0xdbc <_Z14isr_light_iconv+0x114>
     ddc:	80 93 59 01 	sts	0x0159, r24
     de0:	03 c0       	rjmp	.+6      	; 0xde8 <_Z14isr_light_iconv+0x140>
			} // while
			
			
		}else{
		// set _flash_current_step +1
		icon_current_step++;
     de2:	8f 5f       	subi	r24, 0xFF	; 255
     de4:	80 93 58 01 	sts	0x0158, r24
	}
	
} // END isr_light_icon
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	1f 91       	pop	r17
     dee:	0f 91       	pop	r16
     df0:	08 95       	ret

00000df2 <__vector_7>:

	
	
	
	
ISR (TIMER2_COMPA_vect) {
     df2:	1f 92       	push	r1
     df4:	0f 92       	push	r0
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	0f 92       	push	r0
     dfa:	11 24       	eor	r1, r1
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	2f 93       	push	r18
     e02:	3f 93       	push	r19
     e04:	4f 93       	push	r20
     e06:	5f 93       	push	r21
     e08:	6f 93       	push	r22
     e0a:	7f 93       	push	r23
     e0c:	8f 93       	push	r24
     e0e:	9f 93       	push	r25
     e10:	af 93       	push	r26
     e12:	bf 93       	push	r27
     e14:	ef 93       	push	r30
     e16:	ff 93       	push	r31
//uart0_puts("I");

	// check if the alarm needs to be stopped
	if(millis_get() >= active_alarm_time || active_alarm_time == 0){
     e18:	2a dc       	rcall	.-1964   	; 0x66e <millis_get>
     e1a:	00 91 65 01 	lds	r16, 0x0165
     e1e:	10 91 66 01 	lds	r17, 0x0166
     e22:	20 91 67 01 	lds	r18, 0x0167
     e26:	30 91 68 01 	lds	r19, 0x0168
     e2a:	60 17       	cp	r22, r16
     e2c:	71 07       	cpc	r23, r17
     e2e:	82 07       	cpc	r24, r18
     e30:	93 07       	cpc	r25, r19
     e32:	20 f4       	brcc	.+8      	; 0xe3c <__vector_7+0x4a>
     e34:	01 2b       	or	r16, r17
     e36:	02 2b       	or	r16, r18
     e38:	03 2b       	or	r16, r19
     e3a:	b9 f5       	brne	.+110    	; 0xeaa <__vector_7+0xb8>
		// stop alarm
			
			uart0_puts("STOPINT");			
     e3c:	8d e3       	ldi	r24, 0x3D	; 61
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	c0 d5       	rcall	.+2944   	; 0x19c2 <uart0_puts>
			// stop timer 0
			millis_pause();
     e42:	34 dc       	rcall	.-1944   	; 0x6ac <millis_pause>
			
			// stop sound
			noTone();
     e44:	bd d4       	rcall	.+2426   	; 0x17c0 <noTone>
			
			// stop timer 2
			TIMSK2 &= ~_BV(OCIE2A);
     e46:	e0 e7       	ldi	r30, 0x70	; 112
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	8d 7f       	andi	r24, 0xFD	; 253
     e4e:	80 83       	st	Z, r24
			//power_timer2_disable();
			
			// reset steps of sound, flash and icon
			sound_current_step		= 0;
     e50:	10 92 63 01 	sts	0x0163, r1
			_sound_note_time		= 0;
     e54:	10 92 5f 01 	sts	0x015F, r1
     e58:	10 92 60 01 	sts	0x0160, r1
     e5c:	10 92 61 01 	sts	0x0161, r1
     e60:	10 92 62 01 	sts	0x0162, r1
										
			_flash_current_step		= 0;
     e64:	10 92 5e 01 	sts	0x015E, r1
			_flash_time				= 0;
     e68:	10 92 5a 01 	sts	0x015A, r1
     e6c:	10 92 5b 01 	sts	0x015B, r1
     e70:	10 92 5c 01 	sts	0x015C, r1
     e74:	10 92 5d 01 	sts	0x015D, r1
										
			icon_current_step		= 0;
     e78:	10 92 58 01 	sts	0x0158, r1
			_icon_time				= 0;
     e7c:	10 92 54 01 	sts	0x0154, r1
     e80:	10 92 55 01 	sts	0x0155, r1
     e84:	10 92 56 01 	sts	0x0156, r1
     e88:	10 92 57 01 	sts	0x0157, r1
										
			// empty alarm arrray
			active_alarm = 0x00; 
     e8c:	10 92 69 01 	sts	0x0169, r1
			active_alarm_time = 0;
     e90:	10 92 65 01 	sts	0x0165, r1
     e94:	10 92 66 01 	sts	0x0166, r1
     e98:	10 92 67 01 	sts	0x0167, r1
     e9c:	10 92 68 01 	sts	0x0168, r1
					
			// alle leds uit, pca in slaapstand
			pca9635_set_all_led_pwm(0); // dimm all leds to zero
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	5f d0       	rcall	.+190    	; 0xf62 <pca9635_set_all_led_pwm>
		//	pca9635_set_led_mode(0); // put all leds off
			pca9635_set_sleep(1); // put pca9635 in sleep
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	6d d0       	rcall	.+218    	; 0xf82 <pca9635_set_sleep>
     ea8:	03 c0       	rjmp	.+6      	; 0xeb0 <__vector_7+0xbe>
			// automatisch slapen in loop.

					
	}else{
		// continue alarm
		isr_sound();
     eaa:	7c dd       	rcall	.-1288   	; 0x9a4 <_Z9isr_soundv>
	    isr_light_flash();
     eac:	9c de       	rcall	.-712    	; 0xbe6 <_Z15isr_light_flashv>
		isr_light_icon();		
     eae:	fc de       	rcall	.-520    	; 0xca8 <_Z14isr_light_iconv>
	}
						
}
     eb0:	ff 91       	pop	r31
     eb2:	ef 91       	pop	r30
     eb4:	bf 91       	pop	r27
     eb6:	af 91       	pop	r26
     eb8:	9f 91       	pop	r25
     eba:	8f 91       	pop	r24
     ebc:	7f 91       	pop	r23
     ebe:	6f 91       	pop	r22
     ec0:	5f 91       	pop	r21
     ec2:	4f 91       	pop	r20
     ec4:	3f 91       	pop	r19
     ec6:	2f 91       	pop	r18
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	0f 90       	pop	r0
     ed2:	1f 90       	pop	r1
     ed4:	18 95       	reti

00000ed6 <pca9635_init>:
	   I2C_write(value);	
  	}
			  
  	I2C_stop();
		  
}
     ed6:	80 e8       	ldi	r24, 0x80	; 128
     ed8:	78 db       	rcall	.-2320   	; 0x5ca <I2C_start>
     eda:	80 e8       	ldi	r24, 0x80	; 128
     edc:	9b db       	rcall	.-2250   	; 0x614 <I2C_write>
     ede:	80 e8       	ldi	r24, 0x80	; 128
     ee0:	99 db       	rcall	.-2254   	; 0x614 <I2C_write>
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	97 db       	rcall	.-2258   	; 0x614 <I2C_write>
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	95 db       	rcall	.-2262   	; 0x614 <I2C_write>
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	93 db       	rcall	.-2266   	; 0x614 <I2C_write>
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	91 db       	rcall	.-2270   	; 0x614 <I2C_write>
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	8f db       	rcall	.-2274   	; 0x614 <I2C_write>
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	8d db       	rcall	.-2278   	; 0x614 <I2C_write>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	8b db       	rcall	.-2282   	; 0x614 <I2C_write>
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	89 db       	rcall	.-2286   	; 0x614 <I2C_write>
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	87 db       	rcall	.-2290   	; 0x614 <I2C_write>
     f06:	81 e0       	ldi	r24, 0x01	; 1
     f08:	85 db       	rcall	.-2294   	; 0x614 <I2C_write>
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	83 db       	rcall	.-2298   	; 0x614 <I2C_write>
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	81 db       	rcall	.-2302   	; 0x614 <I2C_write>
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	7f db       	rcall	.-2306   	; 0x614 <I2C_write>
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	7d db       	rcall	.-2310   	; 0x614 <I2C_write>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	7b db       	rcall	.-2314   	; 0x614 <I2C_write>
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	79 db       	rcall	.-2318   	; 0x614 <I2C_write>
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	77 db       	rcall	.-2322   	; 0x614 <I2C_write>
     f26:	8f ef       	ldi	r24, 0xFF	; 255
     f28:	75 db       	rcall	.-2326   	; 0x614 <I2C_write>
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	73 db       	rcall	.-2330   	; 0x614 <I2C_write>
     f2e:	8a ea       	ldi	r24, 0xAA	; 170
     f30:	71 db       	rcall	.-2334   	; 0x614 <I2C_write>
     f32:	8a ea       	ldi	r24, 0xAA	; 170
     f34:	6f db       	rcall	.-2338   	; 0x614 <I2C_write>
     f36:	8a ea       	ldi	r24, 0xAA	; 170
     f38:	6d db       	rcall	.-2342   	; 0x614 <I2C_write>
     f3a:	8a ea       	ldi	r24, 0xAA	; 170
     f3c:	6b db       	rcall	.-2346   	; 0x614 <I2C_write>
     f3e:	87 cb       	rjmp	.-2290   	; 0x64e <I2C_stop>

00000f40 <pca9635_set_led_pwm>:
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	d8 2f       	mov	r29, r24
     f46:	c6 2f       	mov	r28, r22
     f48:	80 e8       	ldi	r24, 0x80	; 128
     f4a:	3f db       	rcall	.-2434   	; 0x5ca <I2C_start>
     f4c:	8d 2f       	mov	r24, r29
     f4e:	8e 5f       	subi	r24, 0xFE	; 254
     f50:	80 68       	ori	r24, 0x80	; 128
     f52:	60 db       	rcall	.-2368   	; 0x614 <I2C_write>
     f54:	8c 2f       	mov	r24, r28
     f56:	5e db       	rcall	.-2372   	; 0x614 <I2C_write>
     f58:	7a db       	rcall	.-2316   	; 0x64e <I2C_stop>
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret

00000f62 <pca9635_set_all_led_pwm>:
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	d8 2f       	mov	r29, r24
     f68:	80 e8       	ldi	r24, 0x80	; 128
     f6a:	2f db       	rcall	.-2466   	; 0x5ca <I2C_start>
     f6c:	82 e8       	ldi	r24, 0x82	; 130
     f6e:	52 db       	rcall	.-2396   	; 0x614 <I2C_write>
     f70:	c0 e1       	ldi	r28, 0x10	; 16
     f72:	8d 2f       	mov	r24, r29
     f74:	4f db       	rcall	.-2402   	; 0x614 <I2C_write>
     f76:	c1 50       	subi	r28, 0x01	; 1
     f78:	e1 f7       	brne	.-8      	; 0xf72 <pca9635_set_all_led_pwm+0x10>
     f7a:	69 db       	rcall	.-2350   	; 0x64e <I2C_stop>
     f7c:	df 91       	pop	r29
     f7e:	cf 91       	pop	r28
     f80:	08 95       	ret

00000f82 <pca9635_set_sleep>:

/**
* Changes the oscillator mode between sleep (1) and active (0)
*/
uint8_t pca9635_set_sleep(uint8_t sleep)
{
     f82:	cf 93       	push	r28
     f84:	c8 2f       	mov	r28, r24
	I2C_start((0x40<<1)+I2C_READ);
     f86:	81 e8       	ldi	r24, 0x81	; 129
     f88:	20 db       	rcall	.-2496   	; 0x5ca <I2C_start>
	I2C_write(0x80); // autoincrement, mode 0,
     f8a:	80 e8       	ldi	r24, 0x80	; 128
     f8c:	43 db       	rcall	.-2426   	; 0x614 <I2C_write>
	// I2C_stop(); ???nodig?
	uint8_t data = I2C_read_ack();
     f8e:	54 db       	rcall	.-2392   	; 0x638 <I2C_read_ack>
	
	if(sleep){		// set or unset bit 4
     f90:	cc 23       	and	r28, r28
     f92:	11 f0       	breq	.+4      	; 0xf98 <pca9635_set_sleep+0x16>
		data |= (1<<4);
     f94:	80 61       	ori	r24, 0x10	; 16
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <pca9635_set_sleep+0x18>
	}else{
		data &= ~(1<<4);
     f98:	8f 7e       	andi	r24, 0xEF	; 239
	}
	
	uint8_t ack = I2C_write(data);  
     f9a:	3c db       	rcall	.-2440   	; 0x614 <I2C_write>
     f9c:	c8 2f       	mov	r28, r24
	I2C_stop();
     f9e:	57 db       	rcall	.-2386   	; 0x64e <I2C_stop>
	return ack;
}
     fa0:	8c 2f       	mov	r24, r28
     fa2:	cf 91       	pop	r28
     fa4:	08 95       	ret

00000fa6 <_ZL15blockInterruptsv>:
	rf12_idle();
	else {
		rfmstate &= ~B11111000; // make sure everything is switched off (except bod, wkup, clk)
		rf12_xfer(rfmstate);
	}
	rxstate = TXIDLE;
     fa6:	e8 98       	cbi	0x1d, 0	; 29
     fa8:	08 95       	ret

00000faa <_ZL15allowInterruptsv>:
     faa:	e8 9a       	sbi	0x1d, 0	; 29
     fac:	08 95       	ret

00000fae <_ZL9rf12_byteh>:
     fae:	8e bd       	out	0x2e, r24	; 46
     fb0:	0d b4       	in	r0, 0x2d	; 45
     fb2:	07 fe       	sbrs	r0, 7
     fb4:	fd cf       	rjmp	.-6      	; 0xfb0 <_ZL9rf12_byteh+0x2>
     fb6:	8e b5       	in	r24, 0x2e	; 46
     fb8:	08 95       	ret

00000fba <_ZL9rf12_xferj>:
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	18 2f       	mov	r17, r24
     fc2:	c9 2f       	mov	r28, r25
     fc4:	f0 df       	rcall	.-32     	; 0xfa6 <_ZL15blockInterruptsv>
     fc6:	2a 98       	cbi	0x05, 2	; 5
     fc8:	8c 2f       	mov	r24, r28
     fca:	f1 df       	rcall	.-30     	; 0xfae <_ZL9rf12_byteh>
     fcc:	d8 2f       	mov	r29, r24
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	c8 2f       	mov	r28, r24
     fd2:	81 2f       	mov	r24, r17
     fd4:	ec df       	rcall	.-40     	; 0xfae <_ZL9rf12_byteh>
     fd6:	c8 2b       	or	r28, r24
     fd8:	2a 9a       	sbi	0x05, 2	; 5
     fda:	e7 df       	rcall	.-50     	; 0xfaa <_ZL15allowInterruptsv>
     fdc:	8c 2f       	mov	r24, r28
     fde:	9d 2f       	mov	r25, r29
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	08 95       	ret

00000fe8 <_ZL9rf12_idlev>:
     fe8:	80 91 be 01 	lds	r24, 0x01BE
     fec:	90 91 bf 01 	lds	r25, 0x01BF
     ff0:	8f 70       	andi	r24, 0x0F	; 15
     ff2:	90 93 bf 01 	sts	0x01BF, r25
     ff6:	80 93 be 01 	sts	0x01BE, r24
     ffa:	80 91 be 01 	lds	r24, 0x01BE
     ffe:	90 91 bf 01 	lds	r25, 0x01BF
    1002:	88 60       	ori	r24, 0x08	; 8
    1004:	90 93 bf 01 	sts	0x01BF, r25
    1008:	80 93 be 01 	sts	0x01BE, r24
    100c:	80 91 be 01 	lds	r24, 0x01BE
    1010:	90 91 bf 01 	lds	r25, 0x01BF
    1014:	d2 cf       	rjmp	.-92     	; 0xfba <_ZL9rf12_xferj>

00001016 <_Z12rf12_spiInitv>:
    1016:	84 b1       	in	r24, 0x04	; 4
    1018:	8c 62       	ori	r24, 0x2C	; 44
    101a:	84 b9       	out	0x04, r24	; 4
    101c:	2a 9a       	sbi	0x05, 2	; 5
    101e:	24 98       	cbi	0x04, 4	; 4
    1020:	80 e5       	ldi	r24, 0x50	; 80
    1022:	8c bd       	out	0x2c, r24	; 44
    1024:	8d b5       	in	r24, 0x2d	; 45
    1026:	81 60       	ori	r24, 0x01	; 1
    1028:	8d bd       	out	0x2d, r24	; 45
    102a:	52 98       	cbi	0x0a, 2	; 10
    102c:	5a 9a       	sbi	0x0b, 2	; 11
    102e:	08 95       	ret

00001030 <_Z13rf12_recvDonev>:
    1030:	80 91 c0 01 	lds	r24, 0x01C0
    1034:	87 30       	cpi	r24, 0x07	; 7
    1036:	09 f0       	breq	.+2      	; 0x103a <_Z13rf12_recvDonev+0xa>
    1038:	51 c0       	rjmp	.+162    	; 0x10dc <_Z13rf12_recvDonev+0xac>
    103a:	80 91 c3 01 	lds	r24, 0x01C3
    103e:	88 23       	and	r24, r24
    1040:	a1 f0       	breq	.+40     	; 0x106a <_Z13rf12_recvDonev+0x3a>
    1042:	90 91 c1 01 	lds	r25, 0x01C1
    1046:	98 17       	cp	r25, r24
    1048:	28 f4       	brcc	.+10     	; 0x1054 <_Z13rf12_recvDonev+0x24>
    104a:	80 91 c1 01 	lds	r24, 0x01C1
    104e:	87 34       	cpi	r24, 0x47	; 71
    1050:	08 f4       	brcc	.+2      	; 0x1054 <_Z13rf12_recvDonev+0x24>
    1052:	44 c0       	rjmp	.+136    	; 0x10dc <_Z13rf12_recvDonev+0xac>
    1054:	84 e0       	ldi	r24, 0x04	; 4
    1056:	80 93 c0 01 	sts	0x01C0, r24
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	90 93 b8 01 	sts	0x01B8, r25
    1062:	80 93 b7 01 	sts	0x01B7, r24
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	08 95       	ret
    106a:	20 91 c1 01 	lds	r18, 0x01C1
    106e:	80 91 72 01 	lds	r24, 0x0172
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	05 96       	adiw	r24, 0x05	; 5
    1078:	28 17       	cp	r18, r24
    107a:	39 07       	cpc	r19, r25
    107c:	24 f4       	brge	.+8      	; 0x1086 <_Z13rf12_recvDonev+0x56>
    107e:	80 91 c1 01 	lds	r24, 0x01C1
    1082:	87 34       	cpi	r24, 0x47	; 71
    1084:	58 f1       	brcs	.+86     	; 0x10dc <_Z13rf12_recvDonev+0xac>
    1086:	84 e0       	ldi	r24, 0x04	; 4
    1088:	80 93 c0 01 	sts	0x01C0, r24
    108c:	80 91 72 01 	lds	r24, 0x0172
    1090:	83 34       	cpi	r24, 0x43	; 67
    1092:	30 f0       	brcs	.+12     	; 0x10a0 <_Z13rf12_recvDonev+0x70>
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	90 93 b8 01 	sts	0x01B8, r25
    109c:	80 93 b7 01 	sts	0x01B7, r24
    10a0:	80 91 71 01 	lds	r24, 0x0171
    10a4:	86 ff       	sbrs	r24, 6
    10a6:	0b c0       	rjmp	.+22     	; 0x10be <_Z13rf12_recvDonev+0x8e>
    10a8:	80 91 c4 01 	lds	r24, 0x01C4
    10ac:	98 2f       	mov	r25, r24
    10ae:	9f 71       	andi	r25, 0x1F	; 31
    10b0:	9f 31       	cpi	r25, 0x1F	; 31
    10b2:	29 f0       	breq	.+10     	; 0x10be <_Z13rf12_recvDonev+0x8e>
    10b4:	90 91 71 01 	lds	r25, 0x0171
    10b8:	89 27       	eor	r24, r25
    10ba:	8f 71       	andi	r24, 0x1F	; 31
    10bc:	79 f4       	brne	.+30     	; 0x10dc <_Z13rf12_recvDonev+0xac>
    10be:	80 91 b7 01 	lds	r24, 0x01B7
    10c2:	90 91 b8 01 	lds	r25, 0x01B8
    10c6:	89 2b       	or	r24, r25
    10c8:	09 f0       	breq	.+2      	; 0x10cc <_Z13rf12_recvDonev+0x9c>
    10ca:	55 c0       	rjmp	.+170    	; 0x1176 <_Z13rf12_recvDonev+0x146>
    10cc:	e0 91 6a 01 	lds	r30, 0x016A
    10d0:	f0 91 6b 01 	lds	r31, 0x016B
    10d4:	30 97       	sbiw	r30, 0x00	; 0
    10d6:	09 f0       	breq	.+2      	; 0x10da <_Z13rf12_recvDonev+0xaa>
    10d8:	4a c0       	rjmp	.+148    	; 0x116e <_Z13rf12_recvDonev+0x13e>
    10da:	4d c0       	rjmp	.+154    	; 0x1176 <_Z13rf12_recvDonev+0x146>
    10dc:	80 91 c0 01 	lds	r24, 0x01C0
    10e0:	84 30       	cpi	r24, 0x04	; 4
    10e2:	09 f0       	breq	.+2      	; 0x10e6 <_Z13rf12_recvDonev+0xb6>
    10e4:	42 c0       	rjmp	.+132    	; 0x116a <_Z13rf12_recvDonev+0x13a>
    10e6:	10 92 72 01 	sts	0x0172, r1
    10ea:	10 92 c1 01 	sts	0x01C1, r1
    10ee:	8f ef       	ldi	r24, 0xFF	; 255
    10f0:	9f ef       	ldi	r25, 0xFF	; 255
    10f2:	90 93 b8 01 	sts	0x01B8, r25
    10f6:	80 93 b7 01 	sts	0x01B7, r24
    10fa:	20 91 c2 01 	lds	r18, 0x01C2
    10fe:	22 23       	and	r18, r18
    1100:	d9 f0       	breq	.+54     	; 0x1138 <_Z13rf12_recvDonev+0x108>
    1102:	82 27       	eor	r24, r18
    1104:	28 2f       	mov	r18, r24
    1106:	22 95       	swap	r18
    1108:	28 27       	eor	r18, r24
    110a:	02 2e       	mov	r0, r18
    110c:	26 95       	lsr	r18
    110e:	26 95       	lsr	r18
    1110:	20 25       	eor	r18, r0
    1112:	02 2e       	mov	r0, r18
    1114:	26 95       	lsr	r18
    1116:	20 25       	eor	r18, r0
    1118:	27 70       	andi	r18, 0x07	; 7
    111a:	08 2e       	mov	r0, r24
    111c:	89 2f       	mov	r24, r25
    111e:	26 95       	lsr	r18
    1120:	07 94       	ror	r0
    1122:	27 95       	ror	r18
    1124:	90 2d       	mov	r25, r0
    1126:	82 27       	eor	r24, r18
    1128:	06 94       	lsr	r0
    112a:	27 95       	ror	r18
    112c:	90 25       	eor	r25, r0
    112e:	82 27       	eor	r24, r18
    1130:	90 93 b8 01 	sts	0x01B8, r25
    1134:	80 93 b7 01 	sts	0x01B7, r24
    1138:	87 e0       	ldi	r24, 0x07	; 7
    113a:	80 93 c0 01 	sts	0x01C0, r24
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	80 93 ba 01 	sts	0x01BA, r24
    1144:	83 ea       	ldi	r24, 0xA3	; 163
    1146:	94 e9       	ldi	r25, 0x94	; 148
    1148:	38 df       	rcall	.-400    	; 0xfba <_ZL9rf12_xferj>
    114a:	80 91 be 01 	lds	r24, 0x01BE
    114e:	90 91 bf 01 	lds	r25, 0x01BF
    1152:	88 6d       	ori	r24, 0xD8	; 216
    1154:	90 93 bf 01 	sts	0x01BF, r25
    1158:	80 93 be 01 	sts	0x01BE, r24
    115c:	80 91 be 01 	lds	r24, 0x01BE
    1160:	90 91 bf 01 	lds	r25, 0x01BF
    1164:	2a df       	rcall	.-428    	; 0xfba <_ZL9rf12_xferj>
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	08 95       	ret
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	08 95       	ret
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	09 95       	icall
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	08 95       	ret
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	9f ef       	ldi	r25, 0xFF	; 255
    117a:	dc 01       	movw	r26, r24
    117c:	80 93 6c 01 	sts	0x016C, r24
    1180:	90 93 6d 01 	sts	0x016D, r25
    1184:	a0 93 6e 01 	sts	0x016E, r26
    1188:	b0 93 6f 01 	sts	0x016F, r27
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	08 95       	ret

00001190 <_Z15rf12_setBitrateh>:
    1190:	cf 92       	push	r12
    1192:	df 92       	push	r13
    1194:	ef 92       	push	r14
    1196:	ff 92       	push	r15
    1198:	0f 93       	push	r16
    119a:	1f 93       	push	r17
    119c:	cf 93       	push	r28
    119e:	c8 2f       	mov	r28, r24
    11a0:	08 2f       	mov	r16, r24
    11a2:	10 e0       	ldi	r17, 0x00	; 0
    11a4:	c8 01       	movw	r24, r16
    11a6:	96 6c       	ori	r25, 0xC6	; 198
    11a8:	08 df       	rcall	.-496    	; 0xfba <_ZL9rf12_xferj>
    11aa:	cf 77       	andi	r28, 0x7F	; 127
    11ac:	2c 2f       	mov	r18, r28
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	2f 5f       	subi	r18, 0xFF	; 255
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    11b4:	44 27       	eor	r20, r20
    11b6:	37 fd       	sbrc	r19, 7
    11b8:	40 95       	com	r20
    11ba:	54 2f       	mov	r21, r20
    11bc:	6b ef       	ldi	r22, 0xFB	; 251
    11be:	72 e4       	ldi	r23, 0x42	; 66
    11c0:	85 e0       	ldi	r24, 0x05	; 5
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	1f d4       	rcall	.+2110   	; 0x1a04 <__udivmodsi4>
    11c6:	69 01       	movw	r12, r18
    11c8:	7a 01       	movw	r14, r20
    11ca:	c8 01       	movw	r24, r16
    11cc:	88 0f       	add	r24, r24
    11ce:	89 2f       	mov	r24, r25
    11d0:	88 1f       	adc	r24, r24
    11d2:	99 0b       	sbc	r25, r25
    11d4:	8c 01       	movw	r16, r24
    11d6:	00 0f       	add	r16, r16
    11d8:	11 1f       	adc	r17, r17
    11da:	00 0f       	add	r16, r16
    11dc:	11 1f       	adc	r17, r17
    11de:	00 0f       	add	r16, r16
    11e0:	11 1f       	adc	r17, r17
    11e2:	08 1b       	sub	r16, r24
    11e4:	19 0b       	sbc	r17, r25
    11e6:	0f 5f       	subi	r16, 0xFF	; 255
    11e8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ea:	98 01       	movw	r18, r16
    11ec:	44 27       	eor	r20, r20
    11ee:	37 fd       	sbrc	r19, 7
    11f0:	40 95       	com	r20
    11f2:	54 2f       	mov	r21, r20
    11f4:	c7 01       	movw	r24, r14
    11f6:	b6 01       	movw	r22, r12
    11f8:	05 d4       	rcall	.+2058   	; 0x1a04 <__udivmodsi4>
    11fa:	da 01       	movw	r26, r20
    11fc:	c9 01       	movw	r24, r18
    11fe:	68 94       	set
    1200:	12 f8       	bld	r1, 2
    1202:	b6 95       	lsr	r27
    1204:	a7 95       	ror	r26
    1206:	97 95       	ror	r25
    1208:	87 95       	ror	r24
    120a:	16 94       	lsr	r1
    120c:	d1 f7       	brne	.-12     	; 0x1202 <_Z15rf12_setBitrateh+0x72>
    120e:	bc 01       	movw	r22, r24
    1210:	cd 01       	movw	r24, r26
    1212:	6d 57       	subi	r22, 0x7D	; 125
    1214:	7c 4f       	sbci	r23, 0xFC	; 252
    1216:	8f 4f       	sbci	r24, 0xFF	; 255
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	24 e8       	ldi	r18, 0x84	; 132
    121c:	33 e0       	ldi	r19, 0x03	; 3
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	50 e0       	ldi	r21, 0x00	; 0
    1222:	f0 d3       	rcall	.+2016   	; 0x1a04 <__udivmodsi4>
    1224:	20 93 b9 01 	sts	0x01B9, r18
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
    1232:	df 90       	pop	r13
    1234:	cf 90       	pop	r12
    1236:	08 95       	ret

00001238 <_Z19rf12_setFixedLengthh>:
    1238:	81 11       	cpse	r24, r1
    123a:	03 c0       	rjmp	.+6      	; 0x1242 <_Z19rf12_setFixedLengthh+0xa>
    123c:	10 92 c3 01 	sts	0x01C3, r1
    1240:	08 95       	ret
    1242:	8f 5f       	subi	r24, 0xFF	; 255
    1244:	80 93 c3 01 	sts	0x01C3, r24
    1248:	08 95       	ret

0000124a <_Z14rf12_sendStarth>:
    124a:	86 fd       	sbrc	r24, 6
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <_Z14rf12_sendStarth+0xe>
    124e:	80 7e       	andi	r24, 0xE0	; 224
    1250:	90 91 c4 01 	lds	r25, 0x01C4
    1254:	9f 71       	andi	r25, 0x1F	; 31
    1256:	89 0f       	add	r24, r25
    1258:	80 93 71 01 	sts	0x0171, r24
    125c:	e0 91 6a 01 	lds	r30, 0x016A
    1260:	f0 91 6b 01 	lds	r31, 0x016B
    1264:	30 97       	sbiw	r30, 0x00	; 0
    1266:	11 f0       	breq	.+4      	; 0x126c <_Z14rf12_sendStarth+0x22>
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	09 95       	icall
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	9f ef       	ldi	r25, 0xFF	; 255
    1270:	90 93 b8 01 	sts	0x01B8, r25
    1274:	80 93 b7 01 	sts	0x01B7, r24
    1278:	80 91 b7 01 	lds	r24, 0x01B7
    127c:	90 91 b8 01 	lds	r25, 0x01B8
    1280:	20 91 c2 01 	lds	r18, 0x01C2
    1284:	82 27       	eor	r24, r18
    1286:	28 2f       	mov	r18, r24
    1288:	22 95       	swap	r18
    128a:	28 27       	eor	r18, r24
    128c:	02 2e       	mov	r0, r18
    128e:	26 95       	lsr	r18
    1290:	26 95       	lsr	r18
    1292:	20 25       	eor	r18, r0
    1294:	02 2e       	mov	r0, r18
    1296:	26 95       	lsr	r18
    1298:	20 25       	eor	r18, r0
    129a:	27 70       	andi	r18, 0x07	; 7
    129c:	08 2e       	mov	r0, r24
    129e:	89 2f       	mov	r24, r25
    12a0:	26 95       	lsr	r18
    12a2:	07 94       	ror	r0
    12a4:	27 95       	ror	r18
    12a6:	90 2d       	mov	r25, r0
    12a8:	82 27       	eor	r24, r18
    12aa:	06 94       	lsr	r0
    12ac:	27 95       	ror	r18
    12ae:	90 25       	eor	r25, r0
    12b0:	82 27       	eor	r24, r18
    12b2:	90 93 b8 01 	sts	0x01B8, r25
    12b6:	80 93 b7 01 	sts	0x01B7, r24
    12ba:	88 e0       	ldi	r24, 0x08	; 8
    12bc:	80 93 c0 01 	sts	0x01C0, r24
    12c0:	80 91 be 01 	lds	r24, 0x01BE
    12c4:	90 91 bf 01 	lds	r25, 0x01BF
    12c8:	88 63       	ori	r24, 0x38	; 56
    12ca:	90 93 bf 01 	sts	0x01BF, r25
    12ce:	80 93 be 01 	sts	0x01BE, r24
    12d2:	80 91 be 01 	lds	r24, 0x01BE
    12d6:	90 91 bf 01 	lds	r25, 0x01BF
    12da:	6f ce       	rjmp	.-802    	; 0xfba <_ZL9rf12_xferj>

000012dc <_Z14rf12_sendStarthPKvh>:
    12dc:	cf 93       	push	r28
    12de:	c8 2f       	mov	r28, r24
    12e0:	40 93 72 01 	sts	0x0172, r20
    12e4:	23 e7       	ldi	r18, 0x73	; 115
    12e6:	31 e0       	ldi	r19, 0x01	; 1
    12e8:	50 e0       	ldi	r21, 0x00	; 0
    12ea:	82 2f       	mov	r24, r18
    12ec:	93 2f       	mov	r25, r19
    12ee:	c0 d3       	rcall	.+1920   	; 0x1a70 <memcpy>
    12f0:	8c 2f       	mov	r24, r28
    12f2:	ab df       	rcall	.-170    	; 0x124a <_Z14rf12_sendStarth>
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <_Z13rf12_sendWaith>:
    12f8:	44 e0       	ldi	r20, 0x04	; 4
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	5c e0       	ldi	r21, 0x0C	; 12
    12fe:	16 c0       	rjmp	.+44     	; 0x132c <_Z13rf12_sendWaith+0x34>
    1300:	88 23       	and	r24, r24
    1302:	a1 f0       	breq	.+40     	; 0x132c <_Z13rf12_sendWaith+0x34>
    1304:	93 b7       	in	r25, 0x33	; 51
    1306:	91 7f       	andi	r25, 0xF1	; 241
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	21 f0       	breq	.+8      	; 0x1314 <_Z13rf12_sendWaith+0x1c>
    130c:	82 30       	cpi	r24, 0x02	; 2
    130e:	21 f4       	brne	.+8      	; 0x1318 <_Z13rf12_sendWaith+0x20>
    1310:	25 2f       	mov	r18, r21
    1312:	03 c0       	rjmp	.+6      	; 0x131a <_Z13rf12_sendWaith+0x22>
    1314:	24 2f       	mov	r18, r20
    1316:	01 c0       	rjmp	.+2      	; 0x131a <_Z13rf12_sendWaith+0x22>
    1318:	23 2f       	mov	r18, r19
    131a:	92 2b       	or	r25, r18
    131c:	93 bf       	out	0x33, r25	; 51
    131e:	93 b7       	in	r25, 0x33	; 51
    1320:	91 60       	ori	r25, 0x01	; 1
    1322:	93 bf       	out	0x33, r25	; 51
    1324:	88 95       	sleep
    1326:	93 b7       	in	r25, 0x33	; 51
    1328:	9e 7f       	andi	r25, 0xFE	; 254
    132a:	93 bf       	out	0x33, r25	; 51
    132c:	90 91 c0 01 	lds	r25, 0x01C0
    1330:	94 30       	cpi	r25, 0x04	; 4
    1332:	31 f7       	brne	.-52     	; 0x1300 <_Z13rf12_sendWaith+0x8>
    1334:	08 95       	ret

00001336 <_Z21rf12_interruptcontrolv>:
    1336:	e8 9a       	sbi	0x1d, 0	; 29
    1338:	e9 e6       	ldi	r30, 0x69	; 105
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	8d 7f       	andi	r24, 0xFD	; 253
    1340:	80 83       	st	Z, r24
    1342:	08 95       	ret

00001344 <_Z12rf12_restorehhh>:
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	d6 2f       	mov	r29, r22
    134a:	c4 2f       	mov	r28, r20
    134c:	80 93 c4 01 	sts	0x01C4, r24
    1350:	40 93 c2 01 	sts	0x01C2, r20
    1354:	60 93 c5 01 	sts	0x01C5, r22
    1358:	ee df       	rcall	.-36     	; 0x1336 <_Z21rf12_interruptcontrolv>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	6d df       	rcall	.-294    	; 0x1238 <_Z19rf12_setFixedLengthh>
    135e:	23 de       	rcall	.-954    	; 0xfa6 <_ZL15blockInterruptsv>
    1360:	25 e0       	ldi	r18, 0x05	; 5
    1362:	32 e8       	ldi	r19, 0x82	; 130
    1364:	30 93 bf 01 	sts	0x01BF, r19
    1368:	20 93 be 01 	sts	0x01BE, r18
    136c:	80 91 be 01 	lds	r24, 0x01BE
    1370:	90 91 bf 01 	lds	r25, 0x01BF
    1374:	22 de       	rcall	.-956    	; 0xfba <_ZL9rf12_xferj>
    1376:	20 e1       	ldi	r18, 0x10	; 16
    1378:	d2 9f       	mul	r29, r18
    137a:	c0 01       	movw	r24, r0
    137c:	11 24       	eor	r1, r1
    137e:	87 6c       	ori	r24, 0xC7	; 199
    1380:	90 68       	ori	r25, 0x80	; 128
    1382:	1b de       	rcall	.-970    	; 0xfba <_ZL9rf12_xferj>
    1384:	80 e4       	ldi	r24, 0x40	; 64
    1386:	96 ea       	ldi	r25, 0xA6	; 166
    1388:	18 de       	rcall	.-976    	; 0xfba <_ZL9rf12_xferj>
    138a:	86 e0       	ldi	r24, 0x06	; 6
    138c:	01 df       	rcall	.-510    	; 0x1190 <_Z15rf12_setBitrateh>
    138e:	82 ea       	ldi	r24, 0xA2	; 162
    1390:	94 e9       	ldi	r25, 0x94	; 148
    1392:	13 de       	rcall	.-986    	; 0xfba <_ZL9rf12_xferj>
    1394:	8c ea       	ldi	r24, 0xAC	; 172
    1396:	92 ec       	ldi	r25, 0xC2	; 194
    1398:	10 de       	rcall	.-992    	; 0xfba <_ZL9rf12_xferj>
    139a:	cc 23       	and	r28, r28
    139c:	41 f0       	breq	.+16     	; 0x13ae <_Z12rf12_restorehhh+0x6a>
    139e:	83 e8       	ldi	r24, 0x83	; 131
    13a0:	9a ec       	ldi	r25, 0xCA	; 202
    13a2:	0b de       	rcall	.-1002   	; 0xfba <_ZL9rf12_xferj>
    13a4:	8c 2f       	mov	r24, r28
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9e 6c       	ori	r25, 0xCE	; 206
    13aa:	07 de       	rcall	.-1010   	; 0xfba <_ZL9rf12_xferj>
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <_Z12rf12_restorehhh+0x76>
    13ae:	8b e8       	ldi	r24, 0x8B	; 139
    13b0:	9a ec       	ldi	r25, 0xCA	; 202
    13b2:	03 de       	rcall	.-1018   	; 0xfba <_ZL9rf12_xferj>
    13b4:	8d e2       	ldi	r24, 0x2D	; 45
    13b6:	9e ec       	ldi	r25, 0xCE	; 206
    13b8:	00 de       	rcall	.-1024   	; 0xfba <_ZL9rf12_xferj>
    13ba:	83 e8       	ldi	r24, 0x83	; 131
    13bc:	94 ec       	ldi	r25, 0xC4	; 196
    13be:	fd dd       	rcall	.-1030   	; 0xfba <_ZL9rf12_xferj>
    13c0:	80 e5       	ldi	r24, 0x50	; 80
    13c2:	98 e9       	ldi	r25, 0x98	; 152
    13c4:	fa dd       	rcall	.-1036   	; 0xfba <_ZL9rf12_xferj>
    13c6:	87 e7       	ldi	r24, 0x77	; 119
    13c8:	9c ec       	ldi	r25, 0xCC	; 204
    13ca:	f7 dd       	rcall	.-1042   	; 0xfba <_ZL9rf12_xferj>
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 ee       	ldi	r25, 0xE0	; 224
    13d0:	f4 dd       	rcall	.-1048   	; 0xfba <_ZL9rf12_xferj>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	98 ec       	ldi	r25, 0xC8	; 200
    13d6:	f1 dd       	rcall	.-1054   	; 0xfba <_ZL9rf12_xferj>
    13d8:	89 e4       	ldi	r24, 0x49	; 73
    13da:	90 ec       	ldi	r25, 0xC0	; 192
    13dc:	ee dd       	rcall	.-1060   	; 0xfba <_ZL9rf12_xferj>
    13de:	84 e0       	ldi	r24, 0x04	; 4
    13e0:	80 93 c0 01 	sts	0x01C0, r24
    13e4:	e2 dd       	rcall	.-1084   	; 0xfaa <_ZL15allowInterruptsv>
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <_Z15rf12_initializehhh>:
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	c8 2f       	mov	r28, r24
    13f4:	d6 2f       	mov	r29, r22
    13f6:	14 2f       	mov	r17, r20
    13f8:	80 93 c4 01 	sts	0x01C4, r24
    13fc:	40 93 c2 01 	sts	0x01C2, r20
    1400:	60 93 c5 01 	sts	0x01C5, r22
    1404:	08 de       	rcall	.-1008   	; 0x1016 <_Z12rf12_spiInitv>
    1406:	97 df       	rcall	.-210    	; 0x1336 <_Z21rf12_interruptcontrolv>
    1408:	82 e8       	ldi	r24, 0x82	; 130
    140a:	9a ec       	ldi	r25, 0xCA	; 202
    140c:	d6 dd       	rcall	.-1108   	; 0xfba <_ZL9rf12_xferj>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	9e ef       	ldi	r25, 0xFE	; 254
    1412:	d3 dd       	rcall	.-1114   	; 0xfba <_ZL9rf12_xferj>
    1414:	85 e0       	ldi	r24, 0x05	; 5
    1416:	80 93 c0 01 	sts	0x01C0, r24
    141a:	83 b7       	in	r24, 0x33	; 51
    141c:	81 7f       	andi	r24, 0xF1	; 241
    141e:	83 bf       	out	0x33, r24	; 51
    1420:	80 91 c0 01 	lds	r24, 0x01C0
    1424:	85 30       	cpi	r24, 0x05	; 5
    1426:	59 f4       	brne	.+22     	; 0x143e <_Z15rf12_initializehhh+0x52>
    1428:	93 b7       	in	r25, 0x33	; 51
    142a:	91 60       	ori	r25, 0x01	; 1
    142c:	93 bf       	out	0x33, r25	; 51
    142e:	88 95       	sleep
    1430:	93 b7       	in	r25, 0x33	; 51
    1432:	9e 7f       	andi	r25, 0xFE	; 254
    1434:	93 bf       	out	0x33, r25	; 51
    1436:	90 91 c0 01 	lds	r25, 0x01C0
    143a:	95 30       	cpi	r25, 0x05	; 5
    143c:	a9 f3       	breq	.-22     	; 0x1428 <_Z15rf12_initializehhh+0x3c>
    143e:	41 2f       	mov	r20, r17
    1440:	6d 2f       	mov	r22, r29
    1442:	8c 2f       	mov	r24, r28
    1444:	7f df       	rcall	.-258    	; 0x1344 <_Z12rf12_restorehhh>
    1446:	80 91 c4 01 	lds	r24, 0x01C4
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	08 95       	ret

00001452 <_Z16rf12_setWatchdogm>:
/// interrupt in the RFM12 module. Use rf12_wakeup() to check if the wakeup-interrupt
/// fired. This allows very deep sleep states (timer off) while still being able to wakeup
/// because of the external interrupt. The RFM12b wakeup-timer only needs about 1.5µA.
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
    1452:	cf 92       	push	r12
    1454:	df 92       	push	r13
    1456:	ef 92       	push	r14
    1458:	ff 92       	push	r15
    145a:	cf 93       	push	r28
    145c:	6b 01       	movw	r12, r22
    145e:	7c 01       	movw	r14, r24
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	c8 16       	cp	r12, r24
    1464:	d1 04       	cpc	r13, r1
    1466:	e1 04       	cpc	r14, r1
    1468:	f1 04       	cpc	r15, r1
    146a:	79 f0       	breq	.+30     	; 0x148a <_Z16rf12_setWatchdogm+0x38>
    146c:	70 f0       	brcs	.+28     	; 0x148a <_Z16rf12_setWatchdogm+0x38>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    146e:	c0 e0       	ldi	r28, 0x00	; 0
	while (m > 255) {
		r  += 1;
    1470:	cf 5f       	subi	r28, 0xFF	; 255
		m >>= 1;
    1472:	f6 94       	lsr	r15
    1474:	e7 94       	ror	r14
    1476:	d7 94       	ror	r13
    1478:	c7 94       	ror	r12
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    147a:	8f ef       	ldi	r24, 0xFF	; 255
    147c:	c8 16       	cp	r12, r24
    147e:	d1 04       	cpc	r13, r1
    1480:	e1 04       	cpc	r14, r1
    1482:	f1 04       	cpc	r15, r1
    1484:	09 f0       	breq	.+2      	; 0x1488 <_Z16rf12_setWatchdogm+0x36>
    1486:	a0 f7       	brcc	.-24     	; 0x1470 <_Z16rf12_setWatchdogm+0x1e>
    1488:	01 c0       	rjmp	.+2      	; 0x148c <_Z16rf12_setWatchdogm+0x3a>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    148a:	c0 e0       	ldi	r28, 0x00	; 0
		m >>= 1;
	}
	
	// Disable old wakeup-timer if enabled
//	if (bitRead(rfmstate,1)) {
	if ((rfmstate>>1)&0x01){
    148c:	80 91 be 01 	lds	r24, 0x01BE
    1490:	90 91 bf 01 	lds	r25, 0x01BF
    1494:	81 ff       	sbrs	r24, 1
    1496:	0e c0       	rjmp	.+28     	; 0x14b4 <_Z16rf12_setWatchdogm+0x62>
		//bitClear(rfmstate,1);
		rfmstate &= ~(1 << 1);
    1498:	80 91 be 01 	lds	r24, 0x01BE
    149c:	90 91 bf 01 	lds	r25, 0x01BF
    14a0:	8d 7f       	andi	r24, 0xFD	; 253
    14a2:	90 93 bf 01 	sts	0x01BF, r25
    14a6:	80 93 be 01 	sts	0x01BE, r24
		rf12_xfer(rfmstate);
    14aa:	80 91 be 01 	lds	r24, 0x01BE
    14ae:	90 91 bf 01 	lds	r25, 0x01BF
    14b2:	83 dd       	rcall	.-1274   	; 0xfba <_ZL9rf12_xferj>
	}
	
	// enable wakeup call if we have to
	if (m>0) {
    14b4:	c1 14       	cp	r12, r1
    14b6:	d1 04       	cpc	r13, r1
    14b8:	e1 04       	cpc	r14, r1
    14ba:	f1 04       	cpc	r15, r1
    14bc:	b1 f0       	breq	.+44     	; 0x14ea <_Z16rf12_setWatchdogm+0x98>
		// write time to wakeup-register
		rf12_xfer(RF_WAKEUP_TIMER | (r<<8) | m);
    14be:	3c 2f       	mov	r19, r28
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	d7 01       	movw	r26, r14
    14c4:	c6 01       	movw	r24, r12
    14c6:	90 6e       	ori	r25, 0xE0	; 224
    14c8:	82 2b       	or	r24, r18
    14ca:	93 2b       	or	r25, r19
    14cc:	76 dd       	rcall	.-1300   	; 0xfba <_ZL9rf12_xferj>
		// enable wakeup
		//bitSet(rfmstate,1);
		rfmstate |= (1 << 1);
    14ce:	80 91 be 01 	lds	r24, 0x01BE
    14d2:	90 91 bf 01 	lds	r25, 0x01BF
    14d6:	82 60       	ori	r24, 0x02	; 2
    14d8:	90 93 bf 01 	sts	0x01BF, r25
    14dc:	80 93 be 01 	sts	0x01BE, r24
		rf12_xfer(rfmstate);
    14e0:	80 91 be 01 	lds	r24, 0x01BE
    14e4:	90 91 bf 01 	lds	r25, 0x01BF
    14e8:	68 dd       	rcall	.-1328   	; 0xfba <_ZL9rf12_xferj>
	}
}
    14ea:	cf 91       	pop	r28
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	08 95       	ret

000014f6 <__vector_1>:
	while (!bitRead(PINB, RFM_IRQ - 8))
	rf12_interrupt();
}
#else
*/
ISR(INT0_vect) {
    14f6:	1f 92       	push	r1
    14f8:	0f 92       	push	r0
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	0f 92       	push	r0
    14fe:	11 24       	eor	r1, r1
    1500:	1f 93       	push	r17
    1502:	2f 93       	push	r18
    1504:	3f 93       	push	r19
    1506:	4f 93       	push	r20
    1508:	5f 93       	push	r21
    150a:	6f 93       	push	r22
    150c:	7f 93       	push	r23
    150e:	8f 93       	push	r24
    1510:	9f 93       	push	r25
    1512:	af 93       	push	r26
    1514:	bf 93       	push	r27
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	ef 93       	push	r30
    151c:	ff 93       	push	r31
/// Requests RFM12 state from RF module and reads back a waiting data byte if there is
/// any.
/// One of two commands accessing SPI, so interrupts disabled in here
/// @param *data Pointer to  byte where to write the received data to (if any)
static uint16_t rf12_xferState (uint8_t *data) {
	blockInterrupts();
    151e:	43 dd       	rcall	.-1402   	; 0xfa6 <_ZL15blockInterruptsv>

	// writing can take place at full speed, even 8 MHz works
	//bitClear(SS_PORT, cs_pin);
	PORT_RFM_CS &= ~(1<<BIT_RFM_CS); //clear CS
    1520:	2a 98       	cbi	0x05, 2	; 5
	uint16_t res = rf12_byte(0x00) << 8;
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	44 dd       	rcall	.-1400   	; 0xfae <_ZL9rf12_byteh>
    1526:	d8 2f       	mov	r29, r24
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	c8 2f       	mov	r28, r24
	res |= rf12_byte(0x00);
    152c:	40 dd       	rcall	.-1408   	; 0xfae <_ZL9rf12_byteh>
    152e:	c8 2b       	or	r28, r24
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
    1530:	dd 23       	and	r29, r29
    1532:	2c f4       	brge	.+10     	; 0x153e <__vector_1+0x48>
    1534:	80 91 c0 01 	lds	r24, 0x01C0
    1538:	87 30       	cpi	r24, 0x07	; 7
    153a:	09 f4       	brne	.+2      	; 0x153e <__vector_1+0x48>
    153c:	0f c1       	rjmp	.+542    	; 0x175c <__vector_1+0x266>
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
		#endif
	}
	
	//bitSet(SS_PORT, cs_pin);
	PORT_RFM_CS |= (1 << BIT_RFM_CS); //  bitSet(SS_PORT, cs_pin);
    153e:	2a 9a       	sbi	0x05, 2	; 5

	allowInterrupts();
    1540:	34 dd       	rcall	.-1432   	; 0xfaa <_ZL15allowInterruptsv>
/// @details
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uint8_t in;
	state = rf12_xferState(&in);
    1542:	d0 93 bd 01 	sts	0x01BD, r29
    1546:	c0 93 bc 01 	sts	0x01BC, r28

	// data received or byte needed for sending
	if (state & RF_FIFO_BIT) {
    154a:	20 91 bc 01 	lds	r18, 0x01BC
    154e:	30 91 bd 01 	lds	r19, 0x01BD
    1552:	33 23       	and	r19, r19
    1554:	0c f0       	brlt	.+2      	; 0x1558 <__vector_1+0x62>
    1556:	e1 c0       	rjmp	.+450    	; 0x171a <__vector_1+0x224>
		
		if (rxstate == TXRECV) {  // we are receiving
    1558:	80 91 c0 01 	lds	r24, 0x01C0
    155c:	87 30       	cpi	r24, 0x07	; 7
    155e:	09 f0       	breq	.+2      	; 0x1562 <__vector_1+0x6c>
    1560:	78 c0       	rjmp	.+240    	; 0x1652 <__vector_1+0x15c>

			if (rxfill == 0 && group != 0)
    1562:	80 91 c1 01 	lds	r24, 0x01C1
    1566:	81 11       	cpse	r24, r1
    1568:	04 c0       	rjmp	.+8      	; 0x1572 <__vector_1+0x7c>
    156a:	80 91 c2 01 	lds	r24, 0x01C2
    156e:	81 11       	cpse	r24, r1
    1570:	ff c0       	rjmp	.+510    	; 0x1770 <__vector_1+0x27a>
			rf12_buf[rxfill++] = group;

			rf12_buf[rxfill++] = in;
    1572:	80 91 c1 01 	lds	r24, 0x01C1
    1576:	e8 2f       	mov	r30, r24
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	e0 59       	subi	r30, 0x90	; 144
    157c:	fe 4f       	sbci	r31, 0xFE	; 254
    157e:	10 83       	st	Z, r17
    1580:	8f 5f       	subi	r24, 0xFF	; 255
    1582:	80 93 c1 01 	sts	0x01C1, r24
			rf12_crc = _crc16_update(rf12_crc, in);
    1586:	20 91 b7 01 	lds	r18, 0x01B7
    158a:	30 91 b8 01 	lds	r19, 0x01B8
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    158e:	21 27       	eor	r18, r17
    1590:	12 2f       	mov	r17, r18
    1592:	12 95       	swap	r17
    1594:	12 27       	eor	r17, r18
    1596:	01 2e       	mov	r0, r17
    1598:	16 95       	lsr	r17
    159a:	16 95       	lsr	r17
    159c:	10 25       	eor	r17, r0
    159e:	01 2e       	mov	r0, r17
    15a0:	16 95       	lsr	r17
    15a2:	10 25       	eor	r17, r0
    15a4:	17 70       	andi	r17, 0x07	; 7
    15a6:	02 2e       	mov	r0, r18
    15a8:	23 2f       	mov	r18, r19
    15aa:	16 95       	lsr	r17
    15ac:	07 94       	ror	r0
    15ae:	17 95       	ror	r17
    15b0:	30 2d       	mov	r19, r0
    15b2:	21 27       	eor	r18, r17
    15b4:	06 94       	lsr	r0
    15b6:	17 95       	ror	r17
    15b8:	30 25       	eor	r19, r0
    15ba:	21 27       	eor	r18, r17
    15bc:	30 93 b8 01 	sts	0x01B8, r19
    15c0:	20 93 b7 01 	sts	0x01B7, r18

			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
    15c4:	e0 91 ba 01 	lds	r30, 0x01BA
    15c8:	e3 30       	cpi	r30, 0x03	; 3
    15ca:	18 f5       	brcc	.+70     	; 0x1612 <__vector_1+0x11c>
    15cc:	80 91 c1 01 	lds	r24, 0x01C1
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	02 97       	sbiw	r24, 0x02	; 2
    15d4:	60 91 b9 01 	lds	r22, 0x01B9
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	01 d2       	rcall	.+1026   	; 0x19de <__divmodhi4>
    15dc:	89 2b       	or	r24, r25
    15de:	09 f4       	brne	.+2      	; 0x15e2 <__vector_1+0xec>
    15e0:	d2 c0       	rjmp	.+420    	; 0x1786 <__vector_1+0x290>
    15e2:	17 c0       	rjmp	.+46     	; 0x1612 <__vector_1+0x11c>
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
    15e6:	e3 5b       	subi	r30, 0xB3	; 179
    15e8:	fe 4f       	sbci	r31, 0xFE	; 254
				: (drssi_dec_tree[drssi] >> 4);
    15ea:	80 81       	ld	r24, Z
    15ec:	8f 70       	andi	r24, 0x0F	; 15
    15ee:	06 c0       	rjmp	.+12     	; 0x15fc <__vector_1+0x106>
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	e3 5b       	subi	r30, 0xB3	; 179
    15f4:	fe 4f       	sbci	r31, 0xFE	; 254
    15f6:	80 81       	ld	r24, Z
    15f8:	82 95       	swap	r24
    15fa:	8f 70       	andi	r24, 0x0F	; 15
    15fc:	80 93 ba 01 	sts	0x01BA, r24
				if ( drssi < 3 ) {     // not yet final destination, set new threshold
    1600:	83 30       	cpi	r24, 0x03	; 3
    1602:	38 f4       	brcc	.+14     	; 0x1612 <__vector_1+0x11c>
					rf12_xfer(RF_RECV_CONTROL | drssi*2+1);
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	01 96       	adiw	r24, 0x01	; 1
    160c:	80 6a       	ori	r24, 0xA0	; 160
    160e:	94 69       	ori	r25, 0x94	; 148
    1610:	d4 dc       	rcall	.-1624   	; 0xfba <_ZL9rf12_xferj>
				}
			}

			// check if we got all the bytes (or maximum packet length was reached)
			if (fixedLength) {
    1612:	80 91 c3 01 	lds	r24, 0x01C3
    1616:	88 23       	and	r24, r24
    1618:	59 f0       	breq	.+22     	; 0x1630 <__vector_1+0x13a>
				if (rxfill >= fixedLength || rxfill >= RF_MAX) {
    161a:	90 91 c1 01 	lds	r25, 0x01C1
    161e:	98 17       	cp	r25, r24
    1620:	28 f4       	brcc	.+10     	; 0x162c <__vector_1+0x136>
    1622:	80 91 c1 01 	lds	r24, 0x01C1
    1626:	87 34       	cpi	r24, 0x47	; 71
    1628:	08 f4       	brcc	.+2      	; 0x162c <__vector_1+0x136>
    162a:	77 c0       	rjmp	.+238    	; 0x171a <__vector_1+0x224>
					rf12_idle();
    162c:	dd dc       	rcall	.-1606   	; 0xfe8 <_ZL9rf12_idlev>
    162e:	75 c0       	rjmp	.+234    	; 0x171a <__vector_1+0x224>
				}
				} else if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX) {
    1630:	20 91 c1 01 	lds	r18, 0x01C1
    1634:	80 91 72 01 	lds	r24, 0x0172
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	05 96       	adiw	r24, 0x05	; 5
    163e:	28 17       	cp	r18, r24
    1640:	39 07       	cpc	r19, r25
    1642:	2c f4       	brge	.+10     	; 0x164e <__vector_1+0x158>
    1644:	80 91 c1 01 	lds	r24, 0x01C1
    1648:	87 34       	cpi	r24, 0x47	; 71
    164a:	08 f4       	brcc	.+2      	; 0x164e <__vector_1+0x158>
    164c:	66 c0       	rjmp	.+204    	; 0x171a <__vector_1+0x224>
				rf12_idle();
    164e:	cc dc       	rcall	.-1640   	; 0xfe8 <_ZL9rf12_idlev>
    1650:	64 c0       	rjmp	.+200    	; 0x171a <__vector_1+0x224>
			}
			} else {                  // we are sending
			uint8_t out;

			if (rxstate < 0) {
    1652:	80 91 c0 01 	lds	r24, 0x01C0
    1656:	88 23       	and	r24, r24
    1658:	0c f0       	brlt	.+2      	; 0x165c <__vector_1+0x166>
    165a:	2f c0       	rjmp	.+94     	; 0x16ba <__vector_1+0x1c4>
				uint8_t pos = 3 + rf12_len + rxstate++;
    165c:	e0 91 72 01 	lds	r30, 0x0172
    1660:	80 91 c0 01 	lds	r24, 0x01C0
    1664:	98 2f       	mov	r25, r24
    1666:	9f 5f       	subi	r25, 0xFF	; 255
    1668:	90 93 c0 01 	sts	0x01C0, r25
    166c:	ed 5f       	subi	r30, 0xFD	; 253
    166e:	8e 0f       	add	r24, r30
				out = rf12_buf[pos];
    1670:	e8 2f       	mov	r30, r24
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	e0 59       	subi	r30, 0x90	; 144
    1676:	fe 4f       	sbci	r31, 0xFE	; 254
    1678:	80 81       	ld	r24, Z
				rf12_crc = _crc16_update(rf12_crc, out);
    167a:	20 91 b7 01 	lds	r18, 0x01B7
    167e:	30 91 b8 01 	lds	r19, 0x01B8
    1682:	28 27       	eor	r18, r24
    1684:	92 2f       	mov	r25, r18
    1686:	92 95       	swap	r25
    1688:	92 27       	eor	r25, r18
    168a:	09 2e       	mov	r0, r25
    168c:	96 95       	lsr	r25
    168e:	96 95       	lsr	r25
    1690:	90 25       	eor	r25, r0
    1692:	09 2e       	mov	r0, r25
    1694:	96 95       	lsr	r25
    1696:	90 25       	eor	r25, r0
    1698:	97 70       	andi	r25, 0x07	; 7
    169a:	02 2e       	mov	r0, r18
    169c:	23 2f       	mov	r18, r19
    169e:	96 95       	lsr	r25
    16a0:	07 94       	ror	r0
    16a2:	97 95       	ror	r25
    16a4:	30 2d       	mov	r19, r0
    16a6:	29 27       	eor	r18, r25
    16a8:	06 94       	lsr	r0
    16aa:	97 95       	ror	r25
    16ac:	30 25       	eor	r19, r0
    16ae:	29 27       	eor	r18, r25
    16b0:	30 93 b8 01 	sts	0x01B8, r19
    16b4:	20 93 b7 01 	sts	0x01B7, r18
    16b8:	2d c0       	rjmp	.+90     	; 0x1714 <__vector_1+0x21e>
			} else
			switch (rxstate++) {
    16ba:	80 91 c0 01 	lds	r24, 0x01C0
    16be:	98 2f       	mov	r25, r24
    16c0:	9f 5f       	subi	r25, 0xFF	; 255
    16c2:	90 93 c0 01 	sts	0x01C0, r25
    16c6:	83 30       	cpi	r24, 0x03	; 3
    16c8:	09 f1       	breq	.+66     	; 0x170c <__vector_1+0x216>
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <__vector_1+0x1e0>
    16cc:	88 23       	and	r24, r24
    16ce:	99 f0       	breq	.+38     	; 0x16f6 <__vector_1+0x200>
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	f9 f4       	brne	.+62     	; 0x1712 <__vector_1+0x21c>
    16d4:	15 c0       	rjmp	.+42     	; 0x1700 <__vector_1+0x20a>
    16d6:	8b 30       	cpi	r24, 0x0B	; 11
    16d8:	19 f0       	breq	.+6      	; 0x16e0 <__vector_1+0x1ea>
    16da:	8c 30       	cpi	r24, 0x0C	; 12
    16dc:	d1 f4       	brne	.+52     	; 0x1712 <__vector_1+0x21c>
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <__vector_1+0x1ee>
				case TXSYN1: out = 0x2D; break;
    16e0:	8d e2       	ldi	r24, 0x2D	; 45
    16e2:	18 c0       	rjmp	.+48     	; 0x1714 <__vector_1+0x21e>
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
    16e4:	80 91 c2 01 	lds	r24, 0x01C2
    16e8:	20 91 72 01 	lds	r18, 0x0172
    16ec:	9e ef       	ldi	r25, 0xFE	; 254
    16ee:	92 1b       	sub	r25, r18
    16f0:	90 93 c0 01 	sts	0x01C0, r25
    16f4:	0f c0       	rjmp	.+30     	; 0x1714 <__vector_1+0x21e>
				case TXCRC1: out = rf12_crc; break;
    16f6:	80 91 b7 01 	lds	r24, 0x01B7
    16fa:	90 91 b8 01 	lds	r25, 0x01B8
    16fe:	0a c0       	rjmp	.+20     	; 0x1714 <__vector_1+0x21e>
				case TXCRC2: out = rf12_crc >> 8; break;
    1700:	80 91 b7 01 	lds	r24, 0x01B7
    1704:	90 91 b8 01 	lds	r25, 0x01B8
    1708:	89 2f       	mov	r24, r25
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <__vector_1+0x21e>
				case TXDONE: rf12_idle(); // fall through
    170c:	6d dc       	rcall	.-1830   	; 0xfe8 <_ZL9rf12_idlev>
				default:     out = 0xAA;
    170e:	8a ea       	ldi	r24, 0xAA	; 170
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <__vector_1+0x21e>
    1712:	8a ea       	ldi	r24, 0xAA	; 170
			}

			rf12_xfer(RF_TXREG_WRITE | out);
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	98 6b       	ori	r25, 0xB8	; 184
    1718:	50 dc       	rcall	.-1888   	; 0xfba <_ZL9rf12_xferj>
		}
	}
	
	// power-on reset
	if (state & RF_POR_BIT) {
    171a:	80 91 bc 01 	lds	r24, 0x01BC
    171e:	90 91 bd 01 	lds	r25, 0x01BD
    1722:	96 ff       	sbrs	r25, 6
    1724:	03 c0       	rjmp	.+6      	; 0x172c <__vector_1+0x236>
		rxstate = POR_RECEIVED;
    1726:	86 e0       	ldi	r24, 0x06	; 6
    1728:	80 93 c0 01 	sts	0x01C0, r24
	}

	// got wakeup call
	if (state & RF_WDG_BIT) {
    172c:	80 91 bc 01 	lds	r24, 0x01BC
    1730:	90 91 bd 01 	lds	r25, 0x01BD
    1734:	94 ff       	sbrs	r25, 4
    1736:	07 c0       	rjmp	.+14     	; 0x1746 <__vector_1+0x250>
		rf12_setWatchdog(0);
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	70 e0       	ldi	r23, 0x00	; 0
    173c:	cb 01       	movw	r24, r22
    173e:	89 de       	rcall	.-750    	; 0x1452 <_Z16rf12_setWatchdogm>
		rf12_gotwakeup = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	80 93 bb 01 	sts	0x01BB, r24
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
    1746:	80 91 bc 01 	lds	r24, 0x01BC
    174a:	90 91 bd 01 	lds	r25, 0x01BD
    174e:	95 ff       	sbrs	r25, 5
    1750:	21 c0       	rjmp	.+66     	; 0x1794 <__vector_1+0x29e>
		rf12_idle();
    1752:	4a dc       	rcall	.-1900   	; 0xfe8 <_ZL9rf12_idlev>
		rxstate = TXIDLE;
    1754:	84 e0       	ldi	r24, 0x04	; 4
    1756:	80 93 c0 01 	sts	0x01C0, r24
    175a:	1c c0       	rjmp	.+56     	; 0x1794 <__vector_1+0x29e>
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
		// slow down to under 2.5 MHz
		#if F_CPU > 10000000
		//bitSet(SPCR, SPR0);
		SPCR |= (1 << SPR0); //  bitSet(SPCR, SPR0);
    175c:	8c b5       	in	r24, 0x2c	; 44
    175e:	81 60       	ori	r24, 0x01	; 1
    1760:	8c bd       	out	0x2c, r24	; 44
		#endif
		*data = rf12_byte(0x00);
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	24 dc       	rcall	.-1976   	; 0xfae <_ZL9rf12_byteh>
    1766:	18 2f       	mov	r17, r24
		#if F_CPU > 10000000
		//bitClear(SPCR, SPR0);
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
    1768:	8c b5       	in	r24, 0x2c	; 44
    176a:	8e 7f       	andi	r24, 0xFE	; 254
    176c:	8c bd       	out	0x2c, r24	; 44
    176e:	e7 ce       	rjmp	.-562    	; 0x153e <__vector_1+0x48>
	if (state & RF_FIFO_BIT) {
		
		if (rxstate == TXRECV) {  // we are receiving

			if (rxfill == 0 && group != 0)
			rf12_buf[rxfill++] = group;
    1770:	90 91 c1 01 	lds	r25, 0x01C1
    1774:	e9 2f       	mov	r30, r25
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	e0 59       	subi	r30, 0x90	; 144
    177a:	fe 4f       	sbci	r31, 0xFE	; 254
    177c:	80 83       	st	Z, r24
    177e:	9f 5f       	subi	r25, 0xFF	; 255
    1780:	90 93 c1 01 	sts	0x01C1, r25
    1784:	f6 ce       	rjmp	.-532    	; 0x1572 <__vector_1+0x7c>
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    1786:	80 91 bc 01 	lds	r24, 0x01BC
    178a:	90 91 bd 01 	lds	r25, 0x01BD
    178e:	90 fd       	sbrc	r25, 0
    1790:	29 cf       	rjmp	.-430    	; 0x15e4 <__vector_1+0xee>
    1792:	2e cf       	rjmp	.-420    	; 0x15f0 <__vector_1+0xfa>
#else
*/
ISR(INT0_vect) {
	//uart0_puts("I");
	rf12_interrupt();
}
    1794:	ff 91       	pop	r31
    1796:	ef 91       	pop	r30
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	1f 91       	pop	r17
    17b2:	0f 90       	pop	r0
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	0f 90       	pop	r0
    17b8:	1f 90       	pop	r1
    17ba:	18 95       	reti

000017bc <tone_init>:
#include <avr/io.h>

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume counsigned long _tAC_time;ntrol.

void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
    17bc:	21 9a       	sbi	0x04, 1	; 4
    17be:	08 95       	ret

000017c0 <noTone>:


	void noTone() {
	//	uart0_puts("STOP");
	//	TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
		 TCCR1B  &= ~(1<<0) | ~(1<<1) | ~(1<<2) ;        // No clock source (Timer/Counter stopped).
    17c0:	e1 e8       	ldi	r30, 0x81	; 129
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	80 83       	st	Z, r24
		 TCCR1A  = 0x00;       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
    17c8:	10 92 80 00 	sts	0x0080, r1
		PORTB &= ~(1 << 1); // Set pin PB1 to LOW.
    17cc:	29 98       	cbi	0x05, 1	; 5
    17ce:	08 95       	ret

000017d0 <tone>:
void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
	
}

void tone(unsigned long frequency, uint8_t volume) {
    17d0:	cf 92       	push	r12
    17d2:	df 92       	push	r13
    17d4:	ef 92       	push	r14
    17d6:	ff 92       	push	r15
    17d8:	cf 93       	push	r28
    17da:	df 93       	push	r29
    17dc:	6b 01       	movw	r12, r22
    17de:	7c 01       	movw	r14, r24
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
    17e0:	61 15       	cp	r22, r1
    17e2:	71 05       	cpc	r23, r1
    17e4:	81 05       	cpc	r24, r1
    17e6:	91 05       	cpc	r25, r1
    17e8:	11 f0       	breq	.+4      	; 0x17ee <tone+0x1e>
    17ea:	41 11       	cpse	r20, r1
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <tone+0x22>
    17ee:	e8 df       	rcall	.-48     	; 0x17c0 <noTone>
    17f0:	4d c0       	rjmp	.+154    	; 0x188c <tone+0xbc>
    17f2:	d4 2f       	mov	r29, r20
    17f4:	4b 30       	cpi	r20, 0x0B	; 11
    17f6:	08 f0       	brcs	.+2      	; 0x17fa <tone+0x2a>
    17f8:	da e0       	ldi	r29, 0x0A	; 10
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	72 e1       	ldi	r23, 0x12	; 18
    17fe:	8a e7       	ldi	r24, 0x7A	; 122
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	a7 01       	movw	r20, r14
    1804:	96 01       	movw	r18, r12
    1806:	fe d0       	rcall	.+508    	; 0x1a04 <__udivmodsi4>
    1808:	cc 24       	eor	r12, r12
    180a:	ca 94       	dec	r12
    180c:	dc 2c       	mov	r13, r12
    180e:	76 01       	movw	r14, r12
    1810:	c2 0e       	add	r12, r18
    1812:	d3 1e       	adc	r13, r19
    1814:	e4 1e       	adc	r14, r20
    1816:	f5 1e       	adc	r15, r21
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    1818:	c1 14       	cp	r12, r1
    181a:	d1 04       	cpc	r13, r1
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	e8 06       	cpc	r14, r24
    1820:	f1 04       	cpc	r15, r1
    1822:	58 f0       	brcs	.+22     	; 0x183a <tone+0x6a>
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
    1824:	cd 2c       	mov	r12, r13
    1826:	de 2c       	mov	r13, r14
    1828:	ef 2c       	mov	r14, r15
    182a:	ff 24       	eor	r15, r15
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	c8 1a       	sub	r12, r24
    1830:	d1 08       	sbc	r13, r1
    1832:	e1 08       	sbc	r14, r1
    1834:	f1 08       	sbc	r15, r1
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    1836:	c4 e0       	ldi	r28, 0x04	; 4
    1838:	01 c0       	rjmp	.+2      	; 0x183c <tone+0x6c>
void tone(unsigned long frequency, uint8_t volume) {
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
    183a:	c1 e0       	ldi	r28, 0x01	; 1
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
		}
	
		unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
    183c:	ed 2f       	mov	r30, r29
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	ed 5f       	subi	r30, 0xFD	; 253
    1842:	fe 4f       	sbci	r31, 0xFE	; 254
    1844:	20 81       	ld	r18, Z
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	40 e0       	ldi	r20, 0x00	; 0
    184a:	50 e0       	ldi	r21, 0x00	; 0
    184c:	c7 01       	movw	r24, r14
    184e:	b6 01       	movw	r22, r12
    1850:	d9 d0       	rcall	.+434    	; 0x1a04 <__udivmodsi4>
		
		ICR1   = top;							// Set the top.
    1852:	d0 92 87 00 	sts	0x0087, r13
    1856:	c0 92 86 00 	sts	0x0086, r12
		if (TCNT1 > top) TCNT1 = top;			// Counter over the top, put within range.
    185a:	80 91 84 00 	lds	r24, 0x0084
    185e:	90 91 85 00 	lds	r25, 0x0085
    1862:	a0 e0       	ldi	r26, 0x00	; 0
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	c8 16       	cp	r12, r24
    1868:	d9 06       	cpc	r13, r25
    186a:	ea 06       	cpc	r14, r26
    186c:	fb 06       	cpc	r15, r27
    186e:	20 f4       	brcc	.+8      	; 0x1878 <tone+0xa8>
    1870:	d0 92 85 00 	sts	0x0085, r13
    1874:	c0 92 84 00 	sts	0x0084, r12
			TCCR1B = _BV(WGM13)  | prescaler;   // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
    1878:	c0 61       	ori	r28, 0x10	; 16
    187a:	c0 93 81 00 	sts	0x0081, r28
			OCR1A  = duty;						// Set the duty cycle (volume).
    187e:	30 93 89 00 	sts	0x0089, r19
    1882:	20 93 88 00 	sts	0x0088, r18
			TCCR1A = _BV(COM1A1);				// Clear OC1A/OC1B on Compare Match (Set output to low level).
    1886:	80 e8       	ldi	r24, 0x80	; 128
    1888:	80 93 80 00 	sts	0x0080, r24

}
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	ff 90       	pop	r15
    1892:	ef 90       	pop	r14
    1894:	df 90       	pop	r13
    1896:	cf 90       	pop	r12
    1898:	08 95       	ret

0000189a <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    189a:	1f 92       	push	r1
    189c:	0f 92       	push	r0
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	2f 93       	push	r18
    18a6:	3f 93       	push	r19
    18a8:	4f 93       	push	r20
    18aa:	5f 93       	push	r21
    18ac:	8f 93       	push	r24
    18ae:	9f 93       	push	r25
    18b0:	ef 93       	push	r30
    18b2:	ff 93       	push	r31
    18b4:	40 91 c0 00 	lds	r20, 0x00C0
    18b8:	50 91 c6 00 	lds	r21, 0x00C6
    18bc:	48 71       	andi	r20, 0x18	; 24
    18be:	80 91 c8 01 	lds	r24, 0x01C8
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	01 96       	adiw	r24, 0x01	; 1
    18c6:	8f 77       	andi	r24, 0x7F	; 127
    18c8:	99 27       	eor	r25, r25
    18ca:	20 91 c7 01 	lds	r18, 0x01C7
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	28 17       	cp	r18, r24
    18d2:	39 07       	cpc	r19, r25
    18d4:	39 f0       	breq	.+14     	; 0x18e4 <__vector_18+0x4a>
    18d6:	80 93 c8 01 	sts	0x01C8, r24
    18da:	fc 01       	movw	r30, r24
    18dc:	e5 53       	subi	r30, 0x35	; 53
    18de:	fe 4f       	sbci	r31, 0xFE	; 254
    18e0:	50 83       	st	Z, r21
    18e2:	01 c0       	rjmp	.+2      	; 0x18e6 <__vector_18+0x4c>
    18e4:	42 e0       	ldi	r20, 0x02	; 2
    18e6:	40 93 c6 01 	sts	0x01C6, r20
    18ea:	ff 91       	pop	r31
    18ec:	ef 91       	pop	r30
    18ee:	9f 91       	pop	r25
    18f0:	8f 91       	pop	r24
    18f2:	5f 91       	pop	r21
    18f4:	4f 91       	pop	r20
    18f6:	3f 91       	pop	r19
    18f8:	2f 91       	pop	r18
    18fa:	0f 90       	pop	r0
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	0f 90       	pop	r0
    1900:	1f 90       	pop	r1
    1902:	18 95       	reti

00001904 <__vector_19>:
    1904:	1f 92       	push	r1
    1906:	0f 92       	push	r0
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	0f 92       	push	r0
    190c:	11 24       	eor	r1, r1
    190e:	8f 93       	push	r24
    1910:	9f 93       	push	r25
    1912:	ef 93       	push	r30
    1914:	ff 93       	push	r31
    1916:	90 91 ca 01 	lds	r25, 0x01CA
    191a:	80 91 c9 01 	lds	r24, 0x01C9
    191e:	98 17       	cp	r25, r24
    1920:	79 f0       	breq	.+30     	; 0x1940 <__vector_19+0x3c>
    1922:	80 91 c9 01 	lds	r24, 0x01C9
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	8f 77       	andi	r24, 0x7F	; 127
    192c:	99 27       	eor	r25, r25
    192e:	80 93 c9 01 	sts	0x01C9, r24
    1932:	fc 01       	movw	r30, r24
    1934:	e5 5b       	subi	r30, 0xB5	; 181
    1936:	fd 4f       	sbci	r31, 0xFD	; 253
    1938:	80 81       	ld	r24, Z
    193a:	80 93 c6 00 	sts	0x00C6, r24
    193e:	05 c0       	rjmp	.+10     	; 0x194a <__vector_19+0x46>
    1940:	e1 ec       	ldi	r30, 0xC1	; 193
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	8f 7d       	andi	r24, 0xDF	; 223
    1948:	80 83       	st	Z, r24
    194a:	ff 91       	pop	r31
    194c:	ef 91       	pop	r30
    194e:	9f 91       	pop	r25
    1950:	8f 91       	pop	r24
    1952:	0f 90       	pop	r0
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	0f 90       	pop	r0
    1958:	1f 90       	pop	r1
    195a:	18 95       	reti

0000195c <uart0_init>:
    195c:	10 92 ca 01 	sts	0x01CA, r1
    1960:	10 92 c9 01 	sts	0x01C9, r1
    1964:	10 92 c8 01 	sts	0x01C8, r1
    1968:	10 92 c7 01 	sts	0x01C7, r1
    196c:	99 23       	and	r25, r25
    196e:	24 f4       	brge	.+8      	; 0x1978 <uart0_init+0x1c>
    1970:	22 e0       	ldi	r18, 0x02	; 2
    1972:	20 93 c0 00 	sts	0x00C0, r18
    1976:	9f 77       	andi	r25, 0x7F	; 127
    1978:	90 93 c5 00 	sts	0x00C5, r25
    197c:	80 93 c4 00 	sts	0x00C4, r24
    1980:	88 e9       	ldi	r24, 0x98	; 152
    1982:	80 93 c1 00 	sts	0x00C1, r24
    1986:	86 e0       	ldi	r24, 0x06	; 6
    1988:	80 93 c2 00 	sts	0x00C2, r24
    198c:	08 95       	ret

0000198e <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    198e:	60 91 ca 01 	lds	r22, 0x01CA
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	6f 5f       	subi	r22, 0xFF	; 255
    1996:	7f 4f       	sbci	r23, 0xFF	; 255
    1998:	6f 77       	andi	r22, 0x7F	; 127
    199a:	77 27       	eor	r23, r23
    199c:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
    199e:	20 91 c9 01 	lds	r18, 0x01C9
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	24 17       	cp	r18, r20
    19a6:	35 07       	cpc	r19, r21
    19a8:	d1 f3       	breq	.-12     	; 0x199e <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    19aa:	fb 01       	movw	r30, r22
    19ac:	e5 5b       	subi	r30, 0xB5	; 181
    19ae:	fd 4f       	sbci	r31, 0xFD	; 253
    19b0:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    19b2:	60 93 ca 01 	sts	0x01CA, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
    19b6:	e1 ec       	ldi	r30, 0xC1	; 193
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	80 62       	ori	r24, 0x20	; 32
    19be:	80 83       	st	Z, r24
    19c0:	08 95       	ret

000019c2 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ec 01       	movw	r28, r24
	while (*s) {
    19c8:	88 81       	ld	r24, Y
    19ca:	88 23       	and	r24, r24
    19cc:	29 f0       	breq	.+10     	; 0x19d8 <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
    19ce:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
    19d0:	de df       	rcall	.-68     	; 0x198e <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
    19d2:	89 91       	ld	r24, Y+
    19d4:	81 11       	cpse	r24, r1
    19d6:	fc cf       	rjmp	.-8      	; 0x19d0 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	08 95       	ret

000019de <__divmodhi4>:
    19de:	97 fb       	bst	r25, 7
    19e0:	07 2e       	mov	r0, r23
    19e2:	16 f4       	brtc	.+4      	; 0x19e8 <__divmodhi4+0xa>
    19e4:	00 94       	com	r0
    19e6:	06 d0       	rcall	.+12     	; 0x19f4 <__divmodhi4_neg1>
    19e8:	77 fd       	sbrc	r23, 7
    19ea:	08 d0       	rcall	.+16     	; 0x19fc <__divmodhi4_neg2>
    19ec:	2d d0       	rcall	.+90     	; 0x1a48 <__udivmodhi4>
    19ee:	07 fc       	sbrc	r0, 7
    19f0:	05 d0       	rcall	.+10     	; 0x19fc <__divmodhi4_neg2>
    19f2:	3e f4       	brtc	.+14     	; 0x1a02 <__divmodhi4_exit>

000019f4 <__divmodhi4_neg1>:
    19f4:	90 95       	com	r25
    19f6:	81 95       	neg	r24
    19f8:	9f 4f       	sbci	r25, 0xFF	; 255
    19fa:	08 95       	ret

000019fc <__divmodhi4_neg2>:
    19fc:	70 95       	com	r23
    19fe:	61 95       	neg	r22
    1a00:	7f 4f       	sbci	r23, 0xFF	; 255

00001a02 <__divmodhi4_exit>:
    1a02:	08 95       	ret

00001a04 <__udivmodsi4>:
    1a04:	a1 e2       	ldi	r26, 0x21	; 33
    1a06:	1a 2e       	mov	r1, r26
    1a08:	aa 1b       	sub	r26, r26
    1a0a:	bb 1b       	sub	r27, r27
    1a0c:	fd 01       	movw	r30, r26
    1a0e:	0d c0       	rjmp	.+26     	; 0x1a2a <__udivmodsi4_ep>

00001a10 <__udivmodsi4_loop>:
    1a10:	aa 1f       	adc	r26, r26
    1a12:	bb 1f       	adc	r27, r27
    1a14:	ee 1f       	adc	r30, r30
    1a16:	ff 1f       	adc	r31, r31
    1a18:	a2 17       	cp	r26, r18
    1a1a:	b3 07       	cpc	r27, r19
    1a1c:	e4 07       	cpc	r30, r20
    1a1e:	f5 07       	cpc	r31, r21
    1a20:	20 f0       	brcs	.+8      	; 0x1a2a <__udivmodsi4_ep>
    1a22:	a2 1b       	sub	r26, r18
    1a24:	b3 0b       	sbc	r27, r19
    1a26:	e4 0b       	sbc	r30, r20
    1a28:	f5 0b       	sbc	r31, r21

00001a2a <__udivmodsi4_ep>:
    1a2a:	66 1f       	adc	r22, r22
    1a2c:	77 1f       	adc	r23, r23
    1a2e:	88 1f       	adc	r24, r24
    1a30:	99 1f       	adc	r25, r25
    1a32:	1a 94       	dec	r1
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <__udivmodsi4_loop>
    1a36:	60 95       	com	r22
    1a38:	70 95       	com	r23
    1a3a:	80 95       	com	r24
    1a3c:	90 95       	com	r25
    1a3e:	9b 01       	movw	r18, r22
    1a40:	ac 01       	movw	r20, r24
    1a42:	bd 01       	movw	r22, r26
    1a44:	cf 01       	movw	r24, r30
    1a46:	08 95       	ret

00001a48 <__udivmodhi4>:
    1a48:	aa 1b       	sub	r26, r26
    1a4a:	bb 1b       	sub	r27, r27
    1a4c:	51 e1       	ldi	r21, 0x11	; 17
    1a4e:	07 c0       	rjmp	.+14     	; 0x1a5e <__udivmodhi4_ep>

00001a50 <__udivmodhi4_loop>:
    1a50:	aa 1f       	adc	r26, r26
    1a52:	bb 1f       	adc	r27, r27
    1a54:	a6 17       	cp	r26, r22
    1a56:	b7 07       	cpc	r27, r23
    1a58:	10 f0       	brcs	.+4      	; 0x1a5e <__udivmodhi4_ep>
    1a5a:	a6 1b       	sub	r26, r22
    1a5c:	b7 0b       	sbc	r27, r23

00001a5e <__udivmodhi4_ep>:
    1a5e:	88 1f       	adc	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	5a 95       	dec	r21
    1a64:	a9 f7       	brne	.-22     	; 0x1a50 <__udivmodhi4_loop>
    1a66:	80 95       	com	r24
    1a68:	90 95       	com	r25
    1a6a:	bc 01       	movw	r22, r24
    1a6c:	cd 01       	movw	r24, r26
    1a6e:	08 95       	ret

00001a70 <memcpy>:
    1a70:	fb 01       	movw	r30, r22
    1a72:	dc 01       	movw	r26, r24
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <memcpy+0xa>
    1a76:	01 90       	ld	r0, Z+
    1a78:	0d 92       	st	X+, r0
    1a7a:	41 50       	subi	r20, 0x01	; 1
    1a7c:	50 40       	sbci	r21, 0x00	; 0
    1a7e:	d8 f7       	brcc	.-10     	; 0x1a76 <memcpy+0x6>
    1a80:	08 95       	ret

00001a82 <_exit>:
    1a82:	f8 94       	cli

00001a84 <__stop_program>:
    1a84:	ff cf       	rjmp	.-2      	; 0x1a84 <__stop_program>
