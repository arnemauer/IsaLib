
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00001ae8  00001b7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ae8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017c  0080012c  0080012c  00001ba8  2**0
                  ALLOC
  3 .stab         00000e4c  00000000  00000000  00001ba8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000035b  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002d4f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000003a0  00000000  00000000  00002d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003d2e  00000000  00000000  0000311e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000127f  00000000  00000000  00006e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002880  00000000  00000000  000080cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009bc  00000000  00000000  0000a94c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000eaf  00000000  00000000  0000b308  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000296c  00000000  00000000  0000c1b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000398  00000000  00000000  0000eb23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c3 c2       	rjmp	.+1414   	; 0x588 <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 ac 0a 	jmp	0x1558	; 0x1558 <__vector_1>
       8:	db c2       	rjmp	.+1462   	; 0x5c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d9 c2       	rjmp	.+1458   	; 0x5c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	d7 c2       	rjmp	.+1454   	; 0x5c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	d5 c2       	rjmp	.+1450   	; 0x5c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	d3 c2       	rjmp	.+1446   	; 0x5c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	1a c7       	rjmp	.+3636   	; 0xe52 <__vector_7>
      1e:	00 00       	nop
      20:	cf c2       	rjmp	.+1438   	; 0x5c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	cd c2       	rjmp	.+1434   	; 0x5c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	cb c2       	rjmp	.+1430   	; 0x5c0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c9 c2       	rjmp	.+1426   	; 0x5c0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	c7 c2       	rjmp	.+1422   	; 0x5c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c2       	rjmp	.+1418   	; 0x5c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	50 c3       	rjmp	.+1696   	; 0x6da <__vector_14>
      3a:	00 00       	nop
      3c:	c1 c2       	rjmp	.+1410   	; 0x5c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bf c2       	rjmp	.+1406   	; 0x5c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	bd c2       	rjmp	.+1402   	; 0x5c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 7e 0c 	jmp	0x18fc	; 0x18fc <__vector_18>
      4c:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__vector_19>
      50:	b7 c2       	rjmp	.+1390   	; 0x5c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	b5 c2       	rjmp	.+1386   	; 0x5c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	b3 c2       	rjmp	.+1382   	; 0x5c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b1 c2       	rjmp	.+1378   	; 0x5c0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	af c2       	rjmp	.+1374   	; 0x5c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	ad c2       	rjmp	.+1370   	; 0x5c0 <__bad_interrupt>
	...

00000068 <_ZL16icon_led_numbers>:
      68:	0c 0b 0a 0f 0e 0d 07 08 09 02 01 00                 ............

00000074 <_ZL22sound_pattern_doorbell>:
      74:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      84:	b0 04 00 00 f4 01 00 00 00 00 00 00 e8 03 00 00     ................
      94:	dc 05 00 00 f4 01 00 00 00 00 00 00 c8 00 00 00     ................
      a4:	b0 04 00 00 f4 01 00 00 00 00 00 00 dc 05 00 00     ................

000000b4 <_ZL19sound_pattern_phone>:
      b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
      f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     104:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     114:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     124:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     134:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     144:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     154:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     164:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     174:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     184:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     194:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     1a4:	00 00 00 00 e8 03 00 00 e8 03 00 00 28 00 00 00     ............(...
     1b4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1c4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1d4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1e4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     1f4:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     204:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     214:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     224:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     234:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     244:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     254:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     264:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     274:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     284:	ee 02 00 00 28 00 00 00 e8 03 00 00 28 00 00 00     ....(.......(...
     294:	ee 02 00 00 28 00 00 00 00 00 00 00 e8 03 00 00     ....(...........
     2a4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2b4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2c4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2d4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2e4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     2f4:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     304:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     314:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     324:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     334:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     344:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     354:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     364:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     374:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     384:	e8 03 00 00 28 00 00 00 ee 02 00 00 28 00 00 00     ....(.......(...
     394:	00 00 00 00 e8 03 00 00 00 00 00 00 00 00 00 00     ................
	...

000003b4 <_ZL18sound_pattern_fire>:
     3b4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3c4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3d4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3e4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     3f4:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     404:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     414:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...
     424:	d0 07 00 00 2c 01 00 00 00 00 00 00 2c 01 00 00     ....,.......,...

00000434 <_ZL18sound_pattern_help>:
     434:	bf 04 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     444:	1c 07 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     454:	bf 04 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     464:	1c 07 00 00 2c 01 00 00 a5 05 00 00 2c 01 00 00     ....,.......,...
     474:	00 00 00 00 e8 03 00 00                             ........

0000047c <_ZL13flash_pattern>:
     47c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     48c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     49c:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4ac:	ff ff ff ff c8 00 00 00 00 00 00 00 c8 00 00 00     ................
     4bc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4cc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4dc:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4ec:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     4fc:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     50c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     51c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     52c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     53c:	00 ff 00 ff 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     54c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     55c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...
     56c:	ff 00 ff 00 32 00 00 00 00 00 00 00 32 00 00 00     ....2.......2...

0000057c <_ZL11icon_colors>:
     57c:	3d f5 00 00 b8 f5 ff 00 00 ff ff 00                 =...........

00000588 <__ctors_end>:
     588:	11 24       	eor	r1, r1
     58a:	1f be       	out	0x3f, r1	; 63
     58c:	cf ef       	ldi	r28, 0xFF	; 255
     58e:	d8 e0       	ldi	r29, 0x08	; 8
     590:	de bf       	out	0x3e, r29	; 62
     592:	cd bf       	out	0x3d, r28	; 61

00000594 <__do_copy_data>:
     594:	11 e0       	ldi	r17, 0x01	; 1
     596:	a0 e0       	ldi	r26, 0x00	; 0
     598:	b1 e0       	ldi	r27, 0x01	; 1
     59a:	e8 ee       	ldi	r30, 0xE8	; 232
     59c:	fa e1       	ldi	r31, 0x1A	; 26
     59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__do_copy_data+0x10>
     5a0:	05 90       	lpm	r0, Z+
     5a2:	0d 92       	st	X+, r0
     5a4:	ac 32       	cpi	r26, 0x2C	; 44
     5a6:	b1 07       	cpc	r27, r17
     5a8:	d9 f7       	brne	.-10     	; 0x5a0 <__do_copy_data+0xc>

000005aa <__do_clear_bss>:
     5aa:	22 e0       	ldi	r18, 0x02	; 2
     5ac:	ac e2       	ldi	r26, 0x2C	; 44
     5ae:	b1 e0       	ldi	r27, 0x01	; 1
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <.do_clear_bss_start>

000005b2 <.do_clear_bss_loop>:
     5b2:	1d 92       	st	X+, r1

000005b4 <.do_clear_bss_start>:
     5b4:	a8 3a       	cpi	r26, 0xA8	; 168
     5b6:	b2 07       	cpc	r27, r18
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <.do_clear_bss_loop>
     5ba:	b4 d0       	rcall	.+360    	; 0x724 <main>
     5bc:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <_exit>

000005c0 <__bad_interrupt>:
     5c0:	1f cd       	rjmp	.-1474   	; 0x0 <__vectors>

000005c2 <I2C_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
     5c2:	88 e4       	ldi	r24, 0x48	; 72
     5c4:	80 93 b8 00 	sts	0x00B8, r24
     5c8:	08 95       	ret

000005ca <I2C_start>:
     5ca:	ec eb       	ldi	r30, 0xBC	; 188
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	10 82       	st	Z, r1
     5d0:	94 ea       	ldi	r25, 0xA4	; 164
     5d2:	90 83       	st	Z, r25
     5d4:	90 81       	ld	r25, Z
     5d6:	99 23       	and	r25, r25
     5d8:	ec f7       	brge	.-6      	; 0x5d4 <I2C_start+0xa>
     5da:	90 91 b9 00 	lds	r25, 0x00B9
     5de:	98 7f       	andi	r25, 0xF8	; 248
     5e0:	98 30       	cpi	r25, 0x08	; 8
     5e2:	a1 f4       	brne	.+40     	; 0x60c <I2C_start+0x42>
     5e4:	80 93 bb 00 	sts	0x00BB, r24
     5e8:	84 e8       	ldi	r24, 0x84	; 132
     5ea:	80 93 bc 00 	sts	0x00BC, r24
     5ee:	ec eb       	ldi	r30, 0xBC	; 188
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	80 81       	ld	r24, Z
     5f4:	88 23       	and	r24, r24
     5f6:	ec f7       	brge	.-6      	; 0x5f2 <I2C_start+0x28>
     5f8:	90 91 b9 00 	lds	r25, 0x00B9
     5fc:	98 7f       	andi	r25, 0xF8	; 248
     5fe:	98 31       	cpi	r25, 0x18	; 24
     600:	39 f0       	breq	.+14     	; 0x610 <I2C_start+0x46>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	90 34       	cpi	r25, 0x40	; 64
     606:	29 f4       	brne	.+10     	; 0x612 <I2C_start+0x48>
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	08 95       	ret
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	08 95       	ret
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	08 95       	ret

00000614 <I2C_write>:
     614:	80 93 bb 00 	sts	0x00BB, r24
     618:	84 e8       	ldi	r24, 0x84	; 132
     61a:	80 93 bc 00 	sts	0x00BC, r24
     61e:	ec eb       	ldi	r30, 0xBC	; 188
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	88 23       	and	r24, r24
     626:	ec f7       	brge	.-6      	; 0x622 <I2C_write+0xe>
     628:	90 91 b9 00 	lds	r25, 0x00B9
     62c:	98 7f       	andi	r25, 0xF8	; 248
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	98 32       	cpi	r25, 0x28	; 40
     632:	09 f4       	brne	.+2      	; 0x636 <I2C_write+0x22>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	08 95       	ret

00000638 <I2C_read_ack>:
     638:	84 ec       	ldi	r24, 0xC4	; 196
     63a:	80 93 bc 00 	sts	0x00BC, r24
     63e:	ec eb       	ldi	r30, 0xBC	; 188
     640:	f0 e0       	ldi	r31, 0x00	; 0
     642:	80 81       	ld	r24, Z
     644:	88 23       	and	r24, r24
     646:	ec f7       	brge	.-6      	; 0x642 <I2C_read_ack+0xa>
     648:	80 91 bb 00 	lds	r24, 0x00BB
     64c:	08 95       	ret

0000064e <I2C_stop>:

void I2C_stop(void){
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     64e:	84 e9       	ldi	r24, 0x94	; 148
     650:	80 93 bc 00 	sts	0x00BC, r24
     654:	08 95       	ret

00000656 <log_s>:
 *
 * @param s The specified string
 */
void log_s(const char *s) {
#ifdef LOG_AVAILABLE
    uart0_puts(s);
     656:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <uart0_puts>
     65a:	08 95       	ret

0000065c <millis_init>:
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		milliseconds -= ms;
	}
}
     65c:	82 e0       	ldi	r24, 0x02	; 2
     65e:	84 bd       	out	0x24, r24	; 36
     660:	93 e0       	ldi	r25, 0x03	; 3
     662:	95 bd       	out	0x25, r25	; 37
     664:	80 93 6e 00 	sts	0x006E, r24
     668:	8a ef       	ldi	r24, 0xFA	; 250
     66a:	87 bd       	out	0x27, r24	; 39
     66c:	08 95       	ret

0000066e <millis_get>:
     66e:	0f 93       	push	r16
     670:	1f 93       	push	r17
     672:	8f b7       	in	r24, 0x3f	; 63
     674:	f8 94       	cli
     676:	00 91 2c 01 	lds	r16, 0x012C
     67a:	10 91 2d 01 	lds	r17, 0x012D
     67e:	20 91 2e 01 	lds	r18, 0x012E
     682:	30 91 2f 01 	lds	r19, 0x012F
     686:	8f bf       	out	0x3f, r24	; 63
     688:	60 2f       	mov	r22, r16
     68a:	71 2f       	mov	r23, r17
     68c:	82 2f       	mov	r24, r18
     68e:	93 2f       	mov	r25, r19
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	08 95       	ret

00000696 <millis_resume>:
     696:	e4 e6       	ldi	r30, 0x64	; 100
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	80 81       	ld	r24, Z
     69c:	8f 7d       	andi	r24, 0xDF	; 223
     69e:	80 83       	st	Z, r24
     6a0:	ee e6       	ldi	r30, 0x6E	; 110
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	82 60       	ori	r24, 0x02	; 2
     6a8:	80 83       	st	Z, r24
     6aa:	08 95       	ret

000006ac <millis_pause>:
     6ac:	ee e6       	ldi	r30, 0x6E	; 110
     6ae:	f0 e0       	ldi	r31, 0x00	; 0
     6b0:	80 81       	ld	r24, Z
     6b2:	8d 7f       	andi	r24, 0xFD	; 253
     6b4:	80 83       	st	Z, r24
     6b6:	e4 e6       	ldi	r30, 0x64	; 100
     6b8:	f0 e0       	ldi	r31, 0x00	; 0
     6ba:	80 81       	ld	r24, Z
     6bc:	80 62       	ori	r24, 0x20	; 32
     6be:	80 83       	st	Z, r24
     6c0:	08 95       	ret

000006c2 <millis_reset>:
     6c2:	8f b7       	in	r24, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	10 92 2c 01 	sts	0x012C, r1
     6ca:	10 92 2d 01 	sts	0x012D, r1
     6ce:	10 92 2e 01 	sts	0x012E, r1
     6d2:	10 92 2f 01 	sts	0x012F, r1
     6d6:	8f bf       	out	0x3f, r24	; 63
     6d8:	08 95       	ret

000006da <__vector_14>:

ISR(ISR_VECT)
{
     6da:	1f 92       	push	r1
     6dc:	0f 92       	push	r0
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	0f 92       	push	r0
     6e2:	11 24       	eor	r1, r1
     6e4:	8f 93       	push	r24
     6e6:	9f 93       	push	r25
     6e8:	af 93       	push	r26
     6ea:	bf 93       	push	r27
	++milliseconds;
     6ec:	80 91 2c 01 	lds	r24, 0x012C
     6f0:	90 91 2d 01 	lds	r25, 0x012D
     6f4:	a0 91 2e 01 	lds	r26, 0x012E
     6f8:	b0 91 2f 01 	lds	r27, 0x012F
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	a1 1d       	adc	r26, r1
     700:	b1 1d       	adc	r27, r1
     702:	80 93 2c 01 	sts	0x012C, r24
     706:	90 93 2d 01 	sts	0x012D, r25
     70a:	a0 93 2e 01 	sts	0x012E, r26
     70e:	b0 93 2f 01 	sts	0x012F, r27
}
     712:	bf 91       	pop	r27
     714:	af 91       	pop	r26
     716:	9f 91       	pop	r25
     718:	8f 91       	pop	r24
     71a:	0f 90       	pop	r0
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	0f 90       	pop	r0
     720:	1f 90       	pop	r1
     722:	18 95       	reti

00000724 <main>:



			 
	
int main() {	
     724:	cf 93       	push	r28
     726:	df 93       	push	r29
     728:	00 d0       	rcall	.+0      	; 0x72a <main+0x6>
     72a:	00 d0       	rcall	.+0      	; 0x72c <main+0x8>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62

DDRB |= _BV(0); // pb0 output
     730:	20 9a       	sbi	0x04, 0	; 4
PORTB |= _BV(0); // pb0 aan
     732:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     734:	2f ef       	ldi	r18, 0xFF	; 255
     736:	89 e6       	ldi	r24, 0x69	; 105
     738:	98 e1       	ldi	r25, 0x18	; 24
     73a:	21 50       	subi	r18, 0x01	; 1
     73c:	80 40       	sbci	r24, 0x00	; 0
     73e:	90 40       	sbci	r25, 0x00	; 0
     740:	e1 f7       	brne	.-8      	; 0x73a <main+0x16>
     742:	00 c0       	rjmp	.+0      	; 0x744 <main+0x20>
     744:	00 00       	nop
_delay_ms(500);
 PORTB &= ~_BV(0); // pb0 uit
     746:	28 98       	cbi	0x05, 0	; 5



// disable ADC for less power 
	ADCSRA &= ~_BV(ADEN); // ADC off 
     748:	ea e7       	ldi	r30, 0x7A	; 122
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	80 81       	ld	r24, Z
     74e:	8f 77       	andi	r24, 0x7F	; 127
     750:	80 83       	st	Z, r24
	sei();
     752:	78 94       	sei
			/* Initialize MILLIS */
	        millis_init();
     754:	83 df       	rcall	.-250    	; 0x65c <millis_init>
     756:	ef ef       	ldi	r30, 0xFF	; 255
     758:	fb e7       	ldi	r31, 0x7B	; 123
     75a:	22 e9       	ldi	r18, 0x92	; 146
     75c:	e1 50       	subi	r30, 0x01	; 1
     75e:	f0 40       	sbci	r31, 0x00	; 0
     760:	20 40       	sbci	r18, 0x00	; 0
     762:	e1 f7       	brne	.-8      	; 0x75c <main+0x38>
     764:	00 c0       	rjmp	.+0      	; 0x766 <main+0x42>
     766:	00 00       	nop
			_delay_ms(3000);
			/* Initialize MILLIS */

			/* Initialize TONE */						
			tone_init();		
     768:	0e 94 0f 0c 	call	0x181e	; 0x181e <tone_init>
			/* Initialize TONE */						
						
			/* Initialize TIMER 2 */
			// Timer settings
			TCCR2A = _BV(WGM21); // prescaler 128
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	80 93 b0 00 	sts	0x00B0, r24
			TCCR2B = _BV(CS22)|_BV(CS20);
     772:	85 e0       	ldi	r24, 0x05	; 5
     774:	80 93 b1 00 	sts	0x00B1, r24
							 	
			// TIMSK2 = _BV(OCIE2A); // DO NOT ENABLE TIMER2 BY DEFAULT!
			OCR2A = ((F_CPU / 128) / 1000);
     778:	8d e7       	ldi	r24, 0x7D	; 125
     77a:	80 93 b3 00 	sts	0x00B3, r24
			power_timer2_disable(); // power timer2 down!
     77e:	e4 e6       	ldi	r30, 0x64	; 100
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	80 64       	ori	r24, 0x40	; 64
     786:	80 83       	st	Z, r24
			/* Initialize TIMER 2 */			
			

			/* Initialize UART */
			uart_init( ((F_CPU)/((UART_BAUD_RATE)*16l)-1)) ;
     788:	80 e1       	ldi	r24, 0x10	; 16
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 df 0c 	call	0x19be	; 0x19be <uart0_init>
     790:	8f ef       	ldi	r24, 0xFF	; 255
     792:	93 ed       	ldi	r25, 0xD3	; 211
     794:	e0 e3       	ldi	r30, 0x30	; 48
     796:	81 50       	subi	r24, 0x01	; 1
     798:	90 40       	sbci	r25, 0x00	; 0
     79a:	e0 40       	sbci	r30, 0x00	; 0
     79c:	e1 f7       	brne	.-8      	; 0x796 <main+0x72>
     79e:	00 c0       	rjmp	.+0      	; 0x7a0 <main+0x7c>
     7a0:	00 00       	nop
			//uart0_puts("kak");
			_delay_ms(1000);
			/* Initialize UART */
		
			/* Initialize I2C */
			I2C_init();	
     7a2:	0f df       	rcall	.-482    	; 0x5c2 <I2C_init>
			/* Initialize I2C */
			
			/* Initialize PCA9634 */
			pca9635_init();
     7a4:	ce d3       	rcall	.+1948   	; 0xf42 <pca9635_init>
			pca9635_set_all_led_pwm(255);
     7a6:	8f ef       	ldi	r24, 0xFF	; 255
     7a8:	12 d4       	rcall	.+2084   	; 0xfce <pca9635_set_all_led_pwm>
     7aa:	ff ef       	ldi	r31, 0xFF	; 255
     7ac:	23 ed       	ldi	r18, 0xD3	; 211
     7ae:	80 e3       	ldi	r24, 0x30	; 48
     7b0:	f1 50       	subi	r31, 0x01	; 1
     7b2:	20 40       	sbci	r18, 0x00	; 0
     7b4:	80 40       	sbci	r24, 0x00	; 0
     7b6:	e1 f7       	brne	.-8      	; 0x7b0 <main+0x8c>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <main+0x96>
     7ba:	00 00       	nop
			_delay_ms(1000);
			pca9635_set_all_led_pwm(0);
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	07 d4       	rcall	.+2062   	; 0xfce <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1);
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	15 d4       	rcall	.+2090   	; 0xfee <pca9635_set_sleep>
     7c4:	9f ef       	ldi	r25, 0xFF	; 255
     7c6:	e3 ed       	ldi	r30, 0xD3	; 211
     7c8:	f0 e3       	ldi	r31, 0x30	; 48
     7ca:	91 50       	subi	r25, 0x01	; 1
     7cc:	e0 40       	sbci	r30, 0x00	; 0
     7ce:	f0 40       	sbci	r31, 0x00	; 0
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <main+0xa6>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <main+0xb0>
     7d4:	00 00       	nop
		//	log_s("PCA ok");
			_delay_ms(1000);
			
			
  // node id, rfband, group id
			rf12_initialize(2, RF12_868MHZ, 14);
     7d6:	4e e0       	ldi	r20, 0x0E	; 14
     7d8:	62 e0       	ldi	r22, 0x02	; 2
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	38 d6       	rcall	.+3184   	; 0x144e <_Z15rf12_initializehhh>
    // see http://tools.jeelabs.org/rfm12b
  //  rf12_control(0xC040); // set low-battery level to 2.2V i.s.o. 3.1V


			deep_sleep_ok = 1; // put device in deep sleep after initializing
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 46 01 	sts	0x0146, r24

log_s("initialized!");
     7e4:	8e e0       	ldi	r24, 0x0E	; 14
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	36 df       	rcall	.-404    	; 0x656 <log_s>
     7ea:	2f ef       	ldi	r18, 0xFF	; 255
     7ec:	83 ed       	ldi	r24, 0xD3	; 211
     7ee:	90 e3       	ldi	r25, 0x30	; 48
     7f0:	21 50       	subi	r18, 0x01	; 1
     7f2:	80 40       	sbci	r24, 0x00	; 0
     7f4:	90 40       	sbci	r25, 0x00	; 0
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <main+0xcc>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <main+0xd6>
     7fa:	00 00       	nop
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
						
			if (RF12_WANTS_ACK) {
     7fc:	0f 2e       	mov	r0, r31
     7fe:	fe e4       	ldi	r31, 0x4E	; 78
     800:	ef 2e       	mov	r14, r31
     802:	f1 e0       	ldi	r31, 0x01	; 1
     804:	ff 2e       	mov	r15, r31
     806:	f0 2d       	mov	r31, r0
		//		}
				
				
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[0]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     808:	0f 2e       	mov	r0, r31
     80a:	f0 e5       	ldi	r31, 0x50	; 80
     80c:	af 2e       	mov	r10, r31
     80e:	f1 e0       	ldi	r31, 0x01	; 1
     810:	bf 2e       	mov	r11, r31
     812:	f0 2d       	mov	r31, r0
							pca9635_set_sleep(0);
						//	pca9635_set_led_mode(2);
							
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     814:	61 2c       	mov	r6, r1
     816:	71 2c       	mov	r7, r1
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     818:	69 82       	std	Y+1, r6	; 0x01
     81a:	7a 82       	std	Y+2, r7	; 0x02
							// 2. timer 0 - millis starten
							millis_reset();
							millis_resume();
				 
							// 3. timer 2 - alarm timer starten
							power_timer2_enable();
     81c:	0f 2e       	mov	r0, r31
     81e:	f4 e6       	ldi	r31, 0x64	; 100
     820:	4f 2e       	mov	r4, r31
     822:	51 2c       	mov	r5, r1
     824:	f0 2d       	mov	r31, r0
							// Geen alarm actief

							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     826:	22 24       	eor	r2, r2
     828:	23 94       	inc	r2

	while(1){ // Stop (so it doesn't repeat forever driving you crazy--you're welcome).
	
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
     82a:	38 d4       	rcall	.+2160   	; 0x109c <_Z13rf12_recvDonev>
     82c:	88 23       	and	r24, r24
     82e:	09 f4       	brne	.+2      	; 0x832 <main+0x10e>
     830:	d8 c0       	rjmp	.+432    	; 0x9e2 <__stack+0xe3>
     832:	80 91 94 01 	lds	r24, 0x0194
     836:	90 91 95 01 	lds	r25, 0x0195
     83a:	89 2b       	or	r24, r25
     83c:	09 f4       	brne	.+2      	; 0x840 <main+0x11c>
     83e:	d7 c0       	rjmp	.+430    	; 0x9ee <__stack+0xef>
     840:	d0 c0       	rjmp	.+416    	; 0x9e2 <__stack+0xe3>
		// process incoming data here
						
			if (RF12_WANTS_ACK) {
     842:	f7 01       	movw	r30, r14
     844:	80 81       	ld	r24, Z
     846:	88 23       	and	r24, r24
     848:	0c f0       	brlt	.+2      	; 0x84c <main+0x128>
     84a:	d6 c0       	rjmp	.+428    	; 0x9f8 <__stack+0xf9>
     84c:	09 c0       	rjmp	.+18     	; 0x860 <main+0x13c>
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     84e:	f7 01       	movw	r30, r14
     850:	80 81       	ld	r24, Z
     852:	8f 71       	andi	r24, 0x1F	; 31
     854:	80 6c       	ori	r24, 0xC0	; 192
     856:	40 e0       	ldi	r20, 0x00	; 0
     858:	b3 01       	movw	r22, r6
     85a:	76 d5       	rcall	.+2796   	; 0x1348 <_Z14rf12_sendStarthPKvh>
				rf12_sendWait(1); // don't power down too soon
     85c:	82 2d       	mov	r24, r2
     85e:	82 d5       	rcall	.+2820   	; 0x1364 <_Z13rf12_sendWaith>
			//	uart0_puts("ACK-OK");
				//_delay_ms(10);
			}
			
			
		uart0_puts("DATA");
     860:	8b e1       	ldi	r24, 0x1B	; 27
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <uart0_puts>
     868:	8f e3       	ldi	r24, 0x3F	; 63
     86a:	9c e9       	ldi	r25, 0x9C	; 156
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <main+0x148>
     870:	00 c0       	rjmp	.+0      	; 0x872 <main+0x14e>
     872:	00 00       	nop
		//		}
				
				
				////////////////		Fill alarm array		 ////////////////
				// only get the first byte
				uint8_t data = rf12_data[0]; // not used, not used, not used, start (1) or stop(0), doorbell, phone, fire, help;
     874:	f5 01       	movw	r30, r10
     876:	30 80       	ld	r3, Z
				uart0_putc(data);
     878:	83 2d       	mov	r24, r3
     87a:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <uart0_putc>
     87e:	8f e3       	ldi	r24, 0x3F	; 63
     880:	9c e9       	ldi	r25, 0x9C	; 156
     882:	01 97       	sbiw	r24, 0x01	; 1
     884:	f1 f7       	brne	.-4      	; 0x882 <main+0x15e>
     886:	00 c0       	rjmp	.+0      	; 0x888 <main+0x164>
     888:	00 00       	nop
				_delay_ms(10);
				 if(data & 0x10){
     88a:	13 2d       	mov	r17, r3
     88c:	10 71       	andi	r17, 0x10	; 16
     88e:	34 fe       	sbrs	r3, 4
     890:	06 c0       	rjmp	.+12     	; 0x89e <main+0x17a>
					 // start alarm	 
					// uart0_puts("START");
					 active_alarm = active_alarm | data; // 00001111 
     892:	80 91 45 01 	lds	r24, 0x0145
     896:	83 29       	or	r24, r3
     898:	80 93 45 01 	sts	0x0145, r24
     89c:	07 c0       	rjmp	.+14     	; 0x8ac <main+0x188>
				 }else{
					 // stop alarm
					//  uart0_puts("STOP");
					 active_alarm =  active_alarm & (~data); /* invert data, compare with active alarm array to clear the right alarm bit */		 
     89e:	83 2d       	mov	r24, r3
     8a0:	80 95       	com	r24
     8a2:	90 91 45 01 	lds	r25, 0x0145
     8a6:	89 23       	and	r24, r25
     8a8:	80 93 45 01 	sts	0x0145, r24
				 }
				 
				////////////////		Fill alarm array		 ////////////////				 
				
			 // IS ER EEN ALARM ACTIEF in array active_alarm?
				 if(active_alarm & 0x0F){
     8ac:	20 91 45 01 	lds	r18, 0x0145
     8b0:	82 2f       	mov	r24, r18
     8b2:	8f 70       	andi	r24, 0x0F	; 15
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <main+0x194>
     8b6:	7b c0       	rjmp	.+246    	; 0x9ae <__stack+0xaf>
			  	
						 // Is there a active alarm thats already activated?
						 if(active_alarm_time == 0) {
     8b8:	80 91 41 01 	lds	r24, 0x0141
     8bc:	90 91 42 01 	lds	r25, 0x0142
     8c0:	a0 91 43 01 	lds	r26, 0x0143
     8c4:	b0 91 44 01 	lds	r27, 0x0144
     8c8:	89 2b       	or	r24, r25
     8ca:	8a 2b       	or	r24, r26
     8cc:	8b 2b       	or	r24, r27
     8ce:	31 f5       	brne	.+76     	; 0x91c <__stack+0x1d>
							// Geen alarm actief

							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
     8d0:	10 92 46 01 	sts	0x0146, r1
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
     8d4:	23 fd       	sbrc	r18, 3
     8d6:	0c c0       	rjmp	.+24     	; 0x8f0 <main+0x1cc>
     8d8:	22 fd       	sbrc	r18, 2
     8da:	06 c0       	rjmp	.+12     	; 0x8e8 <main+0x1c4>
     8dc:	21 fd       	sbrc	r18, 1
     8de:	06 c0       	rjmp	.+12     	; 0x8ec <main+0x1c8>
     8e0:	20 ff       	sbrs	r18, 0
     8e2:	0b c0       	rjmp	.+22     	; 0x8fa <main+0x1d6>
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	05 c0       	rjmp	.+10     	; 0x8f2 <main+0x1ce>
							// Geen alarm actief

							deep_sleep_ok = 0; // prevent while loop from going in deepsleep
							
							 // 1. fill icon_current_alarm and sound_current_alarm with the first alarm
							 for (byte i = 0; i <= 3; ++i){
     8e8:	82 2d       	mov	r24, r2
     8ea:	03 c0       	rjmp	.+6      	; 0x8f2 <main+0x1ce>
     8ec:	82 e0       	ldi	r24, 0x02	; 2
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <main+0x1ce>
     8f0:	80 e0       	ldi	r24, 0x00	; 0
								if(active_alarm & (alarm_bitmask[i]) ){ // check if next alarm is active
									sound_current_alarm = i;
     8f2:	80 93 40 01 	sts	0x0140, r24
									icon_current_alarm  = i;
     8f6:	80 93 35 01 	sts	0x0135, r24
									break;
								} 
							 }

							// 2. timer 0 - millis starten
							millis_reset();
     8fa:	e3 de       	rcall	.-570    	; 0x6c2 <millis_reset>
							millis_resume();
     8fc:	cc de       	rcall	.-616    	; 0x696 <millis_resume>
				 
							// 3. timer 2 - alarm timer starten
							power_timer2_enable();
     8fe:	f2 01       	movw	r30, r4
     900:	80 81       	ld	r24, Z
     902:	8f 7b       	andi	r24, 0xBF	; 191
     904:	80 83       	st	Z, r24
							TIMSK2 |= _BV(OCIE2A);
     906:	e0 e7       	ldi	r30, 0x70	; 112
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	80 81       	ld	r24, Z
     90c:	82 60       	ori	r24, 0x02	; 2
     90e:	80 83       	st	Z, r24
			 
							// wake up pca9635!
							pca9635_set_sleep(0);
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	6d d3       	rcall	.+1754   	; 0xfee <pca9635_set_sleep>
						 } //  if(active_alarm_time == 0) {
				 

				 		// Only reset active alarm timer if there is a new alarm...
						// 0x10 = activate bit 0x0F are bits of the alarms
						if( (data & 0x10) && (data & 0x0F)){
     914:	11 23       	and	r17, r17
     916:	09 f4       	brne	.+2      	; 0x91a <__stack+0x1b>
     918:	88 cf       	rjmp	.-240    	; 0x82a <main+0x106>
     91a:	2d c0       	rjmp	.+90     	; 0x976 <__stack+0x77>
							pca9635_set_sleep(0);
						//	pca9635_set_led_mode(2);
							
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
     91c:	11 11       	cpse	r17, r1
     91e:	2b c0       	rjmp	.+86     	; 0x976 <__stack+0x77>
     920:	0f 2e       	mov	r0, r31
     922:	f0 e2       	ldi	r31, 0x20	; 32
     924:	cf 2e       	mov	r12, r31
     926:	f1 e0       	ldi	r31, 0x01	; 1
     928:	df 2e       	mov	r13, r31
     92a:	f0 2d       	mov	r31, r0
     92c:	83 01       	movw	r16, r6
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
     92e:	f6 01       	movw	r30, r12
     930:	21 91       	ld	r18, Z+
     932:	6f 01       	movw	r12, r30
     934:	23 21       	and	r18, r3
     936:	c9 f0       	breq	.+50     	; 0x96a <__stack+0x6b>
     938:	f9 81       	ldd	r31, Y+1	; 0x01
     93a:	fb 83       	std	Y+3, r31	; 0x03
     93c:	2a 81       	ldd	r18, Y+2	; 0x02
     93e:	2c 83       	std	Y+4, r18	; 0x04
											for (byte j = 0; j <= 2; j++){
												pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[i].lednr[j])), 0); // leds off!
     940:	48 01       	movw	r8, r16
     942:	88 0c       	add	r8, r8
     944:	99 1c       	adc	r9, r9
     946:	80 0e       	add	r8, r16
     948:	91 1e       	adc	r9, r17
     94a:	eb 81       	ldd	r30, Y+3	; 0x03
     94c:	fc 81       	ldd	r31, Y+4	; 0x04
     94e:	e8 0d       	add	r30, r8
     950:	f9 1d       	adc	r31, r9
     952:	e8 59       	subi	r30, 0x98	; 152
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	84 91       	lpm	r24, Z
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	28 d3       	rcall	.+1616   	; 0xfac <pca9635_set_led_pwm>
     95c:	8b 81       	ldd	r24, Y+3	; 0x03
     95e:	9c 81       	ldd	r25, Y+4	; 0x04
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	9c 83       	std	Y+4, r25	; 0x04
     964:	8b 83       	std	Y+3, r24	; 0x03
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
										if(data & (alarm_bitmask[i]) ){ // check which alarm needs to be stopped
											for (byte j = 0; j <= 2; j++){
     966:	03 97       	sbiw	r24, 0x03	; 3
     968:	81 f7       	brne	.-32     	; 0x94a <__stack+0x4b>
     96a:	0f 5f       	subi	r16, 0xFF	; 255
     96c:	1f 4f       	sbci	r17, 0xFF	; 255
							
						 }else{
							 
								if(!(data & 0x10)){	 // already a active alarm and received a packet to stop alarm?	
									// put leds off!
									for (byte i = 0; i <= 3; ++i){
     96e:	04 30       	cpi	r16, 0x04	; 4
     970:	11 05       	cpc	r17, r1
     972:	e9 f6       	brne	.-70     	; 0x92e <__stack+0x2f>
     974:	5a cf       	rjmp	.-332    	; 0x82a <main+0x106>
						 } //  if(active_alarm_time == 0) {
				 

				 		// Only reset active alarm timer if there is a new alarm...
						// 0x10 = activate bit 0x0F are bits of the alarms
						if( (data & 0x10) && (data & 0x0F)){
     976:	83 2d       	mov	r24, r3
     978:	8f 70       	andi	r24, 0x0F	; 15
     97a:	09 f4       	brne	.+2      	; 0x97e <__stack+0x7f>
     97c:	56 cf       	rjmp	.-340    	; 0x82a <main+0x106>
				 			active_alarm_time = millis_get() + alarm_duration; 		 
     97e:	77 de       	rcall	.-786    	; 0x66e <millis_get>
     980:	00 91 00 01 	lds	r16, 0x0100
     984:	10 91 01 01 	lds	r17, 0x0101
     988:	20 91 02 01 	lds	r18, 0x0102
     98c:	30 91 03 01 	lds	r19, 0x0103
     990:	dc 01       	movw	r26, r24
     992:	cb 01       	movw	r24, r22
     994:	80 0f       	add	r24, r16
     996:	91 1f       	adc	r25, r17
     998:	a2 1f       	adc	r26, r18
     99a:	b3 1f       	adc	r27, r19
     99c:	80 93 41 01 	sts	0x0141, r24
     9a0:	90 93 42 01 	sts	0x0142, r25
     9a4:	a0 93 43 01 	sts	0x0143, r26
     9a8:	b0 93 44 01 	sts	0x0144, r27
     9ac:	3e cf       	rjmp	.-388    	; 0x82a <main+0x106>
						 }

				}else{ //  if(active_alarm & 0x0F){ // IS ER EEN ALARM ACTIEF in active_alarm?
						// no active alarm in array
												
						active_alarm_time = 0; // set alarm time to zero, timers will be disabled in next timer 2 interrupt
     9ae:	10 92 41 01 	sts	0x0141, r1
     9b2:	10 92 42 01 	sts	0x0142, r1
     9b6:	10 92 43 01 	sts	0x0143, r1
     9ba:	10 92 44 01 	sts	0x0144, r1
     9be:	35 cf       	rjmp	.-406    	; 0x82a <main+0x106>
		
		PORTB |= _BV(0); // pb0 aan, pin 14
		
		// switch into idle mode until the next interrupt - Choose our preferred sleep mode:
		if(deep_sleep_ok == 1){
			set_sleep_mode(SLEEP_MODE_STANDBY); // if active alarm, go in pwr save mode to keep timer 2 running
     9c0:	83 b7       	in	r24, 0x33	; 51
     9c2:	81 7f       	andi	r24, 0xF1	; 241
     9c4:	8c 60       	ori	r24, 0x0C	; 12
     9c6:	83 bf       	out	0x33, r24	; 51
     9c8:	03 c0       	rjmp	.+6      	; 0x9d0 <__stack+0xd1>
			//set_sleep_mode(SLEEP_MODE_PWR_DOWN); // if active alarm, go in pwr save mode to keep timer 2 running
		}else{
			set_sleep_mode(SLEEP_MODE_IDLE);
     9ca:	83 b7       	in	r24, 0x33	; 51
     9cc:	81 7f       	andi	r24, 0xF1	; 241
     9ce:	83 bf       	out	0x33, r24	; 51
		}
  //   _delay_ms(15);
	
    // Set sleep enable (SE) bit:
    sleep_enable();
     9d0:	83 b7       	in	r24, 0x33	; 51
     9d2:	81 60       	ori	r24, 0x01	; 1
     9d4:	83 bf       	out	0x33, r24	; 51
    
    // Put the device to sleep:
    sleep_cpu();
     9d6:	88 95       	sleep
	
	// Clear sleep enable (SE) bit:
	sleep_disable();
     9d8:	83 b7       	in	r24, 0x33	; 51
     9da:	8e 7f       	andi	r24, 0xFE	; 254
     9dc:	83 bf       	out	0x33, r24	; 51
	//_delay_ms(50);
		
		PORTB &= ~_BV(0); // pb0 uit, pin 14
     9de:	28 98       	cbi	0x05, 0	; 5
     9e0:	24 cf       	rjmp	.-440    	; 0x82a <main+0x106>

					 
									
	} else {
		
		PORTB |= _BV(0); // pb0 aan, pin 14
     9e2:	28 9a       	sbi	0x05, 0	; 5
		
		// switch into idle mode until the next interrupt - Choose our preferred sleep mode:
		if(deep_sleep_ok == 1){
     9e4:	80 91 46 01 	lds	r24, 0x0146
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	79 f7       	brne	.-34     	; 0x9ca <__stack+0xcb>
     9ec:	e9 cf       	rjmp	.-46     	; 0x9c0 <__stack+0xc1>
	//uart0_puts("WHILE");

	if (rf12_recvDone() && rf12_crc == 0) {
		// process incoming data here
						
			if (RF12_WANTS_ACK) {
     9ee:	f7 01       	movw	r30, r14
     9f0:	80 81       	ld	r24, Z
     9f2:	85 fd       	sbrc	r24, 5
     9f4:	26 cf       	rjmp	.-436    	; 0x842 <main+0x11e>
     9f6:	34 cf       	rjmp	.-408    	; 0x860 <main+0x13c>
				rf12_sendStart(RF12_ACK_REPLY,0,0);
     9f8:	f7 01       	movw	r30, r14
     9fa:	80 81       	ld	r24, Z
     9fc:	86 ff       	sbrs	r24, 6
     9fe:	27 cf       	rjmp	.-434    	; 0x84e <main+0x12a>
     a00:	80 e8       	ldi	r24, 0x80	; 128
     a02:	29 cf       	rjmp	.-430    	; 0x856 <main+0x132>

00000a04 <_Z9isr_soundv>:
	}
						
}


	void isr_sound(){
     a04:	ef 92       	push	r14
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
		//	uart0_putc(sound_current_step);
		//	uart0_putc(millis_get());
		//	uart0_putc(_sound_note_time);
			// Stop note if necessary 
			if(_sound_note_time != 0){ // sound already playing?		
     a0a:	80 91 3b 01 	lds	r24, 0x013B
     a0e:	90 91 3c 01 	lds	r25, 0x013C
     a12:	a0 91 3d 01 	lds	r26, 0x013D
     a16:	b0 91 3e 01 	lds	r27, 0x013E
     a1a:	89 2b       	or	r24, r25
     a1c:	8a 2b       	or	r24, r26
     a1e:	8b 2b       	or	r24, r27
     a20:	81 f0       	breq	.+32     	; 0xa42 <_Z9isr_soundv+0x3e>
				//	uart0_puts("GS");
				if(millis_get() < _sound_note_time ){ // Do we need to stop the current note?
     a22:	25 de       	rcall	.-950    	; 0x66e <millis_get>
     a24:	00 91 3b 01 	lds	r16, 0x013B
     a28:	10 91 3c 01 	lds	r17, 0x013C
     a2c:	20 91 3d 01 	lds	r18, 0x013D
     a30:	30 91 3e 01 	lds	r19, 0x013E
     a34:	60 17       	cp	r22, r16
     a36:	71 07       	cpc	r23, r17
     a38:	82 07       	cpc	r24, r18
     a3a:	93 07       	cpc	r25, r19
     a3c:	08 f4       	brcc	.+2      	; 0xa40 <_Z9isr_soundv+0x3c>
     a3e:	ff c0       	rjmp	.+510    	; 0xc3e <_Z9isr_soundv+0x23a>
					//uart0_puts("DS");
					return; // dont stop current note
					
				}else{
					noTone(); // stop current note
     a40:	f0 d6       	rcall	.+3552   	; 0x1822 <noTone>
			
			// play next tone
		//	uart0_puts("PN");
		//	tone(unsigned long frequency, uint8_t volume);
		//uart0_putc(sound_current_alarm);
			if(sound_current_alarm == 0 ){
     a42:	80 91 40 01 	lds	r24, 0x0140
     a46:	81 11       	cpse	r24, r1
     a48:	32 c0       	rjmp	.+100    	; 0xaae <_Z9isr_soundv+0xaa>
				tone(pgm_read_word(&(sound_pattern_doorbell[sound_current_step].frequency)), 10); // freq, volume
     a4a:	e0 91 3f 01 	lds	r30, 0x013F
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	ee 0f       	add	r30, r30
     a52:	ff 1f       	adc	r31, r31
     a54:	ee 0f       	add	r30, r30
     a56:	ff 1f       	adc	r31, r31
     a58:	ee 0f       	add	r30, r30
     a5a:	ff 1f       	adc	r31, r31
     a5c:	ec 58       	subi	r30, 0x8C	; 140
     a5e:	ff 4f       	sbci	r31, 0xFF	; 255
     a60:	65 91       	lpm	r22, Z+
     a62:	74 91       	lpm	r23, Z
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	e1 2c       	mov	r14, r1
     a6a:	00 e0       	ldi	r16, 0x00	; 0
     a6c:	10 e0       	ldi	r17, 0x00	; 0
     a6e:	98 01       	movw	r18, r16
     a70:	4a e0       	ldi	r20, 0x0A	; 10
     a72:	df d6       	rcall	.+3518   	; 0x1832 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_doorbell[sound_current_step].time)));
     a74:	fc dd       	rcall	.-1032   	; 0x66e <millis_get>
     a76:	e0 91 3f 01 	lds	r30, 0x013F
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	ee 0f       	add	r30, r30
     a7e:	ff 1f       	adc	r31, r31
     a80:	ee 0f       	add	r30, r30
     a82:	ff 1f       	adc	r31, r31
     a84:	ee 0f       	add	r30, r30
     a86:	ff 1f       	adc	r31, r31
     a88:	e8 58       	subi	r30, 0x88	; 136
     a8a:	ff 4f       	sbci	r31, 0xFF	; 255
     a8c:	25 91       	lpm	r18, Z+
     a8e:	34 91       	lpm	r19, Z
     a90:	dc 01       	movw	r26, r24
     a92:	cb 01       	movw	r24, r22
     a94:	82 0f       	add	r24, r18
     a96:	93 1f       	adc	r25, r19
     a98:	a1 1d       	adc	r26, r1
     a9a:	b1 1d       	adc	r27, r1
     a9c:	80 93 3b 01 	sts	0x013B, r24
     aa0:	90 93 3c 01 	sts	0x013C, r25
     aa4:	a0 93 3d 01 	sts	0x013D, r26
     aa8:	b0 93 3e 01 	sts	0x013E, r27
     aac:	9b c0       	rjmp	.+310    	; 0xbe4 <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 1 ){
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	91 f5       	brne	.+100    	; 0xb16 <_Z9isr_soundv+0x112>
				tone(pgm_read_word(&(sound_pattern_phone[sound_current_step].frequency)), 10);
     ab2:	e0 91 3f 01 	lds	r30, 0x013F
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	ee 0f       	add	r30, r30
     aba:	ff 1f       	adc	r31, r31
     abc:	ee 0f       	add	r30, r30
     abe:	ff 1f       	adc	r31, r31
     ac0:	ee 0f       	add	r30, r30
     ac2:	ff 1f       	adc	r31, r31
     ac4:	ec 54       	subi	r30, 0x4C	; 76
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	65 91       	lpm	r22, Z+
     aca:	74 91       	lpm	r23, Z
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	e1 2c       	mov	r14, r1
     ad2:	00 e0       	ldi	r16, 0x00	; 0
     ad4:	10 e0       	ldi	r17, 0x00	; 0
     ad6:	98 01       	movw	r18, r16
     ad8:	4a e0       	ldi	r20, 0x0A	; 10
     ada:	ab d6       	rcall	.+3414   	; 0x1832 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_phone[sound_current_step].time)));
     adc:	c8 dd       	rcall	.-1136   	; 0x66e <millis_get>
     ade:	e0 91 3f 01 	lds	r30, 0x013F
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	ee 0f       	add	r30, r30
     aea:	ff 1f       	adc	r31, r31
     aec:	ee 0f       	add	r30, r30
     aee:	ff 1f       	adc	r31, r31
     af0:	e8 54       	subi	r30, 0x48	; 72
     af2:	ff 4f       	sbci	r31, 0xFF	; 255
     af4:	25 91       	lpm	r18, Z+
     af6:	34 91       	lpm	r19, Z
     af8:	dc 01       	movw	r26, r24
     afa:	cb 01       	movw	r24, r22
     afc:	82 0f       	add	r24, r18
     afe:	93 1f       	adc	r25, r19
     b00:	a1 1d       	adc	r26, r1
     b02:	b1 1d       	adc	r27, r1
     b04:	80 93 3b 01 	sts	0x013B, r24
     b08:	90 93 3c 01 	sts	0x013C, r25
     b0c:	a0 93 3d 01 	sts	0x013D, r26
     b10:	b0 93 3e 01 	sts	0x013E, r27
     b14:	67 c0       	rjmp	.+206    	; 0xbe4 <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 2 ){
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	91 f5       	brne	.+100    	; 0xb7e <_Z9isr_soundv+0x17a>
				tone(pgm_read_word(&(sound_pattern_fire[sound_current_step].frequency)), 10);
     b1a:	e0 91 3f 01 	lds	r30, 0x013F
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	ee 0f       	add	r30, r30
     b22:	ff 1f       	adc	r31, r31
     b24:	ee 0f       	add	r30, r30
     b26:	ff 1f       	adc	r31, r31
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	ec 54       	subi	r30, 0x4C	; 76
     b2e:	fc 4f       	sbci	r31, 0xFC	; 252
     b30:	65 91       	lpm	r22, Z+
     b32:	74 91       	lpm	r23, Z
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	e1 2c       	mov	r14, r1
     b3a:	00 e0       	ldi	r16, 0x00	; 0
     b3c:	10 e0       	ldi	r17, 0x00	; 0
     b3e:	98 01       	movw	r18, r16
     b40:	4a e0       	ldi	r20, 0x0A	; 10
     b42:	77 d6       	rcall	.+3310   	; 0x1832 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_fire[sound_current_step].time)));
     b44:	94 dd       	rcall	.-1240   	; 0x66e <millis_get>
     b46:	e0 91 3f 01 	lds	r30, 0x013F
     b4a:	f0 e0       	ldi	r31, 0x00	; 0
     b4c:	ee 0f       	add	r30, r30
     b4e:	ff 1f       	adc	r31, r31
     b50:	ee 0f       	add	r30, r30
     b52:	ff 1f       	adc	r31, r31
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	e8 54       	subi	r30, 0x48	; 72
     b5a:	fc 4f       	sbci	r31, 0xFC	; 252
     b5c:	25 91       	lpm	r18, Z+
     b5e:	34 91       	lpm	r19, Z
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	82 0f       	add	r24, r18
     b66:	93 1f       	adc	r25, r19
     b68:	a1 1d       	adc	r26, r1
     b6a:	b1 1d       	adc	r27, r1
     b6c:	80 93 3b 01 	sts	0x013B, r24
     b70:	90 93 3c 01 	sts	0x013C, r25
     b74:	a0 93 3d 01 	sts	0x013D, r26
     b78:	b0 93 3e 01 	sts	0x013E, r27
     b7c:	33 c0       	rjmp	.+102    	; 0xbe4 <_Z9isr_soundv+0x1e0>
			}
			else if(sound_current_alarm == 3 ){
     b7e:	83 30       	cpi	r24, 0x03	; 3
     b80:	89 f5       	brne	.+98     	; 0xbe4 <_Z9isr_soundv+0x1e0>
				tone(pgm_read_word(&(sound_pattern_help[sound_current_step].frequency)),10);
     b82:	e0 91 3f 01 	lds	r30, 0x013F
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	ee 0f       	add	r30, r30
     b8a:	ff 1f       	adc	r31, r31
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	ee 0f       	add	r30, r30
     b92:	ff 1f       	adc	r31, r31
     b94:	ec 5c       	subi	r30, 0xCC	; 204
     b96:	fb 4f       	sbci	r31, 0xFB	; 251
     b98:	65 91       	lpm	r22, Z+
     b9a:	74 91       	lpm	r23, Z
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	e1 2c       	mov	r14, r1
     ba2:	00 e0       	ldi	r16, 0x00	; 0
     ba4:	10 e0       	ldi	r17, 0x00	; 0
     ba6:	98 01       	movw	r18, r16
     ba8:	4a e0       	ldi	r20, 0x0A	; 10
     baa:	43 d6       	rcall	.+3206   	; 0x1832 <tone>
				_sound_note_time = (millis_get() + pgm_read_word(&(sound_pattern_help[sound_current_step].time)));
     bac:	60 dd       	rcall	.-1344   	; 0x66e <millis_get>
     bae:	e0 91 3f 01 	lds	r30, 0x013F
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	ee 0f       	add	r30, r30
     bb6:	ff 1f       	adc	r31, r31
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	ee 0f       	add	r30, r30
     bbe:	ff 1f       	adc	r31, r31
     bc0:	e8 5c       	subi	r30, 0xC8	; 200
     bc2:	fb 4f       	sbci	r31, 0xFB	; 251
     bc4:	25 91       	lpm	r18, Z+
     bc6:	34 91       	lpm	r19, Z
     bc8:	dc 01       	movw	r26, r24
     bca:	cb 01       	movw	r24, r22
     bcc:	82 0f       	add	r24, r18
     bce:	93 1f       	adc	r25, r19
     bd0:	a1 1d       	adc	r26, r1
     bd2:	b1 1d       	adc	r27, r1
     bd4:	80 93 3b 01 	sts	0x013B, r24
     bd8:	90 93 3c 01 	sts	0x013C, r25
     bdc:	a0 93 3d 01 	sts	0x013D, r26
     be0:	b0 93 3e 01 	sts	0x013E, r27
			}
			
		//_sound_note_time = millis_get() + 1000;
			
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
     be4:	50 91 3f 01 	lds	r21, 0x013F
     be8:	40 91 40 01 	lds	r20, 0x0140
     bec:	25 2f       	mov	r18, r21
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	e4 2f       	mov	r30, r20
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	ec 5d       	subi	r30, 0xDC	; 220
     bf6:	fe 4f       	sbci	r31, 0xFE	; 254
     bf8:	80 81       	ld	r24, Z
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	28 17       	cp	r18, r24
     c00:	39 07       	cpc	r19, r25
     c02:	d4 f0       	brlt	.+52     	; 0xc38 <_Z9isr_soundv+0x234>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c04:	20 91 45 01 	lds	r18, 0x0145
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     c08:	92 2f       	mov	r25, r18
     c0a:	9f 70       	andi	r25, 0x0F	; 15
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
     c0e:	4f 5f       	subi	r20, 0xFF	; 255
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     c10:	44 30       	cpi	r20, 0x04	; 4
     c12:	09 f4       	brne	.+2      	; 0xc16 <_Z9isr_soundv+0x212>
     c14:	43 2f       	mov	r20, r19
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c16:	e4 2f       	mov	r30, r20
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	e0 5e       	subi	r30, 0xE0	; 224
     c1c:	fe 4f       	sbci	r31, 0xFE	; 254
     c1e:	80 81       	ld	r24, Z
						done = 1;
					}
				
					if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     c20:	91 11       	cpse	r25, r1
     c22:	03 c0       	rjmp	.+6      	; 0xc2a <_Z9isr_soundv+0x226>
     c24:	40 93 40 01 	sts	0x0140, r20
     c28:	04 c0       	rjmp	.+8      	; 0xc32 <_Z9isr_soundv+0x22e>
				uint8_t done = 0;
				while(done == 0){
					sound_current_alarm++; // sound_current_alarm plus one
					if(sound_current_alarm == 4) { sound_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
					
					if(active_alarm & (alarm_bitmask[sound_current_alarm]) ){ // check if next alarm is active
     c2a:	82 23       	and	r24, r18
			// is variable sound_current_step equal to de total steps?
			if(sound_current_step >= (sound_alarm_keys[sound_current_alarm] -1)){
				// go to next sound
				
				uint8_t done = 0;
				while(done == 0){
     c2c:	81 f3       	breq	.-32     	; 0xc0e <_Z9isr_soundv+0x20a>
     c2e:	40 93 40 01 	sts	0x0140, r20
						done = 1; // in case there is no active alarm anymore, just breakout while
					}

				} // while
				
				sound_current_step = 0; // reset sound_current_step to zero to start the next sound	
     c32:	10 92 3f 01 	sts	0x013F, r1
     c36:	03 c0       	rjmp	.+6      	; 0xc3e <_Z9isr_soundv+0x23a>
				
			}else{
				// set sound_current_step plus one
				sound_current_step++;
     c38:	5f 5f       	subi	r21, 0xFF	; 255
     c3a:	50 93 3f 01 	sts	0x013F, r21
			}
	
				
		} //void isr_sound()
     c3e:	1f 91       	pop	r17
     c40:	0f 91       	pop	r16
     c42:	ef 90       	pop	r14
     c44:	08 95       	ret

00000c46 <_Z15isr_light_flashv>:
		
	void isr_light_flash(){
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
			
		// Do we need to go to the next flash?
		if(_flash_time != 0){ // is there already a flash ?
     c4e:	80 91 36 01 	lds	r24, 0x0136
     c52:	90 91 37 01 	lds	r25, 0x0137
     c56:	a0 91 38 01 	lds	r26, 0x0138
     c5a:	b0 91 39 01 	lds	r27, 0x0139
     c5e:	89 2b       	or	r24, r25
     c60:	8a 2b       	or	r24, r26
     c62:	8b 2b       	or	r24, r27
     c64:	09 f4       	brne	.+2      	; 0xc68 <_Z15isr_light_flashv+0x22>
     c66:	48 c0       	rjmp	.+144    	; 0xcf8 <_Z15isr_light_flashv+0xb2>
			if(millis_get() < _flash_time ){ // Do we need to stop the current note?
     c68:	02 dd       	rcall	.-1532   	; 0x66e <millis_get>
     c6a:	00 91 36 01 	lds	r16, 0x0136
     c6e:	10 91 37 01 	lds	r17, 0x0137
     c72:	20 91 38 01 	lds	r18, 0x0138
     c76:	30 91 39 01 	lds	r19, 0x0139
     c7a:	60 17       	cp	r22, r16
     c7c:	71 07       	cpc	r23, r17
     c7e:	82 07       	cpc	r24, r18
     c80:	93 07       	cpc	r25, r19
     c82:	08 f0       	brcs	.+2      	; 0xc86 <_Z15isr_light_flashv+0x40>
     c84:	39 c0       	rjmp	.+114    	; 0xcf8 <_Z15isr_light_flashv+0xb2>
     c86:	3b c0       	rjmp	.+118    	; 0xcfe <_Z15isr_light_flashv+0xb8>
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
     c88:	80 91 3a 01 	lds	r24, 0x013A
     c8c:	fe 01       	movw	r30, r28
     c8e:	98 e0       	ldi	r25, 0x08	; 8
     c90:	89 9f       	mul	r24, r25
     c92:	e0 0d       	add	r30, r0
     c94:	f1 1d       	adc	r31, r1
     c96:	11 24       	eor	r1, r1
     c98:	e4 58       	subi	r30, 0x84	; 132
     c9a:	fb 4f       	sbci	r31, 0xFB	; 251
     c9c:	64 91       	lpm	r22, Z
     c9e:	8c 2f       	mov	r24, r28
     ca0:	8d 5f       	subi	r24, 0xFD	; 253
     ca2:	84 d1       	rcall	.+776    	; 0xfac <pca9635_set_led_pwm>
     ca4:	21 96       	adiw	r28, 0x01	; 1
			}						
		}
						
			
		// get next flash and send it to the PCA9635
		for (byte j = 0; j <= 3; j++){
     ca6:	c4 30       	cpi	r28, 0x04	; 4
     ca8:	d1 05       	cpc	r29, r1
     caa:	71 f7       	brne	.-36     	; 0xc88 <_Z15isr_light_flashv+0x42>
		pca9635_set_led_pwm( j+3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[j])));
		}
		//pca9635_set_led_pwm_flash(3, pgm_read_byte(&(flash_pattern[_flash_current_step].led[0])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[1])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[2])), pgm_read_byte(&(flash_pattern[_flash_current_step].led[3])) );
		
		_flash_time = millis_get() + pgm_read_word(&(flash_pattern[_flash_current_step].time));
     cac:	e0 dc       	rcall	.-1600   	; 0x66e <millis_get>
     cae:	40 91 3a 01 	lds	r20, 0x013A
     cb2:	e4 2f       	mov	r30, r20
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	ee 0f       	add	r30, r30
     cbc:	ff 1f       	adc	r31, r31
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	e0 58       	subi	r30, 0x80	; 128
     cc4:	fb 4f       	sbci	r31, 0xFB	; 251
     cc6:	25 91       	lpm	r18, Z+
     cc8:	34 91       	lpm	r19, Z
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	82 0f       	add	r24, r18
     cd0:	93 1f       	adc	r25, r19
     cd2:	a1 1d       	adc	r26, r1
     cd4:	b1 1d       	adc	r27, r1
     cd6:	80 93 36 01 	sts	0x0136, r24
     cda:	90 93 37 01 	sts	0x0137, r25
     cde:	a0 93 38 01 	sts	0x0138, r26
     ce2:	b0 93 39 01 	sts	0x0139, r27
			
		// is variable _flash_current_step equal to total steps?
		if(_flash_current_step == (flash_keys -1 )) {
     ce6:	4f 31       	cpi	r20, 0x1F	; 31
     ce8:	19 f4       	brne	.+6      	; 0xcf0 <_Z15isr_light_flashv+0xaa>
			//reset _flash_current_step to 0
			_flash_current_step = 0;				
     cea:	10 92 3a 01 	sts	0x013A, r1
     cee:	07 c0       	rjmp	.+14     	; 0xcfe <_Z15isr_light_flashv+0xb8>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
     cf0:	4f 5f       	subi	r20, 0xFF	; 255
     cf2:	40 93 3a 01 	sts	0x013A, r20
     cf6:	03 c0       	rjmp	.+6      	; 0xcfe <_Z15isr_light_flashv+0xb8>
			}
	
				
		} //void isr_sound()
		
	void isr_light_flash(){
     cf8:	c0 e0       	ldi	r28, 0x00	; 0
     cfa:	d0 e0       	ldi	r29, 0x00	; 0
     cfc:	c5 cf       	rjmp	.-118    	; 0xc88 <_Z15isr_light_flashv+0x42>
		}else{
			// set _flash_current_step +1
			_flash_current_step++;
		}
		
	} // END isr_light_flash
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	08 95       	ret

00000d08 <_Z14isr_light_iconv>:
		
		
		
		
		
	void isr_light_icon(){
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
		
		// Do we need to go to the next flash?
		if(_icon_time != 0){ // is there already a flash ?
     d10:	80 91 30 01 	lds	r24, 0x0130
     d14:	90 91 31 01 	lds	r25, 0x0131
     d18:	a0 91 32 01 	lds	r26, 0x0132
     d1c:	b0 91 33 01 	lds	r27, 0x0133
     d20:	89 2b       	or	r24, r25
     d22:	8a 2b       	or	r24, r26
     d24:	8b 2b       	or	r24, r27
     d26:	79 f0       	breq	.+30     	; 0xd46 <_Z14isr_light_iconv+0x3e>
			if(millis_get() < _icon_time ){ // Do we need to stop the current note?
     d28:	a2 dc       	rcall	.-1724   	; 0x66e <millis_get>
     d2a:	00 91 30 01 	lds	r16, 0x0130
     d2e:	10 91 31 01 	lds	r17, 0x0131
     d32:	20 91 32 01 	lds	r18, 0x0132
     d36:	30 91 33 01 	lds	r19, 0x0133
     d3a:	60 17       	cp	r22, r16
     d3c:	71 07       	cpc	r23, r17
     d3e:	82 07       	cpc	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	08 f4       	brcc	.+2      	; 0xd46 <_Z14isr_light_iconv+0x3e>
     d44:	81 c0       	rjmp	.+258    	; 0xe48 <_Z14isr_light_iconv+0x140>
	// step 2 = 250 - (2 x 25)  = 200
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
     d46:	20 91 34 01 	lds	r18, 0x0134
     d4a:	22 23       	and	r18, r18
     d4c:	19 f0       	breq	.+6      	; 0xd54 <_Z14isr_light_iconv+0x4c>
     d4e:	2b 30       	cpi	r18, 0x0B	; 11
     d50:	21 f5       	brne	.+72     	; 0xd9a <_Z14isr_light_iconv+0x92>
     d52:	12 c0       	rjmp	.+36     	; 0xd78 <_Z14isr_light_iconv+0x70>
		intensity = 255;
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 1000;
     d54:	8c dc       	rcall	.-1768   	; 0x66e <millis_get>
     d56:	dc 01       	movw	r26, r24
     d58:	cb 01       	movw	r24, r22
     d5a:	88 51       	subi	r24, 0x18	; 24
     d5c:	9c 4f       	sbci	r25, 0xFC	; 252
     d5e:	af 4f       	sbci	r26, 0xFF	; 255
     d60:	bf 4f       	sbci	r27, 0xFF	; 255
     d62:	80 93 30 01 	sts	0x0130, r24
     d66:	90 93 31 01 	sts	0x0131, r25
     d6a:	a0 93 32 01 	sts	0x0132, r26
     d6e:	b0 93 33 01 	sts	0x0133, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     d72:	cf ef       	ldi	r28, 0xFF	; 255
     d74:	d0 e0       	ldi	r29, 0x00	; 0
     d76:	25 c0       	rjmp	.+74     	; 0xdc2 <_Z14isr_light_iconv+0xba>
		
		if(icon_current_step == 0){
			_icon_time = millis_get() + 1000;
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
     d78:	7a dc       	rcall	.-1804   	; 0x66e <millis_get>
     d7a:	dc 01       	movw	r26, r24
     d7c:	cb 01       	movw	r24, r22
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	a1 1d       	adc	r26, r1
     d82:	b1 1d       	adc	r27, r1
     d84:	80 93 30 01 	sts	0x0130, r24
     d88:	90 93 31 01 	sts	0x0131, r25
     d8c:	a0 93 32 01 	sts	0x0132, r26
     d90:	b0 93 33 01 	sts	0x0133, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     d94:	cf ef       	ldi	r28, 0xFF	; 255
     d96:	d0 e0       	ldi	r29, 0x00	; 0
     d98:	14 c0       	rjmp	.+40     	; 0xdc2 <_Z14isr_light_iconv+0xba>
		}else if(icon_current_step == 11){ // last step - set led full on, and go to next icon
			_icon_time = millis_get() + 1;
		}
			
	}else{
		intensity = (250 - (icon_current_step * 25)); // step 1 to 10, 
     d9a:	37 ee       	ldi	r19, 0xE7	; 231
     d9c:	32 03       	mulsu	r19, r18
     d9e:	e0 01       	movw	r28, r0
     da0:	11 24       	eor	r1, r1
     da2:	c6 50       	subi	r28, 0x06	; 6
     da4:	df 4f       	sbci	r29, 0xFF	; 255
		_icon_time = millis_get() + 30;
     da6:	63 dc       	rcall	.-1850   	; 0x66e <millis_get>
     da8:	dc 01       	movw	r26, r24
     daa:	cb 01       	movw	r24, r22
     dac:	4e 96       	adiw	r24, 0x1e	; 30
     dae:	a1 1d       	adc	r26, r1
     db0:	b1 1d       	adc	r27, r1
     db2:	80 93 30 01 	sts	0x0130, r24
     db6:	90 93 31 01 	sts	0x0131, r25
     dba:	a0 93 32 01 	sts	0x0132, r26
     dbe:	b0 93 33 01 	sts	0x0133, r27
	// step 11 = (if step == 11) brightness = 255
	
	// calculate intensity based on step
	uint16_t intensity;
	if(icon_current_step == 0 || icon_current_step == 11){ // if current step is 0 or 11 then intensity is 255
		intensity = 255;
     dc2:	00 e0       	ldi	r16, 0x00	; 0
     dc4:	10 e0       	ldi	r17, 0x00	; 0
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     dc6:	80 91 35 01 	lds	r24, 0x0135
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	9c 01       	movw	r18, r24
     dce:	22 0f       	add	r18, r18
     dd0:	33 1f       	adc	r19, r19
     dd2:	82 0f       	add	r24, r18
     dd4:	93 1f       	adc	r25, r19
     dd6:	80 0f       	add	r24, r16
     dd8:	91 1f       	adc	r25, r17
     dda:	fc 01       	movw	r30, r24
     ddc:	e4 58       	subi	r30, 0x84	; 132
     dde:	fa 4f       	sbci	r31, 0xFA	; 250
     de0:	44 91       	lpm	r20, Z
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     de2:	fc 01       	movw	r30, r24
     de4:	e8 59       	subi	r30, 0x98	; 152
     de6:	ff 4f       	sbci	r31, 0xFF	; 255
     de8:	84 91       	lpm	r24, Z
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
		uint8_t _dimmed_color = ((pgm_read_byte(&(icon_colors[icon_current_alarm].color[j])) * intensity) >> 8); // calculate dimmed color
     dea:	4c 9f       	mul	r20, r28
     dec:	90 01       	movw	r18, r0
     dee:	4d 9f       	mul	r20, r29
     df0:	30 0d       	add	r19, r0
     df2:	11 24       	eor	r1, r1
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
     df4:	63 2f       	mov	r22, r19
     df6:	da d0       	rcall	.+436    	; 0xfac <pca9635_set_led_pwm>
     df8:	0f 5f       	subi	r16, 0xFF	; 255
     dfa:	1f 4f       	sbci	r17, 0xFF	; 255
		_icon_time = millis_get() + 30;
		}
	
	
	// get next flash and send it to the PCA9635
	for (byte j = 0; j <= 2; j++){
     dfc:	03 30       	cpi	r16, 0x03	; 3
     dfe:	11 05       	cpc	r17, r1
     e00:	11 f7       	brne	.-60     	; 0xdc6 <_Z14isr_light_iconv+0xbe>
		pca9635_set_led_pwm( pgm_read_byte(&(icon_led_numbers[icon_current_alarm].lednr[j])), _dimmed_color);
	}
	

	// is variable _flash_current_step equal to total steps?
	if(icon_current_step == 11) {
     e02:	80 91 34 01 	lds	r24, 0x0134
     e06:	8b 30       	cpi	r24, 0x0B	; 11
     e08:	e1 f4       	brne	.+56     	; 0xe42 <_Z14isr_light_iconv+0x13a>
		//reset _flash_current_step to 0
		icon_current_step = 0;
     e0a:	10 92 34 01 	sts	0x0134, r1
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e0e:	30 91 45 01 	lds	r19, 0x0145
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     e12:	23 2f       	mov	r18, r19
     e14:	2f 70       	andi	r18, 0x0F	; 15
     e16:	80 91 35 01 	lds	r24, 0x0135
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     e1a:	40 e0       	ldi	r20, 0x00	; 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
     e1c:	8f 5f       	subi	r24, 0xFF	; 255
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
     e1e:	84 30       	cpi	r24, 0x04	; 4
     e20:	09 f4       	brne	.+2      	; 0xe24 <_Z14isr_light_iconv+0x11c>
     e22:	84 2f       	mov	r24, r20
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e24:	e8 2f       	mov	r30, r24
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	e0 5e       	subi	r30, 0xE0	; 224
     e2a:	fe 4f       	sbci	r31, 0xFE	; 254
     e2c:	90 81       	ld	r25, Z
					done = 1;
				}
				
				if(!(active_alarm & 0x0F)){ // is there ANY alarm active??
     e2e:	21 11       	cpse	r18, r1
     e30:	03 c0       	rjmp	.+6      	; 0xe38 <_Z14isr_light_iconv+0x130>
     e32:	80 93 35 01 	sts	0x0135, r24
     e36:	08 c0       	rjmp	.+16     	; 0xe48 <_Z14isr_light_iconv+0x140>
			uint8_t done = 0;
			while(done == 0){
				icon_current_alarm++; // sound_current_alarm plus one
				if(icon_current_alarm == 4) { icon_current_alarm = 0; } // if sound_current_alarm is 4 than go back to 0
				
				if(active_alarm & (alarm_bitmask[icon_current_alarm]) ){ // check if next alarm is active
     e38:	93 23       	and	r25, r19
		//reset _flash_current_step to 0
		icon_current_step = 0;
		
			
			uint8_t done = 0;
			while(done == 0){
     e3a:	81 f3       	breq	.-32     	; 0xe1c <_Z14isr_light_iconv+0x114>
     e3c:	80 93 35 01 	sts	0x0135, r24
     e40:	03 c0       	rjmp	.+6      	; 0xe48 <_Z14isr_light_iconv+0x140>
			} // while
			
			
		}else{
		// set _flash_current_step +1
		icon_current_step++;
     e42:	8f 5f       	subi	r24, 0xFF	; 255
     e44:	80 93 34 01 	sts	0x0134, r24
	}
	
} // END isr_light_icon
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	08 95       	ret

00000e52 <__vector_7>:

	
	
	
	
ISR (TIMER2_COMPA_vect) {
     e52:	1f 92       	push	r1
     e54:	0f 92       	push	r0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	0f 92       	push	r0
     e5a:	11 24       	eor	r1, r1
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
//uart0_puts("I");

	// check if the alarm needs to be stopped
	if(millis_get() >= active_alarm_time || active_alarm_time == 0){
     e78:	fa db       	rcall	.-2060   	; 0x66e <millis_get>
     e7a:	00 91 41 01 	lds	r16, 0x0141
     e7e:	10 91 42 01 	lds	r17, 0x0142
     e82:	20 91 43 01 	lds	r18, 0x0143
     e86:	30 91 44 01 	lds	r19, 0x0144
     e8a:	60 17       	cp	r22, r16
     e8c:	71 07       	cpc	r23, r17
     e8e:	82 07       	cpc	r24, r18
     e90:	93 07       	cpc	r25, r19
     e92:	28 f4       	brcc	.+10     	; 0xe9e <__vector_7+0x4c>
     e94:	01 2b       	or	r16, r17
     e96:	02 2b       	or	r16, r18
     e98:	03 2b       	or	r16, r19
     e9a:	09 f0       	breq	.+2      	; 0xe9e <__vector_7+0x4c>
     e9c:	3c c0       	rjmp	.+120    	; 0xf16 <__vector_7+0xc4>
		// stop alarm
			
			//uart0_puts("STOPINT");			
			// stop timer 0
			millis_pause();
     e9e:	06 dc       	rcall	.-2036   	; 0x6ac <millis_pause>
			
			// stop sound
			noTone();
     ea0:	c0 d4       	rcall	.+2432   	; 0x1822 <noTone>
			
			// stop timer 2
			TIMSK2 &= ~_BV(OCIE2A);
     ea2:	e0 e7       	ldi	r30, 0x70	; 112
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	8d 7f       	andi	r24, 0xFD	; 253
     eaa:	80 83       	st	Z, r24
			power_timer2_disable();
     eac:	e4 e6       	ldi	r30, 0x64	; 100
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 64       	ori	r24, 0x40	; 64
     eb4:	80 83       	st	Z, r24
			
			// reset steps of sound, flash and icon
			sound_current_step		= 0;
     eb6:	10 92 3f 01 	sts	0x013F, r1
			_sound_note_time		= 0;
     eba:	10 92 3b 01 	sts	0x013B, r1
     ebe:	10 92 3c 01 	sts	0x013C, r1
     ec2:	10 92 3d 01 	sts	0x013D, r1
     ec6:	10 92 3e 01 	sts	0x013E, r1
										
			_flash_current_step		= 0;
     eca:	10 92 3a 01 	sts	0x013A, r1
			_flash_time				= 0;
     ece:	10 92 36 01 	sts	0x0136, r1
     ed2:	10 92 37 01 	sts	0x0137, r1
     ed6:	10 92 38 01 	sts	0x0138, r1
     eda:	10 92 39 01 	sts	0x0139, r1
										
			icon_current_step		= 0;
     ede:	10 92 34 01 	sts	0x0134, r1
			_icon_time				= 0;
     ee2:	10 92 30 01 	sts	0x0130, r1
     ee6:	10 92 31 01 	sts	0x0131, r1
     eea:	10 92 32 01 	sts	0x0132, r1
     eee:	10 92 33 01 	sts	0x0133, r1
										
			// empty alarm arrray
			active_alarm = 0x00; 
     ef2:	10 92 45 01 	sts	0x0145, r1
			active_alarm_time = 0;
     ef6:	10 92 41 01 	sts	0x0141, r1
     efa:	10 92 42 01 	sts	0x0142, r1
     efe:	10 92 43 01 	sts	0x0143, r1
     f02:	10 92 44 01 	sts	0x0144, r1
					
			// alle leds uit, pca in slaapstand
			pca9635_set_all_led_pwm(0); // dimm all leds to zero
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	62 d0       	rcall	.+196    	; 0xfce <pca9635_set_all_led_pwm>
			pca9635_set_sleep(1); // put pca9635 in sleep
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	70 d0       	rcall	.+224    	; 0xfee <pca9635_set_sleep>
			// automatisch slapen in loop.

			deep_sleep_ok = 1;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	80 93 46 01 	sts	0x0146, r24
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <__vector_7+0xca>
					
	}else{
		// continue alarm
		isr_sound();
     f16:	76 dd       	rcall	.-1300   	; 0xa04 <_Z9isr_soundv>
	    isr_light_flash();
     f18:	96 de       	rcall	.-724    	; 0xc46 <_Z15isr_light_flashv>
		isr_light_icon();		
     f1a:	f6 de       	rcall	.-532    	; 0xd08 <_Z14isr_light_iconv>
	}
						
}
     f1c:	ff 91       	pop	r31
     f1e:	ef 91       	pop	r30
     f20:	bf 91       	pop	r27
     f22:	af 91       	pop	r26
     f24:	9f 91       	pop	r25
     f26:	8f 91       	pop	r24
     f28:	7f 91       	pop	r23
     f2a:	6f 91       	pop	r22
     f2c:	5f 91       	pop	r21
     f2e:	4f 91       	pop	r20
     f30:	3f 91       	pop	r19
     f32:	2f 91       	pop	r18
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	0f 90       	pop	r0
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	0f 90       	pop	r0
     f3e:	1f 90       	pop	r1
     f40:	18 95       	reti

00000f42 <pca9635_init>:
	   I2C_write(value);	
  	}
			  
  	I2C_stop();
		  
}
     f42:	80 e8       	ldi	r24, 0x80	; 128
     f44:	42 db       	rcall	.-2428   	; 0x5ca <I2C_start>
     f46:	80 e8       	ldi	r24, 0x80	; 128
     f48:	65 db       	rcall	.-2358   	; 0x614 <I2C_write>
     f4a:	80 e8       	ldi	r24, 0x80	; 128
     f4c:	63 db       	rcall	.-2362   	; 0x614 <I2C_write>
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	61 db       	rcall	.-2366   	; 0x614 <I2C_write>
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	5f db       	rcall	.-2370   	; 0x614 <I2C_write>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	5d db       	rcall	.-2374   	; 0x614 <I2C_write>
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	5b db       	rcall	.-2378   	; 0x614 <I2C_write>
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	59 db       	rcall	.-2382   	; 0x614 <I2C_write>
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	57 db       	rcall	.-2386   	; 0x614 <I2C_write>
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	55 db       	rcall	.-2390   	; 0x614 <I2C_write>
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	53 db       	rcall	.-2394   	; 0x614 <I2C_write>
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	51 db       	rcall	.-2398   	; 0x614 <I2C_write>
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	4f db       	rcall	.-2402   	; 0x614 <I2C_write>
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	4d db       	rcall	.-2406   	; 0x614 <I2C_write>
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	4b db       	rcall	.-2410   	; 0x614 <I2C_write>
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	49 db       	rcall	.-2414   	; 0x614 <I2C_write>
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	47 db       	rcall	.-2418   	; 0x614 <I2C_write>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	45 db       	rcall	.-2422   	; 0x614 <I2C_write>
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	43 db       	rcall	.-2426   	; 0x614 <I2C_write>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	41 db       	rcall	.-2430   	; 0x614 <I2C_write>
     f92:	8f ef       	ldi	r24, 0xFF	; 255
     f94:	3f db       	rcall	.-2434   	; 0x614 <I2C_write>
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	3d db       	rcall	.-2438   	; 0x614 <I2C_write>
     f9a:	8a ea       	ldi	r24, 0xAA	; 170
     f9c:	3b db       	rcall	.-2442   	; 0x614 <I2C_write>
     f9e:	8a ea       	ldi	r24, 0xAA	; 170
     fa0:	39 db       	rcall	.-2446   	; 0x614 <I2C_write>
     fa2:	8a ea       	ldi	r24, 0xAA	; 170
     fa4:	37 db       	rcall	.-2450   	; 0x614 <I2C_write>
     fa6:	8a ea       	ldi	r24, 0xAA	; 170
     fa8:	35 db       	rcall	.-2454   	; 0x614 <I2C_write>
     faa:	51 cb       	rjmp	.-2398   	; 0x64e <I2C_stop>

00000fac <pca9635_set_led_pwm>:
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	d8 2f       	mov	r29, r24
     fb2:	c6 2f       	mov	r28, r22
     fb4:	80 e8       	ldi	r24, 0x80	; 128
     fb6:	09 db       	rcall	.-2542   	; 0x5ca <I2C_start>
     fb8:	8d 2f       	mov	r24, r29
     fba:	8e 5f       	subi	r24, 0xFE	; 254
     fbc:	80 68       	ori	r24, 0x80	; 128
     fbe:	2a db       	rcall	.-2476   	; 0x614 <I2C_write>
     fc0:	8c 2f       	mov	r24, r28
     fc2:	28 db       	rcall	.-2480   	; 0x614 <I2C_write>
     fc4:	44 db       	rcall	.-2424   	; 0x64e <I2C_stop>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <pca9635_set_all_led_pwm>:
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29
     fd2:	d8 2f       	mov	r29, r24
     fd4:	80 e8       	ldi	r24, 0x80	; 128
     fd6:	f9 da       	rcall	.-2574   	; 0x5ca <I2C_start>
     fd8:	82 e8       	ldi	r24, 0x82	; 130
     fda:	1c db       	rcall	.-2504   	; 0x614 <I2C_write>
     fdc:	c0 e1       	ldi	r28, 0x10	; 16
     fde:	8d 2f       	mov	r24, r29
     fe0:	19 db       	rcall	.-2510   	; 0x614 <I2C_write>
     fe2:	c1 50       	subi	r28, 0x01	; 1
     fe4:	e1 f7       	brne	.-8      	; 0xfde <pca9635_set_all_led_pwm+0x10>
     fe6:	33 db       	rcall	.-2458   	; 0x64e <I2C_stop>
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	08 95       	ret

00000fee <pca9635_set_sleep>:

/**
* Changes the oscillator mode between sleep (1) and active (0)
*/
uint8_t pca9635_set_sleep(uint8_t sleep)
{
     fee:	cf 93       	push	r28
     ff0:	c8 2f       	mov	r28, r24
	I2C_start((0x40<<1)+I2C_READ);
     ff2:	81 e8       	ldi	r24, 0x81	; 129
     ff4:	ea da       	rcall	.-2604   	; 0x5ca <I2C_start>
	I2C_write(0x80); // autoincrement, mode 0,
     ff6:	80 e8       	ldi	r24, 0x80	; 128
     ff8:	0d db       	rcall	.-2534   	; 0x614 <I2C_write>
	// I2C_stop(); ???nodig?
	uint8_t data = I2C_read_ack();
     ffa:	1e db       	rcall	.-2500   	; 0x638 <I2C_read_ack>
	
	if(sleep){		// set or unset bit 4
     ffc:	cc 23       	and	r28, r28
     ffe:	11 f0       	breq	.+4      	; 0x1004 <pca9635_set_sleep+0x16>
		data |= (1<<4);
    1000:	80 61       	ori	r24, 0x10	; 16
    1002:	01 c0       	rjmp	.+2      	; 0x1006 <pca9635_set_sleep+0x18>
	}else{
		data &= ~(1<<4);
    1004:	8f 7e       	andi	r24, 0xEF	; 239
	}
	
	uint8_t ack = I2C_write(data);  
    1006:	06 db       	rcall	.-2548   	; 0x614 <I2C_write>
    1008:	c8 2f       	mov	r28, r24
	I2C_stop();
    100a:	21 db       	rcall	.-2494   	; 0x64e <I2C_stop>
	return ack;
}
    100c:	8c 2f       	mov	r24, r28
    100e:	cf 91       	pop	r28
    1010:	08 95       	ret

00001012 <_ZL15blockInterruptsv>:
	rf12_idle();
	else {
		rfmstate &= ~B11111000; // make sure everything is switched off (except bod, wkup, clk)
		rf12_xfer(rfmstate);
	}
	rxstate = TXIDLE;
    1012:	e8 98       	cbi	0x1d, 0	; 29
    1014:	08 95       	ret

00001016 <_ZL15allowInterruptsv>:
    1016:	e8 9a       	sbi	0x1d, 0	; 29
    1018:	08 95       	ret

0000101a <_ZL9rf12_byteh>:
    101a:	8e bd       	out	0x2e, r24	; 46
    101c:	0d b4       	in	r0, 0x2d	; 45
    101e:	07 fe       	sbrs	r0, 7
    1020:	fd cf       	rjmp	.-6      	; 0x101c <_ZL9rf12_byteh+0x2>
    1022:	8e b5       	in	r24, 0x2e	; 46
    1024:	08 95       	ret

00001026 <_ZL9rf12_xferj>:
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	18 2f       	mov	r17, r24
    102e:	c9 2f       	mov	r28, r25
    1030:	f0 df       	rcall	.-32     	; 0x1012 <_ZL15blockInterruptsv>
    1032:	2a 98       	cbi	0x05, 2	; 5
    1034:	8c 2f       	mov	r24, r28
    1036:	f1 df       	rcall	.-30     	; 0x101a <_ZL9rf12_byteh>
    1038:	d8 2f       	mov	r29, r24
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	c8 2f       	mov	r28, r24
    103e:	81 2f       	mov	r24, r17
    1040:	ec df       	rcall	.-40     	; 0x101a <_ZL9rf12_byteh>
    1042:	c8 2b       	or	r28, r24
    1044:	2a 9a       	sbi	0x05, 2	; 5
    1046:	e7 df       	rcall	.-50     	; 0x1016 <_ZL15allowInterruptsv>
    1048:	8c 2f       	mov	r24, r28
    104a:	9d 2f       	mov	r25, r29
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	08 95       	ret

00001054 <_ZL9rf12_idlev>:
    1054:	80 91 9b 01 	lds	r24, 0x019B
    1058:	90 91 9c 01 	lds	r25, 0x019C
    105c:	8f 70       	andi	r24, 0x0F	; 15
    105e:	90 93 9c 01 	sts	0x019C, r25
    1062:	80 93 9b 01 	sts	0x019B, r24
    1066:	80 91 9b 01 	lds	r24, 0x019B
    106a:	90 91 9c 01 	lds	r25, 0x019C
    106e:	88 60       	ori	r24, 0x08	; 8
    1070:	90 93 9c 01 	sts	0x019C, r25
    1074:	80 93 9b 01 	sts	0x019B, r24
    1078:	80 91 9b 01 	lds	r24, 0x019B
    107c:	90 91 9c 01 	lds	r25, 0x019C
    1080:	d2 cf       	rjmp	.-92     	; 0x1026 <_ZL9rf12_xferj>

00001082 <_Z12rf12_spiInitv>:
    1082:	84 b1       	in	r24, 0x04	; 4
    1084:	8c 62       	ori	r24, 0x2C	; 44
    1086:	84 b9       	out	0x04, r24	; 4
    1088:	2a 9a       	sbi	0x05, 2	; 5
    108a:	24 98       	cbi	0x04, 4	; 4
    108c:	80 e5       	ldi	r24, 0x50	; 80
    108e:	8c bd       	out	0x2c, r24	; 44
    1090:	8d b5       	in	r24, 0x2d	; 45
    1092:	81 60       	ori	r24, 0x01	; 1
    1094:	8d bd       	out	0x2d, r24	; 45
    1096:	52 98       	cbi	0x0a, 2	; 10
    1098:	5a 9a       	sbi	0x0b, 2	; 11
    109a:	08 95       	ret

0000109c <_Z13rf12_recvDonev>:
    109c:	80 91 9d 01 	lds	r24, 0x019D
    10a0:	87 30       	cpi	r24, 0x07	; 7
    10a2:	09 f0       	breq	.+2      	; 0x10a6 <_Z13rf12_recvDonev+0xa>
    10a4:	51 c0       	rjmp	.+162    	; 0x1148 <_Z13rf12_recvDonev+0xac>
    10a6:	80 91 a0 01 	lds	r24, 0x01A0
    10aa:	88 23       	and	r24, r24
    10ac:	a1 f0       	breq	.+40     	; 0x10d6 <_Z13rf12_recvDonev+0x3a>
    10ae:	90 91 9e 01 	lds	r25, 0x019E
    10b2:	98 17       	cp	r25, r24
    10b4:	28 f4       	brcc	.+10     	; 0x10c0 <_Z13rf12_recvDonev+0x24>
    10b6:	80 91 9e 01 	lds	r24, 0x019E
    10ba:	87 34       	cpi	r24, 0x47	; 71
    10bc:	08 f4       	brcc	.+2      	; 0x10c0 <_Z13rf12_recvDonev+0x24>
    10be:	44 c0       	rjmp	.+136    	; 0x1148 <_Z13rf12_recvDonev+0xac>
    10c0:	84 e0       	ldi	r24, 0x04	; 4
    10c2:	80 93 9d 01 	sts	0x019D, r24
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	90 93 95 01 	sts	0x0195, r25
    10ce:	80 93 94 01 	sts	0x0194, r24
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	08 95       	ret
    10d6:	20 91 9e 01 	lds	r18, 0x019E
    10da:	80 91 4f 01 	lds	r24, 0x014F
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	05 96       	adiw	r24, 0x05	; 5
    10e4:	28 17       	cp	r18, r24
    10e6:	39 07       	cpc	r19, r25
    10e8:	24 f4       	brge	.+8      	; 0x10f2 <_Z13rf12_recvDonev+0x56>
    10ea:	80 91 9e 01 	lds	r24, 0x019E
    10ee:	87 34       	cpi	r24, 0x47	; 71
    10f0:	58 f1       	brcs	.+86     	; 0x1148 <_Z13rf12_recvDonev+0xac>
    10f2:	84 e0       	ldi	r24, 0x04	; 4
    10f4:	80 93 9d 01 	sts	0x019D, r24
    10f8:	80 91 4f 01 	lds	r24, 0x014F
    10fc:	83 34       	cpi	r24, 0x43	; 67
    10fe:	30 f0       	brcs	.+12     	; 0x110c <_Z13rf12_recvDonev+0x70>
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	90 93 95 01 	sts	0x0195, r25
    1108:	80 93 94 01 	sts	0x0194, r24
    110c:	80 91 4e 01 	lds	r24, 0x014E
    1110:	86 ff       	sbrs	r24, 6
    1112:	0b c0       	rjmp	.+22     	; 0x112a <_Z13rf12_recvDonev+0x8e>
    1114:	80 91 a1 01 	lds	r24, 0x01A1
    1118:	98 2f       	mov	r25, r24
    111a:	9f 71       	andi	r25, 0x1F	; 31
    111c:	9f 31       	cpi	r25, 0x1F	; 31
    111e:	29 f0       	breq	.+10     	; 0x112a <_Z13rf12_recvDonev+0x8e>
    1120:	90 91 4e 01 	lds	r25, 0x014E
    1124:	89 27       	eor	r24, r25
    1126:	8f 71       	andi	r24, 0x1F	; 31
    1128:	79 f4       	brne	.+30     	; 0x1148 <_Z13rf12_recvDonev+0xac>
    112a:	80 91 94 01 	lds	r24, 0x0194
    112e:	90 91 95 01 	lds	r25, 0x0195
    1132:	89 2b       	or	r24, r25
    1134:	09 f0       	breq	.+2      	; 0x1138 <_Z13rf12_recvDonev+0x9c>
    1136:	55 c0       	rjmp	.+170    	; 0x11e2 <_Z13rf12_recvDonev+0x146>
    1138:	e0 91 47 01 	lds	r30, 0x0147
    113c:	f0 91 48 01 	lds	r31, 0x0148
    1140:	30 97       	sbiw	r30, 0x00	; 0
    1142:	09 f0       	breq	.+2      	; 0x1146 <_Z13rf12_recvDonev+0xaa>
    1144:	4a c0       	rjmp	.+148    	; 0x11da <_Z13rf12_recvDonev+0x13e>
    1146:	4d c0       	rjmp	.+154    	; 0x11e2 <_Z13rf12_recvDonev+0x146>
    1148:	80 91 9d 01 	lds	r24, 0x019D
    114c:	84 30       	cpi	r24, 0x04	; 4
    114e:	09 f0       	breq	.+2      	; 0x1152 <_Z13rf12_recvDonev+0xb6>
    1150:	42 c0       	rjmp	.+132    	; 0x11d6 <_Z13rf12_recvDonev+0x13a>
    1152:	10 92 4f 01 	sts	0x014F, r1
    1156:	10 92 9e 01 	sts	0x019E, r1
    115a:	8f ef       	ldi	r24, 0xFF	; 255
    115c:	9f ef       	ldi	r25, 0xFF	; 255
    115e:	90 93 95 01 	sts	0x0195, r25
    1162:	80 93 94 01 	sts	0x0194, r24
    1166:	20 91 9f 01 	lds	r18, 0x019F
    116a:	22 23       	and	r18, r18
    116c:	d9 f0       	breq	.+54     	; 0x11a4 <_Z13rf12_recvDonev+0x108>
    116e:	82 27       	eor	r24, r18
    1170:	28 2f       	mov	r18, r24
    1172:	22 95       	swap	r18
    1174:	28 27       	eor	r18, r24
    1176:	02 2e       	mov	r0, r18
    1178:	26 95       	lsr	r18
    117a:	26 95       	lsr	r18
    117c:	20 25       	eor	r18, r0
    117e:	02 2e       	mov	r0, r18
    1180:	26 95       	lsr	r18
    1182:	20 25       	eor	r18, r0
    1184:	27 70       	andi	r18, 0x07	; 7
    1186:	08 2e       	mov	r0, r24
    1188:	89 2f       	mov	r24, r25
    118a:	26 95       	lsr	r18
    118c:	07 94       	ror	r0
    118e:	27 95       	ror	r18
    1190:	90 2d       	mov	r25, r0
    1192:	82 27       	eor	r24, r18
    1194:	06 94       	lsr	r0
    1196:	27 95       	ror	r18
    1198:	90 25       	eor	r25, r0
    119a:	82 27       	eor	r24, r18
    119c:	90 93 95 01 	sts	0x0195, r25
    11a0:	80 93 94 01 	sts	0x0194, r24
    11a4:	87 e0       	ldi	r24, 0x07	; 7
    11a6:	80 93 9d 01 	sts	0x019D, r24
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	80 93 97 01 	sts	0x0197, r24
    11b0:	83 ea       	ldi	r24, 0xA3	; 163
    11b2:	94 e9       	ldi	r25, 0x94	; 148
    11b4:	38 df       	rcall	.-400    	; 0x1026 <_ZL9rf12_xferj>
    11b6:	80 91 9b 01 	lds	r24, 0x019B
    11ba:	90 91 9c 01 	lds	r25, 0x019C
    11be:	88 6d       	ori	r24, 0xD8	; 216
    11c0:	90 93 9c 01 	sts	0x019C, r25
    11c4:	80 93 9b 01 	sts	0x019B, r24
    11c8:	80 91 9b 01 	lds	r24, 0x019B
    11cc:	90 91 9c 01 	lds	r25, 0x019C
    11d0:	2a df       	rcall	.-428    	; 0x1026 <_ZL9rf12_xferj>
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	08 95       	ret
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	08 95       	ret
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	09 95       	icall
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	08 95       	ret
    11e2:	8f ef       	ldi	r24, 0xFF	; 255
    11e4:	9f ef       	ldi	r25, 0xFF	; 255
    11e6:	dc 01       	movw	r26, r24
    11e8:	80 93 49 01 	sts	0x0149, r24
    11ec:	90 93 4a 01 	sts	0x014A, r25
    11f0:	a0 93 4b 01 	sts	0x014B, r26
    11f4:	b0 93 4c 01 	sts	0x014C, r27
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	08 95       	ret

000011fc <_Z15rf12_setBitrateh>:
    11fc:	cf 92       	push	r12
    11fe:	df 92       	push	r13
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	c8 2f       	mov	r28, r24
    120c:	08 2f       	mov	r16, r24
    120e:	10 e0       	ldi	r17, 0x00	; 0
    1210:	c8 01       	movw	r24, r16
    1212:	96 6c       	ori	r25, 0xC6	; 198
    1214:	08 df       	rcall	.-496    	; 0x1026 <_ZL9rf12_xferj>
    1216:	cf 77       	andi	r28, 0x7F	; 127
    1218:	2c 2f       	mov	r18, r28
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	2f 5f       	subi	r18, 0xFF	; 255
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
    1220:	44 27       	eor	r20, r20
    1222:	37 fd       	sbrc	r19, 7
    1224:	40 95       	com	r20
    1226:	54 2f       	mov	r21, r20
    1228:	6b ef       	ldi	r22, 0xFB	; 251
    122a:	72 e4       	ldi	r23, 0x42	; 66
    122c:	85 e0       	ldi	r24, 0x05	; 5
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	1a d4       	rcall	.+2100   	; 0x1a66 <__udivmodsi4>
    1232:	69 01       	movw	r12, r18
    1234:	7a 01       	movw	r14, r20
    1236:	c8 01       	movw	r24, r16
    1238:	88 0f       	add	r24, r24
    123a:	89 2f       	mov	r24, r25
    123c:	88 1f       	adc	r24, r24
    123e:	99 0b       	sbc	r25, r25
    1240:	8c 01       	movw	r16, r24
    1242:	00 0f       	add	r16, r16
    1244:	11 1f       	adc	r17, r17
    1246:	00 0f       	add	r16, r16
    1248:	11 1f       	adc	r17, r17
    124a:	00 0f       	add	r16, r16
    124c:	11 1f       	adc	r17, r17
    124e:	08 1b       	sub	r16, r24
    1250:	19 0b       	sbc	r17, r25
    1252:	0f 5f       	subi	r16, 0xFF	; 255
    1254:	1f 4f       	sbci	r17, 0xFF	; 255
    1256:	98 01       	movw	r18, r16
    1258:	44 27       	eor	r20, r20
    125a:	37 fd       	sbrc	r19, 7
    125c:	40 95       	com	r20
    125e:	54 2f       	mov	r21, r20
    1260:	c7 01       	movw	r24, r14
    1262:	b6 01       	movw	r22, r12
    1264:	00 d4       	rcall	.+2048   	; 0x1a66 <__udivmodsi4>
    1266:	da 01       	movw	r26, r20
    1268:	c9 01       	movw	r24, r18
    126a:	68 94       	set
    126c:	12 f8       	bld	r1, 2
    126e:	b6 95       	lsr	r27
    1270:	a7 95       	ror	r26
    1272:	97 95       	ror	r25
    1274:	87 95       	ror	r24
    1276:	16 94       	lsr	r1
    1278:	d1 f7       	brne	.-12     	; 0x126e <_Z15rf12_setBitrateh+0x72>
    127a:	bc 01       	movw	r22, r24
    127c:	cd 01       	movw	r24, r26
    127e:	6d 57       	subi	r22, 0x7D	; 125
    1280:	7c 4f       	sbci	r23, 0xFC	; 252
    1282:	8f 4f       	sbci	r24, 0xFF	; 255
    1284:	9f 4f       	sbci	r25, 0xFF	; 255
    1286:	24 e8       	ldi	r18, 0x84	; 132
    1288:	33 e0       	ldi	r19, 0x03	; 3
    128a:	40 e0       	ldi	r20, 0x00	; 0
    128c:	50 e0       	ldi	r21, 0x00	; 0
    128e:	eb d3       	rcall	.+2006   	; 0x1a66 <__udivmodsi4>
    1290:	20 93 96 01 	sts	0x0196, r18
    1294:	cf 91       	pop	r28
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	ff 90       	pop	r15
    129c:	ef 90       	pop	r14
    129e:	df 90       	pop	r13
    12a0:	cf 90       	pop	r12
    12a2:	08 95       	ret

000012a4 <_Z19rf12_setFixedLengthh>:
    12a4:	81 11       	cpse	r24, r1
    12a6:	03 c0       	rjmp	.+6      	; 0x12ae <_Z19rf12_setFixedLengthh+0xa>
    12a8:	10 92 a0 01 	sts	0x01A0, r1
    12ac:	08 95       	ret
    12ae:	8f 5f       	subi	r24, 0xFF	; 255
    12b0:	80 93 a0 01 	sts	0x01A0, r24
    12b4:	08 95       	ret

000012b6 <_Z14rf12_sendStarth>:
    12b6:	86 fd       	sbrc	r24, 6
    12b8:	05 c0       	rjmp	.+10     	; 0x12c4 <_Z14rf12_sendStarth+0xe>
    12ba:	80 7e       	andi	r24, 0xE0	; 224
    12bc:	90 91 a1 01 	lds	r25, 0x01A1
    12c0:	9f 71       	andi	r25, 0x1F	; 31
    12c2:	89 0f       	add	r24, r25
    12c4:	80 93 4e 01 	sts	0x014E, r24
    12c8:	e0 91 47 01 	lds	r30, 0x0147
    12cc:	f0 91 48 01 	lds	r31, 0x0148
    12d0:	30 97       	sbiw	r30, 0x00	; 0
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <_Z14rf12_sendStarth+0x22>
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	09 95       	icall
    12d8:	8f ef       	ldi	r24, 0xFF	; 255
    12da:	9f ef       	ldi	r25, 0xFF	; 255
    12dc:	90 93 95 01 	sts	0x0195, r25
    12e0:	80 93 94 01 	sts	0x0194, r24
    12e4:	80 91 94 01 	lds	r24, 0x0194
    12e8:	90 91 95 01 	lds	r25, 0x0195
    12ec:	20 91 9f 01 	lds	r18, 0x019F
    12f0:	82 27       	eor	r24, r18
    12f2:	28 2f       	mov	r18, r24
    12f4:	22 95       	swap	r18
    12f6:	28 27       	eor	r18, r24
    12f8:	02 2e       	mov	r0, r18
    12fa:	26 95       	lsr	r18
    12fc:	26 95       	lsr	r18
    12fe:	20 25       	eor	r18, r0
    1300:	02 2e       	mov	r0, r18
    1302:	26 95       	lsr	r18
    1304:	20 25       	eor	r18, r0
    1306:	27 70       	andi	r18, 0x07	; 7
    1308:	08 2e       	mov	r0, r24
    130a:	89 2f       	mov	r24, r25
    130c:	26 95       	lsr	r18
    130e:	07 94       	ror	r0
    1310:	27 95       	ror	r18
    1312:	90 2d       	mov	r25, r0
    1314:	82 27       	eor	r24, r18
    1316:	06 94       	lsr	r0
    1318:	27 95       	ror	r18
    131a:	90 25       	eor	r25, r0
    131c:	82 27       	eor	r24, r18
    131e:	90 93 95 01 	sts	0x0195, r25
    1322:	80 93 94 01 	sts	0x0194, r24
    1326:	88 e0       	ldi	r24, 0x08	; 8
    1328:	80 93 9d 01 	sts	0x019D, r24
    132c:	80 91 9b 01 	lds	r24, 0x019B
    1330:	90 91 9c 01 	lds	r25, 0x019C
    1334:	88 63       	ori	r24, 0x38	; 56
    1336:	90 93 9c 01 	sts	0x019C, r25
    133a:	80 93 9b 01 	sts	0x019B, r24
    133e:	80 91 9b 01 	lds	r24, 0x019B
    1342:	90 91 9c 01 	lds	r25, 0x019C
    1346:	6f ce       	rjmp	.-802    	; 0x1026 <_ZL9rf12_xferj>

00001348 <_Z14rf12_sendStarthPKvh>:
    1348:	cf 93       	push	r28
    134a:	c8 2f       	mov	r28, r24
    134c:	40 93 4f 01 	sts	0x014F, r20
    1350:	20 e5       	ldi	r18, 0x50	; 80
    1352:	31 e0       	ldi	r19, 0x01	; 1
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	82 2f       	mov	r24, r18
    1358:	93 2f       	mov	r25, r19
    135a:	bb d3       	rcall	.+1910   	; 0x1ad2 <memcpy>
    135c:	8c 2f       	mov	r24, r28
    135e:	ab df       	rcall	.-170    	; 0x12b6 <_Z14rf12_sendStarth>
    1360:	cf 91       	pop	r28
    1362:	08 95       	ret

00001364 <_Z13rf12_sendWaith>:
    1364:	44 e0       	ldi	r20, 0x04	; 4
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	5c e0       	ldi	r21, 0x0C	; 12
    136a:	16 c0       	rjmp	.+44     	; 0x1398 <_Z13rf12_sendWaith+0x34>
    136c:	88 23       	and	r24, r24
    136e:	a1 f0       	breq	.+40     	; 0x1398 <_Z13rf12_sendWaith+0x34>
    1370:	93 b7       	in	r25, 0x33	; 51
    1372:	91 7f       	andi	r25, 0xF1	; 241
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	21 f0       	breq	.+8      	; 0x1380 <_Z13rf12_sendWaith+0x1c>
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	21 f4       	brne	.+8      	; 0x1384 <_Z13rf12_sendWaith+0x20>
    137c:	25 2f       	mov	r18, r21
    137e:	03 c0       	rjmp	.+6      	; 0x1386 <_Z13rf12_sendWaith+0x22>
    1380:	24 2f       	mov	r18, r20
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <_Z13rf12_sendWaith+0x22>
    1384:	23 2f       	mov	r18, r19
    1386:	92 2b       	or	r25, r18
    1388:	93 bf       	out	0x33, r25	; 51
    138a:	93 b7       	in	r25, 0x33	; 51
    138c:	91 60       	ori	r25, 0x01	; 1
    138e:	93 bf       	out	0x33, r25	; 51
    1390:	88 95       	sleep
    1392:	93 b7       	in	r25, 0x33	; 51
    1394:	9e 7f       	andi	r25, 0xFE	; 254
    1396:	93 bf       	out	0x33, r25	; 51
    1398:	90 91 9d 01 	lds	r25, 0x019D
    139c:	94 30       	cpi	r25, 0x04	; 4
    139e:	31 f7       	brne	.-52     	; 0x136c <_Z13rf12_sendWaith+0x8>
    13a0:	08 95       	ret

000013a2 <_Z21rf12_interruptcontrolv>:
    13a2:	e8 9a       	sbi	0x1d, 0	; 29
    13a4:	08 95       	ret

000013a6 <_Z12rf12_restorehhh>:
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
    13aa:	d6 2f       	mov	r29, r22
    13ac:	c4 2f       	mov	r28, r20
    13ae:	80 93 a1 01 	sts	0x01A1, r24
    13b2:	40 93 9f 01 	sts	0x019F, r20
    13b6:	60 93 a2 01 	sts	0x01A2, r22
    13ba:	f3 df       	rcall	.-26     	; 0x13a2 <_Z21rf12_interruptcontrolv>
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	72 df       	rcall	.-284    	; 0x12a4 <_Z19rf12_setFixedLengthh>
    13c0:	28 de       	rcall	.-944    	; 0x1012 <_ZL15blockInterruptsv>
    13c2:	25 e0       	ldi	r18, 0x05	; 5
    13c4:	32 e8       	ldi	r19, 0x82	; 130
    13c6:	30 93 9c 01 	sts	0x019C, r19
    13ca:	20 93 9b 01 	sts	0x019B, r18
    13ce:	80 91 9b 01 	lds	r24, 0x019B
    13d2:	90 91 9c 01 	lds	r25, 0x019C
    13d6:	27 de       	rcall	.-946    	; 0x1026 <_ZL9rf12_xferj>
    13d8:	20 e1       	ldi	r18, 0x10	; 16
    13da:	d2 9f       	mul	r29, r18
    13dc:	c0 01       	movw	r24, r0
    13de:	11 24       	eor	r1, r1
    13e0:	87 6c       	ori	r24, 0xC7	; 199
    13e2:	90 68       	ori	r25, 0x80	; 128
    13e4:	20 de       	rcall	.-960    	; 0x1026 <_ZL9rf12_xferj>
    13e6:	80 e4       	ldi	r24, 0x40	; 64
    13e8:	96 ea       	ldi	r25, 0xA6	; 166
    13ea:	1d de       	rcall	.-966    	; 0x1026 <_ZL9rf12_xferj>
    13ec:	86 e0       	ldi	r24, 0x06	; 6
    13ee:	06 df       	rcall	.-500    	; 0x11fc <_Z15rf12_setBitrateh>
    13f0:	82 ea       	ldi	r24, 0xA2	; 162
    13f2:	94 e9       	ldi	r25, 0x94	; 148
    13f4:	18 de       	rcall	.-976    	; 0x1026 <_ZL9rf12_xferj>
    13f6:	8c ea       	ldi	r24, 0xAC	; 172
    13f8:	92 ec       	ldi	r25, 0xC2	; 194
    13fa:	15 de       	rcall	.-982    	; 0x1026 <_ZL9rf12_xferj>
    13fc:	cc 23       	and	r28, r28
    13fe:	41 f0       	breq	.+16     	; 0x1410 <_Z12rf12_restorehhh+0x6a>
    1400:	83 e8       	ldi	r24, 0x83	; 131
    1402:	9a ec       	ldi	r25, 0xCA	; 202
    1404:	10 de       	rcall	.-992    	; 0x1026 <_ZL9rf12_xferj>
    1406:	8c 2f       	mov	r24, r28
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	9e 6c       	ori	r25, 0xCE	; 206
    140c:	0c de       	rcall	.-1000   	; 0x1026 <_ZL9rf12_xferj>
    140e:	06 c0       	rjmp	.+12     	; 0x141c <_Z12rf12_restorehhh+0x76>
    1410:	8b e8       	ldi	r24, 0x8B	; 139
    1412:	9a ec       	ldi	r25, 0xCA	; 202
    1414:	08 de       	rcall	.-1008   	; 0x1026 <_ZL9rf12_xferj>
    1416:	8d e2       	ldi	r24, 0x2D	; 45
    1418:	9e ec       	ldi	r25, 0xCE	; 206
    141a:	05 de       	rcall	.-1014   	; 0x1026 <_ZL9rf12_xferj>
    141c:	83 e8       	ldi	r24, 0x83	; 131
    141e:	94 ec       	ldi	r25, 0xC4	; 196
    1420:	02 de       	rcall	.-1020   	; 0x1026 <_ZL9rf12_xferj>
    1422:	80 e5       	ldi	r24, 0x50	; 80
    1424:	98 e9       	ldi	r25, 0x98	; 152
    1426:	ff dd       	rcall	.-1026   	; 0x1026 <_ZL9rf12_xferj>
    1428:	87 e7       	ldi	r24, 0x77	; 119
    142a:	9c ec       	ldi	r25, 0xCC	; 204
    142c:	fc dd       	rcall	.-1032   	; 0x1026 <_ZL9rf12_xferj>
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 ee       	ldi	r25, 0xE0	; 224
    1432:	f9 dd       	rcall	.-1038   	; 0x1026 <_ZL9rf12_xferj>
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	98 ec       	ldi	r25, 0xC8	; 200
    1438:	f6 dd       	rcall	.-1044   	; 0x1026 <_ZL9rf12_xferj>
    143a:	89 e4       	ldi	r24, 0x49	; 73
    143c:	90 ec       	ldi	r25, 0xC0	; 192
    143e:	f3 dd       	rcall	.-1050   	; 0x1026 <_ZL9rf12_xferj>
    1440:	84 e0       	ldi	r24, 0x04	; 4
    1442:	80 93 9d 01 	sts	0x019D, r24
    1446:	e7 dd       	rcall	.-1074   	; 0x1016 <_ZL15allowInterruptsv>
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <_Z15rf12_initializehhh>:
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	c8 2f       	mov	r28, r24
    1456:	d6 2f       	mov	r29, r22
    1458:	14 2f       	mov	r17, r20
    145a:	80 93 a1 01 	sts	0x01A1, r24
    145e:	40 93 9f 01 	sts	0x019F, r20
    1462:	60 93 a2 01 	sts	0x01A2, r22
    1466:	0d de       	rcall	.-998    	; 0x1082 <_Z12rf12_spiInitv>
    1468:	9c df       	rcall	.-200    	; 0x13a2 <_Z21rf12_interruptcontrolv>
    146a:	82 e8       	ldi	r24, 0x82	; 130
    146c:	9a ec       	ldi	r25, 0xCA	; 202
    146e:	db dd       	rcall	.-1098   	; 0x1026 <_ZL9rf12_xferj>
    1470:	80 e0       	ldi	r24, 0x00	; 0
    1472:	9e ef       	ldi	r25, 0xFE	; 254
    1474:	d8 dd       	rcall	.-1104   	; 0x1026 <_ZL9rf12_xferj>
    1476:	85 e0       	ldi	r24, 0x05	; 5
    1478:	80 93 9d 01 	sts	0x019D, r24
    147c:	83 b7       	in	r24, 0x33	; 51
    147e:	81 7f       	andi	r24, 0xF1	; 241
    1480:	83 bf       	out	0x33, r24	; 51
    1482:	80 91 9d 01 	lds	r24, 0x019D
    1486:	85 30       	cpi	r24, 0x05	; 5
    1488:	59 f4       	brne	.+22     	; 0x14a0 <_Z15rf12_initializehhh+0x52>
    148a:	93 b7       	in	r25, 0x33	; 51
    148c:	91 60       	ori	r25, 0x01	; 1
    148e:	93 bf       	out	0x33, r25	; 51
    1490:	88 95       	sleep
    1492:	93 b7       	in	r25, 0x33	; 51
    1494:	9e 7f       	andi	r25, 0xFE	; 254
    1496:	93 bf       	out	0x33, r25	; 51
    1498:	90 91 9d 01 	lds	r25, 0x019D
    149c:	95 30       	cpi	r25, 0x05	; 5
    149e:	a9 f3       	breq	.-22     	; 0x148a <_Z15rf12_initializehhh+0x3c>
    14a0:	41 2f       	mov	r20, r17
    14a2:	6d 2f       	mov	r22, r29
    14a4:	8c 2f       	mov	r24, r28
    14a6:	7f df       	rcall	.-258    	; 0x13a6 <_Z12rf12_restorehhh>
    14a8:	80 91 a1 01 	lds	r24, 0x01A1
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	1f 91       	pop	r17
    14b2:	08 95       	ret

000014b4 <_Z16rf12_setWatchdogm>:
/// interrupt in the RFM12 module. Use rf12_wakeup() to check if the wakeup-interrupt
/// fired. This allows very deep sleep states (timer off) while still being able to wakeup
/// because of the external interrupt. The RFM12b wakeup-timer only needs about 1.5µA.
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
    14b4:	cf 92       	push	r12
    14b6:	df 92       	push	r13
    14b8:	ef 92       	push	r14
    14ba:	ff 92       	push	r15
    14bc:	cf 93       	push	r28
    14be:	6b 01       	movw	r12, r22
    14c0:	7c 01       	movw	r14, r24
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    14c2:	8f ef       	ldi	r24, 0xFF	; 255
    14c4:	c8 16       	cp	r12, r24
    14c6:	d1 04       	cpc	r13, r1
    14c8:	e1 04       	cpc	r14, r1
    14ca:	f1 04       	cpc	r15, r1
    14cc:	79 f0       	breq	.+30     	; 0x14ec <_Z16rf12_setWatchdogm+0x38>
    14ce:	70 f0       	brcs	.+28     	; 0x14ec <_Z16rf12_setWatchdogm+0x38>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    14d0:	c0 e0       	ldi	r28, 0x00	; 0
	while (m > 255) {
		r  += 1;
    14d2:	cf 5f       	subi	r28, 0xFF	; 255
		m >>= 1;
    14d4:	f6 94       	lsr	r15
    14d6:	e7 94       	ror	r14
    14d8:	d7 94       	ror	r13
    14da:	c7 94       	ror	r12
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
	while (m > 255) {
    14dc:	8f ef       	ldi	r24, 0xFF	; 255
    14de:	c8 16       	cp	r12, r24
    14e0:	d1 04       	cpc	r13, r1
    14e2:	e1 04       	cpc	r14, r1
    14e4:	f1 04       	cpc	r15, r1
    14e6:	09 f0       	breq	.+2      	; 0x14ea <_Z16rf12_setWatchdogm+0x36>
    14e8:	a0 f7       	brcc	.-24     	; 0x14d2 <_Z16rf12_setWatchdogm+0x1e>
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <_Z16rf12_setWatchdogm+0x3a>
/// Don't expect an accurate timing. It's about 10% off. Only one timer is supported.
/// @param m Number of milliseconds
void rf12_setWatchdog (unsigned long m) {
	// calculate parameters for RFM12 module
	// T_wakeup[ms] = m * 2^r
	char r=0;
    14ec:	c0 e0       	ldi	r28, 0x00	; 0
		m >>= 1;
	}
	
	// Disable old wakeup-timer if enabled
//	if (bitRead(rfmstate,1)) {
	if ((rfmstate>>1)&0x01){
    14ee:	80 91 9b 01 	lds	r24, 0x019B
    14f2:	90 91 9c 01 	lds	r25, 0x019C
    14f6:	81 ff       	sbrs	r24, 1
    14f8:	0e c0       	rjmp	.+28     	; 0x1516 <_Z16rf12_setWatchdogm+0x62>
		//bitClear(rfmstate,1);
		rfmstate &= ~(1 << 1);
    14fa:	80 91 9b 01 	lds	r24, 0x019B
    14fe:	90 91 9c 01 	lds	r25, 0x019C
    1502:	8d 7f       	andi	r24, 0xFD	; 253
    1504:	90 93 9c 01 	sts	0x019C, r25
    1508:	80 93 9b 01 	sts	0x019B, r24
		rf12_xfer(rfmstate);
    150c:	80 91 9b 01 	lds	r24, 0x019B
    1510:	90 91 9c 01 	lds	r25, 0x019C
    1514:	88 dd       	rcall	.-1264   	; 0x1026 <_ZL9rf12_xferj>
	}
	
	// enable wakeup call if we have to
	if (m>0) {
    1516:	c1 14       	cp	r12, r1
    1518:	d1 04       	cpc	r13, r1
    151a:	e1 04       	cpc	r14, r1
    151c:	f1 04       	cpc	r15, r1
    151e:	b1 f0       	breq	.+44     	; 0x154c <_Z16rf12_setWatchdogm+0x98>
		// write time to wakeup-register
		rf12_xfer(RF_WAKEUP_TIMER | (r<<8) | m);
    1520:	3c 2f       	mov	r19, r28
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	d7 01       	movw	r26, r14
    1526:	c6 01       	movw	r24, r12
    1528:	90 6e       	ori	r25, 0xE0	; 224
    152a:	82 2b       	or	r24, r18
    152c:	93 2b       	or	r25, r19
    152e:	7b dd       	rcall	.-1290   	; 0x1026 <_ZL9rf12_xferj>
		// enable wakeup
		//bitSet(rfmstate,1);
		rfmstate |= (1 << 1);
    1530:	80 91 9b 01 	lds	r24, 0x019B
    1534:	90 91 9c 01 	lds	r25, 0x019C
    1538:	82 60       	ori	r24, 0x02	; 2
    153a:	90 93 9c 01 	sts	0x019C, r25
    153e:	80 93 9b 01 	sts	0x019B, r24
		rf12_xfer(rfmstate);
    1542:	80 91 9b 01 	lds	r24, 0x019B
    1546:	90 91 9c 01 	lds	r25, 0x019C
    154a:	6d dd       	rcall	.-1318   	; 0x1026 <_ZL9rf12_xferj>
	}
}
    154c:	cf 91       	pop	r28
    154e:	ff 90       	pop	r15
    1550:	ef 90       	pop	r14
    1552:	df 90       	pop	r13
    1554:	cf 90       	pop	r12
    1556:	08 95       	ret

00001558 <__vector_1>:
	while (!bitRead(PINB, RFM_IRQ - 8))
	rf12_interrupt();
}
#else
*/
ISR(INT0_vect) {
    1558:	1f 92       	push	r1
    155a:	0f 92       	push	r0
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	0f 92       	push	r0
    1560:	11 24       	eor	r1, r1
    1562:	1f 93       	push	r17
    1564:	2f 93       	push	r18
    1566:	3f 93       	push	r19
    1568:	4f 93       	push	r20
    156a:	5f 93       	push	r21
    156c:	6f 93       	push	r22
    156e:	7f 93       	push	r23
    1570:	8f 93       	push	r24
    1572:	9f 93       	push	r25
    1574:	af 93       	push	r26
    1576:	bf 93       	push	r27
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	ef 93       	push	r30
    157e:	ff 93       	push	r31
/// Requests RFM12 state from RF module and reads back a waiting data byte if there is
/// any.
/// One of two commands accessing SPI, so interrupts disabled in here
/// @param *data Pointer to  byte where to write the received data to (if any)
static uint16_t rf12_xferState (uint8_t *data) {
	blockInterrupts();
    1580:	48 dd       	rcall	.-1392   	; 0x1012 <_ZL15blockInterruptsv>

	// writing can take place at full speed, even 8 MHz works
	//bitClear(SS_PORT, cs_pin);
	PORT_RFM_CS &= ~(1<<BIT_RFM_CS); //clear CS
    1582:	2a 98       	cbi	0x05, 2	; 5
	uint16_t res = rf12_byte(0x00) << 8;
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	49 dd       	rcall	.-1390   	; 0x101a <_ZL9rf12_byteh>
    1588:	d8 2f       	mov	r29, r24
    158a:	80 e0       	ldi	r24, 0x00	; 0
    158c:	c8 2f       	mov	r28, r24
	res |= rf12_byte(0x00);
    158e:	45 dd       	rcall	.-1398   	; 0x101a <_ZL9rf12_byteh>
    1590:	c8 2b       	or	r28, r24
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
    1592:	dd 23       	and	r29, r29
    1594:	2c f4       	brge	.+10     	; 0x15a0 <__vector_1+0x48>
    1596:	80 91 9d 01 	lds	r24, 0x019D
    159a:	87 30       	cpi	r24, 0x07	; 7
    159c:	09 f4       	brne	.+2      	; 0x15a0 <__vector_1+0x48>
    159e:	0f c1       	rjmp	.+542    	; 0x17be <__vector_1+0x266>
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
		#endif
	}
	
	//bitSet(SS_PORT, cs_pin);
	PORT_RFM_CS |= (1 << BIT_RFM_CS); //  bitSet(SS_PORT, cs_pin);
    15a0:	2a 9a       	sbi	0x05, 2	; 5

	allowInterrupts();
    15a2:	39 dd       	rcall	.-1422   	; 0x1016 <_ZL15allowInterruptsv>
/// @details
/// Handles a RFM12 interrupt depending on rxstate and the status reported by the RF
/// module.
static void rf12_interrupt() {
	uint8_t in;
	state = rf12_xferState(&in);
    15a4:	d0 93 9a 01 	sts	0x019A, r29
    15a8:	c0 93 99 01 	sts	0x0199, r28

	// data received or byte needed for sending
	if (state & RF_FIFO_BIT) {
    15ac:	20 91 99 01 	lds	r18, 0x0199
    15b0:	30 91 9a 01 	lds	r19, 0x019A
    15b4:	33 23       	and	r19, r19
    15b6:	0c f0       	brlt	.+2      	; 0x15ba <__vector_1+0x62>
    15b8:	e1 c0       	rjmp	.+450    	; 0x177c <__vector_1+0x224>
		
		if (rxstate == TXRECV) {  // we are receiving
    15ba:	80 91 9d 01 	lds	r24, 0x019D
    15be:	87 30       	cpi	r24, 0x07	; 7
    15c0:	09 f0       	breq	.+2      	; 0x15c4 <__vector_1+0x6c>
    15c2:	78 c0       	rjmp	.+240    	; 0x16b4 <__vector_1+0x15c>

			if (rxfill == 0 && group != 0)
    15c4:	80 91 9e 01 	lds	r24, 0x019E
    15c8:	81 11       	cpse	r24, r1
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <__vector_1+0x7c>
    15cc:	80 91 9f 01 	lds	r24, 0x019F
    15d0:	81 11       	cpse	r24, r1
    15d2:	ff c0       	rjmp	.+510    	; 0x17d2 <__vector_1+0x27a>
			rf12_buf[rxfill++] = group;

			rf12_buf[rxfill++] = in;
    15d4:	80 91 9e 01 	lds	r24, 0x019E
    15d8:	e8 2f       	mov	r30, r24
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	e3 5b       	subi	r30, 0xB3	; 179
    15de:	fe 4f       	sbci	r31, 0xFE	; 254
    15e0:	10 83       	st	Z, r17
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	80 93 9e 01 	sts	0x019E, r24
			rf12_crc = _crc16_update(rf12_crc, in);
    15e8:	20 91 94 01 	lds	r18, 0x0194
    15ec:	30 91 95 01 	lds	r19, 0x0195
		"eor %B0,__tmp_reg__" "\n\t"
		"eor %A0,%1"
		: "=r" (__ret), "=d" (__tmp)
		: "r" (__data), "0" (__crc)
		: "r0"
	);
    15f0:	21 27       	eor	r18, r17
    15f2:	12 2f       	mov	r17, r18
    15f4:	12 95       	swap	r17
    15f6:	12 27       	eor	r17, r18
    15f8:	01 2e       	mov	r0, r17
    15fa:	16 95       	lsr	r17
    15fc:	16 95       	lsr	r17
    15fe:	10 25       	eor	r17, r0
    1600:	01 2e       	mov	r0, r17
    1602:	16 95       	lsr	r17
    1604:	10 25       	eor	r17, r0
    1606:	17 70       	andi	r17, 0x07	; 7
    1608:	02 2e       	mov	r0, r18
    160a:	23 2f       	mov	r18, r19
    160c:	16 95       	lsr	r17
    160e:	07 94       	ror	r0
    1610:	17 95       	ror	r17
    1612:	30 2d       	mov	r19, r0
    1614:	21 27       	eor	r18, r17
    1616:	06 94       	lsr	r0
    1618:	17 95       	ror	r17
    161a:	30 25       	eor	r19, r0
    161c:	21 27       	eor	r18, r17
    161e:	30 93 95 01 	sts	0x0195, r19
    1622:	20 93 94 01 	sts	0x0194, r18

			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
    1626:	e0 91 97 01 	lds	r30, 0x0197
    162a:	e3 30       	cpi	r30, 0x03	; 3
    162c:	18 f5       	brcc	.+70     	; 0x1674 <__vector_1+0x11c>
    162e:	80 91 9e 01 	lds	r24, 0x019E
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 97       	sbiw	r24, 0x02	; 2
    1636:	60 91 96 01 	lds	r22, 0x0196
    163a:	70 e0       	ldi	r23, 0x00	; 0
    163c:	01 d2       	rcall	.+1026   	; 0x1a40 <__divmodhi4>
    163e:	89 2b       	or	r24, r25
    1640:	09 f4       	brne	.+2      	; 0x1644 <__vector_1+0xec>
    1642:	d2 c0       	rjmp	.+420    	; 0x17e8 <__vector_1+0x290>
    1644:	17 c0       	rjmp	.+46     	; 0x1674 <__vector_1+0x11c>
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    1646:	f0 e0       	ldi	r31, 0x00	; 0
			// do drssi binary-tree search
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
    1648:	e8 5d       	subi	r30, 0xD8	; 216
    164a:	fe 4f       	sbci	r31, 0xFE	; 254
				: (drssi_dec_tree[drssi] >> 4);
    164c:	80 81       	ld	r24, Z
    164e:	8f 70       	andi	r24, 0x0F	; 15
    1650:	06 c0       	rjmp	.+12     	; 0x165e <__vector_1+0x106>
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	e8 5d       	subi	r30, 0xD8	; 216
    1656:	fe 4f       	sbci	r31, 0xFE	; 254
    1658:	80 81       	ld	r24, Z
    165a:	82 95       	swap	r24
    165c:	8f 70       	andi	r24, 0x0F	; 15
    165e:	80 93 97 01 	sts	0x0197, r24
				if ( drssi < 3 ) {     // not yet final destination, set new threshold
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	38 f4       	brcc	.+14     	; 0x1674 <__vector_1+0x11c>
					rf12_xfer(RF_RECV_CONTROL | drssi*2+1);
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	80 6a       	ori	r24, 0xA0	; 160
    1670:	94 69       	ori	r25, 0x94	; 148
    1672:	d9 dc       	rcall	.-1614   	; 0x1026 <_ZL9rf12_xferj>
				}
			}

			// check if we got all the bytes (or maximum packet length was reached)
			if (fixedLength) {
    1674:	80 91 a0 01 	lds	r24, 0x01A0
    1678:	88 23       	and	r24, r24
    167a:	59 f0       	breq	.+22     	; 0x1692 <__vector_1+0x13a>
				if (rxfill >= fixedLength || rxfill >= RF_MAX) {
    167c:	90 91 9e 01 	lds	r25, 0x019E
    1680:	98 17       	cp	r25, r24
    1682:	28 f4       	brcc	.+10     	; 0x168e <__vector_1+0x136>
    1684:	80 91 9e 01 	lds	r24, 0x019E
    1688:	87 34       	cpi	r24, 0x47	; 71
    168a:	08 f4       	brcc	.+2      	; 0x168e <__vector_1+0x136>
    168c:	77 c0       	rjmp	.+238    	; 0x177c <__vector_1+0x224>
					rf12_idle();
    168e:	e2 dc       	rcall	.-1596   	; 0x1054 <_ZL9rf12_idlev>
    1690:	75 c0       	rjmp	.+234    	; 0x177c <__vector_1+0x224>
				}
				} else if (rxfill >= rf12_len + 5 || rxfill >= RF_MAX) {
    1692:	20 91 9e 01 	lds	r18, 0x019E
    1696:	80 91 4f 01 	lds	r24, 0x014F
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	05 96       	adiw	r24, 0x05	; 5
    16a0:	28 17       	cp	r18, r24
    16a2:	39 07       	cpc	r19, r25
    16a4:	2c f4       	brge	.+10     	; 0x16b0 <__vector_1+0x158>
    16a6:	80 91 9e 01 	lds	r24, 0x019E
    16aa:	87 34       	cpi	r24, 0x47	; 71
    16ac:	08 f4       	brcc	.+2      	; 0x16b0 <__vector_1+0x158>
    16ae:	66 c0       	rjmp	.+204    	; 0x177c <__vector_1+0x224>
				rf12_idle();
    16b0:	d1 dc       	rcall	.-1630   	; 0x1054 <_ZL9rf12_idlev>
    16b2:	64 c0       	rjmp	.+200    	; 0x177c <__vector_1+0x224>
			}
			} else {                  // we are sending
			uint8_t out;

			if (rxstate < 0) {
    16b4:	80 91 9d 01 	lds	r24, 0x019D
    16b8:	88 23       	and	r24, r24
    16ba:	0c f0       	brlt	.+2      	; 0x16be <__vector_1+0x166>
    16bc:	2f c0       	rjmp	.+94     	; 0x171c <__vector_1+0x1c4>
				uint8_t pos = 3 + rf12_len + rxstate++;
    16be:	e0 91 4f 01 	lds	r30, 0x014F
    16c2:	80 91 9d 01 	lds	r24, 0x019D
    16c6:	98 2f       	mov	r25, r24
    16c8:	9f 5f       	subi	r25, 0xFF	; 255
    16ca:	90 93 9d 01 	sts	0x019D, r25
    16ce:	ed 5f       	subi	r30, 0xFD	; 253
    16d0:	8e 0f       	add	r24, r30
				out = rf12_buf[pos];
    16d2:	e8 2f       	mov	r30, r24
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	e3 5b       	subi	r30, 0xB3	; 179
    16d8:	fe 4f       	sbci	r31, 0xFE	; 254
    16da:	80 81       	ld	r24, Z
				rf12_crc = _crc16_update(rf12_crc, out);
    16dc:	20 91 94 01 	lds	r18, 0x0194
    16e0:	30 91 95 01 	lds	r19, 0x0195
    16e4:	28 27       	eor	r18, r24
    16e6:	92 2f       	mov	r25, r18
    16e8:	92 95       	swap	r25
    16ea:	92 27       	eor	r25, r18
    16ec:	09 2e       	mov	r0, r25
    16ee:	96 95       	lsr	r25
    16f0:	96 95       	lsr	r25
    16f2:	90 25       	eor	r25, r0
    16f4:	09 2e       	mov	r0, r25
    16f6:	96 95       	lsr	r25
    16f8:	90 25       	eor	r25, r0
    16fa:	97 70       	andi	r25, 0x07	; 7
    16fc:	02 2e       	mov	r0, r18
    16fe:	23 2f       	mov	r18, r19
    1700:	96 95       	lsr	r25
    1702:	07 94       	ror	r0
    1704:	97 95       	ror	r25
    1706:	30 2d       	mov	r19, r0
    1708:	29 27       	eor	r18, r25
    170a:	06 94       	lsr	r0
    170c:	97 95       	ror	r25
    170e:	30 25       	eor	r19, r0
    1710:	29 27       	eor	r18, r25
    1712:	30 93 95 01 	sts	0x0195, r19
    1716:	20 93 94 01 	sts	0x0194, r18
    171a:	2d c0       	rjmp	.+90     	; 0x1776 <__vector_1+0x21e>
			} else
			switch (rxstate++) {
    171c:	80 91 9d 01 	lds	r24, 0x019D
    1720:	98 2f       	mov	r25, r24
    1722:	9f 5f       	subi	r25, 0xFF	; 255
    1724:	90 93 9d 01 	sts	0x019D, r25
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	09 f1       	breq	.+66     	; 0x176e <__vector_1+0x216>
    172c:	2c f4       	brge	.+10     	; 0x1738 <__vector_1+0x1e0>
    172e:	88 23       	and	r24, r24
    1730:	99 f0       	breq	.+38     	; 0x1758 <__vector_1+0x200>
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	f9 f4       	brne	.+62     	; 0x1774 <__vector_1+0x21c>
    1736:	15 c0       	rjmp	.+42     	; 0x1762 <__vector_1+0x20a>
    1738:	8b 30       	cpi	r24, 0x0B	; 11
    173a:	19 f0       	breq	.+6      	; 0x1742 <__vector_1+0x1ea>
    173c:	8c 30       	cpi	r24, 0x0C	; 12
    173e:	d1 f4       	brne	.+52     	; 0x1774 <__vector_1+0x21c>
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <__vector_1+0x1ee>
				case TXSYN1: out = 0x2D; break;
    1742:	8d e2       	ldi	r24, 0x2D	; 45
    1744:	18 c0       	rjmp	.+48     	; 0x1776 <__vector_1+0x21e>
				case TXSYN2: out = group; rxstate = - (2 + rf12_len); break;
    1746:	80 91 9f 01 	lds	r24, 0x019F
    174a:	20 91 4f 01 	lds	r18, 0x014F
    174e:	9e ef       	ldi	r25, 0xFE	; 254
    1750:	92 1b       	sub	r25, r18
    1752:	90 93 9d 01 	sts	0x019D, r25
    1756:	0f c0       	rjmp	.+30     	; 0x1776 <__vector_1+0x21e>
				case TXCRC1: out = rf12_crc; break;
    1758:	80 91 94 01 	lds	r24, 0x0194
    175c:	90 91 95 01 	lds	r25, 0x0195
    1760:	0a c0       	rjmp	.+20     	; 0x1776 <__vector_1+0x21e>
				case TXCRC2: out = rf12_crc >> 8; break;
    1762:	80 91 94 01 	lds	r24, 0x0194
    1766:	90 91 95 01 	lds	r25, 0x0195
    176a:	89 2f       	mov	r24, r25
    176c:	04 c0       	rjmp	.+8      	; 0x1776 <__vector_1+0x21e>
				case TXDONE: rf12_idle(); // fall through
    176e:	72 dc       	rcall	.-1820   	; 0x1054 <_ZL9rf12_idlev>
				default:     out = 0xAA;
    1770:	8a ea       	ldi	r24, 0xAA	; 170
    1772:	01 c0       	rjmp	.+2      	; 0x1776 <__vector_1+0x21e>
    1774:	8a ea       	ldi	r24, 0xAA	; 170
			}

			rf12_xfer(RF_TXREG_WRITE | out);
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	98 6b       	ori	r25, 0xB8	; 184
    177a:	55 dc       	rcall	.-1878   	; 0x1026 <_ZL9rf12_xferj>
		}
	}
	
	// power-on reset
	if (state & RF_POR_BIT) {
    177c:	80 91 99 01 	lds	r24, 0x0199
    1780:	90 91 9a 01 	lds	r25, 0x019A
    1784:	96 ff       	sbrs	r25, 6
    1786:	03 c0       	rjmp	.+6      	; 0x178e <__vector_1+0x236>
		rxstate = POR_RECEIVED;
    1788:	86 e0       	ldi	r24, 0x06	; 6
    178a:	80 93 9d 01 	sts	0x019D, r24
	}

	// got wakeup call
	if (state & RF_WDG_BIT) {
    178e:	80 91 99 01 	lds	r24, 0x0199
    1792:	90 91 9a 01 	lds	r25, 0x019A
    1796:	94 ff       	sbrs	r25, 4
    1798:	07 c0       	rjmp	.+14     	; 0x17a8 <__vector_1+0x250>
		rf12_setWatchdog(0);
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	cb 01       	movw	r24, r22
    17a0:	89 de       	rcall	.-750    	; 0x14b4 <_Z16rf12_setWatchdogm>
		rf12_gotwakeup = 1;
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	80 93 98 01 	sts	0x0198, r24
	}
	
	// fifo overflow or buffer underrun - abort reception/sending
	if (state & RF_OVF_BIT) {
    17a8:	80 91 99 01 	lds	r24, 0x0199
    17ac:	90 91 9a 01 	lds	r25, 0x019A
    17b0:	95 ff       	sbrs	r25, 5
    17b2:	21 c0       	rjmp	.+66     	; 0x17f6 <__vector_1+0x29e>
		rf12_idle();
    17b4:	4f dc       	rcall	.-1890   	; 0x1054 <_ZL9rf12_idlev>
		rxstate = TXIDLE;
    17b6:	84 e0       	ldi	r24, 0x04	; 4
    17b8:	80 93 9d 01 	sts	0x019D, r24
    17bc:	1c c0       	rjmp	.+56     	; 0x17f6 <__vector_1+0x29e>
	
	if (res & RF_FIFO_BIT && rxstate == TXRECV) {
		// slow down to under 2.5 MHz
		#if F_CPU > 10000000
		//bitSet(SPCR, SPR0);
		SPCR |= (1 << SPR0); //  bitSet(SPCR, SPR0);
    17be:	8c b5       	in	r24, 0x2c	; 44
    17c0:	81 60       	ori	r24, 0x01	; 1
    17c2:	8c bd       	out	0x2c, r24	; 44
		#endif
		*data = rf12_byte(0x00);
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	29 dc       	rcall	.-1966   	; 0x101a <_ZL9rf12_byteh>
    17c8:	18 2f       	mov	r17, r24
		#if F_CPU > 10000000
		//bitClear(SPCR, SPR0);
		SPCR &= ~(1 << SPR0); //    bitClear(SPCR, SPR0);
    17ca:	8c b5       	in	r24, 0x2c	; 44
    17cc:	8e 7f       	andi	r24, 0xFE	; 254
    17ce:	8c bd       	out	0x2c, r24	; 44
    17d0:	e7 ce       	rjmp	.-562    	; 0x15a0 <__vector_1+0x48>
	if (state & RF_FIFO_BIT) {
		
		if (rxstate == TXRECV) {  // we are receiving

			if (rxfill == 0 && group != 0)
			rf12_buf[rxfill++] = group;
    17d2:	90 91 9e 01 	lds	r25, 0x019E
    17d6:	e9 2f       	mov	r30, r25
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	e3 5b       	subi	r30, 0xB3	; 179
    17dc:	fe 4f       	sbci	r31, 0xFE	; 254
    17de:	80 83       	st	Z, r24
    17e0:	9f 5f       	subi	r25, 0xFF	; 255
    17e2:	90 93 9e 01 	sts	0x019E, r25
    17e6:	f6 ce       	rjmp	.-532    	; 0x15d4 <__vector_1+0x7c>
			if ( drssi < 3 && ((rxfill-2)%drssi_bytes_per_decision)==0 ) {// not yet final value
				// top nibble when going up, bottom one when going down
				//drssi = bitRead(state,8)
				drssi = ((state>>8)&0x01)
				? (drssi_dec_tree[drssi] & B1111)
				: (drssi_dec_tree[drssi] >> 4);
    17e8:	80 91 99 01 	lds	r24, 0x0199
    17ec:	90 91 9a 01 	lds	r25, 0x019A
    17f0:	90 fd       	sbrc	r25, 0
    17f2:	29 cf       	rjmp	.-430    	; 0x1646 <__vector_1+0xee>
    17f4:	2e cf       	rjmp	.-420    	; 0x1652 <__vector_1+0xfa>
		rf12_interrupt();
		//}
		
	//PORTB &= ~_BV(0); // pb0 uit
	
}
    17f6:	ff 91       	pop	r31
    17f8:	ef 91       	pop	r30
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	bf 91       	pop	r27
    1800:	af 91       	pop	r26
    1802:	9f 91       	pop	r25
    1804:	8f 91       	pop	r24
    1806:	7f 91       	pop	r23
    1808:	6f 91       	pop	r22
    180a:	5f 91       	pop	r21
    180c:	4f 91       	pop	r20
    180e:	3f 91       	pop	r19
    1810:	2f 91       	pop	r18
    1812:	1f 91       	pop	r17
    1814:	0f 90       	pop	r0
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	0f 90       	pop	r0
    181a:	1f 90       	pop	r1
    181c:	18 95       	reti

0000181e <tone_init>:
#include <avr/io.h>

uint8_t _tAC_volume[] = { 200, 100, 67, 50, 40, 33, 29, 22, 11, 2 }; // Duty for linear volume counsigned long _tAC_time;ntrol.

void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
    181e:	21 9a       	sbi	0x04, 1	; 4
    1820:	08 95       	ret

00001822 <noTone>:


	void noTone() {
	//	uart0_puts("STOP");
	//	TIMSK1 &= ~_BV(OCIE1A);     // Remove the timer interrupt.
		 TCCR1B  &= ~(1<<0) | ~(1<<1) | ~(1<<2) ;        // No clock source (Timer/Counter stopped).
    1822:	e1 e8       	ldi	r30, 0x81	; 129
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	80 83       	st	Z, r24
		 TCCR1A  = 0x00;       // Set to defaults so PWM can work like normal (PWM, phase corrected, 8bit).
    182a:	10 92 80 00 	sts	0x0080, r1
		PORTB &= ~(1 << 1); // Set pin PB1 to LOW.
    182e:	29 98       	cbi	0x05, 1	; 5
    1830:	08 95       	ret

00001832 <tone>:
void tone_init(){
		DDRB |= (1 << 1); // Set pin PB1 to OUTPUT
	
}

void tone(unsigned long frequency, uint8_t volume) {
    1832:	cf 92       	push	r12
    1834:	df 92       	push	r13
    1836:	ef 92       	push	r14
    1838:	ff 92       	push	r15
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	6b 01       	movw	r12, r22
    1840:	7c 01       	movw	r14, r24
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
    1842:	61 15       	cp	r22, r1
    1844:	71 05       	cpc	r23, r1
    1846:	81 05       	cpc	r24, r1
    1848:	91 05       	cpc	r25, r1
    184a:	11 f0       	breq	.+4      	; 0x1850 <tone+0x1e>
    184c:	41 11       	cpse	r20, r1
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <tone+0x22>
    1850:	e8 df       	rcall	.-48     	; 0x1822 <noTone>
    1852:	4d c0       	rjmp	.+154    	; 0x18ee <tone+0xbc>
    1854:	d4 2f       	mov	r29, r20
    1856:	4b 30       	cpi	r20, 0x0B	; 11
    1858:	08 f0       	brcs	.+2      	; 0x185c <tone+0x2a>
    185a:	da e0       	ldi	r29, 0x0A	; 10
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	72 e1       	ldi	r23, 0x12	; 18
    1860:	8a e7       	ldi	r24, 0x7A	; 122
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a7 01       	movw	r20, r14
    1866:	96 01       	movw	r18, r12
    1868:	fe d0       	rcall	.+508    	; 0x1a66 <__udivmodsi4>
    186a:	cc 24       	eor	r12, r12
    186c:	ca 94       	dec	r12
    186e:	dc 2c       	mov	r13, r12
    1870:	76 01       	movw	r14, r12
    1872:	c2 0e       	add	r12, r18
    1874:	d3 1e       	adc	r13, r19
    1876:	e4 1e       	adc	r14, r20
    1878:	f5 1e       	adc	r15, r21
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
    187a:	c1 14       	cp	r12, r1
    187c:	d1 04       	cpc	r13, r1
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	e8 06       	cpc	r14, r24
    1882:	f1 04       	cpc	r15, r1
    1884:	58 f0       	brcs	.+22     	; 0x189c <tone+0x6a>
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
    1886:	cd 2c       	mov	r12, r13
    1888:	de 2c       	mov	r13, r14
    188a:	ef 2c       	mov	r14, r15
    188c:	ff 24       	eor	r15, r15
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	c8 1a       	sub	r12, r24
    1892:	d1 08       	sbc	r13, r1
    1894:	e1 08       	sbc	r14, r1
    1896:	f1 08       	sbc	r15, r1
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
		unsigned long top = F_CPU / frequency / 2 - 1; // Calculate the top.
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
    1898:	c4 e0       	ldi	r28, 0x04	; 4
    189a:	01 c0       	rjmp	.+2      	; 0x189e <tone+0x6c>
void tone(unsigned long frequency, uint8_t volume) {
	if (frequency == 0 || volume == 0) { noTone(); return; } // If frequency or volume are 0, turn off sound and return.
	if (volume > 10) volume = 10;                              // Make sure volume is in range (1 to 10).
		

		uint8_t prescaler = _BV(CS10);                 // Try using prescaler 1 first.
    189c:	c1 e0       	ldi	r28, 0x01	; 1
		if (top > 65535) {                             // If not in the range for prescaler 1, use prescaler 256 (122 Hz and lower @ 16 MHz).
			prescaler = _BV(CS12);                       // Set the 256 prescaler bit.
			top = top / 256 - 1;                         // Calculate the top using prescaler 256.
		}
	
		unsigned int duty = top / _tAC_volume[volume - 1]; // Calculate the duty cycle (volume).
    189e:	ed 2f       	mov	r30, r29
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	ed 5f       	subi	r30, 0xFD	; 253
    18a4:	fe 4f       	sbci	r31, 0xFE	; 254
    18a6:	20 81       	ld	r18, Z
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e0       	ldi	r20, 0x00	; 0
    18ac:	50 e0       	ldi	r21, 0x00	; 0
    18ae:	c7 01       	movw	r24, r14
    18b0:	b6 01       	movw	r22, r12
    18b2:	d9 d0       	rcall	.+434    	; 0x1a66 <__udivmodsi4>
		
		ICR1   = top;							// Set the top.
    18b4:	d0 92 87 00 	sts	0x0087, r13
    18b8:	c0 92 86 00 	sts	0x0086, r12
		if (TCNT1 > top) TCNT1 = top;			// Counter over the top, put within range.
    18bc:	80 91 84 00 	lds	r24, 0x0084
    18c0:	90 91 85 00 	lds	r25, 0x0085
    18c4:	a0 e0       	ldi	r26, 0x00	; 0
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	c8 16       	cp	r12, r24
    18ca:	d9 06       	cpc	r13, r25
    18cc:	ea 06       	cpc	r14, r26
    18ce:	fb 06       	cpc	r15, r27
    18d0:	20 f4       	brcc	.+8      	; 0x18da <tone+0xa8>
    18d2:	d0 92 85 00 	sts	0x0085, r13
    18d6:	c0 92 84 00 	sts	0x0084, r12
			TCCR1B = _BV(WGM13)  | prescaler;   // Set PWM, phase and frequency corrected (top=ICR1) and prescaler.
    18da:	c0 61       	ori	r28, 0x10	; 16
    18dc:	c0 93 81 00 	sts	0x0081, r28
			OCR1A  = duty;						// Set the duty cycle (volume).
    18e0:	30 93 89 00 	sts	0x0089, r19
    18e4:	20 93 88 00 	sts	0x0088, r18
			TCCR1A = _BV(COM1A1);				// Clear OC1A/OC1B on Compare Match (Set output to low level).
    18e8:	80 e8       	ldi	r24, 0x80	; 128
    18ea:	80 93 80 00 	sts	0x0080, r24

}
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	ff 90       	pop	r15
    18f4:	ef 90       	pop	r14
    18f6:	df 90       	pop	r13
    18f8:	cf 90       	pop	r12
    18fa:	08 95       	ret

000018fc <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
    18fc:	1f 92       	push	r1
    18fe:	0f 92       	push	r0
    1900:	0f b6       	in	r0, 0x3f	; 63
    1902:	0f 92       	push	r0
    1904:	11 24       	eor	r1, r1
    1906:	2f 93       	push	r18
    1908:	3f 93       	push	r19
    190a:	4f 93       	push	r20
    190c:	5f 93       	push	r21
    190e:	8f 93       	push	r24
    1910:	9f 93       	push	r25
    1912:	ef 93       	push	r30
    1914:	ff 93       	push	r31
    1916:	40 91 c0 00 	lds	r20, 0x00C0
    191a:	50 91 c6 00 	lds	r21, 0x00C6
    191e:	48 71       	andi	r20, 0x18	; 24
    1920:	80 91 a5 01 	lds	r24, 0x01A5
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	8f 77       	andi	r24, 0x7F	; 127
    192a:	99 27       	eor	r25, r25
    192c:	20 91 a4 01 	lds	r18, 0x01A4
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	28 17       	cp	r18, r24
    1934:	39 07       	cpc	r19, r25
    1936:	39 f0       	breq	.+14     	; 0x1946 <__vector_18+0x4a>
    1938:	80 93 a5 01 	sts	0x01A5, r24
    193c:	fc 01       	movw	r30, r24
    193e:	e8 55       	subi	r30, 0x58	; 88
    1940:	fe 4f       	sbci	r31, 0xFE	; 254
    1942:	50 83       	st	Z, r21
    1944:	01 c0       	rjmp	.+2      	; 0x1948 <__vector_18+0x4c>
    1946:	42 e0       	ldi	r20, 0x02	; 2
    1948:	40 93 a3 01 	sts	0x01A3, r20
    194c:	ff 91       	pop	r31
    194e:	ef 91       	pop	r30
    1950:	9f 91       	pop	r25
    1952:	8f 91       	pop	r24
    1954:	5f 91       	pop	r21
    1956:	4f 91       	pop	r20
    1958:	3f 91       	pop	r19
    195a:	2f 91       	pop	r18
    195c:	0f 90       	pop	r0
    195e:	0f be       	out	0x3f, r0	; 63
    1960:	0f 90       	pop	r0
    1962:	1f 90       	pop	r1
    1964:	18 95       	reti

00001966 <__vector_19>:
    1966:	1f 92       	push	r1
    1968:	0f 92       	push	r0
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	0f 92       	push	r0
    196e:	11 24       	eor	r1, r1
    1970:	8f 93       	push	r24
    1972:	9f 93       	push	r25
    1974:	ef 93       	push	r30
    1976:	ff 93       	push	r31
    1978:	90 91 a7 01 	lds	r25, 0x01A7
    197c:	80 91 a6 01 	lds	r24, 0x01A6
    1980:	98 17       	cp	r25, r24
    1982:	79 f0       	breq	.+30     	; 0x19a2 <__vector_19+0x3c>
    1984:	80 91 a6 01 	lds	r24, 0x01A6
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	8f 77       	andi	r24, 0x7F	; 127
    198e:	99 27       	eor	r25, r25
    1990:	80 93 a6 01 	sts	0x01A6, r24
    1994:	fc 01       	movw	r30, r24
    1996:	e8 5d       	subi	r30, 0xD8	; 216
    1998:	fd 4f       	sbci	r31, 0xFD	; 253
    199a:	80 81       	ld	r24, Z
    199c:	80 93 c6 00 	sts	0x00C6, r24
    19a0:	05 c0       	rjmp	.+10     	; 0x19ac <__vector_19+0x46>
    19a2:	e1 ec       	ldi	r30, 0xC1	; 193
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	8f 7d       	andi	r24, 0xDF	; 223
    19aa:	80 83       	st	Z, r24
    19ac:	ff 91       	pop	r31
    19ae:	ef 91       	pop	r30
    19b0:	9f 91       	pop	r25
    19b2:	8f 91       	pop	r24
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	0f 90       	pop	r0
    19ba:	1f 90       	pop	r1
    19bc:	18 95       	reti

000019be <uart0_init>:
    19be:	10 92 a7 01 	sts	0x01A7, r1
    19c2:	10 92 a6 01 	sts	0x01A6, r1
    19c6:	10 92 a5 01 	sts	0x01A5, r1
    19ca:	10 92 a4 01 	sts	0x01A4, r1
    19ce:	99 23       	and	r25, r25
    19d0:	24 f4       	brge	.+8      	; 0x19da <uart0_init+0x1c>
    19d2:	22 e0       	ldi	r18, 0x02	; 2
    19d4:	20 93 c0 00 	sts	0x00C0, r18
    19d8:	9f 77       	andi	r25, 0x7F	; 127
    19da:	90 93 c5 00 	sts	0x00C5, r25
    19de:	80 93 c4 00 	sts	0x00C4, r24
    19e2:	88 e9       	ldi	r24, 0x98	; 152
    19e4:	80 93 c1 00 	sts	0x00C1, r24
    19e8:	86 e0       	ldi	r24, 0x06	; 6
    19ea:	80 93 c2 00 	sts	0x00C2, r24
    19ee:	08 95       	ret

000019f0 <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
    19f0:	60 91 a7 01 	lds	r22, 0x01A7
    19f4:	70 e0       	ldi	r23, 0x00	; 0
    19f6:	6f 5f       	subi	r22, 0xFF	; 255
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	6f 77       	andi	r22, 0x7F	; 127
    19fc:	77 27       	eor	r23, r23
    19fe:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
    1a00:	20 91 a6 01 	lds	r18, 0x01A6
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	24 17       	cp	r18, r20
    1a08:	35 07       	cpc	r19, r21
    1a0a:	d1 f3       	breq	.-12     	; 0x1a00 <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
    1a0c:	fb 01       	movw	r30, r22
    1a0e:	e8 5d       	subi	r30, 0xD8	; 216
    1a10:	fd 4f       	sbci	r31, 0xFD	; 253
    1a12:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
    1a14:	60 93 a7 01 	sts	0x01A7, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
    1a18:	e1 ec       	ldi	r30, 0xC1	; 193
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	80 62       	ori	r24, 0x20	; 32
    1a20:	80 83       	st	Z, r24
    1a22:	08 95       	ret

00001a24 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	ec 01       	movw	r28, r24
	while (*s) {
    1a2a:	88 81       	ld	r24, Y
    1a2c:	88 23       	and	r24, r24
    1a2e:	29 f0       	breq	.+10     	; 0x1a3a <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
    1a30:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
    1a32:	de df       	rcall	.-68     	; 0x19f0 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
    1a34:	89 91       	ld	r24, Y+
    1a36:	81 11       	cpse	r24, r1
    1a38:	fc cf       	rjmp	.-8      	; 0x1a32 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	08 95       	ret

00001a40 <__divmodhi4>:
    1a40:	97 fb       	bst	r25, 7
    1a42:	07 2e       	mov	r0, r23
    1a44:	16 f4       	brtc	.+4      	; 0x1a4a <__divmodhi4+0xa>
    1a46:	00 94       	com	r0
    1a48:	06 d0       	rcall	.+12     	; 0x1a56 <__divmodhi4_neg1>
    1a4a:	77 fd       	sbrc	r23, 7
    1a4c:	08 d0       	rcall	.+16     	; 0x1a5e <__divmodhi4_neg2>
    1a4e:	2d d0       	rcall	.+90     	; 0x1aaa <__udivmodhi4>
    1a50:	07 fc       	sbrc	r0, 7
    1a52:	05 d0       	rcall	.+10     	; 0x1a5e <__divmodhi4_neg2>
    1a54:	3e f4       	brtc	.+14     	; 0x1a64 <__divmodhi4_exit>

00001a56 <__divmodhi4_neg1>:
    1a56:	90 95       	com	r25
    1a58:	81 95       	neg	r24
    1a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5c:	08 95       	ret

00001a5e <__divmodhi4_neg2>:
    1a5e:	70 95       	com	r23
    1a60:	61 95       	neg	r22
    1a62:	7f 4f       	sbci	r23, 0xFF	; 255

00001a64 <__divmodhi4_exit>:
    1a64:	08 95       	ret

00001a66 <__udivmodsi4>:
    1a66:	a1 e2       	ldi	r26, 0x21	; 33
    1a68:	1a 2e       	mov	r1, r26
    1a6a:	aa 1b       	sub	r26, r26
    1a6c:	bb 1b       	sub	r27, r27
    1a6e:	fd 01       	movw	r30, r26
    1a70:	0d c0       	rjmp	.+26     	; 0x1a8c <__udivmodsi4_ep>

00001a72 <__udivmodsi4_loop>:
    1a72:	aa 1f       	adc	r26, r26
    1a74:	bb 1f       	adc	r27, r27
    1a76:	ee 1f       	adc	r30, r30
    1a78:	ff 1f       	adc	r31, r31
    1a7a:	a2 17       	cp	r26, r18
    1a7c:	b3 07       	cpc	r27, r19
    1a7e:	e4 07       	cpc	r30, r20
    1a80:	f5 07       	cpc	r31, r21
    1a82:	20 f0       	brcs	.+8      	; 0x1a8c <__udivmodsi4_ep>
    1a84:	a2 1b       	sub	r26, r18
    1a86:	b3 0b       	sbc	r27, r19
    1a88:	e4 0b       	sbc	r30, r20
    1a8a:	f5 0b       	sbc	r31, r21

00001a8c <__udivmodsi4_ep>:
    1a8c:	66 1f       	adc	r22, r22
    1a8e:	77 1f       	adc	r23, r23
    1a90:	88 1f       	adc	r24, r24
    1a92:	99 1f       	adc	r25, r25
    1a94:	1a 94       	dec	r1
    1a96:	69 f7       	brne	.-38     	; 0x1a72 <__udivmodsi4_loop>
    1a98:	60 95       	com	r22
    1a9a:	70 95       	com	r23
    1a9c:	80 95       	com	r24
    1a9e:	90 95       	com	r25
    1aa0:	9b 01       	movw	r18, r22
    1aa2:	ac 01       	movw	r20, r24
    1aa4:	bd 01       	movw	r22, r26
    1aa6:	cf 01       	movw	r24, r30
    1aa8:	08 95       	ret

00001aaa <__udivmodhi4>:
    1aaa:	aa 1b       	sub	r26, r26
    1aac:	bb 1b       	sub	r27, r27
    1aae:	51 e1       	ldi	r21, 0x11	; 17
    1ab0:	07 c0       	rjmp	.+14     	; 0x1ac0 <__udivmodhi4_ep>

00001ab2 <__udivmodhi4_loop>:
    1ab2:	aa 1f       	adc	r26, r26
    1ab4:	bb 1f       	adc	r27, r27
    1ab6:	a6 17       	cp	r26, r22
    1ab8:	b7 07       	cpc	r27, r23
    1aba:	10 f0       	brcs	.+4      	; 0x1ac0 <__udivmodhi4_ep>
    1abc:	a6 1b       	sub	r26, r22
    1abe:	b7 0b       	sbc	r27, r23

00001ac0 <__udivmodhi4_ep>:
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	5a 95       	dec	r21
    1ac6:	a9 f7       	brne	.-22     	; 0x1ab2 <__udivmodhi4_loop>
    1ac8:	80 95       	com	r24
    1aca:	90 95       	com	r25
    1acc:	bc 01       	movw	r22, r24
    1ace:	cd 01       	movw	r24, r26
    1ad0:	08 95       	ret

00001ad2 <memcpy>:
    1ad2:	fb 01       	movw	r30, r22
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <memcpy+0xa>
    1ad8:	01 90       	ld	r0, Z+
    1ada:	0d 92       	st	X+, r0
    1adc:	41 50       	subi	r20, 0x01	; 1
    1ade:	50 40       	sbci	r21, 0x00	; 0
    1ae0:	d8 f7       	brcc	.-10     	; 0x1ad8 <memcpy+0x6>
    1ae2:	08 95       	ret

00001ae4 <_exit>:
    1ae4:	f8 94       	cli

00001ae6 <__stop_program>:
    1ae6:	ff cf       	rjmp	.-2      	; 0x1ae6 <__stop_program>
