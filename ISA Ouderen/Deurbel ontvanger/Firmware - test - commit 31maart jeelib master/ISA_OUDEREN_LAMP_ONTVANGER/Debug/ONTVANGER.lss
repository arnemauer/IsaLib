
ONTVANGER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000087e  00000912  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000087e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015f  00800112  00800112  00000924  2**0
                  ALLOC
  3 .stab         00000dbc  00000000  00000000  00000924  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002e6  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000019c6  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000328  00000000  00000000  000019f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003153  00000000  00000000  00001d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00004e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000020ab  00000000  00000000  00005fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000768  00000000  00000000  0000807c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c5a  00000000  00000000  000087e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001cb6  00000000  00000000  0000943e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002d0  00000000  00000000  0000b0f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	48 c1       	rjmp	.+656    	; 0x296 <__vector_1>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__vector_14>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	6d c3       	rjmp	.+1754   	; 0x724 <__vector_18>
  4a:	00 00       	nop
  4c:	a0 c3       	rjmp	.+1856   	; 0x78e <__vector_19>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 37       	cpi	r26, 0x71	; 113
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	32 d0       	rcall	.+100    	; 0x100 <main>
  9c:	ee c3       	rjmp	.+2012   	; 0x87a <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <log_s>:
  a0:	d5 c3       	rjmp	.+1962   	; 0x84c <uart0_puts>
  a2:	08 95       	ret

000000a4 <millis_init>:
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	84 bd       	out	0x24, r24	; 36
  a8:	93 e0       	ldi	r25, 0x03	; 3
  aa:	95 bd       	out	0x25, r25	; 37
  ac:	80 93 6e 00 	sts	0x006E, r24
  b0:	8a ef       	ldi	r24, 0xFA	; 250
  b2:	87 bd       	out	0x27, r24	; 39
  b4:	08 95       	ret

000000b6 <__vector_14>:
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	af 93       	push	r26
  c6:	bf 93       	push	r27
  c8:	80 91 12 01 	lds	r24, 0x0112
  cc:	90 91 13 01 	lds	r25, 0x0113
  d0:	a0 91 14 01 	lds	r26, 0x0114
  d4:	b0 91 15 01 	lds	r27, 0x0115
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	a1 1d       	adc	r26, r1
  dc:	b1 1d       	adc	r27, r1
  de:	80 93 12 01 	sts	0x0112, r24
  e2:	90 93 13 01 	sts	0x0113, r25
  e6:	a0 93 14 01 	sts	0x0114, r26
  ea:	b0 93 15 01 	sts	0x0115, r27
  ee:	bf 91       	pop	r27
  f0:	af 91       	pop	r26
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <main>:
 100:	20 9a       	sbi	0x04, 0	; 4
 102:	57 9a       	sbi	0x0a, 7	; 10
 104:	28 9a       	sbi	0x05, 0	; 5
 106:	5f 9a       	sbi	0x0b, 7	; 11
 108:	2f ef       	ldi	r18, 0xFF	; 255
 10a:	89 e6       	ldi	r24, 0x69	; 105
 10c:	98 e1       	ldi	r25, 0x18	; 24
 10e:	21 50       	subi	r18, 0x01	; 1
 110:	80 40       	sbci	r24, 0x00	; 0
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0xe>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x18>
 118:	00 00       	nop
 11a:	28 98       	cbi	0x05, 0	; 5
 11c:	5f 98       	cbi	0x0b, 7	; 11
 11e:	ea e7       	ldi	r30, 0x7A	; 122
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	8f 77       	andi	r24, 0x7F	; 127
 126:	80 83       	st	Z, r24
 128:	78 94       	sei
 12a:	bc df       	rcall	.-136    	; 0xa4 <millis_init>
 12c:	ef ef       	ldi	r30, 0xFF	; 255
 12e:	fb e7       	ldi	r31, 0x7B	; 123
 130:	22 e9       	ldi	r18, 0x92	; 146
 132:	e1 50       	subi	r30, 0x01	; 1
 134:	f0 40       	sbci	r31, 0x00	; 0
 136:	20 40       	sbci	r18, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x32>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x3c>
 13c:	00 00       	nop
 13e:	80 e1       	ldi	r24, 0x10	; 16
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	51 d3       	rcall	.+1698   	; 0x7e6 <uart0_init>
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	93 ed       	ldi	r25, 0xD3	; 211
 148:	e0 e3       	ldi	r30, 0x30	; 48
 14a:	81 50       	subi	r24, 0x01	; 1
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e0 40       	sbci	r30, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x4a>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x54>
 154:	00 00       	nop
 156:	20 e4       	ldi	r18, 0x40	; 64
 158:	36 e0       	ldi	r19, 0x06	; 6
 15a:	4e e0       	ldi	r20, 0x0E	; 14
 15c:	62 e0       	ldi	r22, 0x02	; 2
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	81 d2       	rcall	.+1282   	; 0x664 <_Z15rf12_initializehhhj>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	9c df       	rcall	.-200    	; 0xa0 <log_s>
 168:	ff ef       	ldi	r31, 0xFF	; 255
 16a:	23 ed       	ldi	r18, 0xD3	; 211
 16c:	80 e3       	ldi	r24, 0x30	; 48
 16e:	f1 50       	subi	r31, 0x01	; 1
 170:	20 40       	sbci	r18, 0x00	; 0
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x6e>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x78>
 178:	00 00       	nop
 17a:	0d e1       	ldi	r16, 0x1D	; 29
 17c:	11 e0       	ldi	r17, 0x01	; 1
 17e:	ce e1       	ldi	r28, 0x1E	; 30
 180:	d1 e0       	ldi	r29, 0x01	; 1
 182:	e1 2c       	mov	r14, r1
 184:	68 94       	set
 186:	dd 24       	eor	r13, r13
 188:	d7 f8       	bld	r13, 7
 18a:	68 d1       	rcall	.+720    	; 0x45c <_Z13rf12_recvDonev>
 18c:	88 23       	and	r24, r24
 18e:	09 f4       	brne	.+2      	; 0x192 <main+0x92>
 190:	3f c0       	rjmp	.+126    	; 0x210 <main+0x110>
 192:	80 91 63 01 	lds	r24, 0x0163
 196:	90 91 64 01 	lds	r25, 0x0164
 19a:	89 2b       	or	r24, r25
 19c:	99 f1       	breq	.+102    	; 0x204 <main+0x104>
 19e:	38 c0       	rjmp	.+112    	; 0x210 <main+0x110>
 1a0:	f8 01       	movw	r30, r16
 1a2:	80 81       	ld	r24, Z
 1a4:	88 23       	and	r24, r24
 1a6:	0c f0       	brlt	.+2      	; 0x1aa <main+0xaa>
 1a8:	41 c0       	rjmp	.+130    	; 0x22c <main+0x12c>
 1aa:	0a c0       	rjmp	.+20     	; 0x1c0 <main+0xc0>
 1ac:	f8 01       	movw	r30, r16
 1ae:	80 81       	ld	r24, Z
 1b0:	8f 71       	andi	r24, 0x1F	; 31
 1b2:	80 6c       	ori	r24, 0xC0	; 192
 1b4:	4e 2d       	mov	r20, r14
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	27 d2       	rcall	.+1102   	; 0x60a <_Z14rf12_sendStarthPKvh>
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	33 d2       	rcall	.+1126   	; 0x626 <_Z13rf12_sendWaith>
 1c0:	8d e0       	ldi	r24, 0x0D	; 13
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	43 d3       	rcall	.+1670   	; 0x84c <uart0_puts>
 1c6:	8f e3       	ldi	r24, 0x3F	; 63
 1c8:	9c e9       	ldi	r25, 0x9C	; 156
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <main+0xca>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0xd0>
 1d0:	00 00       	nop
 1d2:	88 81       	ld	r24, Y
 1d4:	88 23       	and	r24, r24
 1d6:	59 f0       	breq	.+22     	; 0x1ee <main+0xee>
 1d8:	fe 2c       	mov	r15, r14
 1da:	ef 2d       	mov	r30, r15
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	e1 5e       	subi	r30, 0xE1	; 225
 1e0:	fe 4f       	sbci	r31, 0xFE	; 254
 1e2:	80 81       	ld	r24, Z
 1e4:	19 d3       	rcall	.+1586   	; 0x818 <uart0_putc>
 1e6:	f3 94       	inc	r15
 1e8:	88 81       	ld	r24, Y
 1ea:	f8 16       	cp	r15, r24
 1ec:	b0 f3       	brcs	.-20     	; 0x1da <main+0xda>
 1ee:	9f ef       	ldi	r25, 0xFF	; 255
 1f0:	e3 ec       	ldi	r30, 0xC3	; 195
 1f2:	f9 e0       	ldi	r31, 0x09	; 9
 1f4:	91 50       	subi	r25, 0x01	; 1
 1f6:	e0 40       	sbci	r30, 0x00	; 0
 1f8:	f0 40       	sbci	r31, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0xf4>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0xfe>
 1fe:	00 00       	nop
 200:	5f 98       	cbi	0x0b, 7	; 11
 202:	c3 cf       	rjmp	.-122    	; 0x18a <main+0x8a>
 204:	5f 9a       	sbi	0x0b, 7	; 11
 206:	f8 01       	movw	r30, r16
 208:	80 81       	ld	r24, Z
 20a:	85 fd       	sbrc	r24, 5
 20c:	c9 cf       	rjmp	.-110    	; 0x1a0 <main+0xa0>
 20e:	d8 cf       	rjmp	.-80     	; 0x1c0 <main+0xc0>
 210:	28 9a       	sbi	0x05, 0	; 5
 212:	83 b7       	in	r24, 0x33	; 51
 214:	81 7f       	andi	r24, 0xF1	; 241
 216:	8c 60       	ori	r24, 0x0C	; 12
 218:	83 bf       	out	0x33, r24	; 51
 21a:	83 b7       	in	r24, 0x33	; 51
 21c:	81 60       	ori	r24, 0x01	; 1
 21e:	83 bf       	out	0x33, r24	; 51
 220:	88 95       	sleep
 222:	83 b7       	in	r24, 0x33	; 51
 224:	8e 7f       	andi	r24, 0xFE	; 254
 226:	83 bf       	out	0x33, r24	; 51
 228:	28 98       	cbi	0x05, 0	; 5
 22a:	af cf       	rjmp	.-162    	; 0x18a <main+0x8a>
 22c:	f8 01       	movw	r30, r16
 22e:	80 81       	ld	r24, Z
 230:	86 ff       	sbrs	r24, 6
 232:	bc cf       	rjmp	.-136    	; 0x1ac <main+0xac>
 234:	8d 2d       	mov	r24, r13
 236:	be cf       	rjmp	.-132    	; 0x1b4 <main+0xb4>

00000238 <_ZL15allowInterruptsv>:
 238:	e8 9a       	sbi	0x1d, 0	; 29
 23a:	08 95       	ret

0000023c <_ZL9rf12_byteh>:
 23c:	8e bd       	out	0x2e, r24	; 46
 23e:	0d b4       	in	r0, 0x2d	; 45
 240:	07 fe       	sbrs	r0, 7
 242:	fd cf       	rjmp	.-6      	; 0x23e <_ZL9rf12_byteh+0x2>
 244:	8e b5       	in	r24, 0x2e	; 46
 246:	08 95       	ret

00000248 <_ZL13rf12_xferSlowj>:
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	18 2f       	mov	r17, r24
 250:	8c b5       	in	r24, 0x2c	; 44
 252:	81 60       	ori	r24, 0x01	; 1
 254:	8c bd       	out	0x2c, r24	; 44
 256:	2a 98       	cbi	0x05, 2	; 5
 258:	89 2f       	mov	r24, r25
 25a:	f0 df       	rcall	.-32     	; 0x23c <_ZL9rf12_byteh>
 25c:	d8 2f       	mov	r29, r24
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	c8 2f       	mov	r28, r24
 262:	81 2f       	mov	r24, r17
 264:	eb df       	rcall	.-42     	; 0x23c <_ZL9rf12_byteh>
 266:	2a 9a       	sbi	0x05, 2	; 5
 268:	9c b5       	in	r25, 0x2c	; 44
 26a:	9e 7f       	andi	r25, 0xFE	; 254
 26c:	9c bd       	out	0x2c, r25	; 44
 26e:	c8 2b       	or	r28, r24
 270:	8c 2f       	mov	r24, r28
 272:	9d 2f       	mov	r25, r29
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	08 95       	ret

0000027c <_Z12rf12_spiInitv>:
 27c:	84 b1       	in	r24, 0x04	; 4
 27e:	8c 62       	ori	r24, 0x2C	; 44
 280:	84 b9       	out	0x04, r24	; 4
 282:	2a 9a       	sbi	0x05, 2	; 5
 284:	24 98       	cbi	0x04, 4	; 4
 286:	80 e5       	ldi	r24, 0x50	; 80
 288:	8c bd       	out	0x2c, r24	; 44
 28a:	8d b5       	in	r24, 0x2d	; 45
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	8d bd       	out	0x2d, r24	; 45
 290:	52 98       	cbi	0x0a, 2	; 10
 292:	5a 9a       	sbi	0x0b, 2	; 11
 294:	08 95       	ret

00000296 <__vector_1>:
 296:	1f 92       	push	r1
 298:	0f 92       	push	r0
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	0f 92       	push	r0
 29e:	11 24       	eor	r1, r1
 2a0:	2f 93       	push	r18
 2a2:	3f 93       	push	r19
 2a4:	4f 93       	push	r20
 2a6:	5f 93       	push	r21
 2a8:	6f 93       	push	r22
 2aa:	7f 93       	push	r23
 2ac:	8f 93       	push	r24
 2ae:	9f 93       	push	r25
 2b0:	af 93       	push	r26
 2b2:	bf 93       	push	r27
 2b4:	ef 93       	push	r30
 2b6:	ff 93       	push	r31
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	c5 df       	rcall	.-118    	; 0x248 <_ZL13rf12_xferSlowj>
 2be:	80 91 65 01 	lds	r24, 0x0165
 2c2:	85 30       	cpi	r24, 0x05	; 5
 2c4:	09 f0       	breq	.+2      	; 0x2c8 <__vector_1+0x32>
 2c6:	47 c0       	rjmp	.+142    	; 0x356 <__vector_1+0xc0>
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 eb       	ldi	r25, 0xB0	; 176
 2cc:	bd df       	rcall	.-134    	; 0x248 <_ZL13rf12_xferSlowj>
 2ce:	90 91 66 01 	lds	r25, 0x0166
 2d2:	91 11       	cpse	r25, r1
 2d4:	04 c0       	rjmp	.+8      	; 0x2de <__vector_1+0x48>
 2d6:	90 91 67 01 	lds	r25, 0x0167
 2da:	91 11       	cpse	r25, r1
 2dc:	a3 c0       	rjmp	.+326    	; 0x424 <__vector_1+0x18e>
 2de:	90 91 66 01 	lds	r25, 0x0166
 2e2:	e9 2f       	mov	r30, r25
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	e4 5e       	subi	r30, 0xE4	; 228
 2e8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ea:	80 83       	st	Z, r24
 2ec:	9f 5f       	subi	r25, 0xFF	; 255
 2ee:	90 93 66 01 	sts	0x0166, r25
 2f2:	20 91 63 01 	lds	r18, 0x0163
 2f6:	30 91 64 01 	lds	r19, 0x0164
 2fa:	28 27       	eor	r18, r24
 2fc:	82 2f       	mov	r24, r18
 2fe:	82 95       	swap	r24
 300:	82 27       	eor	r24, r18
 302:	08 2e       	mov	r0, r24
 304:	86 95       	lsr	r24
 306:	86 95       	lsr	r24
 308:	80 25       	eor	r24, r0
 30a:	08 2e       	mov	r0, r24
 30c:	86 95       	lsr	r24
 30e:	80 25       	eor	r24, r0
 310:	87 70       	andi	r24, 0x07	; 7
 312:	02 2e       	mov	r0, r18
 314:	23 2f       	mov	r18, r19
 316:	86 95       	lsr	r24
 318:	07 94       	ror	r0
 31a:	87 95       	ror	r24
 31c:	30 2d       	mov	r19, r0
 31e:	28 27       	eor	r18, r24
 320:	06 94       	lsr	r0
 322:	87 95       	ror	r24
 324:	30 25       	eor	r19, r0
 326:	28 27       	eor	r18, r24
 328:	30 93 64 01 	sts	0x0164, r19
 32c:	20 93 63 01 	sts	0x0163, r18
 330:	20 91 66 01 	lds	r18, 0x0166
 334:	80 91 1e 01 	lds	r24, 0x011E
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	05 96       	adiw	r24, 0x05	; 5
 33e:	28 17       	cp	r18, r24
 340:	39 07       	cpc	r19, r25
 342:	2c f4       	brge	.+10     	; 0x34e <__vector_1+0xb8>
 344:	80 91 66 01 	lds	r24, 0x0166
 348:	87 34       	cpi	r24, 0x47	; 71
 34a:	08 f4       	brcc	.+2      	; 0x34e <__vector_1+0xb8>
 34c:	76 c0       	rjmp	.+236    	; 0x43a <__vector_1+0x1a4>
 34e:	8d e0       	ldi	r24, 0x0D	; 13
 350:	92 e8       	ldi	r25, 0x82	; 130
 352:	7a df       	rcall	.-268    	; 0x248 <_ZL13rf12_xferSlowj>
 354:	72 c0       	rjmp	.+228    	; 0x43a <__vector_1+0x1a4>
 356:	80 91 65 01 	lds	r24, 0x0165
 35a:	88 23       	and	r24, r24
 35c:	0c f0       	brlt	.+2      	; 0x360 <__vector_1+0xca>
 35e:	2f c0       	rjmp	.+94     	; 0x3be <__vector_1+0x128>
 360:	e0 91 1e 01 	lds	r30, 0x011E
 364:	80 91 65 01 	lds	r24, 0x0165
 368:	98 2f       	mov	r25, r24
 36a:	9f 5f       	subi	r25, 0xFF	; 255
 36c:	90 93 65 01 	sts	0x0165, r25
 370:	ed 5f       	subi	r30, 0xFD	; 253
 372:	8e 0f       	add	r24, r30
 374:	e8 2f       	mov	r30, r24
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	e4 5e       	subi	r30, 0xE4	; 228
 37a:	fe 4f       	sbci	r31, 0xFE	; 254
 37c:	80 81       	ld	r24, Z
 37e:	20 91 63 01 	lds	r18, 0x0163
 382:	30 91 64 01 	lds	r19, 0x0164
 386:	28 27       	eor	r18, r24
 388:	92 2f       	mov	r25, r18
 38a:	92 95       	swap	r25
 38c:	92 27       	eor	r25, r18
 38e:	09 2e       	mov	r0, r25
 390:	96 95       	lsr	r25
 392:	96 95       	lsr	r25
 394:	90 25       	eor	r25, r0
 396:	09 2e       	mov	r0, r25
 398:	96 95       	lsr	r25
 39a:	90 25       	eor	r25, r0
 39c:	97 70       	andi	r25, 0x07	; 7
 39e:	02 2e       	mov	r0, r18
 3a0:	23 2f       	mov	r18, r19
 3a2:	96 95       	lsr	r25
 3a4:	07 94       	ror	r0
 3a6:	97 95       	ror	r25
 3a8:	30 2d       	mov	r19, r0
 3aa:	29 27       	eor	r18, r25
 3ac:	06 94       	lsr	r0
 3ae:	97 95       	ror	r25
 3b0:	30 25       	eor	r19, r0
 3b2:	29 27       	eor	r18, r25
 3b4:	30 93 64 01 	sts	0x0164, r19
/// @param len Number of data bytes to send. Must be in the range 0 .. 65.
void rf12_sendNow (uint8_t hdr, const void* ptr, uint8_t len) {
	while (!rf12_canSend())
	rf12_recvDone(); // keep the driver state machine going, ignore incoming
	rf12_sendStart(hdr, ptr, len);
}
 3b8:	20 93 63 01 	sts	0x0163, r18
 3bc:	2f c0       	rjmp	.+94     	; 0x41c <__vector_1+0x186>
 3be:	80 91 65 01 	lds	r24, 0x0165
 3c2:	98 2f       	mov	r25, r24
 3c4:	9f 5f       	subi	r25, 0xFF	; 255
 3c6:	90 93 65 01 	sts	0x0165, r25
 3ca:	83 30       	cpi	r24, 0x03	; 3
 3cc:	09 f1       	breq	.+66     	; 0x410 <__vector_1+0x17a>
 3ce:	2c f4       	brge	.+10     	; 0x3da <__vector_1+0x144>
 3d0:	88 23       	and	r24, r24
 3d2:	99 f0       	breq	.+38     	; 0x3fa <__vector_1+0x164>
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	09 f5       	brne	.+66     	; 0x41a <__vector_1+0x184>
 3d8:	15 c0       	rjmp	.+42     	; 0x404 <__vector_1+0x16e>
 3da:	89 30       	cpi	r24, 0x09	; 9
 3dc:	19 f0       	breq	.+6      	; 0x3e4 <__vector_1+0x14e>
 3de:	8a 30       	cpi	r24, 0x0A	; 10
 3e0:	e1 f4       	brne	.+56     	; 0x41a <__vector_1+0x184>
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <__vector_1+0x152>
 3e4:	8d e2       	ldi	r24, 0x2D	; 45
 3e6:	1a c0       	rjmp	.+52     	; 0x41c <__vector_1+0x186>
 3e8:	80 91 67 01 	lds	r24, 0x0167
 3ec:	20 91 1e 01 	lds	r18, 0x011E
 3f0:	9e ef       	ldi	r25, 0xFE	; 254
 3f2:	92 1b       	sub	r25, r18
 3f4:	90 93 65 01 	sts	0x0165, r25
 3f8:	11 c0       	rjmp	.+34     	; 0x41c <__vector_1+0x186>
 3fa:	80 91 63 01 	lds	r24, 0x0163
 3fe:	90 91 64 01 	lds	r25, 0x0164
 402:	0c c0       	rjmp	.+24     	; 0x41c <__vector_1+0x186>
 404:	80 91 63 01 	lds	r24, 0x0163
 408:	90 91 64 01 	lds	r25, 0x0164
 40c:	89 2f       	mov	r24, r25
 40e:	06 c0       	rjmp	.+12     	; 0x41c <__vector_1+0x186>
 410:	8d e0       	ldi	r24, 0x0D	; 13
 412:	92 e8       	ldi	r25, 0x82	; 130
 414:	19 df       	rcall	.-462    	; 0x248 <_ZL13rf12_xferSlowj>
 416:	8a ea       	ldi	r24, 0xAA	; 170
 418:	01 c0       	rjmp	.+2      	; 0x41c <__vector_1+0x186>
 41a:	8a ea       	ldi	r24, 0xAA	; 170
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	98 54       	subi	r25, 0x48	; 72
 420:	13 df       	rcall	.-474    	; 0x248 <_ZL13rf12_xferSlowj>
 422:	0b c0       	rjmp	.+22     	; 0x43a <__vector_1+0x1a4>
 424:	20 91 66 01 	lds	r18, 0x0166
 428:	e2 2f       	mov	r30, r18
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	e4 5e       	subi	r30, 0xE4	; 228
 42e:	fe 4f       	sbci	r31, 0xFE	; 254
 430:	90 83       	st	Z, r25
 432:	2f 5f       	subi	r18, 0xFF	; 255
 434:	20 93 66 01 	sts	0x0166, r18
 438:	52 cf       	rjmp	.-348    	; 0x2de <__vector_1+0x48>
 43a:	ff 91       	pop	r31
 43c:	ef 91       	pop	r30
 43e:	bf 91       	pop	r27
 440:	af 91       	pop	r26
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	7f 91       	pop	r23
 448:	6f 91       	pop	r22
 44a:	5f 91       	pop	r21
 44c:	4f 91       	pop	r20
 44e:	3f 91       	pop	r19
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	0f be       	out	0x3f, r0	; 63
 456:	0f 90       	pop	r0
 458:	1f 90       	pop	r1
 45a:	18 95       	reti

0000045c <_Z13rf12_recvDonev>:
 45c:	80 91 65 01 	lds	r24, 0x0165
 460:	85 30       	cpi	r24, 0x05	; 5
 462:	a9 f5       	brne	.+106    	; 0x4ce <_Z13rf12_recvDonev+0x72>
 464:	20 91 66 01 	lds	r18, 0x0166
 468:	80 91 1e 01 	lds	r24, 0x011E
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	05 96       	adiw	r24, 0x05	; 5
 472:	28 17       	cp	r18, r24
 474:	39 07       	cpc	r19, r25
 476:	0c f0       	brlt	.+2      	; 0x47a <_Z13rf12_recvDonev+0x1e>
 478:	70 c0       	rjmp	.+224    	; 0x55a <_Z13rf12_recvDonev+0xfe>
 47a:	80 91 66 01 	lds	r24, 0x0166
 47e:	87 34       	cpi	r24, 0x47	; 71
 480:	08 f0       	brcs	.+2      	; 0x484 <_Z13rf12_recvDonev+0x28>
 482:	6b c0       	rjmp	.+214    	; 0x55a <_Z13rf12_recvDonev+0xfe>
 484:	24 c0       	rjmp	.+72     	; 0x4ce <_Z13rf12_recvDonev+0x72>
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	90 93 64 01 	sts	0x0164, r25
 48e:	80 93 63 01 	sts	0x0163, r24
 492:	80 91 1d 01 	lds	r24, 0x011D
 496:	86 ff       	sbrs	r24, 6
 498:	0b c0       	rjmp	.+22     	; 0x4b0 <_Z13rf12_recvDonev+0x54>
 49a:	80 91 68 01 	lds	r24, 0x0168
 49e:	98 2f       	mov	r25, r24
 4a0:	9f 71       	andi	r25, 0x1F	; 31
 4a2:	9f 31       	cpi	r25, 0x1F	; 31
 4a4:	29 f0       	breq	.+10     	; 0x4b0 <_Z13rf12_recvDonev+0x54>
 4a6:	90 91 1d 01 	lds	r25, 0x011D
 4aa:	89 27       	eor	r24, r25
 4ac:	8f 71       	andi	r24, 0x1F	; 31
 4ae:	79 f4       	brne	.+30     	; 0x4ce <_Z13rf12_recvDonev+0x72>
 4b0:	80 91 63 01 	lds	r24, 0x0163
 4b4:	90 91 64 01 	lds	r25, 0x0164
 4b8:	89 2b       	or	r24, r25
 4ba:	09 f0       	breq	.+2      	; 0x4be <_Z13rf12_recvDonev+0x62>
 4bc:	5b c0       	rjmp	.+182    	; 0x574 <_Z13rf12_recvDonev+0x118>
 4be:	e0 91 16 01 	lds	r30, 0x0116
 4c2:	f0 91 17 01 	lds	r31, 0x0117
 4c6:	30 97       	sbiw	r30, 0x00	; 0
 4c8:	09 f0       	breq	.+2      	; 0x4cc <_Z13rf12_recvDonev+0x70>
 4ca:	50 c0       	rjmp	.+160    	; 0x56c <_Z13rf12_recvDonev+0x110>
 4cc:	53 c0       	rjmp	.+166    	; 0x574 <_Z13rf12_recvDonev+0x118>
 4ce:	80 91 65 01 	lds	r24, 0x0165
 4d2:	84 30       	cpi	r24, 0x04	; 4
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <_Z13rf12_recvDonev+0x7c>
 4d6:	3f c0       	rjmp	.+126    	; 0x556 <_Z13rf12_recvDonev+0xfa>
 4d8:	80 91 69 01 	lds	r24, 0x0169
 4dc:	88 23       	and	r24, r24
 4de:	51 f0       	breq	.+20     	; 0x4f4 <_Z13rf12_recvDonev+0x98>
 4e0:	80 93 1e 01 	sts	0x011E, r24
 4e4:	10 92 1d 01 	sts	0x011D, r1
 4e8:	10 92 1c 01 	sts	0x011C, r1
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	80 93 66 01 	sts	0x0166, r24
 4f2:	04 c0       	rjmp	.+8      	; 0x4fc <_Z13rf12_recvDonev+0xa0>
 4f4:	10 92 1e 01 	sts	0x011E, r1
 4f8:	10 92 66 01 	sts	0x0166, r1
 4fc:	8f ef       	ldi	r24, 0xFF	; 255
 4fe:	9f ef       	ldi	r25, 0xFF	; 255
 500:	90 93 64 01 	sts	0x0164, r25
 504:	80 93 63 01 	sts	0x0163, r24
 508:	20 91 67 01 	lds	r18, 0x0167
 50c:	22 23       	and	r18, r18
 50e:	d9 f0       	breq	.+54     	; 0x546 <_Z13rf12_recvDonev+0xea>
 510:	82 27       	eor	r24, r18
 512:	28 2f       	mov	r18, r24
 514:	22 95       	swap	r18
 516:	28 27       	eor	r18, r24
 518:	02 2e       	mov	r0, r18
 51a:	26 95       	lsr	r18
 51c:	26 95       	lsr	r18
 51e:	20 25       	eor	r18, r0
 520:	02 2e       	mov	r0, r18
 522:	26 95       	lsr	r18
 524:	20 25       	eor	r18, r0
 526:	27 70       	andi	r18, 0x07	; 7
 528:	08 2e       	mov	r0, r24
 52a:	89 2f       	mov	r24, r25
 52c:	26 95       	lsr	r18
 52e:	07 94       	ror	r0
 530:	27 95       	ror	r18
 532:	90 2d       	mov	r25, r0
 534:	82 27       	eor	r24, r18
 536:	06 94       	lsr	r0
 538:	27 95       	ror	r18
 53a:	90 25       	eor	r25, r0
 53c:	82 27       	eor	r24, r18
 53e:	90 93 64 01 	sts	0x0164, r25
 542:	80 93 63 01 	sts	0x0163, r24
 546:	85 e0       	ldi	r24, 0x05	; 5
 548:	80 93 65 01 	sts	0x0165, r24
 54c:	8d ed       	ldi	r24, 0xDD	; 221
 54e:	92 e8       	ldi	r25, 0x82	; 130
 550:	7b de       	rcall	.-778    	; 0x248 <_ZL13rf12_xferSlowj>
 552:	80 e0       	ldi	r24, 0x00	; 0
 554:	08 95       	ret
 556:	80 e0       	ldi	r24, 0x00	; 0
 558:	08 95       	ret
 55a:	84 e0       	ldi	r24, 0x04	; 4
 55c:	80 93 65 01 	sts	0x0165, r24
 560:	80 91 1e 01 	lds	r24, 0x011E
 564:	83 34       	cpi	r24, 0x43	; 67
 566:	08 f0       	brcs	.+2      	; 0x56a <_Z13rf12_recvDonev+0x10e>
 568:	8e cf       	rjmp	.-228    	; 0x486 <_Z13rf12_recvDonev+0x2a>
 56a:	93 cf       	rjmp	.-218    	; 0x492 <_Z13rf12_recvDonev+0x36>
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	09 95       	icall
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	08 95       	ret
 574:	8f ef       	ldi	r24, 0xFF	; 255
 576:	9f ef       	ldi	r25, 0xFF	; 255
 578:	dc 01       	movw	r26, r24
 57a:	80 93 18 01 	sts	0x0118, r24
 57e:	90 93 19 01 	sts	0x0119, r25
 582:	a0 93 1a 01 	sts	0x011A, r26
 586:	b0 93 1b 01 	sts	0x011B, r27
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	08 95       	ret

0000058e <_Z14rf12_sendStarth>:
 58e:	86 fd       	sbrc	r24, 6
 590:	05 c0       	rjmp	.+10     	; 0x59c <_Z14rf12_sendStarth+0xe>
 592:	80 7e       	andi	r24, 0xE0	; 224
 594:	90 91 68 01 	lds	r25, 0x0168
 598:	9f 71       	andi	r25, 0x1F	; 31
 59a:	89 0f       	add	r24, r25
 59c:	80 93 1d 01 	sts	0x011D, r24
 5a0:	e0 91 16 01 	lds	r30, 0x0116
 5a4:	f0 91 17 01 	lds	r31, 0x0117
 5a8:	30 97       	sbiw	r30, 0x00	; 0
 5aa:	11 f0       	breq	.+4      	; 0x5b0 <_Z14rf12_sendStarth+0x22>
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	09 95       	icall
 5b0:	8f ef       	ldi	r24, 0xFF	; 255
 5b2:	9f ef       	ldi	r25, 0xFF	; 255
 5b4:	90 93 64 01 	sts	0x0164, r25
 5b8:	80 93 63 01 	sts	0x0163, r24
 5bc:	80 91 63 01 	lds	r24, 0x0163
 5c0:	90 91 64 01 	lds	r25, 0x0164
 5c4:	20 91 67 01 	lds	r18, 0x0167
 5c8:	82 27       	eor	r24, r18
 5ca:	28 2f       	mov	r18, r24
 5cc:	22 95       	swap	r18
 5ce:	28 27       	eor	r18, r24
 5d0:	02 2e       	mov	r0, r18
 5d2:	26 95       	lsr	r18
 5d4:	26 95       	lsr	r18
 5d6:	20 25       	eor	r18, r0
 5d8:	02 2e       	mov	r0, r18
 5da:	26 95       	lsr	r18
 5dc:	20 25       	eor	r18, r0
 5de:	27 70       	andi	r18, 0x07	; 7
 5e0:	08 2e       	mov	r0, r24
 5e2:	89 2f       	mov	r24, r25
 5e4:	26 95       	lsr	r18
 5e6:	07 94       	ror	r0
 5e8:	27 95       	ror	r18
 5ea:	90 2d       	mov	r25, r0
 5ec:	82 27       	eor	r24, r18
 5ee:	06 94       	lsr	r0
 5f0:	27 95       	ror	r18
 5f2:	90 25       	eor	r25, r0
 5f4:	82 27       	eor	r24, r18
 5f6:	90 93 64 01 	sts	0x0164, r25
 5fa:	80 93 63 01 	sts	0x0163, r24
 5fe:	86 e0       	ldi	r24, 0x06	; 6
 600:	80 93 65 01 	sts	0x0165, r24
 604:	8d e3       	ldi	r24, 0x3D	; 61
 606:	92 e8       	ldi	r25, 0x82	; 130
 608:	1f ce       	rjmp	.-962    	; 0x248 <_ZL13rf12_xferSlowj>

0000060a <_Z14rf12_sendStarthPKvh>:
 60a:	cf 93       	push	r28
 60c:	c8 2f       	mov	r28, r24
 60e:	40 93 1e 01 	sts	0x011E, r20
 612:	2f e1       	ldi	r18, 0x1F	; 31
 614:	31 e0       	ldi	r19, 0x01	; 1
 616:	50 e0       	ldi	r21, 0x00	; 0
 618:	82 2f       	mov	r24, r18
 61a:	93 2f       	mov	r25, r19
 61c:	25 d1       	rcall	.+586    	; 0x868 <memcpy>
 61e:	8c 2f       	mov	r24, r28
 620:	b6 df       	rcall	.-148    	; 0x58e <_Z14rf12_sendStarth>
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <_Z13rf12_sendWaith>:
	while (rxstate != TXIDLE)
	if (mode) {
		// power down mode is only possible if the fuses are set to start
		// up in 258 clock cycles, i.e. approx 4 us - else must use standby!
		// modes 2 and higher may lose a few clock timer ticks
		set_sleep_mode(mode == 3 ? SLEEP_MODE_PWR_DOWN :
 626:	44 e0       	ldi	r20, 0x04	; 4
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	5c e0       	ldi	r21, 0x0C	; 12
///             fuses have been set for fast startup, i.e. 258 CK - the default
///             Arduino fuse settings are not suitable for full power down.
void rf12_sendWait (uint8_t mode) {
	// wait for packet to actually finish sending
	// go into low power mode, as interrupts are going to come in very soon
	while (rxstate != TXIDLE)
 62c:	16 c0       	rjmp	.+44     	; 0x65a <_Z13rf12_sendWaith+0x34>
	if (mode) {
 62e:	88 23       	and	r24, r24
 630:	a1 f0       	breq	.+40     	; 0x65a <_Z13rf12_sendWaith+0x34>
		// power down mode is only possible if the fuses are set to start
		// up in 258 clock cycles, i.e. approx 4 us - else must use standby!
		// modes 2 and higher may lose a few clock timer ticks
		set_sleep_mode(mode == 3 ? SLEEP_MODE_PWR_DOWN :
 632:	93 b7       	in	r25, 0x33	; 51
 634:	91 7f       	andi	r25, 0xF1	; 241
 636:	83 30       	cpi	r24, 0x03	; 3
 638:	21 f0       	breq	.+8      	; 0x642 <_Z13rf12_sendWaith+0x1c>
 63a:	82 30       	cpi	r24, 0x02	; 2
 63c:	21 f4       	brne	.+8      	; 0x646 <_Z13rf12_sendWaith+0x20>
 63e:	25 2f       	mov	r18, r21
 640:	03 c0       	rjmp	.+6      	; 0x648 <_Z13rf12_sendWaith+0x22>
 642:	24 2f       	mov	r18, r20
 644:	01 c0       	rjmp	.+2      	; 0x648 <_Z13rf12_sendWaith+0x22>
 646:	23 2f       	mov	r18, r19
 648:	92 2b       	or	r25, r18
 64a:	93 bf       	out	0x33, r25	; 51
		#ifdef SLEEP_MODE_STANDBY
		mode == 2 ? SLEEP_MODE_STANDBY :
		#endif
		SLEEP_MODE_IDLE);
		sleep_mode();
 64c:	93 b7       	in	r25, 0x33	; 51
 64e:	91 60       	ori	r25, 0x01	; 1
 650:	93 bf       	out	0x33, r25	; 51
 652:	88 95       	sleep
 654:	93 b7       	in	r25, 0x33	; 51
 656:	9e 7f       	andi	r25, 0xFE	; 254
 658:	93 bf       	out	0x33, r25	; 51
///             fuses have been set for fast startup, i.e. 258 CK - the default
///             Arduino fuse settings are not suitable for full power down.
void rf12_sendWait (uint8_t mode) {
	// wait for packet to actually finish sending
	// go into low power mode, as interrupts are going to come in very soon
	while (rxstate != TXIDLE)
 65a:	90 91 65 01 	lds	r25, 0x0165
 65e:	94 30       	cpi	r25, 0x04	; 4
 660:	31 f7       	brne	.-52     	; 0x62e <_Z13rf12_sendWaith+0x8>
		mode == 2 ? SLEEP_MODE_STANDBY :
		#endif
		SLEEP_MODE_IDLE);
		sleep_mode();
	}
}
 662:	08 95       	ret

00000664 <_Z15rf12_initializehhhj>:
/// settings, nor does it change the EEPROM settings. To use the netId and
/// netGroup settings saved in EEPROM use rf12_config() instead of
/// rf12_initialize. The choice whether to use rf12_initialize() or
/// rf12_config() at the top of every sketch is one of personal preference.
/// To set EEPROM settings for use with rf12_config() use the RF12demo sketch.
uint8_t rf12_initialize (uint8_t id, uint8_t band, uint8_t g, uint16_t f) {
 664:	0f 93       	push	r16
 666:	1f 93       	push	r17
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	06 2f       	mov	r16, r22
 66e:	14 2f       	mov	r17, r20
 670:	e9 01       	movw	r28, r18
	nodeid = id;
 672:	80 93 68 01 	sts	0x0168, r24
	group = g;
 676:	40 93 67 01 	sts	0x0167, r20
	frequency = f;
 67a:	30 93 6b 01 	sts	0x016B, r19
 67e:	20 93 6a 01 	sts	0x016A, r18
	// caller should validate!    if (frequency < 96) frequency = 1600;
	
	rf12_spiInit();
 682:	fc dd       	rcall	.-1032   	; 0x27c <_Z12rf12_spiInitv>
	rf12_xfer(0x0000); // initial SPI transfer added to avoid power-up problem
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	df dd       	rcall	.-1090   	; 0x248 <_ZL13rf12_xferSlowj>
	rf12_xfer(RF_SLEEP_MODE); // DC (disable clk pin), enable lbd
 68a:	85 e0       	ldi	r24, 0x05	; 5
 68c:	92 e8       	ldi	r25, 0x82	; 130
 68e:	dc dd       	rcall	.-1096   	; 0x248 <_ZL13rf12_xferSlowj>
	
	// wait until RFM12B is out of power-up reset, this takes several *seconds*
	rf12_xfer(RF_TXREG_WRITE); // in case we're still in OOK mode
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	98 eb       	ldi	r25, 0xB8	; 184
 694:	d9 dd       	rcall	.-1102   	; 0x248 <_ZL13rf12_xferSlowj>
	while ((PIN_RFM_IRQ & (1<<BIT_RFM_IRQ)) == 0)
 696:	4a 99       	sbic	0x09, 2	; 9
 698:	05 c0       	rjmp	.+10     	; 0x6a4 <_Z15rf12_initializehhhj+0x40>
	rf12_xfer(0x0000);
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	d4 dd       	rcall	.-1112   	; 0x248 <_ZL13rf12_xferSlowj>
	rf12_xfer(0x0000); // initial SPI transfer added to avoid power-up problem
	rf12_xfer(RF_SLEEP_MODE); // DC (disable clk pin), enable lbd
	
	// wait until RFM12B is out of power-up reset, this takes several *seconds*
	rf12_xfer(RF_TXREG_WRITE); // in case we're still in OOK mode
	while ((PIN_RFM_IRQ & (1<<BIT_RFM_IRQ)) == 0)
 6a0:	4a 9b       	sbis	0x09, 2	; 9
 6a2:	fb cf       	rjmp	.-10     	; 0x69a <_Z15rf12_initializehhhj+0x36>
	rf12_xfer(0x0000);
	
	rf12_xfer(0x80C7 | (band << 4)); // EL (ena TX), EF (ena RX FIFO), 12.0pF
 6a4:	20 e1       	ldi	r18, 0x10	; 16
 6a6:	02 9f       	mul	r16, r18
 6a8:	c0 01       	movw	r24, r0
 6aa:	11 24       	eor	r1, r1
 6ac:	87 6c       	ori	r24, 0xC7	; 199
 6ae:	90 68       	ori	r25, 0x80	; 128
 6b0:	cb dd       	rcall	.-1130   	; 0x248 <_ZL13rf12_xferSlowj>
	rf12_xfer(0xA000 + frequency); // 96-3960 freq range of values within band
 6b2:	ce 01       	movw	r24, r28
 6b4:	90 56       	subi	r25, 0x60	; 96
 6b6:	c8 dd       	rcall	.-1136   	; 0x248 <_ZL13rf12_xferSlowj>
	rf12_xfer(0xC606); // approx 49.2 Kbps, i.e. 10000/29/(1+6) Kbps
 6b8:	86 e0       	ldi	r24, 0x06	; 6
 6ba:	96 ec       	ldi	r25, 0xC6	; 198
 6bc:	c5 dd       	rcall	.-1142   	; 0x248 <_ZL13rf12_xferSlowj>
	rf12_xfer(0x94A2); // VDI,FAST,134kHz,0dBm,-91dBm
 6be:	82 ea       	ldi	r24, 0xA2	; 162
 6c0:	94 e9       	ldi	r25, 0x94	; 148
 6c2:	c2 dd       	rcall	.-1148   	; 0x248 <_ZL13rf12_xferSlowj>
	rf12_xfer(0xC2AC); // AL,!ml,DIG,DQD4
 6c4:	8c ea       	ldi	r24, 0xAC	; 172
 6c6:	92 ec       	ldi	r25, 0xC2	; 194
 6c8:	bf dd       	rcall	.-1154   	; 0x248 <_ZL13rf12_xferSlowj>
	if (group != 0) {
 6ca:	11 23       	and	r17, r17
 6cc:	41 f0       	breq	.+16     	; 0x6de <_Z15rf12_initializehhhj+0x7a>
		rf12_xfer(0xCA83); // FIFO8,2-SYNC,!ff,DR
 6ce:	83 e8       	ldi	r24, 0x83	; 131
 6d0:	9a ec       	ldi	r25, 0xCA	; 202
 6d2:	ba dd       	rcall	.-1164   	; 0x248 <_ZL13rf12_xferSlowj>
		rf12_xfer(0xCE00 | group); // SYNC=2DXX；
 6d4:	81 2f       	mov	r24, r17
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	9e 6c       	ori	r25, 0xCE	; 206
 6da:	b6 dd       	rcall	.-1172   	; 0x248 <_ZL13rf12_xferSlowj>
 6dc:	06 c0       	rjmp	.+12     	; 0x6ea <_Z15rf12_initializehhhj+0x86>
		} else {
		rf12_xfer(0xCA8B); // FIFO8,1-SYNC,!ff,DR
 6de:	8b e8       	ldi	r24, 0x8B	; 139
 6e0:	9a ec       	ldi	r25, 0xCA	; 202
 6e2:	b2 dd       	rcall	.-1180   	; 0x248 <_ZL13rf12_xferSlowj>
		rf12_xfer(0xCE2D); // SYNC=2D；
 6e4:	8d e2       	ldi	r24, 0x2D	; 45
 6e6:	9e ec       	ldi	r25, 0xCE	; 206
 6e8:	af dd       	rcall	.-1186   	; 0x248 <_ZL13rf12_xferSlowj>
	}
	rf12_xfer(0xC483); // @PWR,NO RSTRIC,!st,!fi,OE,EN
 6ea:	83 e8       	ldi	r24, 0x83	; 131
 6ec:	94 ec       	ldi	r25, 0xC4	; 196
 6ee:	ac dd       	rcall	.-1192   	; 0x248 <_ZL13rf12_xferSlowj>
	rf12_xfer(0x9850); // !mp,90kHz,MAX OUT
 6f0:	80 e5       	ldi	r24, 0x50	; 80
 6f2:	98 e9       	ldi	r25, 0x98	; 152
 6f4:	a9 dd       	rcall	.-1198   	; 0x248 <_ZL13rf12_xferSlowj>
	rf12_xfer(0xCC77); // OB1，OB0, LPX,！ddy，DDIT，BW0
 6f6:	87 e7       	ldi	r24, 0x77	; 119
 6f8:	9c ec       	ldi	r25, 0xCC	; 204
 6fa:	a6 dd       	rcall	.-1204   	; 0x248 <_ZL13rf12_xferSlowj>
	rf12_xfer(0xE000); // NOT USE
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	90 ee       	ldi	r25, 0xE0	; 224
 700:	a3 dd       	rcall	.-1210   	; 0x248 <_ZL13rf12_xferSlowj>
	rf12_xfer(0xC800); // NOT USE
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	98 ec       	ldi	r25, 0xC8	; 200
 706:	a0 dd       	rcall	.-1216   	; 0x248 <_ZL13rf12_xferSlowj>
	rf12_xfer(0xC049); // 1.66MHz,3.1V
 708:	89 e4       	ldi	r24, 0x49	; 73
 70a:	90 ec       	ldi	r25, 0xC0	; 192
 70c:	9d dd       	rcall	.-1222   	; 0x248 <_ZL13rf12_xferSlowj>

	rxstate = TXIDLE;
 70e:	84 e0       	ldi	r24, 0x04	; 4
 710:	80 93 65 01 	sts	0x0165, r24
	
	allowInterrupts();
 714:	91 dd       	rcall	.-1246   	; 0x238 <_ZL15allowInterruptsv>
	
	return nodeid;
}
 716:	80 91 68 01 	lds	r24, 0x0168
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	1f 91       	pop	r17
 720:	0f 91       	pop	r16
 722:	08 95       	ret

00000724 <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
 724:	1f 92       	push	r1
 726:	0f 92       	push	r0
 728:	0f b6       	in	r0, 0x3f	; 63
 72a:	0f 92       	push	r0
 72c:	11 24       	eor	r1, r1
 72e:	2f 93       	push	r18
 730:	3f 93       	push	r19
 732:	4f 93       	push	r20
 734:	5f 93       	push	r21
 736:	8f 93       	push	r24
 738:	9f 93       	push	r25
 73a:	ef 93       	push	r30
 73c:	ff 93       	push	r31
 73e:	40 91 c0 00 	lds	r20, 0x00C0
 742:	50 91 c6 00 	lds	r21, 0x00C6
 746:	48 71       	andi	r20, 0x18	; 24
 748:	80 91 6e 01 	lds	r24, 0x016E
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	8f 77       	andi	r24, 0x7F	; 127
 752:	99 27       	eor	r25, r25
 754:	20 91 6d 01 	lds	r18, 0x016D
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	28 17       	cp	r18, r24
 75c:	39 07       	cpc	r19, r25
 75e:	39 f0       	breq	.+14     	; 0x76e <__vector_18+0x4a>
 760:	80 93 6e 01 	sts	0x016E, r24
 764:	fc 01       	movw	r30, r24
 766:	ef 58       	subi	r30, 0x8F	; 143
 768:	fe 4f       	sbci	r31, 0xFE	; 254
 76a:	50 83       	st	Z, r21
 76c:	01 c0       	rjmp	.+2      	; 0x770 <__vector_18+0x4c>
 76e:	42 e0       	ldi	r20, 0x02	; 2
 770:	40 93 6c 01 	sts	0x016C, r20
 774:	ff 91       	pop	r31
 776:	ef 91       	pop	r30
 778:	9f 91       	pop	r25
 77a:	8f 91       	pop	r24
 77c:	5f 91       	pop	r21
 77e:	4f 91       	pop	r20
 780:	3f 91       	pop	r19
 782:	2f 91       	pop	r18
 784:	0f 90       	pop	r0
 786:	0f be       	out	0x3f, r0	; 63
 788:	0f 90       	pop	r0
 78a:	1f 90       	pop	r1
 78c:	18 95       	reti

0000078e <__vector_19>:
 78e:	1f 92       	push	r1
 790:	0f 92       	push	r0
 792:	0f b6       	in	r0, 0x3f	; 63
 794:	0f 92       	push	r0
 796:	11 24       	eor	r1, r1
 798:	8f 93       	push	r24
 79a:	9f 93       	push	r25
 79c:	ef 93       	push	r30
 79e:	ff 93       	push	r31
 7a0:	90 91 70 01 	lds	r25, 0x0170
 7a4:	80 91 6f 01 	lds	r24, 0x016F
 7a8:	98 17       	cp	r25, r24
 7aa:	79 f0       	breq	.+30     	; 0x7ca <__vector_19+0x3c>
 7ac:	80 91 6f 01 	lds	r24, 0x016F
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	01 96       	adiw	r24, 0x01	; 1
 7b4:	8f 77       	andi	r24, 0x7F	; 127
 7b6:	99 27       	eor	r25, r25
 7b8:	80 93 6f 01 	sts	0x016F, r24
 7bc:	fc 01       	movw	r30, r24
 7be:	ef 50       	subi	r30, 0x0F	; 15
 7c0:	fe 4f       	sbci	r31, 0xFE	; 254
 7c2:	80 81       	ld	r24, Z
 7c4:	80 93 c6 00 	sts	0x00C6, r24
 7c8:	05 c0       	rjmp	.+10     	; 0x7d4 <__vector_19+0x46>
 7ca:	e1 ec       	ldi	r30, 0xC1	; 193
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	80 81       	ld	r24, Z
 7d0:	8f 7d       	andi	r24, 0xDF	; 223
 7d2:	80 83       	st	Z, r24
 7d4:	ff 91       	pop	r31
 7d6:	ef 91       	pop	r30
 7d8:	9f 91       	pop	r25
 7da:	8f 91       	pop	r24
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	0f 90       	pop	r0
 7e2:	1f 90       	pop	r1
 7e4:	18 95       	reti

000007e6 <uart0_init>:
 7e6:	10 92 70 01 	sts	0x0170, r1
 7ea:	10 92 6f 01 	sts	0x016F, r1
 7ee:	10 92 6e 01 	sts	0x016E, r1
 7f2:	10 92 6d 01 	sts	0x016D, r1
 7f6:	99 23       	and	r25, r25
 7f8:	24 f4       	brge	.+8      	; 0x802 <uart0_init+0x1c>
 7fa:	22 e0       	ldi	r18, 0x02	; 2
 7fc:	20 93 c0 00 	sts	0x00C0, r18
 800:	9f 77       	andi	r25, 0x7F	; 127
 802:	90 93 c5 00 	sts	0x00C5, r25
 806:	80 93 c4 00 	sts	0x00C4, r24
 80a:	88 e9       	ldi	r24, 0x98	; 152
 80c:	80 93 c1 00 	sts	0x00C1, r24
 810:	86 e0       	ldi	r24, 0x06	; 6
 812:	80 93 c2 00 	sts	0x00C2, r24
 816:	08 95       	ret

00000818 <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
 818:	60 91 70 01 	lds	r22, 0x0170
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	6f 5f       	subi	r22, 0xFF	; 255
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	6f 77       	andi	r22, 0x7F	; 127
 824:	77 27       	eor	r23, r23
 826:	ab 01       	movw	r20, r22

	while ( tmphead == UART_TxTail ) {
 828:	20 91 6f 01 	lds	r18, 0x016F
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	24 17       	cp	r18, r20
 830:	35 07       	cpc	r19, r21
 832:	d1 f3       	breq	.-12     	; 0x828 <uart0_putc+0x10>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
 834:	fb 01       	movw	r30, r22
 836:	ef 50       	subi	r30, 0x0F	; 15
 838:	fe 4f       	sbci	r31, 0xFE	; 254
 83a:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
 83c:	60 93 70 01 	sts	0x0170, r22

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
 840:	e1 ec       	ldi	r30, 0xC1	; 193
 842:	f0 e0       	ldi	r31, 0x00	; 0
 844:	80 81       	ld	r24, Z
 846:	80 62       	ori	r24, 0x20	; 32
 848:	80 83       	st	Z, r24
 84a:	08 95       	ret

0000084c <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
 84c:	cf 93       	push	r28
 84e:	df 93       	push	r29
 850:	ec 01       	movw	r28, r24
	while (*s) {
 852:	88 81       	ld	r24, Y
 854:	88 23       	and	r24, r24
 856:	29 f0       	breq	.+10     	; 0x862 <uart0_puts+0x16>
Function: uart0_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
 858:	21 96       	adiw	r28, 0x01	; 1
{
	while (*s) {
		uart0_putc(*s++);
 85a:	de df       	rcall	.-68     	; 0x818 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
 85c:	89 91       	ld	r24, Y+
 85e:	81 11       	cpse	r24, r1
 860:	fc cf       	rjmp	.-8      	; 0x85a <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
 862:	df 91       	pop	r29
 864:	cf 91       	pop	r28
 866:	08 95       	ret

00000868 <memcpy>:
 868:	fb 01       	movw	r30, r22
 86a:	dc 01       	movw	r26, r24
 86c:	02 c0       	rjmp	.+4      	; 0x872 <memcpy+0xa>
 86e:	01 90       	ld	r0, Z+
 870:	0d 92       	st	X+, r0
 872:	41 50       	subi	r20, 0x01	; 1
 874:	50 40       	sbci	r21, 0x00	; 0
 876:	d8 f7       	brcc	.-10     	; 0x86e <memcpy+0x6>
 878:	08 95       	ret

0000087a <_exit>:
 87a:	f8 94       	cli

0000087c <__stop_program>:
 87c:	ff cf       	rjmp	.-2      	; 0x87c <__stop_program>
